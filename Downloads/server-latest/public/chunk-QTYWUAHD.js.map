{"version":3,"sources":["src/app/guards/auth.guard.ts","src/app/guards/businessAdmin.guard.ts","src/app/guards/admin-auth.guard.ts","src/app/guards/rotor.guard.ts","src/app/guards/refLab.guard.ts","src/app/guards/consultant.guard.ts","src/app/guards/isReflabActive.guard.ts","src/app/guards/maintenanceMode.guard.ts","src/app/modules/refrence-lab/refrence-lab.component.ts","src/app/modules/refrence-lab/refrence-lab.component.html","src/app/modules/refrence-lab/orders/note.content.component.ts","src/app/modules/refrence-lab/orders/side-filter/side-filter.component.ts","src/app/modules/refrence-lab/orders/side-filter/side-filter.component.html","src/app/modules/refrence-lab/orders/orders.component.ts","src/app/modules/refrence-lab/orders/orders.component.html","src/app/modules/refrence-lab/orders/panel-test-list-modal/panel-test-list-modal.component.ts","src/app/modules/refrence-lab/orders/panel-test-list-modal/panel-test-list-modal.component.html","src/app/modules/refrence-lab/orders/create-orders/create-orders.component.ts","src/app/modules/refrence-lab/orders/create-orders/create-orders.component.html","src/app/modules/refrence-lab/orders/add-orders/add-orders.component.ts","src/app/modules/refrence-lab/orders/add-orders/add-orders.component.html","src/app/modules/refrence-lab/routing.module.ts","node_modules/@ngx-maintenance/ng2-search-filter/fesm2022/ngx-maintenance-ng2-search-filter.mjs","src/app/modules/refrence-lab/dos/dos.component.ts","src/app/modules/refrence-lab/dos/dos.component.html","src/app/modules/refrence-lab/refrence-lab.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n// import { Observable } from 'rxjs';\r\n// import { ConsultantGuard } from './consultant.guard';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard  {\r\n\r\n  private isLoggedIn;\r\n  private BackOfficeFlag;\r\n  private isConsultantUser;\r\n  private navUrl: string;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  canActivate() {\r\n    if (localStorage.authDetails != undefined) {\r\n      this.isLoggedIn = JSON.parse(localStorage.authDetails).access_token;\r\n      this.BackOfficeFlag = JSON.parse(localStorage.authDetails).BackOfficeFlag;\r\n      this.isConsultantUser = JSON.parse(localStorage.authDetails).IsConsultantUser;\r\n      this.navUrl = this.BackOfficeFlag == true ? '/internal' : '/login';\r\n    }\r\n    if (this.isLoggedIn) {\r\n      return true;\r\n    }\r\n    this.router.navigateByUrl(this.navUrl)\r\n    return false;\r\n  }\r\n  checkAuthentication() {\r\n    if (this.isLoggedIn) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BusinessAdminGuard  {\r\n\r\n  private isLoggedIn;\r\n  private BackOfficeFlag;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  canActivate() {\r\n    if (localStorage.authDetails != undefined) {\r\n      this.isLoggedIn = JSON.parse(localStorage.authDetails).access_token;\r\n      this.BackOfficeFlag = JSON.parse(localStorage.authDetails).BackOfficeFlag;\r\n    }\r\n    if (this.BackOfficeFlag == false && this.isLoggedIn) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminAuthGuard  {\r\n\r\n  private isLoggedIn;\r\n  private BackOfficeFlag;\r\n  \r\n  constructor(private router: Router) { }\r\n  \r\n  canActivate() {\r\n    if (localStorage.authDetails != undefined) {\r\n      this.isLoggedIn = JSON.parse(localStorage.authDetails).access_token;\r\n      this.BackOfficeFlag = JSON.parse(localStorage.authDetails).BackOfficeFlag;\r\n    }\r\n    if (this.BackOfficeFlag && this.isLoggedIn) {\r\n      return true;\r\n    }\r\n    this.router.navigate(['/internal']);\r\n    return false;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\nimport { ConfirmationDialogService } from '../components/confirmation-dialog/confirmation-dialog.service';\r\nimport { LabelService } from '../services/label.service';\r\nimport { EnmCountry } from '../shared/constants/enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuardRotor  {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    public userService: UserService,\r\n    public confirmationDialogService: ConfirmationDialogService,\r\n    public labelService: LabelService) {\r\n  }\r\n\r\n  canActivate() {\r\n    //  40 for US && 31 for Canada\r\n    if (this.labelService.userCountryId == EnmCountry.UnitedStates || this.labelService.userCountryId == EnmCountry.Canada) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { ConfirmationDialogService } from '../components/confirmation-dialog/confirmation-dialog.service';\r\nimport { DataService, LabelService } from '../services';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RefLabGuard  {\r\n\r\n    public IsLinkedRefLabClinic = false;\r\n    public isConsultant = false;\r\n    public isLoggedIn = null;\r\n\r\n    constructor(private router: Router, public dataService: DataService, public confirmationDialogService: ConfirmationDialogService, public labelService: LabelService) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot, showPop = true) {\r\n        this.isLoggedIn = JSON.parse(localStorage?.authDetails)?.access_token;\r\n        if (this.dataService.appData.authDetails['IsLinkedRefLabClinic'] || this.dataService.appData.authDetails['IsConsultantUser']) {\r\n            this.IsLinkedRefLabClinic = this.dataService.appData.authDetails['IsLinkedRefLabClinic'];\r\n            this.isConsultant = this.dataService.appData.authDetails['IsConsultantUser'];\r\n            // this.isLoggedIn = JSON.parse(localStorage?.authDetails)?.access_token;\r\n        }\r\n        \r\n        if (this.isLoggedIn) {\r\n            if (this.IsLinkedRefLabClinic || this.isConsultant) {\r\n                return true;\r\n            } else {\r\n                // 'This service is not available for your clinic. Please contact your local representative for more information'\r\n                const msg = this.labelService.dsSideMenuScreen.ConsultationRestrictionPopupMsg;\r\n                if (showPop) {\r\n                    this.confirmationDialogService.dismiss();\r\n                    this.confirmationDialogService.confirm(\"Alert\", msg, 'Ok', \"Cancel\", \"sm\", true, false);\r\n                }\r\n            }\r\n        } else {\r\n            this.router.navigateByUrl('/login')\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConsultantGuard  {\r\n\r\n  private isLoggedIn;\r\n  private isConsultantUser;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  canActivate() {\r\n    if (localStorage.authDetails != undefined) {\r\n      this.isLoggedIn = JSON.parse(localStorage.authDetails).access_token;\r\n      this.isConsultantUser = JSON.parse(localStorage.authDetails).IsConsultantUser;\r\n    }\r\n    \r\n    if (this.isLoggedIn && this.isConsultantUser) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmationDialogService } from '../components/confirmation-dialog/confirmation-dialog.service';\r\nimport { DataService, LabelService } from '../services';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IsReflabActive  {\r\n\r\n    private isReflabActive = false;\r\n    \r\n    constructor(private router: Router,\r\n        public dataService: DataService,\r\n        public confirmationDialogService: ConfirmationDialogService,\r\n        public labelService: LabelService) { }\r\n    \r\n        canActivate() {\r\n        if (this.dataService.appData.authDetails['IsReflabActive']) {\r\n            this.isReflabActive = this.dataService.appData.authDetails['IsReflabActive'];\r\n        }\r\n        if (this.isReflabActive) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CommonService, DataService, LabelService } from '../services';\r\nimport { EnmLanguage, EnmCountry } from '../shared/constants/enum';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MaintenanceMode  {\r\n\r\n    public isMaintenanceMode: boolean;\r\n    \r\n    constructor(private router: Router, private commonService: CommonService, public dataService: DataService, public labelService: LabelService) {\r\n        this.commonService.getUserDDLDetails(EnmLanguage.English, EnmCountry.UnitedStates, null).subscribe({next:() => {\r\n            this.dataService.appData.isMaintenanceMode = false;\r\n            this.dataService.data.next(this.dataService.appData);\r\n        }, error:(err) => {\r\n            console.log(JSON.stringify(err));\r\n            this.commonService.showCommonToastrError();\r\n        }});\r\n    }\r\n    \r\n    canActivate() {\r\n        this.isMaintenanceMode = this.dataService.appData.isMaintenanceMode;\r\n\r\n        if (!this.isMaintenanceMode) {\r\n            return true;\r\n        }\r\n        this.router.navigate(['/maintenance']);\r\n    }\r\n\r\n}\r\n","import { Component} from '@angular/core';\r\nimport { DataService } from '../../services';\r\n@Component({\r\n  selector: 'app-refrence-lab',\r\n  templateUrl: './refrence-lab.component.html',\r\n  styleUrls: ['./refrence-lab.component.css']\r\n})\r\nexport class RefrenceLabComponent {\r\n\r\n  public isBackOfficeUser:boolean;\r\n\r\n  constructor(public dataService: DataService) {\r\n    this.isBackOfficeUser = this.dataService.appData.authDetails['BackOfficeFlag']; \r\n   }\r\n\r\n  }\r\n","<div class=\"wrapper\">\r\n  <app-side-menu></app-side-menu>\r\n  <div id=\"content\" class=\"page-wrapper refpart\">\r\n    <div>\r\n      <!-- <div [hidden]=\"isBackOfficeUser=='True'\"  [hidden]=\"isBackOfficeUser== true \">  -->\r\n      <div>\r\n        <app-header></app-header>\r\n      </div>\r\n      <!-- <div [hidden]=\"isBackOfficeUser=='False'\"> -->\r\n      <!-- <div [hidden]=\"isBackOfficeUser== false\">\r\n        <app-back-office-header></app-back-office-header>\r\n      </div> -->\r\n    </div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>","import { Component, Input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'app-note-content',\r\n    template: `\r\n    <div class=\"modal-header\">\r\n      <h4 class=\"modal-title\" style=\"font-weight: bold;\"> \r\n      <!--  {{note.heading}} -->\r\n      Accession Notes\r\n      </h4>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n    <!-- <p> <strong> {{note.title}}: </strong> </p> -->\r\n    <p style=\"border: 1px solid gainsboro; padding: 14px;\">{{note.text}}</p>\r\n    </div>    \r\n    <div style=\"margin-bottom: 20px; text-align: center;\">\r\n      <button mat-raised-button color=\"warn\" style=\"min-width: 100px; background-color:#ff6400\" (click)=\"activeModal.close('Close click')\">{{note.btnText}}</button>\r\n    </div>\r\n    `\r\n})\r\nexport class NoteContentComponent {\r\n    @Input() note;\r\n    constructor(public activeModal: NgbActiveModal) { }\r\n}","import { Component, OnInit, Output, EventEmitter, ElementRef, ViewChild } from '@angular/core';\r\nimport { UntypedFormGroup, UntypedFormBuilder } from '@angular/forms';\r\nimport { LabelService, DataService, RefLabService, CommonService, SidefilterService, HeaderService } from '../../../../services'\r\nimport { SideFilter, OrderParams } from '../../../../models/side-filter';\r\nimport { OrdersScreen } from '../../../../models/label';\r\nimport { MatLegacyInput as MatInput } from '@angular/material/legacy-input';\r\nimport { MatLegacyRadioChange as MatRadioChange } from '@angular/material/legacy-radio';\r\n@Component({\r\n  selector: 'app-side-filter',\r\n  templateUrl: './side-filter.component.html',\r\n  styleUrls: ['./side-filter.component.css']\r\n})\r\nexport class SideFilterComponent implements OnInit {\r\n\r\n  public filterDdn: any[] = [];\r\n  public authDetails: any;\r\n  public filterForm: UntypedFormGroup;\r\n  public orderParams: OrderParams;\r\n  public sideFilter: SideFilter;\r\n  public businessGuid: any;\r\n  public userGuid: any;\r\n  // private selectedFromDate: Date;\r\n  // private selectedToDate: Date;\r\n  @Output() outFilterBy: EventEmitter<SideFilter> = new EventEmitter();\r\n  @Output() outAnlysisSource: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('fromInput', { static: true, read: MatInput }) fromInput: MatInput;\r\n  @ViewChild('toInput', { static: true, read: MatInput }) toInput: MatInput;\r\n  @ViewChild('select', { static: true }) select: any;\r\n  // RELOAD_TOP_SCROLL_POSITION = 1;\r\n  // @ViewChild('doctorSelect',{static:true}) selectElem: MatSelect;\r\n  // @HostListener('document:keydown', ['$event'])\r\n  // handleKeyboardEvent(event: KeyboardEvent) {\r\n  //   console.log(event.key,event);\r\n  //   if(event.key === 'Enter'){\r\n  //     this.apply();\r\n  //   }\r\n  // }\r\n  public label: OrdersScreen;\r\n  public dsAnalysisSta: any[] = [];\r\n  public filterStatus: any[] = [];\r\n  public dsAnalysisStatus: any[] = [];\r\n  public breedList: any[] = [];\r\n  SpeciesList: any;\r\n  DoctorList: any;\r\n  filteredDoctors: any;\r\n  selectedPhy: any;\r\n  selectedPhysician = []\r\n  pageNumber = 1\r\n  public fromDate: any;\r\n  public toDate: any;\r\n  public minDate: any;\r\n  public ClearFiltersec = false;\r\n  public step = 0;\r\n  radioselect: any;\r\n  isBackOfficeUser: any;\r\n\r\n  constructor(\r\n    public labelService: LabelService,\r\n    public dataService: DataService, public headerService: HeaderService,\r\n    public commonService: CommonService,\r\n    public refLabService: RefLabService,\r\n    public sidefilterService: SidefilterService,\r\n    private fb: UntypedFormBuilder) {\r\n    this.authDetails = this.dataService.appData.authDetails;\r\n    this.businessGuid = this.headerService.selectedBusinessGuid;\r\n    this.userGuid = this.headerService.loginUserGuid;\r\n    this.orderParams = new OrderParams();\r\n    this.isBackOfficeUser = this.dataService.appData.authDetails['BackOfficeFlag'];\r\n    this.labelService.getOrdersScreenLabels();\r\n    this.labelService.bindSideFilterLabel();\r\n    this.label = this.labelService.ordersScreen;\r\n\r\n    this.fromDate = new Date(this.commonService.twoYearBeforeFromToday);\r\n    this.toDate = this.commonService.today;\r\n\r\n    this.createForm();\r\n\r\n    this.dataService.page.subscribe(updatedData => {\r\n      if (updatedData && updatedData.orders && updatedData.orders.filterParams) {\r\n        if (updatedData.orders.filterParams.PhysicianName && typeof updatedData.orders.filterParams.PhysicianName == 'string') {\r\n\r\n          updatedData.orders.filterParams.PhysicianName = updatedData.orders.filterParams.PhysicianName.split(',')\r\n          const docs = []\r\n          if (this.filteredDoctors && this.filteredDoctors.length) {\r\n            updatedData.orders.filterParams.PhysicianName.map(y => {\r\n              const doc = this.filteredDoctors.find(x => `${x.FirstName} ${x.LastName}` == y)\r\n              if (doc) {\r\n                docs.push(doc.Id)\r\n              }\r\n            })\r\n            updatedData.orders.filterParams.PhysicianName = docs\r\n          }\r\n        }\r\n        this.filterForm.patchValue(updatedData.orders.filterParams);\r\n\r\n      }\r\n      // this.filterForm.patchValue({\r\n      //   FromDate: this.commonService.getMomentFromDateTime((new Date(updatedData.orders.filterParams.FromDate))), //'' (new Date(updatedData.orders.filterParams.FromDate)),\r\n      //   // ToDate: (new Date(updatedData.orders.filterParams.ToDate))\r\n      // });\r\n    })\r\n  }\r\n\r\n  public onDateSelect(date, from) {\r\n\r\n    if (from == \"fromDate\") {\r\n      // this.fromDate = date;\r\n      //  this.filterForm.addControl('FromDate', this.fb.control('', Validators.required));\r\n      this.filterForm.patchValue({\r\n        FromDate: this.commonService.getMomentFromDateTime(date),\r\n        ToDate: this.commonService.getMomentFromDateTime(this.toDate)\r\n      });\r\n    } else {\r\n      // this.filterForm.addControl('ToDate', this.fb.control('', Validators.required));\r\n      this.filterForm.patchValue({\r\n        ToDate: this.commonService.getMomentToDateTime(date),\r\n        FromDate: this.commonService.getMomentFromDateTime(this.fromDate),\r\n      });\r\n    }\r\n\r\n    // this.dataService.pageState.orders.filterParams['fromDate'] = this.filterForm.value.FromDate;\r\n    this.dataService.pageState.orders.filterParams = this.filterForm.value; //.ToDate;\r\n    this.dataService.page.next(this.dataService.pageState)\r\n  }\r\n  public filterOrders() {\r\n    const filterData = Object.assign({}, this.filterForm.value);\r\n    this.dataService.pageState.orders.selectedRequestingDoctors = this.selectedPhysician;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n    filterData.PageNo = 1\r\n    this.dataService.pageState.orders.filterParams = filterData;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n    this.outFilterBy.emit(filterData);\r\n  }\r\n\r\n  public filterOrdersOnInit() {\r\n    const filterData = Object.assign({}, this.filterForm.value);\r\n    const selectedDr: any = this.selectedPhysician.map(selectedId => {\r\n      const doc = this.filteredDoctors.find(doctor => doctor?.Id === selectedId);\r\n      return doc ? `${doc.FirstName} ${doc.LastName}` : '';\r\n    });\r\n    filterData[\"PhysicianName\"] = selectedDr.length > 0 ? selectedDr.join() : \"\"\r\n    filterData.PageNo = 1\r\n    this.outFilterBy.emit(filterData);\r\n  }\r\n\r\n  public createForm() {\r\n    return this.filterForm = this.fb.group({\r\n      BusinessGuid: [this.businessGuid], // required\r\n      UserGuid: [this.userGuid], // required\r\n      PatientId: [''],\r\n      PatientName: [''],\r\n      OwnerName: [''],\r\n      PhysicianName: [''],\r\n      FromDate: [''],\r\n      ToDate: [''],\r\n      // isFollowedPatient: [false],\r\n      AnalysisStatusId: [null],\r\n      // MenuName: [''],\r\n      // ClassName: [''],\r\n      OrderNumber: [''],\r\n      AccessionNumber: [''],\r\n      SpeciesId: [''],\r\n      Breed: [''],\r\n      IsApplyFilter: [false],\r\n      PageNo: [1],\r\n      PageSize: [60],\r\n      IsBackOfficeUser: [this.isBackOfficeUser]\r\n    })\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.select._handleKeydown = (event: KeyboardEvent) => {\r\n      if (event.key == \" \" || event.code == \"Space\")\r\n        return\r\n      if (!this.select.disabled) {\r\n        this.select.panelOpen\r\n          ? this.select._handleOpenKeydown(event)\r\n          : this.select._handleClosedKeydown(event);\r\n      }\r\n    };\r\n    // this.GetOrderDDLList();\r\n    // this.getPhysicianList(\"\", this.pageNumber, 60, null)\r\n    this.getPhysicianList()\r\n    //this.getBreedList(1212);\r\n    if (this.filterForm.get('FromDate').value && this.filterForm.get('ToDate').value) {\r\n      this.fromDate = new Date(this.filterForm.get('FromDate').value);\r\n      this.toDate = new Date(this.filterForm.get('ToDate').value);\r\n    }\r\n\r\n\r\n    this.commonService.getFilterDDLDetails(1).subscribe(data => {\r\n     const filterDropDowns: any = data.ResponseData;\r\n     this.filterDdn = filterDropDowns.ClassMenuList;\r\n     this.SpeciesList = filterDropDowns.SpeciesList;\r\n    if (filterDropDowns && filterDropDowns.ClassMenuList) {\r\n      this.filterDdn['Class'] = filterDropDowns.ClassMenuList['Class'];\r\n      this.filterDdn['Menu'] = filterDropDowns.ClassMenuList['Menu'];\r\n    }\r\n    // this.dsBreed = filterDropDowns.ClassMenuList;\r\n    this.dsAnalysisStatus = filterDropDowns.AnalysisStatus;\r\n    console.log(this.dsAnalysisStatus, 'zoetis');\r\n    this.dsAnalysisStatus?.forEach(ele => {\r\n      if (ele.Status == \"Completed\")\r\n        // ele.Info = 'All panels/tests within the order are complete and have received full results'; //this.labelService.dsSideFilterScreen.TestFullComplete\r\n        ele.Info = 'Order is finished and results are ready to be reviewed.'\r\n      if (ele.Status == \"Canceled\")\r\n        ele.Info = 'Order has been canceled. For questions, please contact customer support.';  //this.labelService.dsSideFilterScreen.TestAllCanceled\r\n      if (ele.Status == \"Ordered\")\r\n          ele.Info = 'The Order has been electronically submitted to the laboratory.'; // this.labelService.dsSideFilterScreen.OrderPending\r\n      if(ele.Status == \"Received\"){\r\n        ele.Placement = 'after';\r\n        ele.Info = 'Order has been received at the laboratory and is in the testing process.';\r\n      }\r\n      // if (ele.Status == \"Processing\") {\r\n      //   ele.Placement = 'after';\r\n      //   // ele.Info = 'Order has been accessioned and/or specimens for this order have been received at the lab and tests are being run';// this.labelService.dsSideFilterScreen.OrderProcessing\r\n      //   ele.Info = \"Order is being processed at the laboratory and results are not yet available.\"\r\n      // }if(ele.Status == \"At lab\"){\r\n      //   ele.Placement = 'after';\r\n      //   ele.Info = 'Order has been received at the laboratory.';\r\n      // }\r\n    });\r\n\r\n    const status = [];\r\n    status.push(this.dsAnalysisStatus?.find(v => v.Status == 'Ordered'));\r\n    status.push(this.dsAnalysisStatus?.find(v => v.Status == 'Received'));\r\n    status.push(this.dsAnalysisStatus?.find(v => v.Status == 'Completed'));\r\n    status.push(this.dsAnalysisStatus?.find(v => v.Status == 'Canceled'));\r\n    this.dsAnalysisStatus = status;\r\n    this.outAnlysisSource.emit(filterDropDowns.AnalysisSourceList);\r\n    });\r\n    console.log(this.dataService.pageState.orders.selectedRequestingDoctors)\r\n    // if(this.dataService.pageState.orders.selectedRequestingDoctors.length){\r\n    //   this.filterForm.patchValue({PhysicianName:this.dataService.pageState.orders.selectedRequestingDoctors})\r\n    //   this.selectedPhysician=this.dataService.pageState.orders.selectedRequestingDoctors\r\n    // }\r\n    this.filterOrdersOnInit()\r\n    this.radioselect = this.filterForm.controls['AnalysisStatusId'].value;\r\n  }\r\n\r\n  test(data: MatRadioChange) {\r\n    this.radioselect = data.value\r\n    this.filterForm.patchValue({ AnalysisStatusId: data.value })\r\n    console.log(this.filterForm.controls['AnalysisStatusId'].value)\r\n  }\r\n\r\n  @ViewChild('myText', { static: true }) myNameElem: ElementRef;\r\n\r\n  public clearFilter() {\r\n    debugger\r\n    this.myNameElem.nativeElement.value = '';\r\n    // this.getPhysicianList(\"\", this.pageNumber, 60, null)\r\n    this.getPhysicianList()\r\n    this.selectedPhysician = []\r\n    // this.selectedPhy=[];\r\n    // this.orderParams.BusinessId = this.businessId;\r\n    this.orderParams.BusinessGuid = this.businessGuid;\r\n    // 'MenuName':null,'ClassName':null,\r\n    this.filterForm.patchValue({ 'PatientId': null, 'PatientName': null, 'OwnerName': null, 'PhysicianName': null, 'AnalysisStatusId': null, 'Breed': null, 'SpeciesId': \"\", 'FromDate': null, 'ToDate': null, 'OrderNumber': null, 'AccessionNumber': null, IsApplyFilter: false });\r\n    // this.filterForm.controls['ToDate'].setValue('abcd');\r\n    this.fromInput.value = '';\r\n    this.toInput.value = '';\r\n    this.fromDate = new Date(this.commonService.twoYearBeforeFromToday);\r\n    this.toDate = new Date(this.commonService.today);\r\n    this.dataService.pageState.orders.filterParams = null;\r\n    this.dataService.pageState.orders.resultsList = [];\r\n    this.dataService.pageState.orders.selectedRow = null;\r\n    this.dataService.pageState.orders.sortState = { active: null, direction: null }\r\n    this.dataService.page.next(this.dataService.pageState);\r\n    this.radioselect = null;\r\n\r\n    this.filterOrders();\r\n  }\r\n\r\n  public GetOrderDDLList() {\r\n    const filterDropDowns: any = this.dataService.appData.filterDropDownList;\r\n    this.SpeciesList = filterDropDowns.enSpeciesList;\r\n  }\r\n  // public getPhysicianList(SearchText, PageNo, PageSize, AnalysisSourceId) {\r\n  public getPhysicianList() {\r\n    // const dd = {\r\n    //   \"BusinessGuid\": localStorage.businessGuid,\r\n    //   \"AnalysisSourceId\": \"2\",\r\n    //   \"PageSize\": PageSize,\r\n    //   \"PageNo\": PageNo,\r\n    //   \"SearchText\": SearchText\r\n    // }\r\n    this.commonService.GetProviderList(localStorage.businessGuid).subscribe(data => {\r\n      // console.log(data);\r\n      // if(PageNo=1){\r\n      // this.DoctorList = data.ResponseData.Provider;\r\n      // this.filteredDoctors = data.ResponseData.Provider\r\n      const uniquePhysicians = [];\r\n      const seenNames = new Set();\r\n       data.ResponseData.Provider.forEach(ele =>{\r\n        if(ele['FirstName'] == ele['LastName']){\r\n          ele['LastName'] = \"\";\r\n          ele['PhysicianIdName'] =ele['FirstName']\r\n        }\r\n        const cleanedName = ele.ProviderIdName?.replace(/\\s*\\([^)]*\\)$/, \"\").trim().toLowerCase();\r\n        if (!seenNames.has(cleanedName)) {\r\n          seenNames.add(cleanedName);\r\n          uniquePhysicians.push({\r\n              ...ele,\r\n              ProviderIdName: cleanedName\r\n          });\r\n      };\r\n      });\r\n       this.DoctorList = uniquePhysicians;\r\n      this.filteredDoctors = uniquePhysicians;\r\n      if (this.dataService.pageState.orders.selectedRequestingDoctors.length) {\r\n        this.filterForm.patchValue({ PhysicianName: this.dataService.pageState.orders.selectedRequestingDoctors })\r\n        this.selectedPhysician = this.dataService.pageState.orders.selectedRequestingDoctors\r\n      }\r\n\r\n      // }\r\n      this.pageNumber += 1\r\n    }, (err: any) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n  public onSpeciesChange(id) {\r\n    this.getBreedList(id)\r\n  }\r\n\r\n  public getBreedList(speciesId) {\r\n    const langId = this.dataService.appData.authDetails['LanguageId'];\r\n    this.refLabService.getBreedListBySpeciesId(speciesId, langId).subscribe(res => {\r\n      this.filterForm.patchValue({ Breed: '' })\r\n      this.breedList = res.ResponseData;\r\n    }, err => {\r\n      console.log(JSON.stringify(err));\r\n      this.commonService.showCommonToastrError();\r\n    })\r\n  }\r\n\r\n  public setStep(index: number) {\r\n    this.step = this.step == index ? 0 : index;\r\n  }\r\n\r\n  public apply() {\r\n    this.filterForm.patchValue({\r\n      ToDate: this.commonService.getMomentToDateTime(this.toDate),\r\n      FromDate: this.commonService.getMomentFromDateTime(this.fromDate),\r\n    });\r\n    this.filterForm.patchValue({ IsApplyFilter: true });\r\n    this.filterOrders();\r\n    this.closeFilter();\r\n  }\r\n\r\n  closeFilter() {\r\n    //this.closeFilterPanel.emit(true);\r\n    this.commonService.closeFilterForPatient.next(true);\r\n  }\r\n\r\n\r\n  triggerEvent(e) { // when dropdown open and close \r\n    console.log(e);\r\n\r\n    if (e == false) {\r\n      this.filteredDoctors = this.DoctorList\r\n      this.myNameElem.nativeElement.value = '';\r\n    }\r\n    if (e == true) {\r\n      this.filterForm.patchValue({ PhysicianName: this.selectedPhysician })\r\n    }\r\n  }\r\n  selectionChangee($event) { // on every click on mat-option\r\n    if ($event.isUserInput) {\r\n      console.log($event.source.value);\r\n      if (this.selectedPhysician.indexOf($event.source.value) == -1) {\r\n        this.selectedPhysician.push($event.source.value)\r\n      } else {\r\n        this.selectedPhysician.splice(this.selectedPhysician.indexOf($event.source.value), 1)\r\n      }\r\n      console.log(\"Selected Physician===>\", this.selectedPhysician);\r\n    }\r\n  }\r\n\r\n  onRequestingDrChange(e) { // on select unselect checkbox\r\n    console.log(e);\r\n  }\r\n\r\n  _filter(list, searchText) {\r\n    const filterValue = searchText.toLowerCase();\r\n    return list.filter(option => {\r\n      if (option.ProviderIdName.toLowerCase().startsWith(filterValue) || option.FirstName.toLowerCase().startsWith(filterValue) || option.LastName.toLowerCase().startsWith(filterValue)) {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    });\r\n  }\r\n\r\n  setValueToMultiPhy() {\r\n    setTimeout(() => {\r\n      this.selectedPhy = this.selectedPhysician\r\n    }, 200);\r\n  }\r\n  applyFilter(e) {    // on input search\r\n    return new Promise((resolve: any) => {\r\n      if (e.target.value.length == 0) {\r\n        this.filteredDoctors = this.DoctorList\r\n        this.setValueToMultiPhy()\r\n      }\r\n      else {\r\n        this.filteredDoctors = this._filter(this.DoctorList, e.target.value)\r\n        this.setValueToMultiPhy()\r\n      }\r\n      resolve();\r\n    });\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"filterForm\">\r\n  <div class=\"resp clse\">\r\n    <p>X <span (click)=\"closeFilter()\">{{ labelService.dsSideFilterScreen.Cancel }}</span></p>\r\n  </div>\r\n  <div class=\"resp respfilter\">\r\n    <div class=\"d-flex justify-content-between mt-4\">\r\n      <span class=\"filter-head\">{{labelService.dsSideFilterScreen.Filters}}</span>\r\n      <a class=\"clrall\" (click)=\"clearFilter()\">{{labelService.dsSideFilterScreen.ClearAll}}</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"pl-4 pr-4\">\r\n    <div class=\"desk d-flex justify-content-between mt-4 mob-filter\">\r\n      <span class=\"filter-head\"> {{label.Filters}} </span>\r\n      <a class=\"clrall\" (click)=\"clearFilter()\">\r\n        {{label.ClearAll}}\r\n        <!-- {{label.ClearAll}} -->\r\n      </a>\r\n    </div>\r\n    <!-- <div class=\"d-flex flex-column mt-3\">\r\n      <div class=\"d-flex justify-content-between mb-1 align-items-center\">\r\n        <span>{{ label.FollowedPatientsOnly }}</span>\r\n        <mat-slide-toggle class=\"slide-toggle\" color=\"primary\" formControlName=\"isFollowedPatient\">\r\n        </mat-slide-toggle>\r\n      </div>\r\n    </div> -->\r\n    <hr>\r\n    <div class=\"d-flex flex-column\">\r\n      <div class=\"r-head mt-1  heading\"> Patient </div>\r\n      <div class=\"mt-1\">\r\n        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n          <input type=\"text\" matInput formControlName=\"PatientId\" placeholder=\"Patient ID\" maxlength=\"20\"\r\n            (keyup.enter)=\"apply()\" autocomplete=\"off\" />\r\n        </mat-form-field>\r\n        <!-- [placeholder]=\"label.PatientID\" -->\r\n      </div>\r\n      <div>\r\n        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n          <input type=\"text\" matInput formControlName=\"PatientName\" placeholder=\"Patient Name\" maxlength=\"20\"\r\n            (keyup.enter)=\"apply()\" autocomplete=\"off\" />\r\n        </mat-form-field>\r\n        <!-- [placeholder]=\"label.PatientName\" -->\r\n      </div>\r\n      <div>\r\n        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n          <input type=\"text\" matInput formControlName=\"OwnerName\" placeholder=\"Owner Name\" maxlength=\"20\"\r\n            (keyup.enter)=\"apply()\" autocomplete=\"off\" />\r\n        </mat-form-field>\r\n        <!-- [placeholder]=\"label.OwnerName\" -->\r\n      </div>\r\n\r\n\r\n      <section>\r\n        <div class=\"r-head mt-1  heading\"> Species </div>\r\n        <!-- <div style=\"margin: 14px 5px;\"> -->\r\n        <!-- <span>Species </span> -->\r\n        <!-- <a style=\"float: right;\" (click)=\"setStep(1)\">\r\n            <span class=\"closeall\" [ngClass]=\"{'toggle-accordion-icon' : step === 1}\">\r\n              <img src=\"../../../assets/img/updropdwn.png\" alt=\"\">\r\n            </span>\r\n          </a> -->\r\n        <!-- </div> -->\r\n\r\n        <!-- <div class=\"mt-2\">\r\n        <mat-form-field appearance=\"outline\" floatLabel=\"always\" *ngIf=\"DoctorList\">\r\n          <mat-select formControlName=\"PhysicianName\" placeholder=\"Requesting Doctor\">\r\n            <mat-option *ngFor=\"let dr of DoctorList\" [value]=\"dr.FirstName+' '+dr.LastName\">\r\n              {{ dr.ProviderIdName }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div> -->\r\n        <div class=\"d-flex flex-column mt-3\">\r\n          <!-- <div class=\"d-flex justify-content-between mb-1 align-items-center\">\r\n          <span>{{ label.FollowedPatientsOnly }}</span>\r\n          <mat-slide-toggle class=\"slide-toggle\" color=\"primary\" formControlName=\"isFollowedPatient\">\r\n          </mat-slide-toggle>\r\n        </div> -->\r\n\r\n          <!-- <div [hidden]=\"!(step==1)\"> -->\r\n          <div>\r\n            <!-- <div> -->\r\n            <!-- <div class=\"r-head mt-1 headingone\">{{label.AnalysisType}}</div> -->\r\n            <!-- <label>{{label.Species}} <sup>*</sup></label> -->\r\n            <!-- <div class=\"\"> -->\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n              <mat-select formControlName=\"SpeciesId\" placeholder=\"Species\"\r\n                (selectionChange)=\"onSpeciesChange($event.value)\" placeholder=\"Species\">\r\n                <!-- [placeholder]=\"label.SelectSpecies\" -->\r\n                <!-- <mat-option value=\"\"><span>Species</span></mat-option> -->\r\n                <mat-option *ngFor=\"let species of SpeciesList\" [value]=\"species.Code\">\r\n                  {{species.Code}}\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n            <!-- </div>\r\n            </div> -->\r\n\r\n            <!-- <div> -->\r\n            <!-- <label>{{label.Breed}}<sup>*</sup> </label> -->\r\n            <!-- <div class=\" d-flex\">\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                  <ng-container *ngIf=\"breedList.length>0\">\r\n                    <mat-select formControlName=\"Breed\" placeholder=\"Select Breed\">\r\n                      <mat-option value=\"\"><span>Select Breed</span></mat-option>\r\n                      <mat-option *ngFor=\"let breed of breedList\" [value]=\"breed.Id\">\r\n                        {{breed.Name}}\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </ng-container>\r\n\r\n                  <ng-container *ngIf=\"breedList.length==0\">\r\n                    <input type=\"text\" matInput autocomplete=\"off\" placeholder=\"Enter Breed\" formControlName=\"Breed\"\r\n                      maxlength=\"50\" (keyup.enter)=\"apply()\" />\r\n                  </ng-container>\r\n                </mat-form-field>\r\n              </div> -->\r\n            <!-- </div> -->\r\n\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div class=\"r-head mt-1  heading\"> Requesting Doctor </div>\r\n\r\n          <div class=\"mt-2\">\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\" [hidden]=\"!filteredDoctors\">\r\n              <mat-select placeholder=\"Search Requesting Doctor\" formControlName=\"PhysicianName\"\r\n                (selectionChange)=\"onRequestingDrChange($event)\" #select=\"matSelect\"\r\n                (openedChange)=\"triggerEvent($event)\" multiple>\r\n                <input #myText type=\"text\" placeholder=\"Search Requesting Doctor\" matInput style=\"margin:12px;\"\r\n                  (keyup)=\"applyFilter($event)\">\r\n                <mat-option (onSelectionChange)=\"selectionChangee($event)\" *ngFor=\"let dr of filteredDoctors\"\r\n                  [value]=\"dr?.Id\">\r\n                  <!-- {{dr.ProviderIdName | titlecase}} -->\r\n                  {{dr?.FirstName}} {{dr?.LastName}}\r\n                </mat-option>\r\n                <p style=\"text-align: center;\" [hidden]=\"filteredDoctors\">\r\n                  No Records Found\r\n                </p>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <hr />\r\n      </section>\r\n\r\n\r\n\r\n\r\n      <section>\r\n        <div style=\"margin: 14px 5px;\">\r\n          <span class=\"heading\">Order </span>\r\n          <a style=\"float: right;\" (click)=\"setStep(2)\">\r\n            <span class=\"closeall\" [ngClass]=\"{'toggle-accordion-icon' : step === 2}\">\r\n              <img src=\"../../../assets/img/updropdwn.png\" alt=\"updropdwn\" class=\"updropdwn\">\r\n            </span>\r\n          </a>\r\n        </div>\r\n\r\n        <div [hidden]=\"!(step===2)\">\r\n          <div class=\"mt-1\">\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n              <input type=\"text\" matInput formControlName=\"OrderNumber\" placeholder=\"Order/Accession ID\" maxlength=\"30\"\r\n                (keyup.enter)=\"apply()\" autocomplete=\"off\" />\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <!-- <div class=\"mt-1\">\r\n          <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n            <input type=\"text\" matInput formControlName=\"AccessionNumber\"\r\n              placeholder=\"Accession ID\" maxlength=\"30\" />\r\n          </mat-form-field>\r\n        </div> -->\r\n          <!-- \r\n          <div class=\"mt-2\">\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\" [hidden]=\"!filteredDoctors\">\r\n              <mat-select [placeholder]=\"labelService.dsSideFilterScreen.SearchRequestingDoctor\" [(ngModel)]=\"selectedPhy\" formControlName=\"PhysicianName\"\r\n                (selectionChange)=\"onRequestingDrChange($event)\" #select=\"matSelect\" (openedChange)=\"triggerEvent($event)\" multiple>\r\n                <input #myText type=\"text\" placeholder=\"{{labelService.dsSideFilterScreen.SearchRequestingDoctor}}\" matInput style=\"margin:12px;\" (keyup)=\"applyFilter($event)\">\r\n                <mat-option (onSelectionChange)=\"selectionChangee($event)\" *ngFor=\"let dr of filteredDoctors\" [value]=\"dr.FirstName+' '+dr.LastName\">\r\n                  {{dr.PhysicianIdName}}\r\n                </mat-option>\r\n                <p style=\"text-align: center;\" [hidden]=\"filteredDoctors\">\r\n                  {{labelService.dsSideFilterScreen.NoRecordsFound}}\r\n                </p>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div> -->\r\n\r\n          <div class=\"d-flex flex-column range\">\r\n            <div class=\"r-head mt-3 heading\">{{ label.OrderCreationDate }}</div>\r\n            <div>\r\n              <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                <!-- (dateChange)=\"onDateSelect($event.value)\" -->\r\n                <!-- formControlName=\"FromDate\" (dateChange)=\"onDateSelect('fromDate')\" -->\r\n                <input #fromInput matInput [(ngModel)]=\"fromDate\" ngDefaultControl placeholder=\"From\" [matDatepicker]=\"pickerFrom\"\r\n                  (focus)=\"pickerFrom.open()\" (dateChange)=\"onDateSelect($event.target.value,'fromDate')\"\r\n                  [max]=\"toDate !== null ? toDate : commonService.getCurrentDate()\" readonly\r\n                  [ngModelOptions]=\"{standalone: true}\">\r\n                <!-- [placeholder]=\"labelService.dsSideFilterScreen.From\" -->\r\n                <mat-datepicker-toggle matPrefix [for]=\"pickerFrom\"></mat-datepicker-toggle>\r\n                <mat-datepicker #pickerFrom></mat-datepicker>\r\n              </mat-form-field>\r\n            </div>\r\n            <div>\r\n              <!-- formControlName=\"ToDate\" -->\r\n              <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                <input #toInput matInput placeholder=\"To\" [matDatepicker]=\"pickerTo\" (focus)=\"pickerTo.open()\"\r\n                  [(ngModel)]=\"toDate\" ngDefaultControl [min]=\"fromDate\" [max]=\"commonService.getCurrentDate()\"\r\n                  (dateChange)=\"onDateSelect($event.target.value,'ss')\" readonly [ngModelOptions]=\"{standalone: true}\">\r\n                <!-- [placeholder]=\"labelService.dsSideFilterScreen.To\" -->\r\n                <mat-datepicker-toggle matPrefix [for]=\"pickerTo\"></mat-datepicker-toggle>\r\n                <mat-datepicker #pickerTo></mat-datepicker>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n      </section>\r\n    </div>\r\n\r\n    <div class=\"d-flex flex-column mt-3\">\r\n      <div class=\"r-head mt-1 heading\">\r\n        {{ label?.Status }}\r\n      </div>\r\n      <div class=\"d-flex flex-column\">\r\n        <mat-radio-group class=\"d-flex flex-column\" [(ngModel)]=\"radioselect\" ngDefaultControl [ngModelOptions]=\"{standalone: true}\">\r\n          <div class=\"d-flex justify-content-between mb-1\">\r\n            <mat-radio-button class=\"example-margin\" [value]=\"null\" (change)=\"test($event)\">\r\n              {{ label.All }}\r\n            </mat-radio-button>\r\n          </div>\r\n          <!-- filterDdn['OrderStatusList'] -->\r\n          <div class=\"d-flex justify-content-between mb-1\" *ngFor=\"let status of dsAnalysisStatus\">\r\n            <mat-radio-button class=\"example-margin\" [value]=\"status?.Id\" (change)=\"test($event)\">\r\n              {{ status?.Status }}\r\n              <span class=\"status-info-icon\" [matTooltip]=\"status?.Info\"\r\n                [matTooltipPosition]=\"status?.Placement || 'below'\" matTooltipClass=\"below\"><img\r\n                  src=\"./assets/img/info.png\" alt=\"\"></span>\r\n            </mat-radio-button>\r\n            <!-- [ngStyle]=\"{'border-left':'5px solid '+status.ColorCode}\" -->\r\n            <!-- [ngStyle]=\"{'width':componentWidth, 'height':componentHeight +status.ColorCode}\" -->\r\n            <span [ngClass]=\"{completed: status?.Id === 1 ,cancelled: status?.Id === 2,ordered: status?.Id === 3,\r\n              received: status?.Id === 4}\"></span>\r\n          </div>\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- <div class=\"mt-2\">\r\n      <div class=\"r-head mt-1 headingone\">{{label.AnalysisType}}</div>\r\n      <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n        <mat-select formControlName=\"MenuName\" [placeholder]=\"label.Menu\">\r\n          <ng-container *ngIf=\"filterDdn['Menu']\">\r\n            <mat-option value=\"\"><span>Menu</span></mat-option>\r\n            <mat-option *ngFor=\"let m of filterDdn.Menu\" [value]=\"m.Id\">\r\n              <span class=\"boll\" [ngStyle]=\"{'background': m.ColorCode}\"></span>\r\n              <span> {{ m.Name }} </span>\r\n            </mat-option>\r\n          </ng-container>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div> -->\r\n    <!-- <div class=\"mt-2\">\r\n      <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n        <mat-select formControlName=\"ClassName\" [placeholder]=\"label.Class\">\r\n          <ng-container *ngIf=\"filterDdn['Class']\">\r\n            <mat-option value=\"\"><span>Class</span></mat-option>\r\n            <mat-option *ngFor=\"let c of filterDdn.Class\" [value]=\"c.Id\">\r\n              {{ c.Name }}\r\n            </mat-option>\r\n          </ng-container>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div> -->\r\n    <!-- <div>\r\n      <mat-form-field appearance=\"outline\" floatLabel=\"always\" *ngIf=\"filterDdn['SpeciesList']\">\r\n        <mat-select formControlName=\"SpeciesName\" [placeholder]=\"label.Species\" (selectionChange)=\"onSpeciesChange($event.value)\">\r\n          <mat-option value=\"\"><span>Species</span></mat-option>\r\n          <mat-option *ngFor=\"let species of filterDdn.SpeciesList\" [value]=\"species.Id\">\r\n            {{ species.Name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div> -->\r\n    <!-- <div>\r\n      <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n        <input type=\"text\" matInput formControlName=\"BreedName\" [placeholder]=\"label.Breed\" maxlength=\"20\" />\r\n      </mat-form-field>\r\n    </div> -->\r\n    <div class=\"mt-5 mb-3 d-flex justify-content-center\">\r\n      <button mat-raised-button color=\"warn\" (click)=\"apply()\"> {{ label.Apply }} </button>\r\n    </div>\r\n  </div>\r\n</form>","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { RefLabService, DataService, LabelService, SidemenuService, SidefilterService, PatientService, HeaderService, CommonService, FuseService } from '../../../services'\r\nimport { SideFilter, OrderParams } from '../../../models/side-filter';\r\nimport { EnmAnalysisSource, EnmModule, EnmLanguage } from '../../../shared/constants/enum';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NoteContentComponent } from './note.content.component'\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { AnaysisResultsScreen, OrdersScreen } from '../../../models/label';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { EncrDecrService } from '../../../services/encr-decr.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertMessageComponent } from '../../../components/alert-message/alert-message.component';\r\nimport { ConfirmationDialogService } from '../../../components/confirmation-dialog/confirmation-dialog.service';\r\nimport { constant } from '../../../models/label';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { MatSort, Sort, MatSortable } from '@angular/material/sort';\r\nimport { MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';\r\nimport { SideFilterComponent } from './side-filter/side-filter.component';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Title } from '@angular/platform-browser';\r\n// declare const gtag: Function;\r\ndeclare const gtag: (...arg) => void;\r\n@Component({\r\n  selector: 'app-orders',\r\n  templateUrl: './orders.component.html',\r\n  styleUrls: ['./orders.component.css'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class OrdersComponent implements OnInit, AfterViewInit {\r\n\r\n  public isBackOfficeUser: boolean;\r\n  public isReflabActive: boolean;\r\n  allRowsExpanded = false;\r\n  expandedElement: any;\r\n  isAdvSearched = false;\r\n  isNotificationSelected = false;\r\n  recordCount = 0;\r\n  filter: SideFilter;\r\n  public orderParams: OrderParams;\r\n  public originData: any[] = [];\r\n  public columnsToDisplay = ['DateReceived', 'LastUpdatedDate', 'OrderNumber', 'AccessionNumber', 'PhysicianName', 'PatientId', 'PatientName', 'OwnerName', 'SpeciesName', ' '];\r\n  public dataSource = new MatTableDataSource<any>();\r\n  dsAnalysisSource: any[] = [];\r\n  selectedAnalysisSource = 'All';\r\n  public analysisSrcId = EnmAnalysisSource.POC;\r\n\r\n  @ViewChild(SideFilterComponent) sideFilter: any;\r\n\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  public sortState: Sort = {\r\n    active: 'lastUpdatedDate',\r\n    direction: 'desc'\r\n  };\r\n\r\n  public authDetails: any;\r\n\r\n  public start = 0;\r\n  public limit = 15;\r\n  public end: number = this.limit + this.start;\r\n\r\n  public label: OrdersScreen;\r\n  public resultLabels: AnaysisResultsScreen;\r\n\r\n  testNotes: any;\r\n  dsAnalyzer: any;\r\n  public pageNo = 1;\r\n  public isLoadMore: boolean;\r\n  // selectedRowIndex: number;\r\n  @ViewChild(MatDrawer, { static: true }) drawer: MatDrawer;\r\n  refLAbClinicId: any;\r\n  bckBusinessInfo = JSON.parse(localStorage.getItem('bckBusinessInfo'));\r\n  helpObj: any;\r\n  BusinessGuid: any;\r\n\r\n  public FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);\r\n  public ToDateLabel = this.commonService.today;\r\n\r\n  // public willcallPageId: any = 'Will-Call';\r\n  public willcallPageId: any; // = '1140';\r\n\r\n  constructor(\r\n    public refLabService: RefLabService,\r\n    public dataService: DataService,\r\n    public commonService: CommonService,\r\n    public sidemenuService: SidemenuService,\r\n    private fb: UntypedFormBuilder,\r\n    private EncrDecr: EncrDecrService,\r\n    public headerService: HeaderService,\r\n    public patientService: PatientService,\r\n    public labelService: LabelService,\r\n    public sidefilterService: SidefilterService,\r\n    private modalService: NgbModal,\r\n    public router: Router,\r\n    public confirmationDialogService: ConfirmationDialogService,\r\n    public fuseService: FuseService,\r\n    private route: ActivatedRoute,\r\n    private title: Title,\r\n    private toastr: ToastrService) {\r\n    this.authDetails = this.dataService.appData.authDetails; // auth data\r\n    // // this.isBackOfficeUser = this.dataService.appData.authDetails['BackOfficeFlag'] == 'True' ? true : false;\r\n    this.isBackOfficeUser = this.dataService.appData.authDetails['BackOfficeFlag'];\r\n    // // this.isReflabActive = this.authDetails['IsReflabActive'] == 'True' ? true : false;\r\n    this.isReflabActive = this.authDetails['IsReflabActive'];\r\n    this.orderParams = new OrderParams();\r\n    this.refLAbClinicId = (this.dataService.appData.authDetails['BackOfficeFlag'] && this.bckBusinessInfo) ? this.bckBusinessInfo['RefLabClinicId'] : this.dataService.appData.authDetails['RefLabClinicId'];\r\n    this.orderParams.UserGuid = this.dataService.appData.authDetails['UserGuid'];\r\n    this.orderParams.BusinessGuid = this.dataService.appData.authDetails['BusinessGuid'];\r\n    // this.orderParams.LanguageId = this.dataService.appData.authDetails['LanguageId'];\r\n    this.orderParams.LanguageId = EnmLanguage.English;\r\n    this.orderParams.IsBackOfficeUser = this.isBackOfficeUser;\r\n    this.sidemenuService.selectedModuleId = EnmModule.orders;\r\n    this.labelService.getOrdersScreenLabels();\r\n    this.label = this.labelService.ordersScreen;\r\n    this.resultLabels = this.labelService.dsAnaysisResultsScreen\r\n\r\n    this.selectedAnalysisSource = this.label.All;\r\n    this.commonService.SetLocaleForDate();\r\n    this.dataService.page.subscribe(updatedData => {\r\n      this.dataService.pageState.orders.sortState.active = 'LastUpdatedDate';\r\n      this.dataService.pageState.orders.sortState.direction = 'desc';\r\n      this.sortState = this.dataService.pageState.orders.sortState;\r\n      this.expandedElement = updatedData.orders.selectedRow;\r\n    })\r\n\r\n    if (localStorage.getItem('alert-popup') == 'true') {\r\n      this.modalService.open(AlertMessageComponent, {\r\n        centered: true,\r\n        backdrop: 'static',\r\n        scrollable: false\r\n      });\r\n    }\r\n    this.BusinessGuid = this.dataService.appData.authDetails['BusinessGuid'];\r\n    \r\n    this.willcallPageId = this.dataService.appData?.helpTopics?.find(ele => ele.HelpTopic == 'Will-Call')?.PageID || '1140';\r\n\r\n  }\r\n\r\n  public checkReflabActive(actionName) {\r\n    this.fuseService.getClinicDetails(this.refLAbClinicId, this.BusinessGuid).subscribe({\r\n      next: (data) => {\r\n        this.isReflabActive = data.ResponseData['is_active'] == 'true' ? true : false;\r\n        if (this.isReflabActive && actionName == 'createOrder') {\r\n          // this.router.navigateByUrl('/refLab/createOrder');\r\n          this.router.navigate(['/refLab/createOrder']);\r\n        } else if (this.isReflabActive && actionName == 'addOnPanel') {\r\n          this.router.navigateByUrl('/refLab/addOrder?prev=order');\r\n        } else {\r\n          const msg = constant.consultRestrictionPopupMsg;\r\n          this.confirmationDialogService.confirm(\"Alert\", msg, 'Dismiss', \"Cancel\", \"sm\", true, false);\r\n        }\r\n      }, error: () => {\r\n        this.toastr.error(this.labelService.dsFuseManagementScreen.AddRefLabAccountRespErrorMessage)\r\n      }\r\n    });\r\n  }\r\n\r\n  public openNote(ele, sub, e) {\r\n\r\n    if (e == \"Test\") {\r\n      this.testNotes = sub.PanelNote;\r\n    }\r\n    else if (e == undefined) {\r\n      this.testNotes = ele.OrderNote;\r\n    }\r\n\r\n    const heading = e == 'Test' ? `${sub.AnalysisTypeName ? sub.AnalysisTypeName : ''}${sub.AnalysisTypeId ? ' #' + sub.AnalysisTypeId : ''}` : `${ele.PatientName ? ele.PatientName : ''}${ele.OrderNumber ? ' #' + ele.OrderNumber : ''}`\r\n    const note = {\r\n      heading: heading,\r\n      title: this.label.AdditionalNotes,\r\n      text: this.testNotes ? this.testNotes : `No notes found`,\r\n      // subtext: subEle.Notes ? ele.Notes : ``,\r\n      // testName: subEle.TestName,\r\n      btnText: this.label.Ok\r\n    }\r\n    const modalRef = this.modalService.open(NoteContentComponent);\r\n    modalRef.componentInstance.note = note;\r\n  }\r\n\r\n\r\n  public toggle() {\r\n    this.allRowsExpanded = !this.allRowsExpanded;\r\n    this.expandedElement = null;\r\n  }\r\n\r\n  public scrolltoTop(topVal) {\r\n    const scrollabe = document.getElementById('ordersTbl-scrollabe');\r\n    if (scrollabe) scrollabe.scrollTop = topVal;\r\n  }\r\n\r\n  public onTableScroll(e) {\r\n    const tableViewHeight = e.target.offsetHeight; // viewport\r\n    const tableScrollHeight = e.target.scrollHeight; // length of all table\r\n    const scrollLocation = e.target.scrollTop; // how far user scrolled\r\n    // If the user has scrolled within 200px of the bottom, add more data\r\n    const buffer = 200;\r\n    const limit = tableScrollHeight - tableViewHeight - buffer;\r\n    if (!this.isLoadMore && scrollLocation > limit) {\r\n\r\n      this.isLoadMore = true;\r\n      this.pageNo++\r\n      this.orderParams.PageNo = this.pageNo;\r\n      this.orderParams.IsBackOfficeUser = this.isBackOfficeUser;\r\n      this.dataService.pageState.orders.filterParams = this.orderParams;\r\n      this.dataService.page.next(this.dataService.pageState);\r\n      this.getOrderList(this.orderParams)\r\n    }\r\n  }\r\n\r\n  public getOrderList(event?) {\r\n    // debugger\r\n    if (this.dataService.pageState?.orders?.filterParams?.['FromDate']) {\r\n      this.FromDateLabel = this.dataService.pageState.orders.filterParams['FromDate'];\r\n    } else {\r\n      this.FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);\r\n    }\r\n    if (this.dataService.pageState?.orders?.filterParams?.['ToDate']) {\r\n      this.ToDateLabel = this.dataService.pageState.orders.filterParams['ToDate'];\r\n    } else {\r\n      this.ToDateLabel = this.commonService.today;\r\n    }\r\n\r\n    this.orderParams = event ? event : this.orderParams;\r\n    this.pageNo = this.orderParams.PageNo;\r\n\r\n    const params = Object.assign({}, this.orderParams);\r\n\r\n    if (params.FromDate) {\r\n      //const fDate = moment.utc(params.FromDate, 'MM/DD/YYYY HH:mm:ss').format()\r\n      params.FromDate = params.FromDate != null ? this.commonService.getMomentFromDateTime(params.FromDate) : null;\r\n    }\r\n    if (params.ToDate) {\r\n      //const fDate = moment.utc(params.ToDate, 'MM/DD/YYYY HH:mm:ss').format()\r\n      params.ToDate = params.ToDate != null ? this.commonService.getMomentToDateTime(params.ToDate) : null;\r\n    }\r\n\r\n    if (params.PhysicianName && params.PhysicianName.length && typeof params.PhysicianName != 'string') {\r\n      params.PhysicianName = params.PhysicianName.toString();\r\n    }\r\n\r\n    if (this.sideFilter?.filteredDoctors && params?.PhysicianName != null) {\r\n      const selectedPhysician = params?.PhysicianName.length ? params?.PhysicianName?.split(',') : [];\r\n      const selectedDr: any = selectedPhysician.map(selectedId => {\r\n        const doc = this.sideFilter?.filteredDoctors.find(doctor => doctor.Id === selectedId);\r\n        return doc ? `${doc.FirstName} ${doc.LastName}` : '';\r\n      });\r\n      params.PhysicianName = selectedDr.length > 0 ? selectedDr.join() : \"\"\r\n    }\r\n    this.refLabService.getOrderLList(params).subscribe(res => {\r\n\r\n      let respData: any[] = [];\r\n      if (this.orderParams.PageNo == 1) {\r\n        this.headerService.searchText = '';\r\n        this.originData = [];\r\n        respData = res.ResponseData.OrderPatientList || [];\r\n      } else {\r\n        respData = res.ResponseData.OrderPatientList;\r\n      }\r\n\r\n      if (respData && respData.length > 0) {\r\n        this.originData = this.originData.concat(respData);\r\n        if (this.isLoadMore) {\r\n          this.isLoadMore = false;\r\n        } else {\r\n          this.scrolltoTop(null);\r\n        }\r\n      }\r\n\r\n      // var respData = res.ResponseData.OrderPatientList == null ? [] : res.ResponseData.OrderPatientList;\r\n      // this.originData = this.originData.concat(respData);\r\n\r\n      if (this.originData.length > 0) {\r\n        this.dataService.pageState.orders.resultsList = this.originData;\r\n        this.dataService.page.next(this.dataService.pageState);\r\n        this.dataSource = new MatTableDataSource<any>(this.originData);\r\n        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;\r\n        // this.sort.sort(({ id: this.sortState.active, start: this.sortState.direction }) as MatSortable);\r\n        this.dataSource.sort = this.sort;\r\n      } else {\r\n        this.originData = [];\r\n        this.dataSource.data = [];\r\n      }\r\n    }, err => {\r\n      console.log(JSON.stringify(err));\r\n      this.originData = [];\r\n      this.dataSource.data = [];\r\n      this.dataSource = null;\r\n    })\r\n  }\r\n\r\n\r\n  public downloadMainfest(ele) {\r\n\r\n    this.refLabService.downloadableMainfest(ele.OrderNumber, this.BusinessGuid).subscribe(res => {\r\n      const blob = new Blob([res], { type: 'application/pdf' });\r\n      const objectURL = window.URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      a.href = objectURL;\r\n      a.target = '_blank';\r\n      // a.download = 'mainfest.pdf';\r\n      a.click();\r\n    }, err => {\r\n      console.log(JSON.stringify(err));\r\n      if (err.status == 500) {\r\n        this.confirmationDialogService.confirm(\"Alert\", 'Something went wrong, Plsease try again', 'Ok', \"Cancel\", \"sm\", true, false);\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  public downloadAccessionResult(ele) {\r\n\r\n    if (ele.AccessionNumber != null) {\r\n      this.refLabService.downloadableAccession(ele.AccessionNumber, this.BusinessGuid).subscribe(res => {\r\n        debugger\r\n        console.log(res, 'responce');\r\n        const blob = new Blob([res], { type: 'application/pdf' });\r\n        const objectURL = window.URL.createObjectURL(blob);\r\n        const a = document.createElement(\"a\");\r\n        a.href = objectURL;\r\n        a.target = '_blank';\r\n        a.click();\r\n      }, err => {\r\n        console.log(JSON.stringify(err));\r\n        this.confirmationDialogService.confirm(\"\", \"No accession result pdf available\", \"OK\", \"Cancel\", \"sm\", true, false)\r\n          .then((confirmed) => {\r\n            console.log(confirmed)\r\n          })\r\n      })\r\n    }\r\n    else {\r\n      this.confirmationDialogService.confirm(\"\", \"No accession result pdf available\", \"OK\", \"Cancel\", \"sm\", true, false)\r\n        .then((confirmed) => {\r\n          console.log(confirmed)\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n  public onDataSort(event) {\r\n    this.sortState = event;\r\n    this.dataService.pageState.orders.sortState = event;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n    this.scrolltoTop(null);\r\n  }\r\n\r\n  ngOnInit() {\r\n    const refresh: string = this.route.snapshot.queryParamMap.get('refresh');\r\n    this.title.setTitle('ZoetisDx | Orders');\r\n    this.closeFilterRegister();\r\n    if (refresh) {\r\n      this.getOrderList();\r\n      this.router.navigate([]);\r\n    } else if (!refresh && this.dataService.pageState.orders.resultsList.length > 0) {\r\n      this.originData = this.dataService.pageState.orders.resultsList;\r\n      this.dataSource = new MatTableDataSource<any>(this.originData);\r\n      this.sortState = this.dataService.pageState.orders.sortState;\r\n      this.sort.sort(({ id: this.sortState.active, start: this.sortState.direction }) as MatSortable);\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n    this.helpObj = this.dataService.appData.helpTopics.find(e => e.HelpTopic == \"Orders\");\r\n  }\r\n  ngAfterViewInit() {\r\n    if (this.dataService.pageState.orders.resultsList.length > 0) {\r\n      setTimeout(() => {\r\n        this.expandedElement = this.dataService.pageState.orders.selectedRow;\r\n        const elmnt: any = document.getElementById(\"row\" + this.expandedElement);\r\n        if (elmnt) elmnt.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  public getPatientList() {\r\n    if (this.dataService.pageState.dashboard.selectedRow) {\r\n      const expandedRowDetails = this.dataService.pageState.dashboard.selectedRow;\r\n      this.expandedElement = this.originData.find(x => x.Id == expandedRowDetails.Id && x.PatientId == expandedRowDetails.PatientId && x.PatientName == expandedRowDetails.PatientName && x.dob == expandedRowDetails.dob && x.owner_id == expandedRowDetails.owner_id);\r\n    }\r\n  }\r\n\r\n  public showMsg(cancelComment) {\r\n\r\n    /*\r\n    cancelComment may be:-\r\n    1) user.cancelled : The user canceled the process.\r\n    2) 11 : Test cancelled by user\r\n    3) X : Order cannot be done, order cancelled\r\n    */\r\n    if (cancelComment && /user.cancelled/.test(cancelComment)) {\r\n      cancelComment = cancelComment.split(':')[1];\r\n    } else if (cancelComment && /11 :/.test(cancelComment)) {\r\n      cancelComment = cancelComment.split(':')[1];\r\n    } else if (cancelComment && /X :/.test(cancelComment)) {\r\n      cancelComment = cancelComment.split(':')[1];\r\n    } else {\r\n      cancelComment = cancelComment ? cancelComment : 'This test has been canceled.';\r\n    }\r\n\r\n    this.confirmationDialogService.confirm(\"\", cancelComment, this.labelService.dsDashboardScreen.Ok, '', \"sm\", true, false).then((confirmed) => {\r\n      console.log(confirmed)\r\n    }).catch(() => console.log('User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)'));\r\n\r\n  }\r\n\r\n  public getRecords(ele) {\r\n    // console.log(this.dataService.pageState)    \r\n    this.dataService.appData.AccessionNumber = ele.AccessionNumber\r\n    this.dataService.data.next(this.dataService.appData)\r\n\r\n    const daysDifference = this.commonService.getDaysDifference(ele.DateReceived, this.dataService.appData.serverDate);\r\n    if (daysDifference > 7) {\r\n      const msg = constant.addOnAccessionRestrictionPopupMsg;\r\n      this.confirmationDialogService.confirm(\"Alert\", msg, 'Dismiss', \"Cancel\", \"sm\", true, false);\r\n      return;\r\n    }\r\n\r\n    localStorage.setItem('lastOrderId', ele.OrderNumber);\r\n    this.refLabService.dataRow = ele;\r\n    // this.router.navigate(['/refLab/addOrder']);\r\n    this.checkReflabActive('addOnPanel')\r\n  }\r\n\r\n  public selectedRow(rowIindex) {\r\n\r\n    if (this.expandedElement == rowIindex) {\r\n      this.expandedElement = null;\r\n    } else {\r\n      this.expandedElement = null;\r\n      this.expandedElement = rowIindex;\r\n    }\r\n\r\n  }\r\n\r\n  public goToDetails(record) {\r\n    this.router.navigateByUrl('/refLab/orders/details/' + record.OrderNumber)\r\n  }\r\n\r\n  public gotToResultDetails(rowIindex, ele, subEle) {\r\n\r\n\r\n    gtag('event', 'Orders_Page', {\r\n      Total_Orders: '',\r\n      Total_Unique_Orders: '',\r\n      Order_Date: ele.DateReceivedStr,\r\n      Order_ID: ele.OrderNumber,\r\n      Assecion_ID: ele.AccessionNumber,\r\n      Doctor_Name: ele.PhysicianName,\r\n      Patient_ID: ele.PatientId,\r\n      Patient_Name: ele.PatientName,\r\n      Owner_Name: ele.OwnerName,\r\n      Species: ele.SpeciesName,\r\n    })\r\n\r\n    this.refLabService.dataRow = ele;\r\n    this.expandedElement = rowIindex;\r\n    this.dataService.pageState.orders.selectedRow = rowIindex;\r\n\r\n    if (subEle.AnalysisStatusName == \"Canceled\" || subEle.AnalysisStatusName == null) {\r\n      this.showMsg(subEle.cancelComment)\r\n    } else if (subEle.AnalysisStatusName == \"Processing\") {\r\n      this.showMsg(\"This order has been transmitted to and accepted by the reference lab and is being processed.\")\r\n    } else if (subEle.AnalysisStatusName == \"Received\") {\r\n      this.showMsg(\"This test has been Received.\")\r\n    } else if (subEle.AnalysisStatusName == \"Submitted\") {\r\n      this.showMsg(\"This test has been Submitted.\")\r\n    } else if (subEle.AnalysisStatusName == \"Pending\") {\r\n      this.showMsg(\"This order has been transmitted to and accepted by the reference lab and is being processed.\");\r\n    } else if (subEle.AnalysisStatusName == \"Completed\" || subEle.AnalysisStatusName == \"Ammended\" || subEle.AnalysisStatusName == \"Arrived\") {\r\n      this.dataService.pageState.orders.filterParams = this.orderParams;\r\n      this.dataService.pageState.orders.resultsList = this.originData;\r\n      this.dataService.pageState.orders.sortState = this.sortState;\r\n      this.patientService.showPataientTestResult(ele, subEle, this.headerService.filter, this.sidefilterService.filter, this.sort.active, this.sort.direction);\r\n    }\r\n    this.dataService.page.next(this.dataService.pageState);\r\n\r\n  }\r\n\r\n  public goToConsultation(e) {\r\n    debugger\r\n    // // if (!this.isBackOfficeUser) {\r\n    //if (this.labelService.userCountryId == EnmCountry.UnitedStates || this.labelService.userCountryId == EnmCountry.Canada) {\r\n    const emailId = this.bckBusinessInfo ? this.bckBusinessInfo['EmailId'] : \"\";\r\n    let urlStr = \"email=\" + JSON.parse(localStorage.authDetails).Email\r\n      + \"&bkoClinicEmail=\" + emailId\r\n      + \"&token=\" + JSON.parse(localStorage.authDetails).access_token\r\n      + \"&refresh_token=\" + JSON.parse(localStorage.authDetails).refresh_token\r\n      + \"&deviceId=\" + (localStorage.UIGuid)\r\n      + \"&BusinessGuid=\" + JSON.parse(localStorage.authDetails).BusinessGuid\r\n      + \"&clinicname=\" + JSON.parse(localStorage.authDetails).BusinessName\r\n      + \"&clinicphone=\" + JSON.parse(localStorage.authDetails).BusinessPhoneNo\r\n      + \"&doctorname=\" + e.PhysicianName\r\n      + \"&patientId=\" + e.PatientId\r\n      + \"&ZDXPatientId=\" + e.ZDXPatientId\r\n      + \"&patientName=\" + e.PatientName\r\n      + \"&species=\" + e.SpeciesName\r\n      + \"&breed=\" + e.BreedName\r\n      + \"&ownerName=\" + e.OwnerName\r\n      + \"&accessionId=\" + e.AccessionNumber\r\n      + \"&gender=\" + e.Gender\r\n      + \"&age=\" + e.Dob\r\n      + \"&Isbackoffice=\" + JSON.parse(localStorage.authDetails).BackOfficeFlag\r\n      + '&backUrl=' + location.href\r\n      + \"&isNewInternal=\" + this.commonService.isnewUrlRedirection()\r\n      + \"&ZDxUrl=\" + this.commonService.getZDxUrl();\r\n    // window.location.href = environment.ZCSUrl + \"#/consultation-request?ref=\" + this.EncrDecr.encrypt(urlStr);\r\n    urlStr = this.EncrDecr.encrypt(urlStr);\r\n    // var encriptedStr = this.EncrDecr.zcxEncrypt(urlStr);\r\n    // this.commonService.getEncryptDetailZdx({ toEncryptStr: encriptedStr }).subscribe(res => {\r\n    // let encryptedResp = res.ResponseData.encryptedKey;\r\n    // window.location.href = environment.ZCSUrl + \"#/consultation-request?ref=\" + encryptedResp;\r\n\r\n    if (this.headerService.isNRP) {\r\n      this.commonService.getRedirectionKey({ \"ValueString\": urlStr }).subscribe(data => {\r\n        window.location.href = environment.ZCSUrl + \"#/user/consultation-request?ref=\" + data.ResponseData;\r\n      }, err => {\r\n        console.log(JSON.stringify(err));\r\n        this.commonService.showCommonToastrError();\r\n      });\r\n    }\r\n    else {\r\n      this.commonService.getEncryptDetail({ toEncryptStr: urlStr }).subscribe(res => {\r\n        window.location.href = environment.ZCSUrl + \"#/user/consultation-request?ref=\" + res.ResponseData.encryptedKey;\r\n      }, err => {\r\n        console.log(JSON.stringify(err));\r\n        this.commonService.showCommonToastrError();\r\n      });\r\n    }\r\n    // } else {\r\n    //   this.confirmationDialogService.confirm(\"Alert\", this.labelService.dsSideMenuScreen.ConsultationRestrictionPopupMsg, this.labelService.dsRotorManagementScreen.OkLabel, \"Cancel\", \"sm\", true, false)\r\n    //   .then((confirmed) => {\r\n    //     if (confirmed) {\r\n    //     }\r\n    //   });\r\n    // }\r\n    // // }\r\n\r\n  }\r\n\r\n  // public goToConsultation(e) {\r\n  //   e.stopPropagation();\r\n  //   const params = {\r\n  //     email: JSON.parse(localStorage.authDetails).Email,\r\n  //     token: JSON.parse(localStorage.authDetails).access_token,\r\n  //     clinicname: JSON.parse(localStorage.authDetails).BusinessName,\r\n  //     clinicphone: JSON.parse(localStorage.authDetails).BusinessPhoneNo,\r\n  //     doctorname: e.PhysicianName,\r\n  //     patientId: e.PatientId,\r\n  //     patientName: e.PatientName,\r\n  //     species: e.SpeciesName,\r\n  //     breed: e.BreedName,\r\n  //     acessionId: e.AccessionNumber,\r\n  //     backUrl: location.href\r\n  //   }\r\n\r\n  //   let paramsStr = this.EncrDecr.encrypt(JSON.stringify(params)); // JSON.stringify(params)\r\n  //   this.commonService.getEncryptDetail({ toEncryptStr: paramsStr }).subscribe(res => {\r\n  //\r\n  //     console.log(res);\r\n  //     let encryptedObj = res.ResponseData.encryptedKey;\r\n  //     window.location.href = environment.ZCSUrl + \"#/consultation-request?ref=\" + encryptedObj;\r\n  //   }, err => {\r\n  //     console.log(JSON.stringify(err));\r\n  //   });\r\n  // }\r\n\r\n  public markAs(elem, as) {\r\n    if (this.commonService.isInternalUsers()) {\r\n      const req = {\r\n        BusinessGuid: this.dataService.appData.authDetails['BusinessGuId'],\r\n        UserGuid: this.dataService.appData.authDetails['UserGuid'],\r\n        ObjResultTagModel: [\r\n          {\r\n            Source: elem.SourceType,\r\n            ResultIds: elem.RecID,\r\n            Tag: as\r\n          }]\r\n      };\r\n      this.commonService.UpdateResultTag(req).subscribe(() => {\r\n        elem.ViewedFlag = as == 'READ';\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  goToAccessionDetails(rowIindex, ele, subEle) {\r\n    if (subEle.AnalysisStatusName == \"Ordered\") {\r\n      return this.showMsg(\"This order has been transmitted to and accepted by the reference lab and is being processed.\");\r\n      // this.showMsg(\"Order has been electronically transmitted to the laboratory.\")\r\n    }\r\n    gtag('event', 'Orders_Page', {\r\n      Total_Orders: '',\r\n      Total_Unique_Orders: '',\r\n      Order_Date: ele.DateReceivedStr,\r\n      Order_ID: ele.OrderNumber,\r\n      Assecion_ID: ele.AccessionNumber,\r\n      Doctor_Name: ele.PhysicianName,\r\n      Patient_ID: ele.PatientId,\r\n      Patient_Name: ele.PatientName,\r\n      Owner_Name: ele.OwnerName,\r\n      Species: ele.SpeciesName,\r\n    })\r\n\r\n    this.refLabService.dataRow = ele;\r\n    this.expandedElement = rowIindex;\r\n    this.dataService.pageState.orders.selectedRow = rowIindex;\r\n\r\n\r\n    this.dataService.pageState.orders.filterParams = this.orderParams;\r\n    this.dataService.pageState.orders.resultsList = this.originData;\r\n    this.dataService.pageState.orders.sortState = this.sortState;\r\n\r\n    if (subEle.AnalysisStatusName == \"Canceled\" || subEle.AnalysisStatusName == null) {\r\n      this.showMsg(subEle.CancelComment)\r\n    } else if (subEle.AnalysisStatusName == \"Processing\") {\r\n      this.showMsg(\"This order has been transmitted to and accepted by the reference lab and is being processed.\")\r\n    } else if (subEle.AnalysisStatusName == \"Received\") {\r\n      this.showMsg(\"This test has been Received.\")\r\n    } else if (subEle.AnalysisStatusName == \"Submitted\") {\r\n      this.showMsg(\"This test has been Submitted.\")\r\n    } else if (subEle.AnalysisStatusName == \"Ordered\") {\r\n      this.showMsg(\"This order has been transmitted to and accepted by the reference lab and is being processed.\");\r\n      // this.showMsg(\"Order has been electronically transmitted to the laboratory.\")\r\n    } else {\r\n      this.dataService.appState.selectedResult.element = ele;\r\n      this.dataService.appState.selectedResult.subElement = subEle;\r\n      this.dataService.state.next(this.dataService.appState);\r\n      this.markAs(subEle, 'READ');\r\n      this.patientService.showAccessionResult(ele, subEle.AccessionNumber, this.headerService.filter, this.sidefilterService.filter, this.sort.active, this.sort.direction);\r\n    }\r\n\r\n    this.dataService.page.next(this.dataService.pageState);\r\n  }\r\n\r\n  closeFilterRegister() {\r\n    this.commonService.closeFilterForPatient.subscribe(ev => {\r\n      if (ev) {\r\n        this.drawer.close()\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<mat-drawer-container class=\"example-container1\" hasBackdrop=\"true\">\r\n  <mat-drawer #drawer class=\"example-sidenav sidefilter right-filter\" mode=\"over\" position=\"end\">\r\n    <app-side-filter (outFilterBy)=\"getOrderList($event)\"></app-side-filter>\r\n  </mat-drawer>\r\n\r\n  <div class=\"example-sidenav-content w-100 sidefilter dashboard\">\r\n    <div class=\"left-block\">\r\n      <!-- Page Title -->\r\n      <section class=\"title-container icon-cont\">\r\n        <span class=\"page-title\">{{label.Orders}}</span>\r\n        <img class=\"iconquestion\" src=\"../../../assets/img/help-icon.svg\"\r\n          matTooltip=\"{{labelService.dsSideMenuScreen.Help}}\" matTooltipPosition=\"below\" matTooltipClass=\"below\"\r\n          alt=\"help-circle\" (click)=\"commonService.onlineHelp(helpObj.PageID)\" />\r\n      </section>\r\n      <!--mobile responsive title-->\r\n      <div class=\"d-flex justify-content-end pt-2 pr-3 align-items-center toprow mobhead\">\r\n        <span class=\"orderTitle\"> {{label.Orders}}</span>\r\n\r\n        <span class=\"d-flex filterMob\">\r\n          <span class=\"ipadfiler  align-items-center pr-2\">\r\n            <button type=\"button\" class=\"pr-0 \" mat-button (click)=\"drawer.toggle()\">\r\n              <img src=\"../../../assets/img/filterIcon@2x.png\" alt=\"filterIcon\" class=\"filtericon\" />\r\n              <!-- <em class=\"filtertxt\">{{ labelService.dsSideFilterScreen.Filters }}</em> -->\r\n            </button>\r\n            <img class=\"qpart qicon\" src=\"../../../assets/img/help-circle.svg\" matTooltip=\"Help\" alt=\"help-circle\"\r\n              matTooltipPosition=\"below\" matTooltipClass=\"below\" (click)=\"commonService.onlineHelp(helpObj.PageID)\" />\r\n          </span>\r\n        </span>\r\n\r\n      </div>\r\n      <!--mobile responsive title-->\r\n      <!-- Page Title end -->\r\n      <mat-card class=\"p-0 mcontent\">\r\n        <!-- <div class=\"mt-0 d-flex justify-content-between align-items-center w-100\">\r\n          <div class=\"d-flex justify-content-between pt-3 pl-3 pr-3 align-items-center w-100 toprow\">\r\n            <span class=\"d-flex justify-content-between head1 align-items-center text-center w-100\" >\r\n              <h5 class=\"text-center m-0  w-100\">{{label.Orders}}</h5>\r\n            </span>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"mt-0 d-flex flex-row-reverse  align-items-right w-100\">\r\n          <div class=\"d-flex flex-row-reverse  pt-3 pl-3 pr-4 align-items-right w-100 toprow\">\r\n\r\n            <span class=\"d-flex flex-wrap justify-content-start mt-0 orderBtn\">\r\n              <div class=\"cbtn\">\r\n                <a class=\"create-btn\" style=\"margin-right: 14px;text-decoration: none;\" mat-raised-button color=\"warn\"\r\n                  [routerLink]=\"['/ups']\" target=\"_blank\">\r\n                  Create a UPS Shipping Label\r\n                </a>\r\n              </div>\r\n              <!-- {{label.CreateOrder}} -->\r\n\r\n              <!-- </button> -->\r\n              <!-- routerLink=\"/refLab/createOrder\" -->\r\n              <button class=\"create-btn\" mat-raised-button color=\"warn\" (click)=\"checkReflabActive('createOrder')\"\r\n                style=\"margin-right: 14px\">\r\n                {{label.CreateNewOrder}}\r\n              </button>\r\n              <a class=\"create-btn policy-btn\" mat-raised-button (click)=\"commonService.onlineHelp(1044)\"\r\n                target=\"_blank\">\r\n                ZRL Policies\r\n              </a>\r\n              <!-- helpObj.PageID | Will-Call -->\r\n              <a class=\"create-btn policy-btn will-call\" mat-raised-button\r\n                (click)=\"commonService.onlineHelp(willcallPageId)\" target=\"_blank\">\r\n                <img src=\"assets/img/will_call.svg\" alt=\"Will Call\" style=\"padding-right: 3px;\">\r\n                Schedule Pickup\r\n              </a>\r\n              <!-- <span class=\"ipadfiler\">\r\n                <button type=\"button\" class=\"pr-0\" mat-button>\r\n                  <img src=\"../../../assets/img/filterIcon@2x.png\">\r\n                </button>\r\n              </span> -->\r\n            </span>\r\n\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-0 d-flex justify-content-between align-items-center w-100\">\r\n          <div class=\"p-0 pt-2 cust-postion w-100\">\r\n            <div>\r\n              <div class=\"d-flex1 justify-content-between mb-1 d-none\">\r\n                <div class=\"filter-txt\">\r\n                  <!-- <span class=\"all\" *ngIf=\"selectedAnalysisSource != dsDashboardScreen.All\"\r\n                        [innerHTML]=\"selectedAnalysisSource | safeHtml\"></span> -->\r\n                  <!-- <span class=\"all\" *ngIf=\"selectedAnalysisSource != label.All\"\r\n                    [innerHTML]=\"selectedAnalysisSource\"></span>\r\n\r\n                  <button class=\"cros-btn\" mat-button *ngIf=\"selectedAnalysisSource != label.All\" matSuffix\r\n                    mat-icon-button (click)=\"onAdvSearchCrossClick()\">\r\n                    <mat-icon>close</mat-icon>\r\n                  </button> -->\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"example-container usermangemt tableRow pt-0 dos\" id=\"ordersTbl-scrollabe\">\r\n                <button class=\"closeall\" mat-raised-button (click)=\"toggle()\"\r\n                  [ngClass]=\"{'expandedall' : allRowsExpanded}\">\r\n                  <img src=\"../../../assets/img/expandall.png \" alt=\"\">\r\n                </button>\r\n                <p class=\"pr-3\" style=\"text-align: right;margin: 0.3rem 0 0.5rem 0;\">\r\n                  <span>\r\n                    Showing results for\r\n                    <span style=\"font-weight: bold;\">\r\n                      {{commonService.getMomentFromatedDate(FromDateLabel)}}\r\n                    </span>\r\n                    to\r\n                    <span style=\"font-weight: bold;\">\r\n                      {{commonService.getMomentFromatedDate(ToDateLabel) }}\r\n                    </span>\r\n                  </span>\r\n                </p>\r\n                <!-- (matSortChange)=\"onDataSort($event)\" -->\r\n                <div class=\"orderTable\" (scroll)=\"onTableScroll($event)\">\r\n                  <table class=\"dashboard-table t1\" mat-table [dataSource]=\"dataSource\" summary=\"\" multiTemplateDataRows\r\n                    matSort [matSortActive]=\"sortState.active\" [matSortDirection]=\"sortState.direction\"\r\n                    (matSortChange)=\"onDataSort($event)\">\r\n                    <ng-container matColumnDef=\"DateReceived\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <!-- {{label.OrderDate}} -->\r\n                        Created\r\n                      </th>\r\n                      <!-- [ngClass]=\"{completed: element.AnalysisStatusName == 'Completed ',\r\n                    cancelled: element.AnalysisStatusName == 'Cancelled'}\" -->\r\n                      <td mat-cell *matCellDef=\"let element\" [ngStyle]=\"{'border-left':'5px solid '+element.ColorCode}\">\r\n                        <!-- {{ element.OrderDate | date:'dd MMM yyyy' }} -->\r\n                        {{ element.DateReceivedStr }}\r\n                        <!-- {{element.DateReceived? (element.DateReceived | localDate) : ''}} -->\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"LastUpdatedDate\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        Last Update\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        {{ element.LastUpdatedDateStr }}\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"OrderNumber\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.OrderID}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <span><a href=\"javascript:void(0);\" (click)=\"downloadMainfest(element);\">{{ element.OrderNumber\r\n                            }}</a></span>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"AccessionNumber\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.AccessionID}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element; let i = dataIndex;\">\r\n                        <span class=\"bluetext\">\r\n                          <span>{{ element.AccessionNumber }}</span>\r\n                        </span>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"PhysicianName\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <!-- {{label.AccessionID}} -->\r\n                        Doctor Name\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <span class=\"bluetext\">\r\n                          {{ element.PhysicianName }}\r\n                        </span>\r\n                      </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"PatientId\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.PatientID}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        {{ element.PatientId }}\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"PatientName\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.PatientName}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <!-- {{ element.FirstName }} \r\n                     {{ element.LastName }} -->\r\n                        {{element.PatientName}}\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"OwnerName\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.OwnerName}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        {{ element.OwnerName }}\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"SpeciesName\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.Species}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        {{ element.SpeciesName }}\r\n                      </td>\r\n                    </ng-container>\r\n                    <!-- <ng-container matColumnDef=\"Breed\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                      {{label.Breed}}\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                      {{ element.Breed }}\r\n                    </td>\r\n                  </ng-container> -->\r\n\r\n                    <ng-container matColumnDef=\" \">\r\n                      <th mat-header-cell *matHeaderCellDef></th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <div class=\"d-flex align-items-center justify-content-end iconprt\">\r\n                          <!-- <span class=\"material-icons addIcon\">\r\n                          <img src=\"./assets/img/BlueBgConsultancy1x.svg\" alt=\"\" class=\"consulta\" (click)=\"goToConsultation(element)\">\r\n                          <img src=\"../../../../assets/img/add-button.png\" alt=\"\" (click)=\"getRecords(element); $event.stopPropagation()\" *ngIf=\"element.OrderNumber\">\r\n                        </span> -->\r\n                          <!-- <span class=\"material-icons\" (click)=\"openNote(element)\">more_vert</span> -->\r\n                          <button mat-icon-button [matMenuTriggerFor]=\"beforeMenu\" (click)=\"$event.stopPropagation()\">\r\n                            Actions <mat-icon>keyboard_arrow_down</mat-icon>\r\n                          </button>\r\n                          <mat-menu #beforeMenu=\"matMenu\" xPosition=\"before\" class=\"order-action\">\r\n                            <button mat-menu-item *ngIf=\"element.OrderNumber && element.AccessionNumber\"\r\n                              (click)=\"getRecords(element)\">\r\n                              Add a Panel/Test\r\n                            </button>\r\n                            <ng-container *ngIf=\"!isBackOfficeUser\">\r\n                              <button mat-menu-item (click)=\"goToConsultation(element)\">\r\n                                Request a Consult\r\n                              </button>\r\n                            </ng-container>\r\n                            <button mat-menu-item *ngIf=\"element.AccessionNumber\"\r\n                              (click)=\"downloadAccessionResult(element);\">\r\n                              View Accession Result pdf\r\n                            </button>\r\n                            <button mat-menu-item *ngIf=\"element.OrderNumber\" (click)=\"downloadMainfest(element)\">\r\n                              View Requisition Form\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"openNote(element)\">\r\n                              View Accession Notes\r\n                            </button>\r\n\r\n                            <!-- <button mat-menu-item (click)=\"openNote(element)\">Notes</button>\r\n                          <button mat-menu-item (click)=\"downloadMainfest(element)\">Order Manifest</button>\r\n                          <button mat-menu-item (click)=\"downloadAccessionResult(element);\">Accession Result PDF </button> -->\r\n                          </mat-menu>\r\n                        </div>\r\n                      </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"expandedDetail\">\r\n                      <td mat-cell td *matCellDef=\"let element; let i = dataIndex;\"\r\n                        [attr.colspan]=\"columnsToDisplay.length\">\r\n                        <div id=\"row{{i}}\" class=\"example-element-detail\"\r\n                          [@detailExpand]=\"(i === expandedElement || allRowsExpanded) ? 'expanded' : 'collapsed'\">\r\n                          <div class=\"row pt-4 pb-4 card-block w-100\">\r\n                            <div class=\"col-sm-4\" *ngFor=\"let subEle of (element.preDetails || element.Details)\">\r\n                              <!-- <mat-card [ngClass]=\"{\r\n                                      completed:subEle.TestStatus =='Completed',\r\n                                      pending:subEle.TestStatus =='Pending',\r\n                                      cancelled: subEle.TestStatus =='Cancelled'}\"> -->\r\n                              <mat-card class=\"matcard\" [ngStyle]=\"{'border-left': '3px solid '+subEle.ColorCode}\">\r\n\r\n                                <!-- [ngClass]=\"{'orderResult': element.AnalysisStatusName == 'Completed'?'black': element.AnalysisStatusName != 'Completed'}\" -->\r\n                                <div class=\"d-flex justify-content-between align-items-top\">\r\n\r\n                                  <!-- [ngClass]=\"{'orderResult': element.AnalysisStatusName == 'Completed', 'orderResult': element.AnalysisStatusName == 'Received',\r\n                                'orderResult': element.AnalysisStatusName == 'Submitted' ? 'orderResult' : 'black'}\" -->\r\n                                  <!-- [ngClass]=\"element.AnalysisStatusName == 'Completed' ? 'orderResult' : 'black'\" -->\r\n\r\n\r\n                                  <!-- <span class=\"card-head\" [ngClass]=\"{complected: subEle.AnalysisStatusName == 'Completed',arrived: subEle.AnalysisStatusName == 'Arrived',ammended: subEle.AnalysisStatusName == 'Ammended'}\"\r\n                                (click)=\"gotToResultDetails(i, element, subEle)\">\r\n                                  {{subEle.AnalysisTypeName}}\r\n                                </span> -->\r\n                                  <span class=\"card-head\"\r\n                                    [ngClass]=\"{complected: subEle.AnalysisStatusName === 'Completed',arrived: subEle.AnalysisStatusName === 'Arrived',ammended: subEle.AnalysisStatusName === 'Ammended'}\"\r\n                                    (click)=\"goToAccessionDetails(i, element, subEle)\">\r\n                                    {{subEle.AnalysisTypeName}}\r\n                                  </span>\r\n                                  <span class=\"card-date\">\r\n                                    <!-- {{subEle.RunDate | date:'dd MMM yyyy, hh:mm a' }} -->\r\n                                    <!-- {{subEle.DateReceived ? (subEle.DateReceived | localDate) : ''}} -->\r\n                                    {{subEle.DateReceivedStr}}\r\n                                  </span>\r\n                                </div>\r\n                                <div class=\"d-flex justify-content-between align-items-center\">\r\n                                  <span class=\"d-flex cardimg text-left\" style=\"overflow: hidden;\">\r\n                                    <span> <img class=\"mr-2 ng-star-inserted\" src=\"../../../assets/img/lab-icon@2x.png\"\r\n                                        alt=\"\" class=\"mr-2 ng-star-inserted\" height=\"30\" /></span>\r\n\r\n                                    <!-- {{ dsDashboardScreen.InClinic }} -->\r\n                                    <span>\r\n                                      <span class=\"card-head_dvn_name d-flex w-100\">\r\n                                        <span class=\"ref\">{{label.RefLab}} </span>\r\n\r\n                                      </span>\r\n\r\n                                      <span class=\"doc elipsis\"\r\n                                        [title]=\"element.PhysicianName?element.PhysicianName:'label.None'\">\r\n                                        <strong>{{label.Doctor}}:</strong>\r\n                                        {{element.PhysicianName?element.PhysicianName:'label.None'}}\r\n                                      </span>\r\n                                      <span class=\"ml-2\" *ngIf=\"subEle.AnalysisSourceId === 2\">\r\n                                        <span [ngStyle]=\"{'color':subEle.HighCount?'red':'black'}\">\r\n                                          {{subEle.HighCount?subEle.HighCount:'--'}} </span>/<span\r\n                                          [ngStyle]=\"{'color':subEle.LowCount?'blue':'black'}\">{{subEle.LowCount?subEle.LowCount:'--'}}</span>\r\n                                      </span>\r\n                                    </span>\r\n                                  </span>\r\n                                  <!-- <span *ngIf=\"!commonService.ACPText(subEle)\" class=\"card-arrow\">\r\n                                  <button mat-icon-button aria-label=\"right arrow\">\r\n                                    <mat-icon (click)=\"openNote(element,subEle,'Test')\">\r\n                                      <img src=\"../../../../assets/img/document-icon.png\" alt=\"\">\r\n                                    </mat-icon>\r\n                                  </button>\r\n                                </span> -->\r\n                                  <span style=\"min-width: 72px;\">\r\n                                    <span title=\"{{ resultLabels[subEle.StatusName] }}\"\r\n                                      style=\"cursor: pointer;margin-top: 6px;padding: 0px 5px;\"\r\n                                      *ngIf=\"subEle.SourceType === 'ReferenceLab' && commonService.ACPText(subEle)\"\r\n                                      class=\"float-left statusCode {{ commonService.ACPStatusCodeShow(subEle.StatusCode) }}\">\r\n                                      {{ commonService.ACPStatusCodeShow(subEle.StatusCode) }}\r\n                                    </span>\r\n                                    <span (click)=\"goToAccessionDetails(i, element, subEle)\">\r\n                                      <button mat-icon-button aria-label=\"right arrow\"\r\n                                        [ngClass]=\"{complected: subEle.AnalysisStatusName === 'Completed',arrived: subEle.AnalysisStatusName === 'Arrived',ammended: subEle.AnalysisStatusName === 'Ammended'}\">\r\n                                        <mat-icon\r\n                                          [ngClass]=\"{complected: subEle.AnalysisStatusName === 'Completed',arrived: subEle.AnalysisStatusName === 'Arrived',ammended: subEle.AnalysisStatusName === 'Ammended'}\">keyboard_arrow_right</mat-icon>\r\n                                      </button>\r\n                                    </span>\r\n                                  </span>\r\n\r\n                                  <!-- <span (click)=\"gotToResultDetails(i, element, subEle)\">\r\n                                  <button mat-icon-button aria-label=\"right arrow\" [ngClass]=\"{complected: subEle.AnalysisStatusName == 'Completed',arrived: subEle.AnalysisStatusName == 'Arrived',ammended: subEle.AnalysisStatusName == 'Ammended'}\">\r\n                                    <mat-icon [ngClass]=\"{complected: subEle.AnalysisStatusName == 'Completed',arrived: subEle.AnalysisStatusName == 'Arrived',ammended: subEle.AnalysisStatusName == 'Ammended'}\">keyboard_arrow_right</mat-icon>\r\n                                  </button>\r\n                                </span> -->\r\n                                </div>\r\n                                <div class=\"d-flex justify-content-start align-items-center\">\r\n\r\n                                </div>\r\n                              </mat-card>\r\n                            </div>\r\n                          </div>\r\n\r\n                        </div>\r\n\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky: true\"></tr>\r\n                    <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay; let i = dataIndex;\"\r\n                      [ngStyle]=\"{'border-left':'5px solid '+element.ColorCode}\" class=\"example-element-row\"\r\n                      [class.example-expanded-row]=\"expandedElement === element\" (click)=\"selectedRow(i)\"></tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\"\r\n                      [ngStyle]=\"{'border-left':'5px solid '+row.ColorCode}\" class=\"example-detail-row\"></tr>\r\n                  </table>\r\n                </div>\r\n\r\n                <div class=\"noresult\">\r\n                  <tbody class=\"norecord\" *ngIf=\"dataSource.data.length === 0\">\r\n                    <tr>\r\n                      <!-- {{label.Norecordsfound}} -->\r\n                      <span *ngIf=\"orderParams.IsApplyFilter==true\" style=\"margin-top: 35px;\">No records found. Please\r\n                        review your filter criteria.</span>\r\n                      <span *ngIf=\"orderParams.IsApplyFilter==false\" style=\"margin-top: 35px;\">No records found.</span>\r\n                    </tr>\r\n                  </tbody>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n    <div class=\"right-filter pl-0\">\r\n      <app-side-filter (outFilterBy)=\"getOrderList($event)\"></app-side-filter>\r\n    </div>\r\n\r\n\r\n  </div>\r\n\r\n</mat-drawer-container>","import { Component, OnInit, Input, NgZone, ViewChild } from '@angular/core';\r\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport {\r\n  RefLabService,\r\n  DataService,\r\n  LabelService,\r\n  HeaderService,\r\n  CommonService,\r\n  UserService,\r\n} from \"../../../../services\";\r\nimport { FormBuilder, NgForm, FormControl, FormGroupDirective } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ConfirmationDialogService } from \"../../../../components/confirmation-dialog/confirmation-dialog.service\";\r\nimport { CreateOrderScreen } from \"../../../../models/label\";\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n\r\n  isSubmittedState;\r\n\r\n  constructor(isSubmittedState?) {\r\n    this.isSubmittedState = isSubmittedState;\r\n  }\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (isSubmitted || typeof this.isSubmittedState != 'undefined'));\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-panel-test-list-modal',\r\n  templateUrl: './panel-test-list-modal.component.html',\r\n  styleUrls: ['./panel-test-list-modal.component.css']\r\n})\r\nexport class PanelTestListModalComponent implements OnInit {\r\n\r\n  @Input() headerText;\r\n  @Input() ownerpopupTitle;\r\n  @Input() OrderTestData;\r\n  @Input() filterDatafor;\r\n  @Input() selectedArray;\r\n  @Input() editableTest;\r\n  @Input() prevSelectedArray;\r\n  public SearchTestName = \"Search by Test Name\";\r\n  searchText: any;\r\n  filterClassData: any;\r\n  filterMenuData: any;\r\n  SelectedFav = false;\r\n  SelectedClass: any;\r\n  selectedMenu: any;\r\n  patientOwnerList: any;\r\n  // selectedArray: any = [];\r\n  filteredArray: any = [];\r\n  selPatient: any;\r\n  section = \"testSelection\";\r\n  disabledBtn = true;\r\n  filteredOptions: any = [];\r\n  public menuSelected: \"\";\r\n  selectedRefID: any;\r\n  public label: CreateOrderScreen;\r\n  public patientId: string;\r\n  public isViewDOSPrice: boolean;\r\n  public selectedfav: any;\r\n  @ViewChild('orderTestsForm') orderTestsForm: NgForm;\r\n  public AOEQuestions: any[] = [];\r\n  public selectedTestIndex = 0;\r\n  public isSubmitted = false;\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private ngZone: NgZone,\r\n    private formBuilder: FormBuilder,\r\n    public refLabService: RefLabService,\r\n    public userService: UserService,\r\n    public labelService: LabelService,\r\n    public headerService: HeaderService,\r\n    private modalService: NgbModal,\r\n    public commonService: CommonService,\r\n    public dataService: DataService,\r\n    public confirmationDialogService: ConfirmationDialogService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    this.labelService.getCreateOrderScreenLabels();\r\n    this.label = this.labelService.createOrderScreen;\r\n    this.isViewDOSPrice = this.dataService.appData.authDetails[\"IsViewDOSPrice\"];\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getorderTest();\r\n    this.getDosfilter();\r\n\r\n    if (this.editableTest) {\r\n      this.section = \"moreInfo\";\r\n      this.ownerpopupTitle = 'Edit Selected Test';\r\n      this.matcher = new MyErrorStateMatcher(true);\r\n      this.isSubmitted = true;\r\n    }\r\n\r\n  }\r\n\r\n  public getorderTest() {\r\n    const Test = {\r\n      SearchText: (this.SearchTestName !== \"Search by Test Name\" && this.searchText) || \"\",\r\n      SearchTestName: (this.SearchTestName === \"Search by Test Name\" && this.searchText) || \"\",\r\n      ClassName: this.SelectedClass,\r\n      Menu: this.selectedMenu,\r\n      IsOrder: true,\r\n      UserGuid: this.headerService.loginUserGuid,\r\n      IsFavourite: this.SelectedFav,\r\n    };\r\n    this.refLabService.getOrderTestList(Test).subscribe(data => {\r\n      this.OrderTestData = data.ResponseData.TestDetail;\r\n      this.filterDatafor = this.OrderTestData;\r\n\r\n      // this.filteredArray = this.selectedArray;\r\n      this.filteredArray = this.filteredArray.length > 0 ? this.filteredArray : this.selectedArray;\r\n\r\n      this.filteredArray = this.filteredArray.map((ele, index) => {\r\n        if (this.editableTest && this.editableTest.OrderCode == ele.OrderCode) {\r\n          this.selectedTestIndex = index;\r\n          ele.isEditable = true;\r\n        } else {\r\n          ele.isEditable = false;\r\n        }\r\n        return ele;\r\n      })\r\n      console.log('filteredArray after fetched data ==>', this.filteredArray)\r\n\r\n      if (this.filteredArray.length) {\r\n        this.filteredArray.forEach((x) => {\r\n          const item = this.filterDatafor.find(y => y.OrderCode == x.OrderCode);\r\n          if (item) {\r\n            item.isChecked = true;\r\n            item.selfNote = x.selfNote;\r\n          }\r\n        });\r\n      }\r\n    }, err => {\r\n      console.log(JSON.stringify(err));\r\n      this.commonService.showCommonToastrError();\r\n    });\r\n  }\r\n\r\n  public getDosfilter() {\r\n    this.commonService.GetDOSFilterdetails().subscribe((data) => {\r\n      this.filterClassData = data.ResponseData.Class;\r\n      this.filterMenuData = data.ResponseData.Menu;\r\n    }, err => {\r\n      console.log(JSON.stringify(err));\r\n      this.commonService.showCommonToastrError();\r\n    });\r\n  }\r\n\r\n  public clearSearchField() {\r\n    this.searchText = \"\";\r\n    this.filterDatafor = this.OrderTestData.map((a) => ({ ...a }));\r\n    if (this.selectedArray.length) {\r\n      this.selectedArray.forEach(() => {\r\n        this.selectedArray.forEach((x) => {\r\n          const item = this.filterDatafor.find(\r\n            (y) => y.OrderCode == x.OrderCode\r\n          );\r\n          if (item) {\r\n            item.isChecked = true;\r\n            item.selfNote = x.selfNote;\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  public clearAll() {\r\n    this.searchText = \"\";\r\n    this.selectedMenu = \"\";\r\n    this.SelectedClass = \"\";\r\n    this.menuSelected = \"\";\r\n    this.SelectedFav = false;\r\n    this.SearchTestName = 'Search by Test Name';\r\n    this.filteredArray = [];\r\n    this.filterDatafor = this.OrderTestData.map((a) => ({ ...a }));\r\n    this.filterDatafor.map((data) => {\r\n      data.isChecked = false;\r\n    });\r\n    this.getorderTest();\r\n  }\r\n\r\n  onSelect(selectedItem: any) {\r\n    // this.filterDatafor.map(data => {\r\n    //   if (data.TestId == selectedItem.TestId) {\r\n    //     if (data.isChecked) {\r\n    //       data.isChecked = true;\r\n    //     }\r\n    //     else {\r\n    //       data.isChecked = false;\r\n    //     }\r\n    //     return data\r\n    //   }\r\n    // })\r\n    selectedItem.isChecked = !!selectedItem.isChecked;\r\n  }\r\n\r\n  public updateFilterArray(event, order) {\r\n\r\n    if (event.checked) {\r\n      this.filteredArray.push(order);\r\n    } else {\r\n      const idx = this.filteredArray.findIndex((x) => x.TestId == order.TestId);\r\n      this.filteredArray.splice(idx, 1);\r\n    }\r\n    const nextBtn = document.getElementById(\"nextBtn\");\r\n    if (nextBtn) {\r\n      nextBtn.focus();\r\n    }\r\n  }\r\n\r\n  public back() {\r\n    this.section = \"testSelection\";\r\n    this.ownerpopupTitle = \"Select Tests\";\r\n  }\r\n\r\n  public resetBack() {\r\n    this.section = \"testSelection\";\r\n    this.ownerpopupTitle = \"Select Tests\";\r\n    this.searchText = \"\";\r\n    this.selectedMenu = \"\";\r\n    this.SelectedClass = \"\";\r\n    this.SelectedFav = false;\r\n    this.isSubmitted = false;\r\n    console.log(this.orderTestsForm);\r\n    this.modalService.dismissAll();\r\n  }\r\n\r\n  // public toggleBtn(val: any = null, item: any = null) {\r\n  //   \r\n  //   if (item) item.selfNote = val;\r\n  //   // const reqItems = this.filterDatafor.filter(ele => ele.isChecked).filter((x) => {\r\n  //   const reqItems = this.filteredArray.filter((x) => {\r\n  //     if (x.noteRequired) {\r\n  //       return !x.selfNote;\r\n  //     }\r\n  //   });\r\n  //   this.disabledBtn = reqItems.length > 0;\r\n  // }\r\n\r\n  public SelectedAddtest(formData?) {\r\n\r\n    if (formData) {\r\n      console.log('formData ==>', formData);\r\n      if (formData && formData.form.status == 'INVALID') {\r\n        this.checkFormValidation();\r\n        return;\r\n      } else {\r\n        for (const testElement in formData.form.value) {\r\n          const testObj = {\r\n            Code: testElement,\r\n            Notes: null,\r\n            AOEDetail: []\r\n          };\r\n          const qa = formData.form.value[testElement];\r\n          for (const qaElement in qa) {\r\n            if (qa[qaElement]) {\r\n              testObj.AOEDetail.push({\r\n                QuestionId: qaElement,\r\n                Answers: [{ AnswerFullText: qa[qaElement] }]\r\n              })\r\n            }\r\n          }\r\n          this.filteredArray.map(ele => {\r\n            if (ele.OrderCode == testElement) {\r\n              ele.selectedQA = testObj;\r\n            }\r\n          })\r\n        }\r\n        console.log('selectedQA Added ==> ', this.filteredArray);\r\n      }\r\n    }\r\n\r\n    let selectedTest = this.filterDatafor.filter(ele => ele.isChecked);\r\n    selectedTest = selectedTest.map(ele => {\r\n      this.selectedArray.map(item => {\r\n        if (ele.TestId == item.TestId) {\r\n          ele = item;\r\n        }\r\n      })\r\n      return ele;\r\n    })\r\n\r\n    // merging both array\r\n    this.filteredArray = [...new Set([...this.filteredArray, ...selectedTest])];\r\n    // removing duplicates\r\n    this.filteredArray = this.filteredArray.filter((obj, index) => {\r\n      return index === this.filteredArray.findIndex(o => obj.OrderCode === o.OrderCode);\r\n    });\r\n\r\n    // this.filteredArray = selectedTest; // this.filterDatafor.filter(ele => ele.isChecked);\r\n    // this.filteredArray = this.editableTest ? this.selectedArray : selectedTest; // this.filterDatafor.filter(ele => ele.isChecked);\r\n    let isFirstFound = false;\r\n    const filteredArray = this.filteredArray.filter((ele, index) => {\r\n      // if (this.refLabService.moreInfoReqFor.indexOf(ele.OrderCode) !== -1) {\r\n      //   ele.noteRequired = true;\r\n      //   return true;\r\n      // } else \r\n      if (ele.AOEQuestions.length > 0) {\r\n        if (!isFirstFound) {\r\n          isFirstFound = true;\r\n          this.selectedTestIndex = index;\r\n        }\r\n        ele.haseQuestion = true;\r\n        ele.AOEQuestions.forEach(y => {\r\n          if(y.AnswerType == 'Pick List' && !y.selectedAnswer){\r\n\r\n            y.selectedAnswer = ''\r\n          }\r\n        })\r\n        return true;\r\n      }\r\n    });\r\n\r\n    console.log('filteredArray -1 =============> ', this.filteredArray)\r\n\r\n    if (this.filteredArray.length) {\r\n      if (filteredArray.length && this.section == 'testSelection') {\r\n        this.section = \"moreInfo\";\r\n        this.ownerpopupTitle = 'Additional Information'; // \"Submission Information\";        \r\n        setTimeout(() => {\r\n          if (this.orderTestsForm && this.orderTestsForm.form && this.orderTestsForm.form.status == 'INVALID') {\r\n            this.filteredArray.map(ele => {\r\n              if (typeof ele.isValidated != 'undefined') {\r\n                this.isSubmitted = true;\r\n              }\r\n            })\r\n            this.checkFormValidation();\r\n          }\r\n        })\r\n        return;\r\n      }\r\n      this.selectedArray = this.filteredArray;\r\n\r\n      this.dataService.pageState['filterDatafor'] = this.filterDatafor;\r\n      // this.dataService.pageState['filteredArray'] = this.filteredArray;\r\n      this.dataService.pageState['selectedArray'] = this.selectedArray;\r\n      this.dataService.page.next(this.dataService.pageState);\r\n      // console.log('filteredArray ===> ', this.filteredArray);\r\n\r\n      this.searchText = \"\";\r\n      this.selectedMenu = \"\";\r\n      this.SelectedClass = \"\";\r\n      this.SelectedFav = false;\r\n      this.modalService.dismissAll();\r\n    }\r\n  }\r\n\r\n  public onAnswerChange(event, item) {\r\n    if (item.AnswerType == 'Pick List') {\r\n      item.Answers.map(ele => {\r\n        if (ele.AnswerFullText == event.target.value) {\r\n          ele.Selected = true;\r\n        } else {\r\n          ele.Selected = false;\r\n        }\r\n        return ele;\r\n      })\r\n      item.selectedAnswer = event.target.value\r\n      console.log('DDN Answer value is: ', event.target.value);\r\n    } else {\r\n      item.Answers = event.target.value;\r\n      item.selectedAnswer = event.target.value;\r\n      item.charCount = event.target.value.length;\r\n    }\r\n    this.checkFormValidation();\r\n  }\r\n\r\n  public onCancelSubmit() {\r\n    this.dataService.pageState['selectedArray'] = this.prevSelectedArray;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n    this.modalService.dismissAll();\r\n  }\r\n\r\n  public onSubmit(formData) {\r\n    this.isSubmitted = true;\r\n    console.log('Form Value ==>', this.orderTestsForm.value);\r\n    this.checkFormValidation();\r\n    this.SelectedAddtest(formData)\r\n  }\r\n\r\n  public checkFormValidation() {\r\n    if (this.isSubmitted) {\r\n      this.matcher = new MyErrorStateMatcher(true);\r\n      // console.log('Form Value ==>', this.orderTestsForm.value);\r\n      // let formGroups = formData.form.controls;\r\n      const formGroups = this.orderTestsForm.controls;\r\n      // setTimeout(() => {\r\n      for (const fg in formGroups) {\r\n        // let toggleIcon = document.getElementById('toggleIcon_' + fg);\r\n        // if (formGroups[fg].touched) {\r\n        //   if (formGroups[fg].valid) {\r\n        //     toggleIcon.style.color = 'green';\r\n        //   } else {\r\n        //     toggleIcon.style.color = 'red';\r\n        //   }\r\n        // } else {\r\n        //   toggleIcon.style.color = 'grey';\r\n        // }\r\n\r\n        if (formGroups[fg] && formGroups[fg]['controls']) {\r\n          for (const i in formGroups[fg]['controls']) {\r\n            formGroups[fg]['controls'][i].updateValueAndValidity();\r\n          }\r\n        }\r\n\r\n        this.filteredArray.filter(ele => {\r\n          if (fg == ele.OrderCode) {\r\n            if (ele.AOEQuestions.length > 0) {\r\n\r\n              const hasRequired = ele.AOEQuestions.filter(item => item.IsMandatory);\r\n              // const alredyTouched = ele.isValidated == 1 || ele.isValidated == 2 ? true : false;\r\n\r\n              // if (alredyTouched || formGroups[fg].touched) {\r\n              if (formGroups[fg].valid && hasRequired && hasRequired.length > 0) {\r\n                ele.isValidated = 1;\r\n                // toggleIcon.style.color = 'green';\r\n              } else {\r\n                ele.isValidated = 2;\r\n                // toggleIcon.style.color = 'red';\r\n              }\r\n              // } else {\r\n              //   ele.isValidated = 0;\r\n              //   // toggleIcon.style.color = 'grey';\r\n              // }\r\n\r\n              if (formGroups[fg].valid && hasRequired && hasRequired.length == 0) {\r\n                ele.isValidated = 0;\r\n                // toggleIcon.style.color = 'grey';\r\n\r\n                // let isControlsFilled = false;\r\n                // for (const fc in formGroups[fg]['controls']) {\r\n                //   if (!isControlsFilled) {\r\n                //     ele.isValidated = true;\r\n                //     isControlsFilled = formGroups[fg]['controls'][fc].value ? true : false;\r\n                //     toggleIcon.style.color = 'green';\r\n                //   } else {\r\n                //     toggleIcon.style.color = 'grey';\r\n                //   }\r\n                // }              \r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // }, 200)\r\n    }\r\n  }\r\n\r\n  public toggleAccordion(test) {\r\n    const testId = test.OrderCode\r\n    const accordion = document.getElementById('accordion_' + testId);\r\n    const toggleIcon = document.getElementById('toggleIcon_' + testId);\r\n    if (accordion.style.display == 'block') {\r\n      accordion.style.display = 'none';\r\n      toggleIcon.classList.remove('fa-chevron-circle-down');\r\n      toggleIcon.classList.add('fa-chevron-circle-right');\r\n    } else {\r\n      accordion.style.display = 'block';\r\n      toggleIcon.classList.remove('fa-chevron-circle-right');\r\n      toggleIcon.classList.add('fa-chevron-circle-down');\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"modal-header text-center\">\r\n    <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n        {{ ownerpopupTitle }}\r\n    </h4>\r\n</div>\r\n\r\n<!-- =======================testSelection============================ -->\r\n<div class=\"modal-body filter_wrapper\" *ngIf=\"section === 'testSelection'\">\r\n    <div class=\"d-flex justify-content-start flex-wrap align-items-center mb-3 \">\r\n\r\n        <div class=\"asrch\" id=\"filer_by_menu\" style=\"width: 15%;\">\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"dotpart w-100\">\r\n                <mat-select [(ngModel)]=\"SearchTestName\" ngDefaultControl>\r\n                    <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search by Test Name'}\"\r\n                        value=\"Search by Test Name\">Search by Test Name </mat-option>\r\n                    <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search all fields'}\"\r\n                        value=\"Search all fields\">Search all Fields </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"asrch\" style=\"width: 20%;\">\r\n            <mat-form-field class=\"example-form-field\" appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n\r\n                <input [(ngModel)]=\"searchText\" ngDefaultControl matInput maxlength=\"60\" [placeholder]=\"label.Search\"\r\n                    autocomplete=\"off\" (keydown.enter)=\"getorderTest()\">\r\n                <span matPrefix><img src=\"../../../../assets/img/search-icon.png\" alt=\"search-icon\"> </span>\r\n                <button mat-button mat-icon-button matSuffix aria-label=\"Clear\" (click)=\"clearSearchField()\"\r\n                    *ngIf=\"searchText\">\r\n                    <mat-icon>close</mat-icon>\r\n                </button>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"asrch\" style=\"width: 35%;\">\r\n            <!-- filterClassData -->\r\n            <div class=\"float-right pull-right\">\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"float-left w-60\">\r\n                    <mat-select [placeholder]=\"label.FilterByClass\" [(ngModel)]=\"SelectedClass\" ngDefaultControl>\r\n                        <mat-option class=\"formselect\" *ngFor=\"let filter of filterClassData\" [value]=\"filter.Id\">\r\n                            {{ filter.Name }}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <div class=\"float-left w-40 mt-2 pl-2\">\r\n                    <mat-checkbox class=\"example-margin\" value=\"checked\" [(ngModel)]=\"SelectedFav\" ngDefaultControl\r\n                        (ngModelChange)=\"getorderTest()\">\r\n                        Favorites\r\n                    </mat-checkbox>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"asearch\" style=\"width: 15%;\">\r\n            <div class=\"del_doc col1 float-right\">\r\n                <a class=\"clrall mr-2\" (click)=\"clearAll()\">Clear All</a>\r\n                <button ngbAutofocus class=\"w-70 g-btn\" mat-raised-button (click)=\"getorderTest(true)\" style=\"order: 2\">\r\n                    Search\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"asearch\" style=\"width: 12%; text-align: right; \">\r\n            <a class=\"w-70 g-btn policy-btn\" mat-raised-button style=\"order: 3\" (click)=\"commonService.onlineHelp(1044)\"\r\n                target=\"_blank\">\r\n                ZRL Policies\r\n            </a>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"d-flex flex-wrap chkbox_wrapper\">\r\n        <div class=\"d-flex align-content-start flex-wrap w-100\">\r\n            <div class=\"w-50   del_doc del_doc1  pr-4\" *ngFor=\"let order of filterDatafor\" (click)=\"onSelect(order)\">\r\n                <div class=\"mb-3 d-flex align-items-center justify-content-between w-100 \">\r\n                    <mat-checkbox (change)=\"updateFilterArray($event, order)\"\r\n                        class=\"example-margin d-flex align-items-center\" [(ngModel)]=\"order.isChecked\" ngDefaultControl>\r\n                        <span\r\n                            [ngClass]=\"{dotdosskyBlue: order.Menu === 'Blue',dotdosGreen: order.Menu  === 'Green',dotdosorange: order.Menu  === 'Orange',dotdosequine: order.Menu  === 'Equine',dotdosBlue: order.Menu  === 'AvianExotic',dotdosallother: order.Menu  === 'AllOther'}\"></span><span\r\n                            class=\"chk_label\"  color=\"accent\">\r\n                            <span *ngIf=\"isViewDOSPrice\"  matTooltip=\"Price: {{order.Price}}\"  matTooltipPosition=\"above\">\r\n                            {{order.TestName}} {{order.OrderCode}}\r\n                            </span>\r\n                            <span *ngIf=\"!isViewDOSPrice\" >{{order.TestName}} {{order.OrderCode}} </span>\r\n                            </span>\r\n                    </mat-checkbox>\r\n                </div>\r\n                <div class=\"d-flex tests-box\" *ngIf=\"order.isChecked\">\r\n                    <p class=\"col-3 justify-content\">\r\n                        <strong class=\"testheader justify-content\">Sample Requirements:</strong><br>\r\n                        <span>{{order.SampleRequirements}}</span>\r\n                    </p>\r\n                    <p class=\"col-3 justify-content\">\r\n                        <strong>Tube Type:</strong><br>\r\n                        <span *ngFor=\"let ord of order.TubeType\">{{ord.code}} {{ord.description}}</span>\r\n                    </p>\r\n                    <p class=\"col-3 justify-content\">\r\n                        <strong>TAT:</strong><br>\r\n                        <span>{{order.TAT}}</span>\r\n                    </p>\r\n                    <p class=\"col-3 justify-content\">\r\n                        <strong>Note:</strong><br>\r\n                        <span>{{order.Notes}}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"filterDatafor?.length === 0\" class=\"w-100 text-center\">\r\n            {{label.Norecordsfound}}\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- =======================moreInfo============================ -->\r\n<form #orderTestsForm=\"ngForm\" (ngSubmit)=\"onSubmit(orderTestsForm)\" class=\"touchedValidation\">\r\n    <div class=\"modal-body filter_wrapper filter-part\" *ngIf=\"section === 'moreInfo'\">\r\n        <p class=\"text-right p-0 m-0\">\r\n            <span class=\"astric\">*</span>\r\n            <strong> Indicates a required field</strong>\r\n        </p>\r\n        <div class=\"qa-content\">\r\n            <section class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <ng-templae *ngFor=\"let testData of filteredArray; index as i\">\r\n                        <div class=\"order-tests-accordion\"\r\n                            *ngIf=\"(testData.AOEQuestions.length>0 && !editableTest) || (editableTest && testData.AOEQuestions.length>0 && testData.isEditable)\">\r\n                            <div class=\"accordion-header\">\r\n                                <p (click)=\"toggleAccordion(testData)\">\r\n                                    <span> {{ testData.TestName }} </span>\r\n                                    <em id=\"toggleIcon_{{testData.OrderCode}}\"\r\n                                        [ngStyle]=\"{'color': testData['isValidated']===1 ? 'green' : (testData['isValidated']===2 ? 'red' : grey) }\"\r\n                                        class=\"fa fa-2x\"\r\n                                        [ngClass]=\"i === selectedTestIndex ? 'fa-chevron-circle-down' : 'fa-chevron-circle-right'\"></em>\r\n                                </p>\r\n                            </div>\r\n                            <div ngModelGroup=\"{{testData.OrderCode}}\" #testQuestions=\"ngModelGroup\">\r\n                                <div class=\"accordion-body\" id=\"accordion_{{testData.OrderCode}}\"\r\n                                    [ngStyle]=\"{'display': i === selectedTestIndex ? 'block' : 'none' }\">\r\n                                    <div *ngFor=\"let item of testData.AOEQuestions\">\r\n                                        <div class=\"mb-3\" *ngIf=\"item.AnswerType === 'Text Field' \">\r\n                                            <label class=\"pb-2\">{{item.Question}}</label>\r\n                                            <span *ngIf=\"item.IsMandatory\" class=\"astric\">*</span>\r\n                                            <div class=\"w-100\">\r\n                                                <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                                                    <!-- (focusout)=\"checkFormValidation()\" -->\r\n                                                    <input matInput type=\"text\" name=\"{{item.QuestionId}}\"\r\n                                                        maxlength=\"200\"\r\n                                                        [placeholder]=\"item.IsMandatory ? 'Required':'Optional'\"\r\n                                                        (keyup)=\"onAnswerChange($event, item, testData)\"\r\n                                                        [required]=\"item.IsMandatory\"\r\n                                                        [value]=\"item.selectedAnswer || null\"\r\n                                                        [(ngModel)]=\"item.selectedAnswer\" [errorStateMatcher]=\"matcher\">\r\n                                                </mat-form-field>\r\n                                                <small class=\"form-text text-muted text-right\">\r\n                                                    <span> {{item.charCount ? 200-item.charCount : 200}} </span> / 200\r\n                                                    <!-- Maximum 200 characters per text box. -->\r\n                                                </small>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"mb-3\" *ngIf=\"item.AnswerType === 'Pick List' \">\r\n                                            <label class=\"pb-2\">{{item.Question}}</label>\r\n                                            <span *ngIf=\"item.IsMandatory\" class=\"astric\">*</span>\r\n                                            <div class=\"w-100\">\r\n                                                <div class=\"form-group\">\r\n                                                    <select\r\n                                                        class=\"form-control custom-select {{ isSubmitted ? 'submitted' : ''}}\"\r\n                                                        [placeholder]=\"item.IsMandatory ? 'Required':'Optional'\"\r\n                                                        name=\"{{item.QuestionId}}\"\r\n                                                        (change)=\"onAnswerChange($event, item, testData)\"\r\n                                                        [required]=\"item.IsMandatory\" [(ngModel)]=\"item.selectedAnswer\"\r\n                                                        [errorStateMatcher]=\"matcher\">\r\n                                                        <option selected disabled hidden value=\"\">\r\n                                                            {{ item.IsMandatory ? 'Required':'Optional' }}\r\n                                                        </option>\r\n                                                        <option class=\"formselect formpart\"\r\n                                                            *ngFor=\"let ans of item.Answers\"\r\n                                                            [value]=\"ans.AnswerFullText\">\r\n                                                            {{ ans.AnswerFullText }}\r\n                                                        </option>\r\n                                                    </select>\r\n                                                </div>\r\n                                                <!-- <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                                                    \r\n                                                    <mat-select [placeholder]=\"item.IsMandatory ? 'Required':'Optional'\"\r\n                                                        name=\"{{item.QuestionId}}\"\r\n                                                        (selectionChange)=\"onAnswerChange($event, item, testData)\"\r\n                                                        [required]=\"item.IsMandatory\" [value]=\"item.selectedAnswer\"\r\n                                                        [(ngModel)]=\"item.selectedAnswer\" [errorStateMatcher]=\"matcher\">\r\n                                                        <mat-option *ngFor=\"let ans of item.Answers\"\r\n                                                            [value]=\"ans.AnswerFullText\">\r\n                                                            {{ ans.AnswerFullText }}\r\n                                                        </mat-option>\r\n                                                    </mat-select>\r\n                                                </mat-form-field> -->\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ng-templae>\r\n                </div>\r\n            </section>\r\n            <!-- <pre>{{ orderTestsForm.value | json }}</pre> -->\r\n\r\n            <!-- old -->\r\n            <!-- <div class=\"d-flex justify-content-between flex-wrap align-items-center mb-3 \">\r\n        <ng-container *ngFor=\"let item of filteredArray\">\r\n            <div class=\"row col-12 d-flex align-items-center mb-3\" *ngIf=\"item.noteRequired\">\r\n                <div class=\"col-3 text-bold pt-2\">{{ item.TestName }}</div>\r\n                <div class=\"col-9\">\r\n                    <label class=\"pb-2\">Source</label>\r\n                    <div class=\"w-100\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                            <input type=\"text\" maxlength=\"50\" [(ngModel)]=\"item.selfNote\" matInput\r\n                                placeholder=\"Enter Source\" autocomplete=\"off\" (ngModelChange)=\"toggleBtn($event, item)\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div> -->\r\n        </div>\r\n    </div>\r\n\r\n    <p *ngIf=\"isSubmitted && !orderTestsForm.valid\" class=\"validation-message\">\r\n        Please answer all required questions.\r\n    </p>\r\n\r\n    <div *ngIf=\"section === 'moreInfo'\" class=\"modal-footer modal-part row mt-3 pt-0 justify-content-center\">\r\n        <button *ngIf=\"!editableTest\" type=\"button\" class=\"cancel-btn mr-2 cl-btn\" mat-raised-button color=\"primary\"\r\n            (click)=\"back()\">\r\n            Change/Add Panel\r\n        </button>\r\n        <button type=\"button\" class=\"cancel-btn mr-1 cl-add\" mat-raised-button color=\"primary\"\r\n            (click)=\"onCancelSubmit()\">\r\n            Cancel\r\n        </button>\r\n        <!-- <input type=\"submit\" value=\"Continue\" class=\"btn mr-2 save-change\"\r\n            [ngStyle]=\"{'background-color': orderTestsForm.valid ? '#ff6400' : 'grey'}\" mat-raised-button color=\"accent\"\r\n            [disabled]=\"!orderTestsForm.valid\"> -->\r\n        <input type=\"submit\" value=\"Continue\" class=\"btn mr-2 save-change btn-new\" mat-raised-button color=\"accent\">\r\n    </div>\r\n</form>\r\n\r\n\r\n<div *ngIf=\"section === 'testSelection'\" class=\"modal-footer row mt-3 pt-0 justify-content-center\">\r\n    <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"resetBack()\">\r\n        {{label.Cancel}}\r\n    </button>\r\n    <button type=\"button\" class=\"save-change mr-2\" id=\"nextBtn\" mat-raised-button color=\"accent\"\r\n        (click)=\"SelectedAddtest()\" (keydown.enter)=\"SelectedAddtest()\">\r\n        Next\r\n    </button>\r\n</div>\r\n\r\n<!-- <div class=\"modal-footer row mt-3 pt-0 justify-content-center\" *ngIf=\"section == 'moreInfo'\">\r\n    <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"back()\">\r\n        {{label.Back}}\r\n    </button>\r\n    <button [disabled]=\"disabledBtn\" type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n        (click)=\"SelectedAddtest()\">\r\n        {{label.Continue}}\r\n    </button>\r\n</div> -->","import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { OwnerModel } from \"../../../../models/side-filter\";\r\nimport {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroupDirective,\r\n  NgForm,\r\n  UntypedFormBuilder,\r\n  UntypedFormGroup,\r\n  ValidatorFn,\r\n  Validators,\r\n} from \"@angular/forms\";\r\nimport {\r\n  RefLabService,\r\n  DataService,\r\n  LabelService,\r\n  HeaderService,\r\n  CommonService,\r\n  UserService,\r\n} from \"../../../../services\";\r\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ConfirmationDialogService } from \"../../../../components/confirmation-dialog/confirmation-dialog.service\";\r\nimport { CreateOrderScreen } from \"../../../../models/label\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { EnmLanguage } from \"../../../../shared/constants/enum\";\r\nimport { debounceTime } from \"rxjs\";\r\nimport { PanelTestListModalComponent } from \"../../../../modules/refrence-lab/orders/panel-test-list-modal/panel-test-list-modal.component\";\r\nimport { ErrorStateMatcher } from \"@angular/material/core\";\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n\r\n  isSubmittedState;\r\n\r\n  constructor(isSubmittedState?) {\r\n    this.isSubmittedState = isSubmittedState;\r\n  }\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const isSubmitted = form && form.submitted;\r\n    return !!(control && control.invalid && (isSubmitted || typeof this.isSubmittedState != 'undefined'));\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: \"app-create-orders\",\r\n  templateUrl: \"./create-orders.component.html\",\r\n  styleUrls: [\"./create-orders.component.css\"],\r\n  providers: [DatePipe],\r\n})\r\nexport class CreateOrdersComponent implements OnInit, OnDestroy {\r\n  public ownerDetailsForm: UntypedFormGroup;\r\n  selectedBusinessId =\r\n    localStorage.businessGuid != undefined &&\r\n      localStorage.businessGuid != null &&\r\n      localStorage.businessGuid != \"\"\r\n      ? parseInt(localStorage.businessGuid)\r\n      : 0;\r\n  public loginUserId: number =\r\n    localStorage.authDetails != undefined\r\n      ? JSON.parse(localStorage.authDetails).Id\r\n      : 0;\r\n  genderData: any;\r\n  SpeciesList: any;\r\n  ownerpopupTitle: string;\r\n  public SearchTestName = \"Search by Test Name\";\r\n  searchText: any;\r\n  TypeNotes: any = \"\";\r\n  NotesReceived: any;\r\n  DoctorList: any;\r\n  DoctorID: any;\r\n  filterClassData: any;\r\n  filterMenuData: any;\r\n  SelectedFav = false;\r\n  SelectedClass: any;\r\n  selectedMenu: any;\r\n  patientOwnerList: any;\r\n  states: any;\r\n  AutoField: any;\r\n\r\n  chekFinal: any;\r\n\r\n  selectedArray: any = [];\r\n  filteredArray: any = [];\r\n  typeTextField: any;\r\n  updatedTextField: any;\r\n  GlobalSelectData: any = [];\r\n  UpdatedNotes: any = [];\r\n  selectedRow: any = [];\r\n  OrderTestData: any[] = [];\r\n  filterDatafor: any = [];\r\n  conditionalData: any = [];\r\n  selectedNotesData: any;\r\n  selPatient: any;\r\n  today = new Date();\r\n  ownerdetails: any;\r\n  section = \"testSelection\";\r\n  disabledBtn = true;\r\n  public breedList: any[] = [];\r\n  title = \"autocomplete\";\r\n\r\n  filteredOptions: any = [];\r\n\r\n  petForm: UntypedFormGroup;\r\n  selectedTest: { Code: any; Notes: any };\r\n  finalArray: any[] = [];\r\n  public menuSelected: \"\";\r\n  finaPatientArray: any = [];\r\n  selectedRefID: any;\r\n  addorderDetailRes: any = [];\r\n  petOwnerDetails: any = [];\r\n  petOwnerDet: any;\r\n  public ApiCalled = false;\r\n\r\n  public label: CreateOrderScreen;\r\n\r\n  public patientId = \"\";\r\n  filterId: any;\r\n  public isViewDOSPrice: boolean;\r\n  date: any;\r\n  classSelected: \"\";\r\n  public selectedfav: any;\r\n  public p_id: any;\r\n  public new_patient_id: string;\r\n  public notePattern = `[A-Za-z0-9.,'\"?/ ]`;\r\n\r\n  public selectedBreed = null;\r\n  isOrderFormSubmitted = false;\r\n  matcher = new MyErrorStateMatcher();\r\n  constructor(\r\n    private fb: UntypedFormBuilder,\r\n    public refLabService: RefLabService,\r\n    public userService: UserService,\r\n    public labelService: LabelService,\r\n    public headerService: HeaderService,\r\n    private modalService: NgbModal,\r\n    public commonService: CommonService,\r\n    public dataService: DataService,\r\n    public confirmationDialogService: ConfirmationDialogService,\r\n    public datepipe: DatePipe,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    this.labelService.getCreateOrderScreenLabels();\r\n    this.label = this.labelService.createOrderScreen;\r\n    this.isViewDOSPrice =\r\n      this.dataService.appData.authDetails[\"IsViewDOSPrice\"];\r\n\r\n    // this.selectedArray = this.dataService.pageState['selectedOrderTestList'];\r\n    this.dataService.page.subscribe((data) => {\r\n      if (data[\"filterDatafor\"]) {\r\n        this.filterDatafor = data[\"filterDatafor\"];\r\n        this.selectedArray = data[\"selectedArray\"];\r\n        // this.selectedArray = data['filteredArray'];\r\n        // this.selectedArray = this.filterDatafor.filter(ele => ele.isChecked);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.ownerDetailsForm = this.createFormGroup(new OwnerModel());\r\n    this.p_id = this.route.snapshot.queryParamMap.get(\"id\");\r\n    if (this.p_id) {\r\n      this.patientId = this.p_id;\r\n      this.ApiCalled = true;\r\n    }\r\n    this.getPatientOwnerDDLList();\r\n    this.initForm();\r\n    // this.getorderTest();\r\n    // this.getDosfilter();\r\n    // this.getBreedList(1212);\r\n    this.getUserSetting();\r\n    this.GetOrderDDLList();\r\n    //this.getFilterDDLDetails();\r\n    this.setDefault();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dataService.pageState[\"filterDatafor\"] = [];\r\n    this.dataService.pageState[\"filteredArray\"] = [];\r\n    this.dataService.pageState[\"selectedArray\"] = [];\r\n    this.dataService.page.next(this.dataService.pageState);\r\n  }\r\n\r\n  openPanelTestListModal(editableTest?) {\r\n    const modalRef = this.modalService.open(PanelTestListModalComponent, {\r\n      size: \"xl\",\r\n      scrollable: true,\r\n      backdrop: \"static\",\r\n    });\r\n    modalRef.result.then((result) => {\r\n      console.log(result);\r\n    });\r\n    modalRef.componentInstance.headerText = \"Select Tests\";\r\n    modalRef.componentInstance.ownerpopupTitle = \"Select Tests\";\r\n    modalRef.componentInstance.selectedArray = this.selectedArray;\r\n    modalRef.componentInstance.prevSelectedArray = JSON.parse(\r\n      JSON.stringify(this.selectedArray)\r\n    );\r\n    modalRef.componentInstance.editableTest = editableTest;\r\n  }\r\n\r\n  public getUserSetting() {\r\n    this.userService\r\n      .getUserSettingDetails(\r\n        this.headerService.loginUserGuid,\r\n        localStorage.businessGuid\r\n      )\r\n      .subscribe((data) => {\r\n        this.selectedRefID = data.ResponseData;\r\n      });\r\n  }\r\n  public cancelOwnerDetails() {\r\n    this.ownerDetailsForm.reset();\r\n    this.modalService.dismissAll();\r\n  }\r\n\r\n  itemDisplayFn(item) {\r\n    let str = \"\";\r\n    if (item.OwnerName != undefined) {\r\n      if (item.PatientId) str += item.PatientId + \", \";\r\n      if (item.PatientFirstName) str += item.PatientFirstName;\r\n      if (item.PatientLastName) str += \" \" + item.PatientLastName;\r\n      if (item.OwnerName) str += \", \" + item.OwnerName;\r\n      if (item.Species) str += \", \" + item.Species;\r\n      if (item.Breed) str += \", \" + item.Breed;\r\n      if (item.Gender) str += \", \" + item.Gender;\r\n      if (item.Age) str += \", \" + item.Age;\r\n      if (item.LastResultDate) str += \", \" + item.LastResultDate;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  initForm() {\r\n    this.petForm = this.fb.group({\r\n      selOwner: [\"\", [this.forbiddenNameValidator()]],\r\n      Doctorid: [\"\", Validators.required],\r\n    });\r\n    this.petForm\r\n      .get(\"selOwner\")\r\n      .valueChanges.pipe(debounceTime(1000))\r\n      .subscribe((response) => {\r\n        this.selPatient = response;\r\n        if (typeof response == \"string\") {\r\n          this.filterData(response);\r\n        }\r\n      });\r\n  }\r\n\r\n  forbiddenNameValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n      return (control.value && typeof control.value == 'object') ? null : { 'noSelection': { value: control.value } };\r\n    };\r\n  }\r\n\r\n  filterData(enteredData) {\r\n    this.filteredOptions = [];\r\n    const length = Object.keys(enteredData).length;\r\n    if (length >= 3) {\r\n      this.getPatientOwnerDDLList(enteredData);\r\n    }\r\n  }\r\n\r\n  public searchPetDetails(search) {\r\n    const length = Object.keys(search).length;\r\n    if (length == 1 || length == 2) {\r\n      this.getPatientOwnerDDLList(search);\r\n    }\r\n  }\r\n\r\n  // somethingChanged(checked) {\r\n  // console.log(checked, 'chekFinal');\r\n  // }\r\n  /**\r\n   * Use for Future Vaildation Require\r\n   * Validators.pattern(\"^[A-Za-z0-9.,'?/][A-Za-z0-9.,'?/ ]{0,50}\")\r\n   * Not Allow Whitespace First and Last Charc -> Validators.pattern(/^(?:.*)?$/)\r\n   * Validators.pattern(/^\\S(?:.*\\S)?$/)\r\n   */\r\n\r\n  public createFormGroup(dataItem: any): UntypedFormGroup {\r\n    return this.fb.group({\r\n      BusinessGuid: localStorage.businessGuid,\r\n      OwnerLastName: [\r\n        dataItem.OwnerLastName,\r\n        Validators.pattern(/^(?:.*)?$/),\r\n      ],\r\n      OwnerFirstName: [\r\n        dataItem.OwnerFirstName,\r\n        Validators.pattern(/^(?:.*)?$/),\r\n      ],\r\n      PatientFirstName: [\r\n        dataItem.PatientFirstName,\r\n        Validators.compose([\r\n          Validators.maxLength(50),\r\n          Validators.pattern(/^(?:.*)?$/),\r\n        ]),\r\n      ],\r\n      PatientLastName: [\r\n        dataItem.PatientLastName,\r\n        Validators.compose([\r\n          Validators.maxLength(50),\r\n          Validators.pattern(/^(?:.*)?$/),\r\n        ]),\r\n      ],\r\n      GenderId: [dataItem.GenderId, Validators.maxLength(50)],\r\n      DOB: [dataItem.DOB, Validators.required],\r\n      SpeciesId: [dataItem.SpeciesId, Validators.required],\r\n      // BreedId: [dataItem.BreedId, Validators.compose([Validators.required, Validators.pattern(\"^[A-Za-z0-9.,'?/][A-Za-z0-9-.,'?/ ]{0,50}\")])],\r\n      BreedId: [dataItem.BreedId, Validators.compose([Validators.required])],\r\n      PatientId: [dataItem.PatientId, Validators.maxLength(50)],\r\n      pmspatientId: [\r\n        dataItem.PMSPatientId,\r\n        Validators.pattern(\"^[a-zA-Z0-9 -]+$\"),\r\n      ],\r\n    });\r\n  }\r\n  public OwnerDetails(targetModal) {\r\n    this.ownerpopupTitle = \"Pet & Owner Details\";\r\n    this.ownerDetailsForm.patchValue({ PatientId: this.patientId });\r\n    this.modalService.open(targetModal, {\r\n      windowClass: \"my-Owner\",\r\n      backdrop: \"static\",\r\n      keyboard: false,\r\n    });\r\n  }\r\n  public AddTest(TestModal) {\r\n    this.ownerpopupTitle = \"Select Tests\";\r\n    this.section = \"testSelection\";\r\n    this.filteredArray = this.selectedArray;\r\n    // this.getorderTest();\r\n    this.modalService.open(TestModal, {\r\n      windowClass: \"my-Test\",\r\n      backdrop: \"static\",\r\n      keyboard: false,\r\n    });\r\n  }\r\n  /**  note icon for edit */\r\n  public additionalNotes(AddNotes, test) {\r\n    this.selectedNotesData = test;\r\n    this.selectedArray.map((item) => {\r\n      if (item.TestId == test.TestId) {\r\n        this.UpdatedNotes = test.selfNote;\r\n      }\r\n    });\r\n    this.ownerpopupTitle = test.TestName + \" Add Source\";\r\n    this.modalService.open(AddNotes, {\r\n      windowClass: \"my-Note\",\r\n      backdrop: \"static\",\r\n      keyboard: false,\r\n    });\r\n  }\r\n\r\n  // public clearSearchField() {\r\n  //   this.searchText = \"\";\r\n  //   this.filterDatafor = this.OrderTestData.map((a) => ({ ...a }));\r\n  //   if (this.selectedArray.length) {\r\n  //     this.selectedArray.forEach((x) => {\r\n  //       this.selectedArray.forEach((x) => {\r\n  //         const item = this.filterDatafor.find(\r\n  //           (y) => y.OrderCode == x.OrderCode\r\n  //         );\r\n  //         if (item) {\r\n  //           item.isChecked = true;\r\n  //           item.selfNote = x.selfNote;\r\n  //         }\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  get f() {\r\n    return this.ownerDetailsForm.controls, this.petForm.controls;\r\n  }\r\n\r\n  public addOwnerDetails() {\r\n    this.ownerDetailsForm.patchValue({\r\n      OwnerLastName: this.ownerDetailsForm.get(\"OwnerLastName\").value?.trim(),\r\n      OwnerFirstName:\r\n        this.ownerDetailsForm.controls[\"OwnerFirstName\"].value?.trim(),\r\n      PatientFirstName: this.ownerDetailsForm\r\n        .get(\"PatientFirstName\")\r\n        .value?.trim(),\r\n      PatientLastName:\r\n        this.ownerDetailsForm.controls[\"PatientLastName\"].value?.trim(),\r\n      BreedId: \r\n        this.ownerDetailsForm.controls[\"BreedId\"].value?.trim(),\r\n      pmspatientId:\r\n        this.ownerDetailsForm.controls[\"pmspatientId\"].value?.trim()?this.ownerDetailsForm.controls[\"pmspatientId\"].value?.trim():null\r\n    });\r\n    if (!this.ownerDetailsForm.valid) {\r\n      for (const i in this.ownerDetailsForm.controls)\r\n        this.ownerDetailsForm.controls[i].markAsTouched();\r\n      const msg = \"Please enter all required fields\";\r\n      this.confirmationDialogService\r\n        .confirm(\"\", msg, \"OK\", \"Cancel\", \"sm\", true, false)\r\n        .then(() => {\r\n          //something\r\n        });\r\n      return;\r\n    } else {\r\n      if (this.ownerDetailsForm.get(\"BusinessGuid\").value == null) {\r\n        this.ownerDetailsForm.patchValue({\r\n          BusinessGuid: localStorage.businessGuid,\r\n        });\r\n      }\r\n      \r\n      const req = { ...this.ownerDetailsForm.value, ...{ UserGuid: this.dataService.appData.authDetails['UserGuid'] } }\r\n      //console.log(this.ownerDetailsForm.value)\r\n      this.refLabService\r\n        .addPatientDetail(req)\r\n        .subscribe(\r\n          (data) => {\r\n            if (data.StatusCode == 302) {\r\n              this.ownerDetailsForm.patchValue({ pmspatientId: null });\r\n              this.confirmationDialogService.confirm(\r\n                \"\",\r\n                \"PIMS Patient ID already exist!\",\r\n                \"OK\",\r\n                \"Cancel\",\r\n                \"sm\",\r\n                true,\r\n                false\r\n              );\r\n              return;\r\n            }\r\n            this.new_patient_id = data.ResponseData;\r\n            this.filterId = this.ownerDetailsForm.get(\"PatientId\").value;\r\n            this.getPatientOwnerDDLList(data.ResponseData);\r\n            this.modalService.dismissAll();\r\n            this.ownerDetailsForm.reset();\r\n            this.ApiCalled = true;\r\n          },\r\n          (err) => {\r\n            console.log(JSON.stringify(err));\r\n          }\r\n        );\r\n    }\r\n  }\r\n  public GetOrderDDLList() {\r\n    const langId = EnmLanguage.English;\r\n    this.refLabService\r\n      .getOrderFilterDDLList(localStorage.businessGuid, langId)\r\n      .subscribe((data) => {\r\n        this.DoctorList = data.ResponseData.DoctorList;\r\n        this.genderData = data.ResponseData.GenderList;\r\n        this.SpeciesList = data.ResponseData.SpeciesList;\r\n      });\r\n  }\r\n\r\n  public getFilterDDLDetails() {\r\n    const langId = EnmLanguage.English;\r\n    this.commonService.getFilterDDLDetails(langId).subscribe((data) => {\r\n      this.genderData = data.ResponseData.GenderList;\r\n      this.SpeciesList = data.ResponseData.SpeciesList;\r\n    });\r\n  }\r\n\r\n  // public getDosfilter() {\r\n  //   this.commonService.GetDOSFilterdetails().subscribe((data) => {\r\n  //     this.filterClassData = data.ResponseData.Class;\r\n  //     this.filterMenuData = data.ResponseData.Menu;\r\n  //   });\r\n  // }\r\n\r\n  // public getorderTest() {\r\n  //\r\n  //   let Test = {\r\n  //     SearchText:\r\n  //       (this.SearchTestName !== \"Search by Test Name\" && this.searchText) ||\r\n  //       \"\",\r\n  //     SearchTestName:\r\n  //       (this.SearchTestName === \"Search by Test Name\" && this.searchText) ||\r\n  //       \"\",\r\n  //     ClassName: this.SelectedClass,\r\n  //     Menu: this.selectedMenu,\r\n  //     IsOrder: true,\r\n  //     UserGuid: this.headerService.loginUserGuid,\r\n  //     IsFavourite: this.SelectedFav,\r\n  //   };\r\n  //   this.refLabService.getOrderTestList(Test).subscribe((data) => {\r\n  //     this.OrderTestData = data.ResponseData.TestDetail;\r\n  //     this.filterDatafor = this.OrderTestData;\r\n\r\n  //     if (this.filteredArray.length) {\r\n  //       this.filteredArray.forEach((x) => {\r\n  //         const item = this.filterDatafor.find(\r\n  //           (y) => y.OrderCode == x.OrderCode\r\n  //         );\r\n  //         if (item) {\r\n  //           item.isChecked = true;\r\n  //           item.selfNote = x.selfNote;\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // public updateFilterArray(event, order) {\r\n  //   if (event.checked) {\r\n  //     this.filteredArray.push(order);\r\n  //   } else {\r\n  //     const idx = this.filteredArray.findIndex((x) => x.TestId == order.TestId);\r\n  //     this.filteredArray.splice(idx, 1);\r\n  //   }\r\n  //   let nextBtn = document.getElementById(\"nextBtn\");\r\n  //   if (nextBtn) {\r\n  //     nextBtn.focus();\r\n  //   }\r\n  // }\r\n\r\n  // public SelectedAddtest() {\r\n  //   //this.filteredArray = this.filterDatafor.filter(item => item.isChecked == true);\r\n  //   const filteredArray = this.filteredArray.filter((x) => {\r\n  //     if (this.refLabService.moreInfoReqFor.indexOf(x.OrderCode) !== -1) {\r\n  //       x.noteRequired = true;\r\n  //       return true;\r\n  //     }\r\n  //   });\r\n  //   if (this.filteredArray.length) {\r\n  //     if (this.section == \"testSelection\" && filteredArray.length) {\r\n  //       this.section = \"moreInfo\";\r\n  //       this.ownerpopupTitle = \"More information required\";\r\n  //       // this.toggleBtn();\r\n  //       return;\r\n  //     }\r\n  //     this.selectedArray = this.filteredArray;\r\n  //     this.searchText = \"\";\r\n  //     this.selectedMenu = \"\";\r\n  //     this.SelectedClass = \"\";\r\n  //     this.SelectedFav = false;\r\n  //     this.modalService.dismissAll();\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * back\r\n   */\r\n  // public back() {\r\n  //   this.section = \"testSelection\";\r\n  //   this.ownerpopupTitle = \"Select Tests\";\r\n  // }\r\n\r\n  // public resetBack() {\r\n  //   this.section = \"testSelection\";\r\n  //   this.ownerpopupTitle = \"Select Tests\";\r\n  //   this.searchText = \"\";\r\n  //   this.selectedMenu = \"\";\r\n  //   this.SelectedClass = \"\";\r\n  //   this.SelectedFav = false;\r\n  //   this.modalService.dismissAll();\r\n  // }\r\n\r\n  /**\r\n   * toggleBtn\r\n   */\r\n  // public toggleBtn(val: any = null, item: any = null) {\r\n  //   if (item) item.selfNote = val;\r\n  //   const reqItems = this.filteredArray.filter((x) => {\r\n  //     if (x.noteRequired) {\r\n  //       return !x.selfNote;\r\n  //     }\r\n  //   });\r\n  //   this.disabledBtn = reqItems.length > 0;\r\n  // }\r\n\r\n  setClickedRow(test, i) {\r\n    this.selectedRow = i;\r\n  }\r\n  change(test) {\r\n    test.selfNote = this.UpdatedNotes;\r\n  }\r\n  public notesUpdate() {\r\n    this.selectedArray.map((item) => {\r\n      if (item.TestId == this.selectedNotesData.TestId) {\r\n        this.UpdatedNotes = this.checkScriptTag(this.UpdatedNotes);\r\n        item.selfNote = this.UpdatedNotes;\r\n        return item;\r\n      }\r\n    });\r\n    this.modalService.dismissAll();\r\n  }\r\n  public CancelNotes(test) {\r\n    // this.selectedArray = this.selectedArray.filter(item => item.TestId !== test.TestId);\r\n    this.filterDatafor.forEach((item) => {\r\n      if (item.TestId == test.TestId) {\r\n        item.isChecked = false;\r\n      }\r\n    });\r\n\r\n    // const idx = this.filteredArray.findIndex((x) => x.TestId == test.TestId);\r\n    // this.filteredArray.splice(idx, 1);\r\n\r\n    const idx = this.selectedArray.findIndex((x) => x.TestId == test.TestId);\r\n    this.selectedArray.splice(idx, 1);\r\n    debugger\r\n    this.dataService.pageState[\"filterDatafor\"] = this.filterDatafor;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n  }\r\n\r\n  public getPatientOwnerDDLList(searchStr?) {\r\n    let searchStrArr, findStr;\r\n    if (searchStr) {\r\n      searchStrArr = searchStr.split(\",\");\r\n      searchStr = searchStrArr[0];\r\n      findStr = searchStrArr[1];\r\n    }\r\n    const params = {\r\n      BusinessGuid: localStorage.businessGuid,\r\n      Filter: searchStr ? searchStr : this.patientId,\r\n    };\r\n    this.refLabService.PatientOwnerDDLList(params).subscribe(\r\n      (data) => {\r\n        this.patientId = data.ResponseData.PatientId;\r\n\r\n        //COMMENTED IN SPRINT 2.8.5 DUE TO API CHANGE\r\n        this.patientOwnerList =\r\n          params.Filter == this.p_id\r\n            ? data.ResponseData.PatientOwner.filter((el) => {\r\n              if (el.PatientId == this.p_id) return el;\r\n            })\r\n            : data.ResponseData.PatientOwner;\r\n        this.filteredOptions =\r\n          params.Filter == this.p_id\r\n            ? data.ResponseData.PatientOwner.filter((el) => {\r\n              if (el.PatientId == this.p_id) return el;\r\n            })\r\n            : data.ResponseData.PatientOwner;\r\n\r\n        // if (data.ResponseData.PatientOwner.length > 1) {\r\n        // this.petOwnerDetails = data.ResponseData.PatientOwner.filter(\r\n        // (x) => x.ZDXPatientId == findStr\r\n        // );\r\n        // } else {\r\n        // this.petOwnerDetails = data.ResponseData.PatientOwner[0];\r\n        // }\r\n\r\n        if (this.ApiCalled == true) {\r\n          let patientIdx = -1;\r\n          //let lastItem = null\r\n          if (findStr) {\r\n            patientIdx = this.patientOwnerList.findIndex(\r\n              (x) => x.ZDXPatientId == findStr\r\n            );\r\n          }\r\n          const [lastItem] = findStr\r\n            ? this.patientOwnerList.splice(patientIdx, 1)\r\n            : this.patientOwnerList.slice(-1);\r\n          this.petOwnerDetails = lastItem;\r\n          this.petOwnerDet = this.petOwnerDetails;\r\n          this.ownerdetails = this.petOwnerDet.OwnerName;\r\n          this.petForm.get(\"selOwner\").setValue(this.petOwnerDetails);\r\n          this.itemDisplayFn(this.itemDisplayFn);\r\n          this.ApiCalled = false;\r\n        }\r\n      },\r\n      (err) => {\r\n        console.log(JSON.stringify(err));\r\n      }\r\n    );\r\n  }\r\n\r\n  public downloadMainfest() {\r\n    this.refLabService\r\n      .downloadableMainfest(\r\n        this.addorderDetailRes.ResponseData,\r\n        this.dataService.appData.authDetails[\"BusinessGuid\"]\r\n      )\r\n      .subscribe(\r\n        (res) => {\r\n          const blob = new Blob([res], { type: \"application/pdf\" });\r\n          const objectURL = window.URL.createObjectURL(blob);\r\n          const a = document.createElement(\"a\");\r\n          a.href = objectURL;\r\n          a.target = \"_blank\";\r\n          a.click();\r\n        },\r\n        (err) => {\r\n          console.log(JSON.stringify(err));\r\n        }\r\n      );\r\n  }\r\n\r\n  checkScriptTag(str) {\r\n    if (str) {\r\n      // let rgx =/(<([^>]+)>)/ig;\r\n      const rgx = /[^A-Za-z0-9.,'\"?/ ]/gi;\r\n      str = str.replace(rgx, \"\").replace(/ +/g, \" \");\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public AddOrderDetails(cmtNotes) {\r\n    if (cmtNotes) {\r\n      cmtNotes = this.checkScriptTag(cmtNotes);\r\n      this.TypeNotes = cmtNotes;\r\n    }\r\n    this.petForm.patchValue({\r\n      Doctorid: this.selectedRefID.SelectedRefLabProviderId,\r\n    });\r\n    this.isOrderFormSubmitted = true;\r\n    this.matcher = new MyErrorStateMatcher(true);\r\n    if (this.petForm.controls.selOwner.invalid) {\r\n      this.petForm.controls.selOwner.setValue('')\r\n      return\r\n    }\r\n    if (!this.petForm.valid || !this.selPatient || typeof this.selPatient === \"string\") {\r\n      return;\r\n    }\r\n\r\n    this.finalArray = [];\r\n    this.selectedArray.forEach((o) => {\r\n      if (o.selectedQA && !this.finalArray.find(x => x.Code === o.selectedQA.Code)) {\r\n        this.finalArray.push(o.selectedQA);\r\n      } else {\r\n        if (!this.finalArray.find(x => x.Code === o.OrderCode)) {\r\n          this.finalArray.push({ Code: o.OrderCode });\r\n        }\r\n      }\r\n    });\r\n\r\n    this.finaPatientArray = {\r\n      patientId: this.selPatient.ZDXPatientId,\r\n      OwnerFirstName: this.selPatient.OwnerFirstName,\r\n      OwnerLastName: this.selPatient.OwnerLastName,\r\n      firstname: this.selPatient.PatientFirstName,\r\n      lastname: this.selPatient.PatientLastName,\r\n      gender: this.selPatient.Gender,\r\n      birthday: this.selPatient.DOB,\r\n      species: this.selPatient.Species,\r\n      breed: this.selPatient.Breed,\r\n    };\r\n    const obj = {\r\n      DoctorId: this.selectedRefID.SelectedRefLabProviderId,\r\n      BusinessGuid: this.dataService.appData.authDetails[\"BusinessGuid\"],\r\n      Patient: this.finaPatientArray,\r\n      Tests: this.finalArray,\r\n      Notes: cmtNotes,\r\n    };\r\n\r\n    if (this.finalArray.length && this.selPatient != \"\") {\r\n      this.refLabService.addOrderDetail(obj).subscribe(\r\n        (data) => {\r\n          this.addorderDetailRes = data;\r\n          if (data.StatusCode == \"200\") {\r\n            this.confirmationDialogService\r\n              .confirm(\r\n                \"\",\r\n                `Order ${this.addorderDetailRes.ResponseData} has been submitted successfully. Please use the button below to print the Requisition Form for inclusion with order specimens.`,\r\n                \"View Requisition Form\",\r\n                \"Cancel\",\r\n                \"lg\",\r\n                true,\r\n                true\r\n              )\r\n              .then((confirmed) => {\r\n                if (confirmed) {\r\n                  this.downloadMainfest();\r\n                }\r\n                if (this.p_id) {\r\n                  this.commonService.goBack();\r\n                } else {\r\n                  this.router.navigate([\"/refLab/orders\"], {\r\n                    queryParams: { refresh: true },\r\n                  });\r\n                }\r\n                this.headerService.getNotification(\r\n                  this.labelService.selectedLanguage,\r\n                  true\r\n                );\r\n              });\r\n          } else {\r\n            const respErrorMessage =\r\n              \"Connection error. Try again later. If issue persists, please contact Reference Lab Customer Service at 888-965-9652 or referencelabsupport@zoetis.com.\";\r\n            this.confirmationDialogService\r\n              .confirm(\r\n                \"\",\r\n                respErrorMessage,\r\n                \"Dismiss\",\r\n                this.labelService.dsUserProfileScreen.Cancel,\r\n                \"sm\",\r\n                true,\r\n                false\r\n              )\r\n              .then(() => {\r\n                //write somthing code.\r\n              })\r\n              .catch(() => {\r\n                //code\r\n              });\r\n          }\r\n        },\r\n        (err) => {\r\n          console.log(JSON.stringify(err));\r\n        }\r\n      );\r\n    } else {\r\n      return this.petForm.invalid;\r\n    }\r\n  }\r\n  // onSelect(selectedItem: any) {\r\n  //   // this.filterDatafor.map(data => {\r\n  //   //   if (data.TestId == selectedItem.TestId) {\r\n  //   //     if (data.isChecked) {\r\n  //   //       data.isChecked = true;\r\n  //   //     }\r\n  //   //     else {\r\n  //   //       data.isChecked = false;\r\n  //   //     }\r\n  //   //     return data\r\n  //   //   }\r\n  //   // })\r\n  //   selectedItem.isChecked = !!selectedItem.isChecked;\r\n  // }\r\n\r\n  public onSpeciesChange(event) {\r\n    this.getBreedList(event.target.value);\r\n  }\r\n\r\n  public getBreedList(speciesId) {\r\n    if (!speciesId) {\r\n      this.breedList = [];\r\n      return;\r\n    }\r\n    const langId = EnmLanguage.English;\r\n    this.refLabService.getBreedListBySpeciesId(speciesId, langId).subscribe(\r\n      (res) => {\r\n        this.ownerDetailsForm.patchValue({ BreedId: \"\" });\r\n        this.breedList = res.ResponseData;\r\n        // this.breedList = [{ Id: \"null\", Name: \"Select Breed\", selected: true }].concat(this.breedList);\r\n        console.log(this.breedList);\r\n      },\r\n      (err) => {\r\n        console.log(JSON.stringify(err));\r\n        this.commonService.showCommonToastrError();\r\n      }\r\n    );\r\n  }\r\n\r\n  // applyFilter(selected: string, selectedclass) {\r\n  // let filterData = [];\r\n  // this.filterDatafor = this.OrderTestData.filter(item => {\r\n  //   if (item.TestName.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n  //     return true;\r\n  //   } else if (item.OrderCode.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n  //     return true;\r\n  //   }\r\n  //   else if (item.Component.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n  //     return true;\r\n  //   }\r\n  //   return false;\r\n  // });\r\n  // }\r\n\r\n  onTypeChange() {\r\n    if (\r\n      this.searchText != null &&\r\n      this.searchText[this.searchText.length - 1] != \" \"\r\n    ) {\r\n      // this.onDataSort(null);\r\n      // this.getDosTestData();\r\n    }\r\n  }\r\n\r\n  public onChange(Menu) {\r\n    this.menuSelected = Menu;\r\n    if (\r\n      this.selectedfav != false &&\r\n      this.classSelected != \"\" &&\r\n      this.menuSelected != \"\"\r\n    ) {\r\n      this.filterDatafor = this.OrderTestData.filter(\r\n        (x) =>\r\n          x.IsFavourite &&\r\n          x.Class == this.classSelected &&\r\n          x.Menu == this.menuSelected\r\n      );\r\n    } else {\r\n      if (this.classSelected != \"\" && this.menuSelected != \"\") {\r\n        this.filterDatafor = this.OrderTestData.filter(\r\n          (x) => x.Class == this.classSelected && x.Menu == this.menuSelected\r\n        );\r\n      } else {\r\n        if (this.selectedfav != false && this.menuSelected != \"\") {\r\n          this.filterDatafor = this.OrderTestData.filter(\r\n            (x) => x.IsFavourite && x.Menu == this.menuSelected\r\n          );\r\n        } else {\r\n          if (this.menuSelected != \"\") {\r\n            this.filterDatafor = this.OrderTestData.filter(\r\n              (x) => x.Menu.toLowerCase() == Menu.toLowerCase()\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public onChangeClass(cls) {\r\n    this.classSelected = cls;\r\n    if (\r\n      this.selectedfav != false &&\r\n      this.menuSelected != \"\" &&\r\n      this.classSelected != \"\"\r\n    ) {\r\n      this.filterDatafor = this.OrderTestData.filter(\r\n        (x) =>\r\n          x.IsFavourite &&\r\n          x.Menu == this.menuSelected &&\r\n          x.Class == this.classSelected\r\n      );\r\n    } else {\r\n      if (this.menuSelected != \"\" && this.classSelected != \"\") {\r\n        this.filterDatafor = this.OrderTestData.filter(\r\n          (x) => x.Menu == this.menuSelected && x.Class == cls\r\n        );\r\n      } else {\r\n        if (this.selectedfav != false && this.classSelected != \"\") {\r\n          this.filterDatafor = this.OrderTestData.filter(\r\n            (x) => x.IsFavourite && x.Class == this.classSelected\r\n          );\r\n        } else {\r\n          if (this.classSelected != \"\") {\r\n            this.filterDatafor = this.OrderTestData.filter(\r\n              (x) => x.Class.toLowerCase() == cls.toLowerCase()\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public onChangeFav(fav) {\r\n    this.selectedfav = fav;\r\n    if (\r\n      this.menuSelected != \"\" &&\r\n      this.classSelected != \"\" &&\r\n      this.selectedfav != false\r\n    ) {\r\n      this.filterDatafor = this.OrderTestData.filter(\r\n        (x) =>\r\n          x.Menu == this.menuSelected &&\r\n          x.Class == this.classSelected &&\r\n          x.IsFavourite\r\n      );\r\n    } else {\r\n      if (this.classSelected != \"\" && fav != false) {\r\n        this.filterDatafor = this.OrderTestData.filter(\r\n          (x) => x.Class == this.classSelected && x.IsFavourite\r\n        );\r\n      } else {\r\n        if (this.selectedfav == true) {\r\n          this.filterDatafor = this.OrderTestData.filter((x) => x.IsFavourite);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public dataFetch() {\r\n    this.ownerDetailsForm\r\n      .get(\"PatientLastName\")\r\n      .setValue(this.ownerDetailsForm.get(\"OwnerLastName\").value);\r\n  }\r\n\r\n  // public clearAll() {\r\n  //   this.searchText = \"\";\r\n  //   this.selectedMenu = \"\";\r\n  //   this.SelectedClass = \"\";\r\n  //   this.menuSelected = \"\";\r\n  //   this.SelectedFav = false;\r\n  //   this.filterDatafor = this.OrderTestData.map((a) => ({ ...a }));\r\n  //   this.filterDatafor.map((data) => {\r\n  //     data.isChecked = false;\r\n  //   });\r\n  //   this.setDefault();\r\n  //   // this.getorderTest();\r\n  // }\r\n\r\n  public ownerpetDdlDetails(item) {\r\n    let ownerpetvalue = \"\";\r\n    if (item.PatientId) {\r\n      ownerpetvalue += item.PatientId + \", \";\r\n    }\r\n    if (item.PatientName) {\r\n      ownerpetvalue += item.PatientName + \", \";\r\n    }\r\n    if (item.OwnerName) {\r\n      ownerpetvalue += item.OwnerName + \", \";\r\n    }\r\n    if (item.Species) {\r\n      ownerpetvalue += item.Species + \", \";\r\n    }\r\n    if (item.Breed) {\r\n      ownerpetvalue += item.Breed + \", \";\r\n    }\r\n    if (item.Gender) {\r\n      ownerpetvalue += item.Gender + \", \";\r\n    }\r\n    if (item.Age) {\r\n      ownerpetvalue += item.Age + \", \";\r\n    }\r\n    if (item.LastResultDate) {\r\n      ownerpetvalue += item.LastResultDate + \", \";\r\n    }\r\n    ownerpetvalue = ownerpetvalue.trim();\r\n    if (ownerpetvalue != \"\") {\r\n      return ownerpetvalue.substring(0, ownerpetvalue.length - 1);\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  public setDefault() {\r\n    this.menuSelected = \"\";\r\n    this.classSelected = \"\";\r\n    this.selectedfav = \"\";\r\n  }\r\n\r\n  public nav_Back() {\r\n    if (this.p_id) {\r\n      this.commonService.goBack();\r\n    } else {\r\n      this.router.navigate([\"/refLab/orders\"]);\r\n    }\r\n  }\r\n\r\n  // public getorderTest1(forceApiCall: boolean = false) {\r\n  //   let dosfields = {\r\n  //     IsOrder: true,\r\n  //     UserGuid: this.headerService.loginUserGuid,\r\n  //     SearchText:\r\n  //       (this.SearchTestName !== \"Search by Test Name\" && this.searchText) ||\r\n  //       \"\",\r\n  //     SearchTestName:\r\n  //       (this.SearchTestName === \"Search by Test Name\" && this.searchText) ||\r\n  //       \"\",\r\n  //     Menu: this.selectedMenu,\r\n  //     ClassName: this.SelectedClass,\r\n  //     IsFavourite: this.SelectedFav,\r\n  //   };\r\n\r\n  //   //if (forceApiCall || searchable || this.dataService.appData.dosCnf.dosDoRefresh || this.dataService.appData.dosCnf.dosData.length === -1) {\r\n  //   this.commonService.GetDOSTestdata(dosfields).subscribe((data) => {\r\n  //     this.OrderTestData = data.ResponseData.TestDetail;\r\n  //     this.filterDatafor = this.OrderTestData.map((a) => ({ ...a }));\r\n  //     this.filterDatafor.forEach((data) => {\r\n  //       data.isChecked = false;\r\n  //       data.selfNote = \"\";\r\n  //     });\r\n  //   });\r\n  // }\r\n}\r\n","<mat-drawer-container class=\"example-container1 \" hasBackdrop=\"true\" id=\"full_page_temp\">\r\n  <div class=\"example-sidenav-content w-100 sidefilter dashboard\">\r\n    <div class=\"left-block1\">\r\n      <mat-card class=\"p-0\">\r\n        <div class=\"mt-0\">\r\n\r\n          <div class=\"mt-2 mb-2 d-flex justify-content-between align-items-center w-100\">\r\n            <div class=\"d-flex justify-content-between  align-items-center w-100 toprow\">\r\n              <span class=\"d-flex justify-content-between head1 align-items-center text-center w-100\">\r\n                <h5 class=\"text-center mt-4 mb-4  w-100\">Create a New Reference Lab Order</h5>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between  pl-3 pb-3 align-items-center toprow\">\r\n            <div class=\"head1 d-flex justify-content-between align-items-center w-100\">\r\n              <span class=\"d-flex justify-content-between align-items-center w-100\" style=\"margin-top: -78px;\">\r\n                <a class=\"backlink\" (click)=\"commonService.goBack()\">Back</a>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex flex-wrap\">\r\n            <div class=\"col d-flex flex-column colpart\">\r\n              <form [formGroup]=\"petForm\" class=\"w-100\">\r\n                <label class=\"{{ isOrderFormSubmitted && petForm.controls.Doctorid.hasError('required') ? 'mat-error' : '' }}\"> {{label.DoctorID}}<sup>*</sup> </label>\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-90\" *ngIf=\"selectedRefID\">\r\n                  <mat-select [placeholder]=\"label.SelectDoctorID\" [(ngModel)]=\"selectedRefID.SelectedRefLabProviderId\"\r\n                    formControlName=\"Doctorid\" required [errorStateMatcher]=\"matcher\">\r\n                    <mat-option class=\"formselect\" *ngFor=\"let doctor of DoctorList\" [value]=\"doctor.Id\">\r\n                      {{doctor.FirstName}} {{doctor.LastName}} ({{doctor.Id}})\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  \r\n                </mat-form-field>\r\n                <mat-error *ngIf=\"isOrderFormSubmitted && petForm.controls.Doctorid.hasError('required')\" class=\"orderErr\">\r\n                  Please select a provider.\r\n                </mat-error>\r\n              </form>\r\n            </div>\r\n\r\n            <!-- <div class=\"col d-flex flex-column\">\r\n              <label> Pet & Owner Details</label>\r\n\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-90\">\r\n                  <mat-select placeholder=\"\">\r\n                    <mat-select-filter [(array)]=\"patientOwnerList\"\r\n                      (filteredReturn)=\"patientOwnerList.OwnerName =$event\"></mat-select-filter>\r\n                    <mat-option *ngFor=\"let item of patientOwnerList\" [value]=\"item.OwnerName\">\r\n                      {{item.OwnerName}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                </mat-form-field>\r\n                <span><img src=\"../../../assets/img/add-button.png \" (click)=\"OwnerDetails(petModal)\"></span>\r\n              </div>\r\n            </div> -->\r\n            <div class=\"col d-flex flex-column\">\r\n              <label class=\"{{ isOrderFormSubmitted && petForm.controls.selOwner.hasError('noSelection') ? 'mat-error' : '' }}\"> {{label.PetOwnerDetails}}<sup>*</sup></label>\r\n\r\n              <div class=\"d-flex justify-content-between align-items-start\">\r\n                <form [formGroup]=\"petForm\" class=\"w-100 mr-3\">\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                    <!-- [(ngModel)]=\"petOwnerDet\" ownerdetails  Search pet [placeholder]=\"ownerdetails\"-->\r\n                    <input type=\"text\" class=\"max-reach\" matInput formControlName=\"selOwner\" [matAutocomplete]=\"auto\"\r\n                      [placeholder]=\"label.SearchPetOwner\" (keyup.enter)=\"searchPetDetails($event.target.value)\"\r\n                      [errorStateMatcher]=\"matcher\" />\r\n                    <!-- <span>{{ownerdetails}}</span> -->\r\n                    <!-- [displayWith]=\"itemDisplayFn\" -->\r\n                    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"itemDisplayFn\" class=\"matpoint\">\r\n                      <div class=\"frow\">\r\n                        <span class=\"d-flex flex-column option_outer pl-3 pt-3 frstTxt\">Patient ID, Patient Name, Owner\r\n                          Name, Species, Breed, Sex, Age, Last Result</span>\r\n                        <hr class=\"liner\">\r\n                      </div>\r\n                      <mat-option *ngFor=\"let item of filteredOptions\" [value]=\"item\">\r\n                        <div class=\"d-flex flex-column option_outer\">\r\n                          <!-- {{item.OwnerName}}-{{item.PatientName}}  -->\r\n                          <div class=\"Rtxt\">\r\n                            <!-- {{item.PatientId}}<span *ngIf=\"item.PatientId\">,</span> {{item.PatientFirstName}}<span *ngIf=\"item.PatientLastName\"> {{item.PatientLastName}}</span><span *ngIf=\"item.PatientFirstName\">,</span> {{item.OwnerName}}<span *ngIf=\"item.OwnerName\">,</span> {{item.Species}}<span *ngIf=\"item.Species\">,</span> {{item.Breed}}\r\n                              <span *ngIf=\"item.Breed\">,</span> {{item.Gender}}<ng-container *ngIf=\"item.Gender\">,</ng-container> {{item.Age}}<span *ngIf=\"item.Age\">,</span> {{item.LastResultDate}} -->\r\n                            {{ownerpetDdlDetails(item)}}\r\n                          </div>\r\n                          <!-- <div class=\"subtext\">{{item.Species}}, {{item.Breed}}, {{item.PatientName}} {{item.OwnerName}}-->\r\n                          <!-- <span *ngIf=\"item.Breed\">,</span> -->\r\n                          <!-- {{item.Gender}}, {{item.Age}}, {{item.DOBStr}} -->\r\n                          <!-- </div> -->\r\n                          <!-- <span *ngIf=\"item.Age\">,</span>{{item.DOBStr}} -->\r\n                          <!-- {{item.PatientId}} -->\r\n                        </div>\r\n                      </mat-option>\r\n\r\n                    </mat-autocomplete>\r\n\r\n                    \r\n                  </mat-form-field>\r\n                  <mat-error *ngIf=\"isOrderFormSubmitted && petForm.controls.selOwner.hasError('noSelection')\" class=\"orderErr\">\r\n                    Please select a patient from the list or add a new patient.\r\n                  </mat-error>\r\n                  <p><span class=\"placeh\">(Type in a minimum of 3 characters to initiate automated search)</span></p>\r\n                  <div\r\n                    *ngIf=\"petForm.controls['selOwner'].invalid && (petForm.controls['selOwner'].dirty || petForm.controls['selOwner'].touched)\"\r\n                    class=\"blankTxt alert\">\r\n                    <div *ngIf=\"petForm.controls['selOwner'].value.length < 3 && petForm.controls['selOwner'].errors.noSelection\" class=\"errtxt\">\r\n                      At least 3 characters is needed to search for a patient\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n                <span class=\"pt-1 pimg\">\r\n                  <button type=\"button\" class=\"add-patient\" mat-stroked-button (click)=\"OwnerDetails(petModal)\">Create a\r\n                    new patient</button>\r\n                  <!-- <img src=\"../../../assets/img/add-button.png \" alt=\"\" (click)=\"OwnerDetails(petModal)\"> -->\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div class=\"col my-3 mt-4 d-flex align-items-center\">\r\n            <label class=\"mr-3 {{ isOrderFormSubmitted && !selectedArray.length ? 'mat-error' : 'head1' }}\">\r\n              {{label.Selectpanelstests}}<sup>*</sup>\r\n            </label>\r\n            \r\n            <!-- <img src=\"../../../assets/img/add-button.png \" alt=\"\" (click)=\"AddTest(TestModal)\"> -->\r\n            <img src=\"../../../assets/img/add-button.png \" alt=\"\" (click)=\"openPanelTestListModal()\">\r\n          </div>\r\n          \r\n          <div class=\"d-flex justify-content-start pl-3 flex-wrap addpanel\">\r\n            <mat-error *ngIf=\"isOrderFormSubmitted && !selectedArray.length\" class=\"orderErr\">\r\n              Please select a panel/test.\r\n            </mat-error>\r\n            <span class=\"mr-3 test_text mb-3\" *ngFor=\"let test of selectedArray\">\r\n              {{test.TestName}}\r\n              <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"openPanelTestListModal(test)\">\r\n                <mat-icon *ngIf=\"test.haseQuestion\" class=\"material-icons-outlined\" style=\"color: #007bff;\">\r\n                  create\r\n                </mat-icon>\r\n              </a>\r\n              <img src=\"../../../assets/img/cancel@2x.png\" alt=\"\" width=\"11\" (click)=\"CancelNotes(test)\">\r\n              <!-- <a href=\"javascript:void(0)\" class=\"docIcon\" *ngIf=\"test.selfNote; else elseBlock\"\r\n                (click)=\"additionalNotes(AddNotes,test)\">\r\n                <img class=\"mx-4\" src=\"../../../assets/img/document-icon.png\" width=\"16\">\r\n                <mat-icon aria-hidden=\"false\" style=\"color:#f26323\"> description </mat-icon>\r\n              </a> -->\r\n              <!-- <ng-template #elseBlock>\r\n                <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"openPanelTestListModal(test)\"\r\n                  style=\"width: 100px; color: #007bff;\">\r\n                  <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"additionalNotes(AddNotes,test)\"\r\n                  style=\"width: 100px; color: #007bff;\">\r\n                  <img class=\"mx-4\" src=\"../../../assets/img/edit@3x.png\" width=\"16\">\r\n                  <mat-icon class=\"material-icons-outlined\" style=\"color: #007bff;\">\r\n                    create\r\n                  </mat-icon> \r\n                  <span> Source </span>\r\n                </a>\r\n                <img class=\"mx-4\" src=\"../../../assets/img/edit@3x.png\" width=\"16\">\r\n              </ng-template> -->\r\n              <!-- <img src=\"../../../assets/img/cancel@2x.png\" alt=\"\" width=\"11\" (click)=\"CancelNotes(test)\"> -->\r\n            </span>\r\n\r\n          </div>\r\n\r\n\r\n          <div class=\"d-flex col-sm-12 mt-3\">\r\n            <div class=\"col p-0 pl-1\">\r\n              <div class=\"d-flex align-items-top nobtm-pad   flex-column\">\r\n                <label for=\"\" class=\"mb-0\">\r\n                  Case History and Additional Case Information\r\n                  <!-- {{label.AdditionalNotes}}  -->\r\n                </label>\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                  <!-- [(ngModel)]=\"TypeNotes\"  [innerHtml]=\"TypeNotes\"-->\r\n                  <textarea [(ngModel)]=\"TypeNotes\" matInput maxlength=\"500\" [placeholder]=\"label.TypeHere\"\r\n                    rows=\"10\"></textarea>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div class=\"modal-footer row mt-5 justify-content-center\">\r\n            <!-- routerLink=\"/refLab/orders\" -->\r\n            <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"nav_Back()\">\r\n              {{label.Cancel}}\r\n            </button>\r\n            <button type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n              (click)=\"AddOrderDetails(TypeNotes)\">\r\n              {{label.Submit}}\r\n            </button>\r\n          </div>\r\n\r\n          <!-- ==========Modal-1===========#petModal==================== -->\r\n\r\n          <ng-template #petModal let-modal backdrop=\"static\">\r\n\r\n            <div class=\"modal-header text-center\">\r\n              <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n                {{ ownerpopupTitle }}\r\n              </h4>\r\n            </div>\r\n\r\n            <div class=\"modal-body\">\r\n              <form class=\"touchedValidation\" [formGroup]=\"ownerDetailsForm\">\r\n                <div>\r\n                  <h6><strong> {{label.OwnerDetails}} </strong></h6>\r\n                  <div class=\"d-flex flex-wrap\">\r\n                    <div class=\"col mcol\"> <label for=\"\">{{label.OwnerLastName}}<sup>*</sup></label>\r\n                      <div class=\"d-flex\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <input type=\"text\" matInput autocomplete=\"off\" [placeholder]=\"label.EnterOwnerLastName\"\r\n                            formControlName=\"OwnerLastName\" maxlength=\"50\" (blur)=\"dataFetch()\" required />\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\"><label for=\"\"> {{label.OwnerFirstName}}<sup>*</sup></label>\r\n                      <div class=\" d-flex\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <input type=\"text\" matInput [placeholder]=\"label.EnterOwnerFirstName\"\r\n                            formControlName=\"OwnerFirstName\" maxlength=\"50\" required />\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\"></div>\r\n\r\n                  </div>\r\n\r\n\r\n                  <h6><strong> {{label.PatientInformation}}</strong></h6>\r\n\r\n                  <div class=\"d-flex flex-wrap\">\r\n                    <div class=\"col mcol\">\r\n\r\n                      <div>\r\n                        <label>{{label.PatientFirstName}}<sup>*</sup></label>\r\n                        <div class=\" d-flex\">\r\n                          <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                            <input type=\"text\" matInput autocomplete=\"off\" [placeholder]=\"label.EnterPatientFirstName\"\r\n                              formControlName=\"PatientFirstName\" maxlength=\"50\" required />\r\n                          </mat-form-field>\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                    </div>\r\n                    <div class=\"col mcol\">\r\n                      <label>{{label.PatientLastName}}<sup>*</sup></label>\r\n                      <div class=\"  d-flex\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <input type=\"text\" matInput autocomplete=\"off\" [placeholder]=\"label.EnterPatientLastName\"\r\n                            formControlName=\"PatientLastName\" maxlength=\"50\" required />\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\">\r\n                      <label> {{label.Sex}}<sup>*</sup></label>\r\n                      <div class=\"d-flex\">\r\n                        <select class=\"custom-select\" required formControlName=\"GenderId\" placeholder=\"Select Breed\">\r\n                          <option selected disabled hidden value=\"null\">Select Sex</option>\r\n                          <option class=\"formselect\" *ngFor=\"let gender of genderData\" [value]=\"gender.Id\">\r\n                            {{gender.Name}}\r\n                          </option>\r\n                        </select>\r\n                        <!-- <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <mat-select required formControlName=\"GenderId\" [placeholder]=\"label.SelectSex\">\r\n                            <mat-option class=\"formselect\" *ngFor=\"let gender of genderData\" [value]=\"gender.Id\">\r\n                              {{gender.Name}}\r\n                            </mat-option>\r\n                          </mat-select>\r\n                        </mat-form-field> -->\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol bday\">\r\n                      <label>{{label.Birthday}}<sup>*</sup></label>\r\n                      <div class=\"d-flex\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <input [max]=\"today\" matInput formControlName=\"DOB\" [matDatepicker]=\"pickerFrom\"\r\n                            (focus)=\"pickerFrom.open()\" readonly />\r\n                          <mat-datepicker-toggle matSuffix [for]=\"pickerFrom\"></mat-datepicker-toggle>\r\n                          <mat-datepicker #pickerFrom></mat-datepicker>\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\">\r\n                      <label>{{label.Species}} <sup>*</sup></label>\r\n                      <div class=\"form-group\">\r\n                        <select class=\"form-control custom-select\" required formControlName=\"SpeciesId\"\r\n                          [placeholder]=\"label.SelectSpecies\" (change)=\"onSpeciesChange($event)\">\r\n                          <option selected disabled hidden value=\"null\">Select Species</option>\r\n                          <option class=\"formselect\" *ngFor=\"let species of SpeciesList\" [value]=\"species.Name\">\r\n                            {{species.Name}}\r\n                          </option>\r\n                        </select>\r\n                        <!-- <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <mat-select required formControlName=\"SpeciesId\" [placeholder]=\"label.SelectSpecies\"\r\n                            (selectionChange)=\"onSpeciesChange($event.value)\">\r\n                            <mat-option class=\"formselect\" value=\"\">\r\n                              Select Species\r\n                            </mat-option>\r\n                            <mat-option class=\"formselect\" *ngFor=\"let species of SpeciesList\" [value]=\"species.Code\">\r\n                              {{species.Name}}\r\n                            </mat-option>\r\n                          </mat-select>\r\n                        </mat-form-field> -->\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\">\r\n\r\n                      <label>{{label.Breed}}<sup>*</sup> </label>\r\n                      <div class=\" d-flex\">\r\n                        <ng-container *ngIf=\"breedList.length>0\">\r\n                          <select class=\"custom-select\" required formControlName=\"BreedId\">\r\n                            <!-- <option selected disabled hidden [value]=\"null\">Select Breed</option> -->\r\n                            <option class=\"formselect\" *ngFor=\"let breed of breedList\" [value]=\"breed.Id\">\r\n                              {{breed.Name}}\r\n                            </option>\r\n                          </select>\r\n                        </ng-container>\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\" *ngIf=\"breedList.length===0\">\r\n                          <!-- <ng-container *ngIf=\"breedList.length>0\">\r\n                            <mat-select required formControlName=\"BreedId\" [placeholder]=\"label.SelectBreed\">\r\n                              <mat-option *ngFor=\"let breed of breedList\" [value]=\"breed.Name\">\r\n                                {{breed.Name}}\r\n                              </mat-option>\r\n                            </mat-select>\r\n                          </ng-container> -->\r\n\r\n                          <ng-container *ngIf=\"breedList.length===0\">\r\n                            <input type=\"text\" matInput autocomplete=\"off\" [placeholder]=\"label.EnterBreed\"\r\n                              formControlName=\"BreedId\" maxlength=\"50\" required />\r\n                          </ng-container>\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <!-- <div class=\"col\">\r\n                      <div class=\"d-flex justify-content-between  \">\r\n\r\n                        <label>{{label.PatientID}}</label>\r\n                        <div class=\"tooltip\">\r\n                          <img src=\"../../../assets/img/info@2x.png\" alt=\"\" width=\"15\" />\r\n                          <div class=\"tooltiptext\">\r\n                            <div class=\"tool_text p-3\">\r\n                              <div>\r\n\r\n                                <div> {{label.PatientIDInfo}} </div>\r\n                              </div>\r\n\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\" d-flex\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                          <input type=\"text\" matInput autocomplete=\"off\" placeholder=\"Zdxpet10001\"\r\n                            formControlName=\"PatientId\" maxlength=\"10\" [readonly]=\"true\" />\r\n                        </mat-form-field>\r\n                        <span class=\"d-none\"><img src=\"../../../assets/img/info@2x.png\" alt=\"\" /></span>\r\n                      </div>\r\n                    </div> -->\r\n                    <div class=\"col mcol\">\r\n                      <div>\r\n                        <label>{{label.Pims}}</label>\r\n                        <div class=\" d-flex\">\r\n                          <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                            <input type=\"text\" matInput autocomplete=\"off\" [placeholder]=\"label.PimsID\"\r\n                              formControlName=\"pmspatientId\" maxlength=\"20\" />\r\n                          </mat-form-field>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col mcol\"></div>\r\n                    <div class=\"col mcol\"></div>\r\n                  </div>\r\n\r\n                </div>\r\n              </form>\r\n            </div>\r\n\r\n            <div class=\"modal-footer row mt-5 justify-content-center\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\"\r\n                (click)=\"cancelOwnerDetails()\">\r\n                {{label.Cancel}}\r\n              </button>\r\n              <button type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n                (click)=\"addOwnerDetails()\">\r\n                {{label.AddUpdate}}\r\n              </button>\r\n            </div>\r\n          </ng-template>\r\n\r\n          <!-- ==========Modal-2===========#TestModal==================== -->\r\n          <ng-template #TestModal let-modal backdrop=\"static\">\r\n\r\n            <div class=\"modal-header text-center\">\r\n              <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n                {{ ownerpopupTitle }}\r\n              </h4>\r\n            </div>\r\n\r\n            <div class=\"modal-body filter_wrapper\" *ngIf=\"section === 'testSelection'\">\r\n              <div class=\"d-flex justify-content-start flex-wrap align-items-center mb-3 \">\r\n\r\n                <div class=\"asrch\" id=\"filer_by_menu\" style=\"width: 20%;\">\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"dotpart w-100\">\r\n                    <mat-select [(ngModel)]=\"SearchTestName\">\r\n                      <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search by Test Name'}\"\r\n                        value=\"Search by Test Name\">Search by Test Name </mat-option>\r\n                      <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search all fields'}\"\r\n                        value=\"Search all fields\">Search all Fields </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"asrch\" style=\"width: 25%;\">\r\n                  <mat-form-field class=\"example-form-field\" appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n\r\n                    <input [(ngModel)]=\"searchText\" matInput maxlength=\"60\" [placeholder]=\"label.Search\"\r\n                      autocomplete=\"off\" (keydown.enter)=\"getorderTest()\">\r\n                    <span matPrefix>\r\n                      <img src=\"../../../../assets/img/search-icon.png\" alt=\"search-icon\">\r\n                    </span>\r\n                    <button mat-button mat-icon-button matSuffix aria-label=\"Clear\" (click)=\"clearSearchField()\"\r\n                      *ngIf=\"searchText\">\r\n                      <mat-icon>close</mat-icon>\r\n                    </button>\r\n                  </mat-form-field>\r\n\r\n                </div>\r\n\r\n                <!-- <div class=\"asrch\" id=\"filer_by_menu\">\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                    <span\r\n                      [ngClass]=\"{dotdosskyBlue: selectedMenu == 'Blue',dotdosGreen: selectedMenu == 'Green',dotdosorange: selectedMenu == 'Orange',dotdosequine: selectedMenu == 'Equine',dotdosBlue: selectedMenu == 'AvianExotic',dotdosallother: selectedMenu == 'AllOther'}\"></span>\r\n                    <mat-select [placeholder]=\"label.FilterByMenu\" [(ngModel)]=\"selectedMenu\"\r\n                      (ngModelChange)=\"onChange($event)\">\r\n                      <mat-option class=\"formselect\" *ngFor=\"let filter of filterMenuData\" [value]=\"filter.Color\">\r\n                        <span\r\n                          [ngClass]=\"{dotdosskyBlue: filter.Color == 'Blue',dotdosGreen: filter.Color == 'Green',dotdosorange: filter.Color == 'Orange',dotdosequine: filter.Color == 'Equine',dotdosBlue: filter.Color == 'AvianExotic',dotdosallother: filter.Color == 'AllOther'}\"></span><span>{{\r\n                          filter.Name }}</span>\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                </div> -->\r\n\r\n                <div class=\"asrch\" style=\"width: 35%;\">\r\n                  <!-- filterClassData -->\r\n                  <div class=\"float-right pull-right\">\r\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"float-left w-60\">\r\n                      <mat-select [placeholder]=\"label.FilterByClass\" [(ngModel)]=\"SelectedClass\">\r\n                        <!-- <mat-option class=\"formselect\" value=\"\"> {{label.FilterByClass}}</mat-option> -->\r\n                        <mat-option class=\"formselect\" *ngFor=\"let filter of filterClassData\" [value]=\"filter.Id\">{{\r\n                          filter.Name }}\r\n                        </mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                    <div class=\"float-left w-40 mt-2 pl-2\">\r\n                      <mat-checkbox class=\"example-margin\" value=\"checked\" [(ngModel)]=\"SelectedFav\"\r\n                        (ngModelChange)=\"getorderTest()\">\r\n                        <!-- {{label.SelectFavorites}} -->\r\n                        Favorites\r\n                      </mat-checkbox>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"asearch\" style=\"width: 20%;\">\r\n                  <div class=\"del_doc col1 float-right\">\r\n                    <a class=\"clrall mr-2\" (click)=\"clearAll()\">Clear All</a>\r\n                    <button ngbAutofocus class=\"w-70 g-btn\" mat-raised-button (click)=\"getorderTest(true)\"\r\n                      style=\"order: 2\">\r\n                      Search\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n              <div class=\"d-flex flex-wrap chkbox_wrapper\">\r\n                <div class=\"d-flex align-content-start flex-wrap w-100\">\r\n                  <div class=\"w-50   del_doc del_doc1  pr-4\" *ngFor=\"let order of filterDatafor\"\r\n                    (click)=\"onSelect(order)\">\r\n                    <div class=\"mb-3 d-flex align-items-center justify-content-between w-100 \">\r\n                      <mat-checkbox (change)=\"updateFilterArray($event, order)\"\r\n                        class=\"example-margin d-flex align-items-center\" [(ngModel)]=\"order.isChecked\">\r\n                        <span\r\n                          [ngClass]=\"{dotdosskyBlue: order.Menu === 'Blue',dotdosGreen: order.Menu  === 'Green',dotdosorange: order.Menu  === 'Orange',dotdosequine: order.Menu  === 'Equine',dotdosBlue: order.Menu  === 'AvianExotic',dotdosallother: order.Menu  === 'AllOther'}\"></span><span\r\n                          class=\"chk_label\">{{order.TestName}} {{order.OrderCode}}</span>\r\n                      </mat-checkbox>\r\n\r\n                      <!-- <span><img src=\"../../../assets/img/info@2x.png\" width=\"17\" alt=\"\" /></span> -->\r\n                      <div class=\"tooltip\">\r\n                        <!-- <span class=\"tooltext\"> Tube Type Key</span> -->\r\n                        <img src=\"../../../assets/img/info@2x.png\" alt=\"\" width=\"15\" />\r\n                        <div class=\"tooltiptext\">\r\n                          <!-- <div class=\"tool_header\">\r\n                        Directory Of Services Sample Key\r\n                      </div> -->\r\n                          <div class=\"tool_text p-3\">\r\n                            <div>\r\n                              <small>Sample Requirements</small>\r\n                              <div>{{order.SampleRequirements}}</div>\r\n                            </div>\r\n                            <div>\r\n                              <small>TAT</small>\r\n                              <div>{{order.TAT}}</div>\r\n                            </div>\r\n                            <div>\r\n                              <small>Tube Type</small>\r\n                              <div *ngFor=\"let ord of order.TubeType\">{{ord.code}} {{ord.description}}</div>\r\n                            </div>\r\n                            <div *ngIf=\"isViewDOSPrice\">\r\n                              <small>Price</small>\r\n                              <div>{{order.Price}}</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"filterDatafor?.length === 0\" class=\"w-100 text-center\">\r\n                  {{label.Norecordsfound}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-body filter_wrapper\" *ngIf=\"section === 'moreInfo'\" style=\"padding: 4rem;\">\r\n              <div class=\"d-flex justify-content-between flex-wrap align-items-center mb-3 \">\r\n                <ng-container *ngFor=\"let item of selectedArray\">\r\n                  <div class=\"row col-12 d-flex align-items-center mb-3\" *ngIf=\"item.noteRequired\">\r\n                    <div class=\"col-3 text-bold pt-2\">{{ item.TestName }}</div>\r\n                    <div class=\"col-9\">\r\n                      <label class=\"pb-2\">Source</label>\r\n                      <div class=\"w-100\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                          <input type=\"text\" maxlength=\"50\" [(ngModel)]=\"item.selfNote\" matInput\r\n                            placeholder=\"Enter Source\" autocomplete=\"off\" (ngModelChange)=\"toggleBtn($event, item)\">\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer row mt-3 pt-0 justify-content-center\" *ngIf=\"section === 'testSelection'\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"resetBack()\">\r\n                {{label.Cancel}}\r\n              </button>\r\n              <button type=\"button\" class=\"save-change mr-2\" id=\"nextBtn\" mat-raised-button color=\"accent\"\r\n                (click)=\"SelectedAddtest()\" (keydown.enter)=\"SelectedAddtest()\">\r\n                Next\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"modal-footer row mt-3 pt-0 justify-content-center\" *ngIf=\"section === 'moreInfo'\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"back()\">\r\n                {{label.Back}}\r\n              </button>\r\n              <button [disabled]=\"disabledBtn\" type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n                (click)=\"SelectedAddtest()\">\r\n                {{label.Continue}}\r\n              </button>\r\n            </div>\r\n          </ng-template>\r\n\r\n          <!-- ==========Modal-3===========#AddNotes==================== -->\r\n          <ng-template #AddNotes let-modal backdrop=\"static\">\r\n\r\n            <div class=\"modal-header text-center\">\r\n              <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n                {{ ownerpopupTitle }}\r\n              </h4>\r\n            </div>\r\n\r\n            <div class=\"modal-body\">\r\n              <div class=\"col p-0 pl-1\">\r\n                <div class=\"d-flex flex-column align-items-top nobtm-pad\">\r\n                  <label for=\"\" class=\"mb-0\"> Source </label>\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                    <textarea matInput maxlength=\"50\" [(ngModel)]=\"UpdatedNotes\"></textarea>\r\n                  </mat-form-field>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer row mt-5 justify-content-center\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"modal.dismiss()\">\r\n                {{label.Cancel}}\r\n              </button>\r\n              <button ngbAutofocus type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n                (click)=\"notesUpdate()\">\r\n                {{label.AddUpdate}}\r\n              </button>\r\n            </div>\r\n          </ng-template>\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n\r\n</mat-drawer-container>","import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { CommonService, DataService, HeaderService, LabelService, PatientService, RefLabService } from '../../../../services';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ConfirmationDialogService } from '../../../../components/confirmation-dialog/confirmation-dialog.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CreateOrderScreen } from '../../../../models/label';\r\nimport { PanelTestListModalComponent } from '../../../../modules/refrence-lab/orders/panel-test-list-modal/panel-test-list-modal.component'\r\n@Component({\r\n  selector: 'app-add-orders',\r\n  templateUrl: './add-orders.component.html',\r\n  styleUrls: ['./add-orders.component.css']\r\n})\r\nexport class AddOrdersComponent implements OnInit, AfterViewInit, OnDestroy {\r\n\r\n  selectedBusinessId = (localStorage.businessGuid != undefined && localStorage.businessGuid != null && localStorage.businessGuid != \"\" ? parseInt(localStorage.businessGuid) : 0);\r\n  ownerpopupTitle: string;\r\n  public SearchTestName = 'Search by Test Name';\r\n  searchText: any;\r\n  filterDatafor: any = [];\r\n  OrderTestData: any[] = [];\r\n  filterMenuData: any;\r\n  filterClassData: any;\r\n  SelectedFav = false;\r\n  SelectedClass: any;\r\n  selectedMenu: any;\r\n  selectedArray: any = [];\r\n  filteredArray: any = [];\r\n  selectedNotesData: any;\r\n  selectedRow: any = [];\r\n  UpdatedNotes: any;\r\n  menuSelected: any;\r\n  finalArray: any[] = [];\r\n  finaPatientArray: any = [];\r\n  TypeNotes: any;\r\n  selPatient: any;\r\n  addorderDetailRes: any;\r\n  OrderPageData: any;\r\n  PanelCodeData: any;\r\n  panelOrg: any;\r\n  isOrderId: any;\r\n  patientName: any;\r\n  AccessionNumber: any;\r\n  AccessionNo: number=0;\r\n  previous: any;\r\n  public isViewDOSPrice: boolean;\r\n  classSelected: any;\r\n  selectedfav: any;\r\n  prev: string;\r\n  section = 'testSelection';\r\n  disabledBtn = true;\r\n  public label: CreateOrderScreen;\r\n  isOrderFormSubmitted = false;\r\n  constructor(\r\n    public commonService: CommonService,\r\n    public dataService: DataService,\r\n    private modalService: NgbModal,\r\n    public refLabService: RefLabService,\r\n    public confirmationDialogService: ConfirmationDialogService,\r\n    private router: Router,\r\n    public headerService: HeaderService,\r\n    public patientService: PatientService,\r\n    public route: ActivatedRoute,\r\n    public labelService: LabelService) {\r\n    this.labelService.getCreateOrderScreenLabels();\r\n    this.label = this.labelService.createOrderScreen;\r\n    this.isViewDOSPrice = this.dataService.appData.authDetails['IsViewDOSPrice'];\r\n\r\n    this.dataService.page.subscribe(data => {\r\n      if (data['filterDatafor']) {\r\n        this.filterDatafor = data['filterDatafor'];\r\n        this.selectedArray = data['selectedArray'];\r\n        // this.selectedArray = data['filteredArray'];\r\n        // this.selectedArray = this.filterDatafor.filter(ele => ele.isChecked);\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.prev = this.route.snapshot.queryParamMap.get('prev');\r\n    // this.getDosfilter();\r\n    // this.getorderTest();\r\n    this.setDefault();\r\n\r\n    if (localStorage.previousUrl == \"2\") {\r\n      this.OrderPageData = this.refLabService.dataRow;\r\n      //this.isOrderId = this.OrderPageData.OrderNumber;\r\n\r\n      if (this.OrderPageData) {\r\n        this.panelOrg = this.OrderPageData.Panels;\r\n        this.patientName = this.OrderPageData.PatientName;\r\n        // this.AccessionNumber = this.OrderPageData.AccessionNumber\r\n        // console.log(this.OrderPageData)\r\n      }\r\n\r\n    }\r\n    else {\r\n      this.patientName = this.dataService.appState.selectedResult.element?.PatientName;\r\n      console.log(this.dataService.appState)\r\n      // this.AccessionNumber = this.dataService.appState.selectedResult.element.AnalysisTypeToGetTestReslt.AccessionNumber;\r\n      //this.isOrderId = this.dataService.appState.selectedResult.element.OrderNumber;\r\n    }\r\n    this.isOrderId = localStorage.getItem('lastOrderId');\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataService.data.subscribe(data => {\r\n      this.AccessionNo = data.AccessionNumber;\r\n    })\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dataService.pageState['filterDatafor'] = [];\r\n    this.dataService.pageState['filteredArray'] = [];\r\n    this.dataService.pageState['selectedArray'] = [];\r\n    this.dataService.page.next(this.dataService.pageState);\r\n  }\r\n\r\n  openPanelTestListModal(editableTest?) {\r\n    const modalRef = this.modalService.open(PanelTestListModalComponent, {\r\n      size: 'lg',\r\n      scrollable: true,\r\n      backdrop: 'static'\r\n    });\r\n    modalRef.result.then((result) => {\r\n      console.log(result);\r\n    });\r\n    modalRef.componentInstance.headerText = 'Select Tests';\r\n    modalRef.componentInstance.ownerpopupTitle = 'Select Tests';\r\n    modalRef.componentInstance.selectedArray = this.selectedArray;\r\n    modalRef.componentInstance.prevSelectedArray = JSON.parse(JSON.stringify(this.selectedArray));\r\n    modalRef.componentInstance.editableTest = editableTest;\r\n  }\r\n\r\n  public AddTest(TestModal) {\r\n    this.ownerpopupTitle = \"Select Tests\";\r\n    this.section = 'testSelection';\r\n    this.filteredArray = this.selectedArray;\r\n    // this.getorderTest();\r\n    this.modalService.open(TestModal, {\r\n      windowClass: 'my-Test',\r\n      backdrop: 'static',\r\n      keyboard: false\r\n    });\r\n  }\r\n\r\n  // public clearSearchField() {\r\n  //   this.searchText = '';\r\n  //   this.filterDatafor = this.OrderTestData.map(a => ({ ...a }));\r\n  //   if (this.selectedArray.length) {\r\n  //     this.selectedArray.forEach(x => {\r\n  //       this.selectedArray.forEach(x => {\r\n  //         const item = this.filterDatafor.find(y => y.OrderCode == x.OrderCode);\r\n  //         if (item) {\r\n  //           item.isChecked = true;\r\n  //           item.selfNote = x.selfNote;\r\n  //         }\r\n  //       });\r\n  //     })\r\n  //   }\r\n\r\n  // }\r\n\r\n  // public getDosfilter() {\r\n  //   this.commonService.GetDOSFilterdetails().subscribe(data => {\r\n  //     this.filterClassData = data.ResponseData.Class;\r\n  //     this.filterMenuData = data.ResponseData.Menu;\r\n  //   })\r\n  // }\r\n\r\n  // public getorderTest1() {\r\n  //   let Test = {\r\n  //     SearchText: this.searchText,\r\n  //     ClassName: this.SelectedClass,\r\n  //     Menu: this.selectedMenu,\r\n  //     IsOrder: false,\r\n  //     UserGuid: this.headerService.loginUserGuid,\r\n  //     IsFavourite: this.SelectedFav\r\n  //   }\r\n  //   if (this.OrderTestData != null) {\r\n  //     this.refLabService.getOrderTestList(Test).subscribe(data => {\r\n  //       this.OrderTestData = data.ResponseData.TestDetail;\r\n  //       this.filterDatafor = this.OrderTestData.map(a => ({ ...a }));\r\n  //       this.filterDatafor.map(data => {\r\n  //         data.isChecked = false;\r\n  //         data.selfNote = \"\";\r\n  //       })\r\n  //     })\r\n\r\n  //   }\r\n\r\n  // }\r\n\r\n  public onChange(Menu) {\r\n\r\n    this.menuSelected = Menu;\r\n    if (this.selectedfav != false && this.classSelected != \"\" && this.menuSelected != \"\") {\r\n      this.filterDatafor = this.OrderTestData.filter(x => x.IsFavourite && x.Class == this.classSelected && x.Menu == this.menuSelected);\r\n    } else {\r\n      if (this.classSelected != \"\" && this.menuSelected != \"\") {\r\n        this.filterDatafor = this.OrderTestData.filter(x => x.Class == this.classSelected && x.Menu == this.menuSelected);\r\n      } else {\r\n        if (this.selectedfav != false && this.menuSelected != \"\") {\r\n          this.filterDatafor = this.OrderTestData.filter(x => x.IsFavourite && x.Menu == this.menuSelected);\r\n        } else {\r\n          if (this.menuSelected != \"\") {\r\n            this.filterDatafor = this.OrderTestData.filter(x => x.Menu.toLowerCase() == Menu.toLowerCase());\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public onChangeClass(cls) {\r\n\r\n    this.classSelected = cls;\r\n    if (this.selectedfav != false && this.menuSelected != \"\" && this.classSelected != \"\") {\r\n      this.filterDatafor = this.OrderTestData.filter(x => x.IsFavourite && x.Menu == this.menuSelected && x.Class == this.classSelected);\r\n    } else {\r\n      if (this.menuSelected != \"\" && this.classSelected != \"\") {\r\n        this.filterDatafor = this.OrderTestData.filter(x => x.Menu == this.menuSelected && x.Class == cls);\r\n      } else {\r\n        if (this.selectedfav != false && this.classSelected != \"\") {\r\n          this.filterDatafor = this.OrderTestData.filter(x => x.IsFavourite && x.Class == this.classSelected);\r\n        }\r\n        else {\r\n          if (this.classSelected != \"\") {\r\n            this.filterDatafor = this.OrderTestData.filter(x => x.Class.toLowerCase() == cls.toLowerCase());\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  public onChangeFav(fav) {\r\n\r\n    this.selectedfav = fav;\r\n    if (this.menuSelected != \"\" && this.classSelected != \"\" && this.selectedfav != false) {\r\n      this.filterDatafor = this.OrderTestData.filter(x => x.Menu == this.menuSelected && x.Class == this.classSelected && x.IsFavourite);\r\n    } else {\r\n      if (this.classSelected != \"\" && fav != false) {\r\n        this.filterDatafor = this.OrderTestData.filter(x => x.Class == this.classSelected && x.IsFavourite);\r\n      } else {\r\n        if (this.selectedfav == true) {\r\n          this.filterDatafor = this.OrderTestData.filter(x => x.IsFavourite);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // public onSelect(selectedItem: any) {\r\n\r\n  //   this.filterDatafor.map(data => {\r\n  //     if (data.TestId == selectedItem.TestId) {\r\n  //       if (data.isChecked) {\r\n  //         data.isChecked = true;\r\n  //       }\r\n  //       else {\r\n  //         data.isChecked = false;\r\n  //       }\r\n  //       return data\r\n  //     }\r\n  //   })\r\n\r\n\r\n  // }\r\n\r\n  /**  note icon for edit */\r\n  public additionalNotes(AddNotes, test) {\r\n\r\n    this.selectedNotesData = test;\r\n\r\n    this.selectedArray.map(item => {\r\n      if (item.TestId == test.TestId) {\r\n        this.UpdatedNotes = test.selfNote;\r\n        return item\r\n      }\r\n    })\r\n    this.ownerpopupTitle = test.TestName + \" Add Source\";\r\n    this.modalService.open(AddNotes, {\r\n      windowClass: 'my-Note',\r\n      backdrop: 'static',\r\n      keyboard: false\r\n    });\r\n  }\r\n\r\n  // public updateFilterArray(event, order) {\r\n  //   if (event.checked) {\r\n  //     this.filteredArray.push(order)\r\n  //   } else {\r\n  //     const idx = this.filteredArray.findIndex(x => x.TestId == order.TestId)\r\n  //     this.filteredArray.splice(idx, 1)\r\n  //   }\r\n  //   let nextBtn = document.getElementById('nextBtn');\r\n  //   if (nextBtn) {\r\n  //     nextBtn.focus();\r\n  //   }\r\n  // }\r\n\r\n  // public SelectedAddtest() {\r\n  //   //this.filteredArray = this.filterDatafor.filter(item => item.isChecked == true);\r\n  //   const filteredArray = this.filteredArray.filter(x => {\r\n  //     if (this.refLabService.moreInfoReqFor.indexOf(x.OrderCode) !== -1) {\r\n  //       x.noteRequired = true;\r\n  //       return true;\r\n  //     }\r\n  //   })\r\n  //   if (this.filteredArray.length) {\r\n  //     if (this.section == 'testSelection' && filteredArray.length) {\r\n  //       this.section = 'moreInfo';\r\n  //       this.ownerpopupTitle = 'More information required'\r\n  //       this.toggleBtn();\r\n  //       return;\r\n  //     }\r\n  //     this.selectedArray = this.filteredArray;\r\n  //     this.searchText = '';\r\n  //     this.selectedMenu = \"\";\r\n  //     this.SelectedClass = \"\";\r\n  //     this.SelectedFav = false;\r\n  //     this.modalService.dismissAll();\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * back\r\n   */\r\n  // public back() {\r\n  //   this.section = 'testSelection';\r\n  //   this.ownerpopupTitle = \"Select Tests\";\r\n  // }\r\n\r\n  // public resetBack() {\r\n  //   this.section = 'testSelection';\r\n  //   this.ownerpopupTitle = \"Select Tests\";\r\n  //   this.searchText = '';\r\n  //   this.selectedMenu = \"\";\r\n  //   this.SelectedClass = \"\";\r\n  //   this.SelectedFav = false;\r\n  //   this.modalService.dismissAll();\r\n  // }\r\n\r\n  /**\r\n   * toggleBtn\r\n   */\r\n  // public toggleBtn(val: any = null, item: any = null) {\r\n  //   if (item) item.selfNote = val;\r\n  //   const reqItems = this.filteredArray.filter(x => {\r\n  //     if (x.noteRequired) {\r\n  //       return !x.selfNote;\r\n  //     }\r\n  //   });\r\n  //   this.disabledBtn = reqItems.length > 0;\r\n\r\n  // }\r\n\r\n  // applyFilter(selected: string, selectedclass) {\r\n    // let filterData = [];\r\n    // this.filterDatafor = this.OrderTestData.filter(item => {\r\n    //   if (item.TestName.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n    //     return true;\r\n    //   } else if (item.OrderCode.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n    //     return true;\r\n    //   }\r\n    //   else if (item.Component.toString().toLowerCase().indexOf(selected.toLowerCase()) !== -1) {\r\n    //     return true;\r\n    //   }\r\n    //   return false;\r\n    // });\r\n  // }\r\n  onTypeChange() {\r\n    if (this.searchText != null && this.searchText[this.searchText.length - 1] != ' ') {\r\n      // this.onDataSort(null);\r\n      // this.getDosTestData(); \r\n    }\r\n  }\r\n\r\n  public CancelNotes(test) {\r\n    // this.selectedArray = this.selectedArray.filter(item => item.TestId !== test.TestId);\r\n    this.filterDatafor.forEach(item => {\r\n      if (item.TestId == test.TestId) {\r\n        item.isChecked = false;\r\n      }\r\n    });\r\n    // const idx = this.filteredArray.findIndex(x => x.TestId == test.TestId)\r\n    // this.filteredArray.splice(idx, 1)\r\n\r\n    const idx = this.selectedArray.findIndex((x) => x.TestId == test.TestId);\r\n    this.selectedArray.splice(idx, 1);\r\n\r\n    this.dataService.pageState['filterDatafor'] = this.filterDatafor;\r\n    this.dataService.page.next(this.dataService.pageState);\r\n  }\r\n\r\n  public notesUpdate() {\r\n    this.selectedArray.map(item => {\r\n      if (item.TestId == this.selectedNotesData.TestId) {\r\n        this.UpdatedNotes = this.checkScriptTag(this.UpdatedNotes)\r\n        item.selfNote = this.UpdatedNotes;\r\n        return item\r\n      }\r\n    })\r\n    this.modalService.dismissAll();\r\n  }\r\n\r\n  checkScriptTag(str) {\r\n    if (str) {\r\n      // let rgx =/(<([^>]+)>)/ig;\r\n      const rgx = /[^A-Za-z0-9.,'\"?/ ]/gi;\r\n      str = str.replace(rgx, \"\").replace(/ +/g, ' ');\r\n    }\r\n    return str\r\n  }\r\n\r\n  public AddOrderDetails() {\r\n\r\n    // this.finalArray = this.selectedArray.map(o => {\r\n    //   return { Code: o.OrderCode, Notes: o.selfNote };\r\n    // });\r\n\r\n    \r\n    if(!this.selectedArray.length){\r\n      this.isOrderFormSubmitted = true;\r\n      // const msg = \"Please enter all required fields\";\r\n      // this.confirmationDialogService\r\n      //     .confirm(\"\", msg, \"OK\", \"Cancel\", \"sm\", true, false);\r\n      return;\r\n    }\r\n    \r\n\r\n    this.selectedArray.forEach((o) => {\r\n      if (o.selectedQA) {\r\n        this.finalArray.push(o.selectedQA);\r\n      } else {\r\n        this.finalArray.push({ Code: o.OrderCode });\r\n      }\r\n    });\r\n\r\n    const ord = {\r\n      UserGuid: this.dataService.appData.authDetails['UserGuid'],\r\n      BusinessGuid: this.dataService.appData.authDetails['BusinessGuid'],\r\n      OrderId: this.isOrderId,\r\n      TestAdd: this.finalArray,\r\n      Comments: this.TypeNotes\r\n    }\r\n    if (this.finalArray.length) {\r\n      this.refLabService.addOrderDetailExt(ord).subscribe(data => {\r\n        if (data.StatusCode == 200) {\r\n          this.confirmationDialogService.confirm(\"\", \"Request has been submitted and is pending sample confirmation.\", \"OK\", \"Cancel\", \"sm\", true, false)\r\n            .then((confirmed) => {\r\n              if (confirmed) {\r\n                if (this.prev) this.router.navigateByUrl('/refLab/orders?refresh=true');\r\n                this.commonService.goBack();\r\n              }\r\n            })\r\n        } else {\r\n          const respErrorMessage = 'Connection error. Try again later. If issue persists, please contact Reference Lab Customer Service at 888-965-9652 or referencelabsupport@zoetis.com.';\r\n\r\n          this.confirmationDialogService.confirm(\"\", respErrorMessage, \"Dismiss\", \"Cancel\", \"sm\", true, false)\r\n        }\r\n      }, err => {\r\n        console.log(JSON.stringify(err));\r\n        const respErrorMessage = 'Connection error. Try again later. If issue persists, please contact Reference Lab Customer Service at 888-965-9652 or referencelabsupport@zoetis.com.';\r\n\r\n        this.confirmationDialogService.confirm(\"\", respErrorMessage, \"Dismiss\", \"Cancel\", \"sm\", true, false)\r\n\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  // public clearAll() {\r\n  //   this.searchText = '';\r\n  //   this.selectedMenu = \"\";\r\n  //   this.SelectedClass = \"\";\r\n  //   this.menuSelected = \"\";\r\n  //   this.SelectedFav = false;\r\n  //   this.filterDatafor = this.OrderTestData.map(a => ({ ...a }));\r\n  //   this.filterDatafor.map(data => {\r\n  //     data.isChecked = false;\r\n  //   })\r\n  //   this.setDefault();\r\n  //   // this.getorderTest();\r\n  // }\r\n\r\n  public setDefault() {\r\n    this.menuSelected = \"\";\r\n    this.classSelected = \"\";\r\n    this.selectedfav = \"\"\r\n  }\r\n\r\n  // public getorderTest() {\r\n\r\n  //   let Test = {\r\n  //     SearchText: (this.SearchTestName !== 'Search by Test Name' && this.searchText) || '',\r\n  //     SearchTestName: (this.SearchTestName === 'Search by Test Name' && this.searchText) || '',\r\n  //     ClassName: this.SelectedClass,\r\n  //     Menu: this.selectedMenu,\r\n  //     IsOrder: true,\r\n  //     UserGuid: this.headerService.loginUserGuid,\r\n  //     IsFavourite: this.SelectedFav\r\n  //   }\r\n  //   //if (this.OrderTestData != null) {\r\n  //   this.refLabService.getOrderTestList(Test).subscribe(data => {\r\n  //     this.OrderTestData = data.ResponseData.TestDetail;\r\n  //     this.filterDatafor = this.OrderTestData//.map(a => ({ ...a }));\r\n\r\n  //     if (this.filteredArray.length) {\r\n  //       this.filteredArray.forEach(x => {\r\n  //         const item = this.filterDatafor.find(y => y.OrderCode == x.OrderCode);\r\n  //         if (item) {\r\n  //           item.isChecked = true;\r\n  //           item.selfNote = x.selfNote;\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n}\r\n","<mat-drawer-container class=\"example-container1 \" hasBackdrop=\"true\" id=\"full_page_temp\">\r\n  <div class=\"example-sidenav-content w-100 sidefilter dashboard\">\r\n    <div class=\"left-block1\">\r\n      <mat-card class=\"p-0\">\r\n        <div class=\"mt-0\">\r\n\r\n          <div class=\"mt-2 mb-2 d-flex justify-content-between align-items-center w-100 deskp\">\r\n            <div class=\"d-flex justify-content-between  align-items-center w-100 toprow\">\r\n              <span class=\"d-flex justify-content-between head1 align-items-center text-center w-100\">\r\n                <h5 class=\"text-center text-primary mt-4 mb-4  w-100\">Add a panel to Accession\r\n                  <span style=\"color: black;\"> {{AccessionNo}}</span>\r\n                </h5>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between  pl-3 pb-3 align-items-center toprow\">\r\n            <div class=\"d-flex justify-content-between head1 align-items-center text-center w-100 mapp\">\r\n              <span class=\"d-flex justify-content-between align-items-center w-100\" style=\"margin-top: -78px;\">\r\n                <a class=\"backlink\" (click)=\"commonService.goBack()\" style=\"text-decoration: underline;\">Back</a>\r\n                <h5 class=\"text-center mt-4 mb-4  w-100 mobilep\">Add On Panel for {{patientName}}</h5>\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col my-3 mt-4 d-flex align-items-center\">\r\n            <label class=\"mr-3 {{ isOrderFormSubmitted && !selectedArray.length ? 'mat-error' : 'head1' }}\">\r\n              Add Panels/Tests<sup>*</sup>\r\n            </label>\r\n            <!-- <img src=\"../../../assets/img/add-button.png \" alt=\"\" (click)=\"AddTest(TestModal)\"> -->\r\n            <img src=\"../../../assets/img/add-button.png \" alt=\"\" (click)=\"openPanelTestListModal()\">\r\n          </div>\r\n\r\n          <div class=\"d-flex justify-content-start pl-3 flex-wrap addpanel\">\r\n            <mat-error *ngIf=\"isOrderFormSubmitted && !selectedArray.length\" class=\"orderErr\">\r\n              Please select a panel/test.\r\n            </mat-error>\r\n            <span class=\"mr-3 test_text mb-3\" *ngFor=\"let test of selectedArray\" (click)=\"selectedArrayRowdata(test)\">\r\n              {{test.TestName}}\r\n              <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"openPanelTestListModal(test)\"\r\n                style=\"width: 50px; color: #007bff;\">\r\n                <mat-icon *ngIf=\"test.haseQuestion\" class=\"material-icons-outlined\" style=\"color: #007bff;\">\r\n                  create\r\n                </mat-icon>\r\n              </a>\r\n              <img src=\"../../../assets/img/cancel@2x.png\" width=\"11\" alt=\"\" (click)=\"CancelNotes(test)\">\r\n\r\n              <!-- <a href=\"javascript:void(0)\" class=\"docIcon\" *ngIf=\"test.selfNote; else elseBlock\"\r\n                (click)=\"additionalNotes(AddNotes,test)\">\r\n                <mat-icon aria-hidden=\"false\" style=\"color:#f26323\"> description </mat-icon>\r\n              </a> -->\r\n              <!-- <ng-template #elseBlock>\r\n                <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"openPanelTestListModal(test)\"\r\n                  style=\"width: 100px; color: #007bff;\">\r\n                <a href=\"javascript:void(0)\" class=\"docIcon\" (click)=\"additionalNotes(AddNotes,test)\"\r\n                  style=\"width: 100px; color: #007bff;\">\r\n                  <mat-icon class=\"material-icons-outlined\" style=\"color: #007bff;\">\r\n                    create\r\n                  </mat-icon>\r\n                  <span> Source </span>\r\n                </a>\r\n              </ng-template> -->\r\n              <!-- <img src=\"../../../assets/img/cancel@2x.png\" width=\"11\" alt=\"\" (click)=\"CancelNotes(test)\"> -->\r\n            </span>\r\n          </div>\r\n\r\n          <div class=\"d-flex col-sm-12 mt-3\">\r\n            <div class=\"col p-0 pl-1\">\r\n              <div class=\"d-flex align-items-top nobtm-pad   flex-column\">\r\n                <label for=\"\" class=\"mb-0\">Case History and Additional Case Information</label>\r\n                <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                  <textarea matInput maxlength=\"500\" [(ngModel)]=\"TypeNotes\" placeholder=\"Type Here\"\r\n                    rows=\"10\"></textarea>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"modal-footer row mt-5 justify-content-center\">\r\n            <!-- <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" routerLink=\"/refLab/orders\">\r\n             Cancel\r\n            </button> -->\r\n            <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\"\r\n              (click)=\"commonService.goBack()\">\r\n              Cancel\r\n            </button>\r\n            <button type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\" (click)=\"AddOrderDetails()\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n\r\n\r\n          <ng-template #TestModal let-modal backdrop=\"static\">\r\n\r\n            <div class=\"modal-header text-center\">\r\n              <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n                {{ ownerpopupTitle }}\r\n              </h4>\r\n            </div>\r\n\r\n            <div class=\"modal-body filter_wrapper\" *ngIf=\"section === 'testSelection'\">\r\n              <!-- [formGroup]=\"ownerDetailsForm\" -->\r\n              <div class=\"d-flex justify-content-start flex-wrap align-items-center mb-3 \">\r\n\r\n                <div class=\"asrch\" id=\"filer_by_menu\" style=\"width: 20%;\">\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"dotpart w-100\">\r\n                    <mat-select [(ngModel)]=\"SearchTestName\">\r\n                      <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search by Test Name'}\"\r\n                        value=\"Search by Test Name\">Search by Test Name </mat-option>\r\n                      <mat-option [ngClass]=\"{'checkmark':SearchTestName === 'Search all fields'}\"\r\n                        value=\"Search all fields\">Search all Fields </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                </div>\r\n\r\n                <div class=\"asrch\" style=\"width: 25%;\">\r\n                  <mat-form-field class=\"example-form-field\" appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n\r\n                    <input [(ngModel)]=\"searchText\" matInput maxlength=\"60\" [placeholder]=\"label.Search\"\r\n                      autocomplete=\"off\" (keydown.enter)=\"getorderTest()\">\r\n                    <span matPrefix><img src=\"../../../../assets/img/search-icon.png\" alt=\"search-icon\"> </span>\r\n                    <button mat-button mat-icon-button matSuffix aria-label=\"Clear\" (click)=\"clearSearchField()\"\r\n                      *ngIf=\"searchText\">\r\n                      <mat-icon>close</mat-icon>\r\n                    </button>\r\n                  </mat-form-field>\r\n\r\n                </div>\r\n\r\n                <!-- <div class=\"asrch\" id=\"filer_by_menu\">\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                    <span\r\n                      [ngClass]=\"{dotdosskyBlue: selectedMenu == 'Blue',dotdosGreen: selectedMenu == 'Green',dotdosorange: selectedMenu == 'Orange',dotdosequine: selectedMenu == 'Equine',dotdosBlue: selectedMenu == 'AvianExotic',dotdosallother: selectedMenu == 'AllOther'}\"></span>\r\n                    <mat-select [placeholder]=\"label.FilterByMenu\" [(ngModel)]=\"selectedMenu\"\r\n                      (ngModelChange)=\"onChange($event)\">\r\n                      <mat-option class=\"formselect\" *ngFor=\"let filter of filterMenuData\" [value]=\"filter.Color\">\r\n                        <span\r\n                          [ngClass]=\"{dotdosskyBlue: filter.Color == 'Blue',dotdosGreen: filter.Color == 'Green',dotdosorange: filter.Color == 'Orange',dotdosequine: filter.Color == 'Equine',dotdosBlue: filter.Color == 'AvianExotic',dotdosallother: filter.Color == 'AllOther'}\"></span><span>{{\r\n                          filter.Name }}</span>\r\n                      </mat-option>\r\n                    </mat-select>\r\n                  </mat-form-field>\r\n                </div> -->\r\n\r\n                <div class=\"asrch\" style=\"width: 35%;\">\r\n                  <!-- filterClassData -->\r\n                  <div class=\"float-right pull-right\">\r\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"float-left w-60\">\r\n                      <mat-select [placeholder]=\"label.FilterByClass\" [(ngModel)]=\"SelectedClass\">\r\n                        <!-- <mat-option class=\"formselect\" value=\"\"> {{label.FilterByClass}}</mat-option> -->\r\n                        <mat-option class=\"formselect\" *ngFor=\"let filter of filterClassData\" [value]=\"filter.Id\">{{\r\n                          filter.Name }}\r\n                        </mat-option>\r\n                      </mat-select>\r\n                    </mat-form-field>\r\n                    <div class=\"float-left w-40 mt-2 pl-2\">\r\n                      <mat-checkbox class=\"example-margin\" value=\"checked\" [(ngModel)]=\"SelectedFav\"\r\n                        (ngModelChange)=\"getorderTest()\">\r\n                        <!-- {{label.SelectFavorites}} -->\r\n                        Favorites\r\n                      </mat-checkbox>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"asearch\" style=\"width: 20%;\">\r\n                  <div class=\"del_doc col1 float-right\">\r\n                    <a class=\"clrall mr-2\" (click)=\"clearAll()\">Clear All</a>\r\n                    <button ngbAutofocus class=\"w-70 g-btn\" mat-raised-button (click)=\"getorderTest(true)\"\r\n                      style=\"order: 2\">\r\n                      Search\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n              <div class=\"d-flex flex-wrap chkbox_wrapper\">\r\n                <div class=\"d-flex align-content-start flex-wrap w-100\">\r\n                  <div class=\"w-50   del_doc del_doc1  pr-4\" *ngFor=\"let order of filterDatafor\"\r\n                    (click)=\"onSelect(order)\">\r\n                    <div class=\"mb-3 d-flex align-items-center justify-content-between w-100 \">\r\n                      <mat-checkbox (change)=\"updateFilterArray($event, order)\"\r\n                        class=\"example-margin d-flex align-items-center\" [(ngModel)]=\"order.isChecked\">\r\n                        <span\r\n                          [ngClass]=\"{dotdosskyBlue: order.Menu === 'Blue',dotdosGreen: order.Menu  === 'Green',dotdosorange: order.Menu  === 'Orange',dotdosequine: order.Menu  === 'Equine',dotdosBlue: order.Menu  === 'AvianExotic',dotdosallother: order.Menu  === 'AllOther'}\"></span><span\r\n                          class=\"chk_label\">{{order.TestName}} {{order.OrderCode}}</span>\r\n                      </mat-checkbox>\r\n\r\n                      <!-- <span><img src=\"../../../assets/img/info@2x.png\" width=\"17\" alt=\"\" /></span> -->\r\n                      <div class=\"tooltip\">\r\n                        <!-- <span class=\"tooltext\"> Tube Type Key</span> -->\r\n                        <img src=\"../../../assets/img/info@2x.png\" alt=\"\" width=\"15\" />\r\n                        <div class=\"tooltiptext\">\r\n                          <!-- <div class=\"tool_header\">\r\n                        Directory Of Services Sample Key\r\n                      </div> -->\r\n                          <div class=\"tool_text p-3\">\r\n                            <div>\r\n                              <small>Sample Requirements</small>\r\n                              <div>{{order.SampleRequirements}}</div>\r\n                            </div>\r\n                            <div>\r\n                              <small>TAT</small>\r\n                              <div>{{order.TAT}}</div>\r\n                            </div>\r\n                            <div>\r\n                              <small>Tube Type</small>\r\n                              <div *ngFor=\"let ord of order.TubeType\">{{ord.code}} {{ord.description}}</div>\r\n                            </div>\r\n                            <div *ngIf=\"isViewDOSPrice\">\r\n                              <small>Price</small>\r\n                              <div>{{order.Price}}</div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"filterDatafor?.length === 0\" class=\"w-100 text-center\">\r\n                  {{label.Norecordsfound}}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-body filter_wrapper\" *ngIf=\"section === 'moreInfo'\" style=\"padding: 4rem;\">\r\n              <div class=\"d-flex justify-content-between flex-wrap align-items-center mb-3 \">\r\n                <ng-container *ngFor=\"let item of filteredArray\">\r\n                  <div class=\"row col-12 d-flex align-items-center mb-3\" *ngIf=\"item.noteRequired\">\r\n                    <div class=\"col-3 text-bold pt-2\">{{ item.TestName }}</div>\r\n                    <div class=\"col-9\">\r\n                      <label class=\"pb-2\">Source</label>\r\n                      <div class=\"w-100\">\r\n                        <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100\">\r\n                          <input type=\"text\" maxlength=\"50\" [(ngModel)]=\"item.selfNote\" matInput\r\n                            placeholder=\"Enter Source\" autocomplete=\"off\" (ngModelChange)=\"toggleBtn($event, item)\">\r\n                        </mat-form-field>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer row mt-3 pt-0 justify-content-center\" *ngIf=\"section === 'testSelection'\">\r\n\r\n\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"resetBack()\">\r\n                {{label.Cancel}}\r\n              </button>\r\n              <button type=\"button\" class=\"save-change mr-2\" id=\"nextBtn\" mat-raised-button color=\"accent\"\r\n                (click)=\"SelectedAddtest()\" (keydown.enter)=\"SelectedAddtest()\">\r\n                Next\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"modal-footer row mt-3 pt-0 justify-content-center\" *ngIf=\"section === 'moreInfo'\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"back()\">\r\n                {{label.Back}}\r\n              </button>\r\n              <button [disabled]=\"disabledBtn\" type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\"\r\n                (click)=\"SelectedAddtest()\">\r\n                {{label.Continue}}\r\n              </button>\r\n            </div>\r\n          </ng-template>\r\n\r\n          <ng-template #AddNotes let-modal backdrop=\"static\">\r\n\r\n            <div class=\"modal-header text-center\">\r\n              <h4 class=\"modal-title w-100\" id=\"modal-basic-title\">\r\n                {{ ownerpopupTitle }}\r\n              </h4>\r\n            </div>\r\n\r\n            <div class=\"modal-body\">\r\n              <div class=\"col p-0 pl-1\">\r\n                <div class=\"d-flex flex-column align-items-top nobtm-pad\">\r\n                  <label for=\"\" class=\"mb-0\"> Source </label>\r\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n                    <textarea matInput maxlength=\"50\" [(ngModel)]=\"UpdatedNotes\"></textarea>\r\n                  </mat-form-field>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer row mt-5 justify-content-center\">\r\n              <button type=\"button\" class=\"cancel-btn mr-2\" mat-raised-button color=\"primary\" (click)=\"modal.dismiss()\">\r\n                Cancel\r\n              </button>\r\n              <button type=\"button\" class=\"save-change mr-2\" mat-raised-button color=\"accent\" (click)=\"notesUpdate()\">\r\n                Add/Update\r\n              </button>\r\n            </div>\r\n          </ng-template>\r\n\r\n\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n\r\n</mat-drawer-container>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RefLabGuard, IsReflabActive } from '../../guards';\r\nimport { RefrenceLabComponent } from './refrence-lab.component';\r\nimport { OrdersComponent } from './orders/orders.component';\r\nimport { CreateOrdersComponent } from './orders/create-orders/create-orders.component';\r\nimport { AddOrdersComponent } from './orders/add-orders/add-orders.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RefrenceLabComponent,\r\n        canActivate: [RefLabGuard],\r\n        children: [\r\n            {\r\n                path: \"orders\",\r\n                component: OrdersComponent,\r\n            },\r\n            {\r\n                path: \"createOrder\",\r\n                component: CreateOrdersComponent,\r\n                canActivate: [IsReflabActive]\r\n            },\r\n            {\r\n                path: \"addOrder\",\r\n                component: AddOrdersComponent,\r\n                canActivate: [IsReflabActive]\r\n            },\r\n            // {\r\n            //     path: \"dos\",\r\n            //     component: DosComponent,\r\n            //     canActivate: [RefLabGuard]\r\n            // },\r\n            {\r\n                path: 'dos',\r\n                loadChildren: () => import('src/app/modules/dos-page/dos-page.module').then((m) => m.DosPageModule)\r\n            },\r\n            //   {\r\n            //     path: \"accession-details\",\r\n            //     component: DetailsComponent,\r\n            //     canActivate: [RefLabGuard]\r\n            // }\r\n\r\n        ]\r\n    }\r\n];\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class RoutingModule { }\r\n","import * as i0 from '@angular/core';\nimport { Pipe, Injectable, NgModule } from '@angular/core';\nclass Ng2SearchPipe {\n  /**\n     * @param items object from array\n     * @param term term's search\n     * @param excludes array of strings which will ignored during search\n     */\n  transform(items, term, excludes = []) {\n    if (!term || !items) return items;\n    return Ng2SearchPipe.filter(items, term, excludes);\n  }\n  /**\n   *\n   * @param items List of items to filter\n   * @param term  a string term to compare with every property of the list\n   * @param excludes List of keys which will be ignored during search\n   *\n   */\n  static filter(items, term, excludes) {\n    const toCompare = term.toLowerCase();\n    function checkInside(item, term) {\n      if (typeof item === \"string\" && item.toString().toLowerCase().includes(toCompare)) {\n        return true;\n      }\n      for (let property in item) {\n        if (item[property] === null || item[property] == undefined || excludes.includes(property)) {\n          continue;\n        }\n        if (typeof item[property] === 'object') {\n          if (checkInside(item[property], term)) {\n            return true;\n          }\n        } else if (item[property].toString().toLowerCase().includes(toCompare)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return items.filter(function (item) {\n      return checkInside(item, term);\n    });\n  }\n  static {\n    this.ɵfac = function Ng2SearchPipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Ng2SearchPipe)();\n    };\n  }\n  static {\n    this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"filter\",\n      type: Ng2SearchPipe,\n      pure: false,\n      standalone: true\n    });\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Ng2SearchPipe,\n      factory: Ng2SearchPipe.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Ng2SearchPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'filter',\n      pure: false,\n      standalone: true\n    }]\n  }, {\n    type: Injectable\n  }], null, null);\n})();\nclass Ng2SearchPipeModule {\n  static {\n    this.ɵfac = function Ng2SearchPipeModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || Ng2SearchPipeModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: Ng2SearchPipeModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Ng2SearchPipe],\n      exports: [Ng2SearchPipe]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipe, Ng2SearchPipeModule };\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CommonService } from '../../../services';\r\nimport { SideFilter } from '../../../models/side-filter';\r\nimport { HeaderService } from '../../../services/header.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { PatientService } from '../../../services/patient.service';\r\nimport { DashboardScreen } from '../../../models/label';\r\nimport { LabelService, DataService } from '../../../services';\r\nimport { SidefilterService } from '../../../services/sidefilter.service';\r\nimport { EnmModule } from '../../../shared/constants/enum';\r\nimport { SidemenuService } from '../../../services/sidemenu.service';\r\nimport { UntypedFormGroup, UntypedFormBuilder } from '@angular/forms';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { DosScreen } from '../../../models/label';\r\nimport { AlertMessageComponent } from '../../../components/alert-message/alert-message.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatLegacyPaginator as MatPaginator } from '@angular/material/legacy-paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';\r\n// declare const gtag: Function;\r\ndeclare const gtag: (...arg) => void;\r\n\r\n\r\n@Component({\r\n    selector: 'app-dos',\r\n    templateUrl: './dos.component.html',\r\n    styleUrls: ['./dos.component.css'],\r\n    animations: [\r\n        trigger('detailExpand', [\r\n            state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n            state('expanded', style({ height: '*' })),\r\n            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n        ]),\r\n    ],\r\n})\r\nexport class DosComponent implements OnInit {\r\n\r\n    public dsDashboardScreen = new DashboardScreen();\r\n    allRowsExpanded = false;\r\n    expandedElement: any;\r\n    isAdvSearched = false;\r\n    isNotificationSelected = false;\r\n    recordCount = 0;\r\n    selectedBusinessId = (localStorage.businessGuid != undefined && localStorage.businessGuid != null && localStorage.businessGuid != \"\" ? parseInt(localStorage.businessGuid) : 0);\r\n    filter: SideFilter;\r\n\r\n    searchValue: any;\r\n    classsValue: any;\r\n\r\n    columnsToDisplay = ['TestName', 'Class', 'SampleRequirements', 'TubeType', 'TAT', 'Price', ' '];\r\n    dataSource = new MatTableDataSource<any>();\r\n    originData: any[] = [];\r\n    dsAnalysisSource: any[] = [];\r\n\r\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n    selectedRow: any;\r\n    selectfalserow: any;\r\n    active = true;\r\n    proActive = false;\r\n    public checked = false;\r\n    filterClassData: any[] = [];\r\n    filterMenuData: any[] = [];\r\n    isChecked = false;\r\n    public CheckForm: UntypedFormGroup = new UntypedFormGroup({});\r\n    checkfavastatus: any;\r\n    favstatus: any;\r\n    defaultValue: any;\r\n    selected: any;\r\n    selectedMenu: any;\r\n    filtereddata: any[];\r\n    public userId: number = localStorage.authDetails ? JSON.parse(localStorage.authDetails).Id:undefined;\r\n    dosprice: any;\r\n    selectedColor: any;\r\n    selectedmenufor: any;\r\n    selectedmenudata: any;\r\n    selectedClassdata: any;\r\n    start = 0;\r\n    limit = 15;\r\n    end: number = this.limit + this.start;\r\n    selectedRowIndex: number = null;\r\n\r\n    public label: DosScreen;\r\n    public isViewDOSPrice: boolean;\r\n\r\n    constructor(\r\n        public commonService: CommonService,\r\n        public userService: UserService,\r\n        private fb: UntypedFormBuilder,\r\n        public sidemenuService: SidemenuService,\r\n        public headerService: HeaderService,\r\n        public patientService: PatientService,\r\n        public labelService: LabelService,\r\n        public dataService: DataService,\r\n        private modalService: NgbModal,\r\n        public sidefilterService: SidefilterService) {\r\n        this.isViewDOSPrice = this.dataService.appData.authDetails['IsViewDOSPrice']; // // == 'True' ? true : false;\r\n        this.sidemenuService.selectedModuleId = EnmModule.dos;\r\n        this.labelService.getDosScreenLabels();\r\n        this.label = this.labelService.dosScreen;\r\n\r\n        this.setDefaultFilter();\r\n        this.CheckForm = fb.group({\r\n            checkfavastatus: [null]\r\n        })\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (localStorage.getItem('alert-popup') == 'true') {\r\n            this.modalService.open(AlertMessageComponent, {\r\n                centered: true,\r\n                backdrop: 'static',\r\n                scrollable: false\r\n            });\r\n        }\r\n\r\n        this.getDosfilter();\r\n        this.getUsersettings();\r\n        this.apply(this.originData, null);\r\n\r\n    }\r\n    onTableScroll(e) {\r\n        const tableViewHeight = e.target.offsetHeight /** viewport */\r\n        const tableScrollHeight = e.target.scrollHeight /** length of all table  */\r\n        const scrollLocation = e.target.scrollTop; /**  how far user scrolled */\r\n\r\n        /** If the user has scrolled within 200px of the bottom, add more data */\r\n        const buffer = 200;\r\n        const limit = tableScrollHeight - tableViewHeight - buffer;\r\n        if (scrollLocation > limit) {\r\n            const data = this.getTableData(this.start, this.end);\r\n            this.dataSource.data = this.dataSource.data.concat(data);\r\n            this.updateIndex();\r\n        }\r\n    }\r\n    public getTableData(start, end) {\r\n        return this.originData.filter((value, index) => index >= start && index < end);\r\n    }\r\n    public updateIndex() {\r\n        this.start = this.end;\r\n        this.end = this.limit + this.start;\r\n    }\r\n    public onDataSort() {\r\n        const scrollabe = document.getElementById('dashboard-scrollabe');\r\n        scrollabe.scrollTop = 0;\r\n    }\r\n\r\n    public bindDataSource() {\r\n\r\n        this.dataSource = new MatTableDataSource<any>(this.originData);\r\n        this.updateIndex();\r\n        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;\r\n        this.dataSource.sort = this.sort;\r\n        this.recordCount = this.dataSource.data.length;\r\n        if (this.recordCount > 0 && this.isNotificationSelected) {\r\n            this.allRowsExpanded = true;\r\n            this.isNotificationSelected = false;\r\n        }\r\n        else {\r\n            this.allRowsExpanded = false;\r\n        }\r\n\r\n    }\r\n\r\n    public getDosfilter() {\r\n        this.commonService.GetDOSFilterdetails().subscribe(data => {\r\n            this.filterClassData = data.ResponseData.Class;\r\n            this.filterMenuData = data.ResponseData.Menu;\r\n        })\r\n    }\r\n    public setDefaultFilter() {\r\n        this.selected = 'Filter By Class';\r\n        this.selectedMenu = 'Filter By Menu';\r\n        this.isAdvSearched = false;\r\n    }\r\n    /** required */\r\n    public toggle() {\r\n        this.allRowsExpanded = !this.allRowsExpanded;\r\n        this.expandedElement = null;\r\n    }\r\n    // changeValue(value) {\r\n    //     //    console.log(value)\r\n    // }\r\n\r\n    public setClickedtrueRow(element) {\r\n        this.selectedRow = element;\r\n        this.dataSource.data.forEach(data => {\r\n            if (data.TestId == element.TestId) {\r\n                data.IsFavourite = !data.IsFavourite;\r\n            }\r\n        })\r\n\r\n        const fav = {\r\n            TestId: element.TestId,\r\n            UserGuid: this.headerService.loginUserGuid,\r\n            IsFavourite: element.IsFavourite\r\n        }\r\n        this.commonService.postFavourite(fav).subscribe(() => {\r\n            this.expandedElement = null;\r\n        })\r\n    }\r\n\r\n    public searchDosTestData() {\r\n        const dosfields = {\r\n            SearchText: this.searchValue,\r\n            IsOrder: false,\r\n            UserGuid: this.headerService.loginUserGuid,\r\n        }\r\n        this.commonService.GetDOSTestdata(dosfields).subscribe(data => {\r\n            this.originData = data.ResponseData;\r\n            this.bindDataSource();\r\n        }, err => {\r\n            console.log(JSON.stringify(err));\r\n            this.commonService.showCommonToastrError();\r\n        });\r\n\r\n    }\r\n\r\n    public getDosTestData() {\r\n        const dosfields = {\r\n            SearchText: this.searchValue,\r\n            ClassName: this.selectedClassdata,\r\n            Menu: this.selectedmenudata,\r\n            IsOrder: false,\r\n            UserGuid: this.headerService.loginUserGuid,\r\n            IsFavourite: this.CheckForm.controls['checkfavastatus'].value\r\n        }\r\n        this.commonService.GetDOSTestdata(dosfields).subscribe(data => {\r\n            this.originData = data.ResponseData;\r\n            this.bindDataSource();\r\n        });\r\n\r\n    }\r\n\r\n    public apply(selectedmenu, selectedClass) {\r\n        if (selectedmenu.length > 100) {\r\n            selectedmenu = this.selectedmenufor;\r\n        }\r\n        if (selectedmenu == \"Filter By Menu\") {\r\n            selectedmenu = \"\";\r\n        }\r\n        if (selectedClass == \"Filter By Class\") {\r\n            selectedClass = \"\";\r\n        }\r\n        const selectedmenuA = selectedmenu.toString();\r\n        this.selectedmenudata = selectedmenuA;\r\n        this.selectedClassdata = selectedClass;\r\n\r\n        this.getDosTestData();\r\n\r\n    }\r\n    public clraeAll() {\r\n        if (this.searchValue != undefined || this.selectedmenudata != \"\" || this.selectedClassdata != null || this.CheckForm.controls['checkfavastatus'].value != null) {\r\n            this.searchValue = undefined;\r\n            this.selectedmenudata = \"\";\r\n            this.selectedClassdata = null;\r\n            this.CheckForm.controls['checkfavastatus'].setValue(null);\r\n            this.CheckForm.reset();\r\n            this.selectedMenu = 'Filter By Menu';\r\n            this.selected = 'Filter By Class';\r\n            this.selectedmenufor = 'Filter By Menu';\r\n            this.getDosTestData();\r\n        }\r\n    }\r\n\r\n    getUsersettings() {\r\n        this.userService.getUserSettingDetails(this.headerService.loginUserGuid, localStorage.businessGuid).subscribe(data => {\r\n            this.dosprice = data.ResponseData;\r\n        });\r\n    }\r\n\r\n    public expandCard(ele) {\r\n        this.expandedElement = this.expandedElement === ele ? null : ele\r\n        gtag('event', 'Directory_of_Services', {\r\n            Total_Services_Visited: '',\r\n            Total_Unique_Services_Clicked: '',\r\n            Service_Name: ele.TestName,\r\n            Service_Class: ele.Class,\r\n            Sample_Requirements: ele.SampleRequirements,\r\n            Tube_Type: ele.TubeType,\r\n            TAT: ele['TAT'],\r\n            Price: ele.Price,\r\n            Component: ele.Component,\r\n            Notes: ele.Notes,\r\n            Methodology: ele.Methodologies,\r\n            Lab: ele.LabName,\r\n        })\r\n    }\r\n}\r\n","<mat-drawer-container class=\"example-container1\" hasBackdrop=\"true\">\r\n  <mat-drawer #drawer class=\"example-sidenav sidefilter right-filter\" mode=\"over\" position=\"end\">\r\n  </mat-drawer>\r\n\r\n  <div class=\"example-sidenav-content w-100 sidefilter dashboard\">\r\n    <div class=\"left-block\">\r\n      <mat-card class=\"p-0\">\r\n        <div class=\"mt-0\">\r\n          <div class=\"d-flex justify-content-between pt-3 pl-3 pr-3 align-items-center toprow\">\r\n            <span class=\"w-100\">\r\n              <h5 class=\"text-center m-0 head1 w-100\"> {{label.DirectoryOfServices}}</h5>\r\n            </span>\r\n            <span class=\"d-flex1 d-none\">\r\n              <span class=\"ipadfiler\">\r\n                <button type=\"button\" class=\"pr-0\" mat-button (click)=\"drawer.toggle()\">\r\n                  <img src=\"../../../assets/img/filterIcon@2x.png\" alt=\"\" />\r\n                </button>\r\n              </span>\r\n            </span>\r\n\r\n            <span class=\"d-flex align-items-center tube_type_key\">\r\n              <div class=\"tooltip\">\r\n                <span class=\"tooltext\"> {{label.TubeTypeKey}}</span>\r\n                <img src=\"../../../assets/img/info@2x.png\" alt=\"\" />\r\n                <div class=\"tooltiptext\">\r\n                  <div class=\"tool_header\">\r\n                    {{label.DirectoryOfServicesSampleKey}}\r\n                  </div>\r\n                  <div class=\"tool_text p-3\">\r\n                    <div class=\" d-flex justify-content-start align-items-center mb-2\">\r\n                      <span class=\"dot sst\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">SST</span>\r\n                        <span>Serum Separator</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"d-flex justify-content-start align-items-center mb-2\">\r\n                      <span class=\"dot rrt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">RTT</span>\r\n                        <span>Serum, No Gel</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"dot ltt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">LTT</span>\r\n                        <span>EDTA Whole Blood</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"dot btt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">BTT</span>\r\n                        <span>Citrated Blood</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"dot grntt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">GRNTT</span>\r\n                        <span>Heparinized Blood</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"dot f\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">F</span>\r\n                        <span>Feces</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"dot u\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">U</span>\r\n                        <span>Urine</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"micro msst\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">M-SST</span>\r\n                        <span>Micro Serum Separator</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"micro mrtt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">M-RTT</span>\r\n                        <span>Micro Serum, No Gel</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"micro mltt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">M-LTT </span>\r\n                        <span>Micro EDTA Whole Blood</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"\r\n                              d-flex\r\n                              justify-content-start\r\n                              align-items-center\r\n                              mb-2\r\n                            \">\r\n                      <span class=\"micro mgrntt\"></span>\r\n                      <div>\r\n                        <span class=\"abbre\">M-GRNTT</span>\r\n                        <span>Micro Heparinized Blood (Lithium)</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <span class=\"d-flex ipadfiler\">\r\n                <span class=\"ipadfiler\">\r\n                  <button type=\"button\" class=\"pr-0\" mat-button (click)=\"drawer.toggle()\">\r\n                    <img src=\"../../../assets/img/filterIcon@2x.png\" alt=\"\" />\r\n                  </button>\r\n                </span>\r\n              </span>\r\n            </span>\r\n          </div>\r\n\r\n          <div class=\"p-0 pt-2 cust-postion\">\r\n            <div>\r\n              <div class=\"example-container pt-0\">\r\n                <button class=\"closeall\" mat-raised-button (click)=\"toggle()\"\r\n                  [ngClass]=\"{ expandedall: allRowsExpanded }\">\r\n                  <!-- {{allRowsExpanded ? 'Collapse' : 'Expand'}} -->\r\n                  <img src=\"../../../assets/img/expandall.png \" alt=\"\" />\r\n                </button>\r\n                <div class=\"usermangemt\" id=\"dashboard-scrollabe\" (scroll)=\"onTableScroll($event)\">\r\n                  <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"dashboard-table\" summary=\"\"\r\n                    matSort>\r\n                    <ng-container matColumnDef=\"TestName\">\r\n                      <th mat-header-cell *matHeaderCellDef style=\"padding-left: 20px\" mat-sort-header>\r\n                        {{label.Name}}\r\n                      </th>\r\n                      <td mat-cell id=\"first_block\" *matCellDef=\"let element\" [ngClass]=\"{\r\n                                dosskyBlue: element.Menu === 'Blue',\r\n                                dosGreen: element.Menu === 'Green',\r\n                                dosorange: element.Menu === 'Orange',\r\n                                dosequine: element.Menu === 'Equine',\r\n                                dosBlue: element.Menu === 'AvianExotic',\r\n                                dosallother: element.Menu === 'AllOther'\r\n                              }\">\r\n                        <div class=\"d-flex\">\r\n                          <!-- src=\"../../../assets/img/star.png\" -->\r\n                          <span *ngIf=\"element.IsFavourite === true\" (click)=\"setClickedtrueRow(element)\"\r\n                            class=\"mr-2 star_wrapper\"><img src=\"../../../assets/img/star.png\" alt=\"star\"\r\n                              width=\"18\" /></span>\r\n                          <span *ngIf=\"element.IsFavourite === false\" (click)=\"setClickedtrueRow(element)\"\r\n                            class=\"mr-2 star_wrapper\"><img src=\"../../../assets/img/unstar.png\" alt=\"unstar\"\r\n                              width=\"18\" /></span>\r\n                          <div class=\"d-flex flex-column\">\r\n                            <span>{{ element.TestName }}</span>\r\n                            <div><span class=\"mr-1\">Test Code:</span> {{element.OrderCode}}</div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"Class\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.Class}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <span class=\"bluetext\">\r\n                          {{ element.Class }}\r\n                        </span>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"SampleRequirements\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.SampleRequirements}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        {{ element.SampleRequirements }}\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"TubeType\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.TubeType}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <ng-container *ngFor=\"let tube of element.TubeType\">\r\n                          <div class=\"d-flex flex-column\">\r\n                            <span class=\"d-flex align-items-center mb-1\">\r\n                              <span [ngClass]=\"{\r\n                                        'dot-sst': tube.code === 'SST',\r\n                                        'dot-rtt': tube.code === 'RTT',\r\n                                        'dot-urine': tube.code === 'Urine',\r\n                                        'dot-btt': tube.code === 'BTT',\r\n                                        'dot-feces': tube.code === 'Feces',\r\n                                        'dot-grntt': tube.code === 'GrnTT',\r\n                                        'dot-ltt': tube.code === 'LTT'\r\n                                      }\"></span>{{ tube.code }}</span>\r\n                            <!-- class=\"pl-4\" -->\r\n                            <!-- 'dot-urine': tube.description == 'Urine','dot-feces': tube.description == 'Feces' -->\r\n                            <!-- <span class=\"d-flex align-items-center mb-1\" [ngClass]=\"{'dot-sst': tube.description == 'SST', 'dot-rtt': tube.description == 'RTT','dot-btt': tube.description == 'BTT','dot-grntt': tube.description == 'GrnTT','dot-ltt': tube.description == 'LTT'}\">{{ tube.description }}</span> -->\r\n                          </div>\r\n                        </ng-container>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"TAT\">\r\n                      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        {{label.Tat}}\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <span class=\"tat_text\">\r\n                          {{ element.TAT }}</span>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"Price\">\r\n                      <th mat-header-cell *matHeaderCellDef>\r\n                        <span *ngIf=\"isViewDOSPrice\"> {{label.Price}} </span>\r\n                      </th>\r\n                      <td mat-cell *matCellDef=\"let element\">\r\n                        <!-- <span *ngIf=\"dosprice.IsViewDOSPrice\">\r\n                          {{ element.Price }}\r\n                        </span> -->\r\n                        <span *ngIf=\"isViewDOSPrice\">\r\n                          {{ element.Price }}\r\n                        </span>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\" \">\r\n                      <th mat-header-cell *matHeaderCellDef></th>\r\n                      <td mat-cell *matCellDef=\"let element\" id=\"arrow_block\">\r\n                        <img src=\"../../../assets/img/down-gray@2x.png\" alt=\"down-gray\" />\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"expandedDetail\">\r\n                      <td id=\"expanded_td\" mat-cell td *matCellDef=\"let element\"\r\n                        [attr.colspan]=\"columnsToDisplay.length\">\r\n                        <div class=\"example-element-detail\" [@detailExpand]=\"element === expandedElement || allRowsExpanded\r\n                                    ? 'expanded'\r\n                                    : 'collapsed'\r\n                                \">\r\n                          <div class=\"row py-0 card-block w-100\">\r\n                            <!-- <div class=\"col-sm-4\">\r\n                               Component:{{element.Component}} Notes:{{element.Notes}} Methodology: Lab:{{element.LabName}}\r\n                             </div> -->\r\n                            <div class=\"d-flex w-100\">\r\n                              <div class=\"w-100\">\r\n                                <table id=\"inner_table\" [ngClass]=\"{\r\n                                    dosskyBlue: element.Menu === 'Blue',\r\n                                    dosGreen: element.Menu === 'Green',\r\n                                    dosorange: element.Menu === 'Orange',\r\n                                    dosequine: element.Menu === 'Equine',\r\n                                    dosBlue: element.Menu === 'AvianExotic',\r\n                                    dosallother: element.Menu === 'AllOther'\r\n                                  }\" summary=\"\">\r\n                                  <tr style=\"display:none\">\r\n                                    <th></th>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td>\r\n                                      <div class=\"d-flex pr-3 flex-column two text-left pl-5 comp\">\r\n                                        <strong> {{label.Component}}:</strong>\r\n                                        <span class=\"comp_text desc_text\">\r\n                                          {{ element.Component }}\r\n                                        </span>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div class=\"d-flex pr-3 flex-column three text-left notes_block\">\r\n                                        <strong> {{label.Notes}}:</strong>\r\n                                        <span class=\"desc_text\">\r\n                                          {{ element.Notes }}\r\n                                        </span>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div class=\"d-flex pr-3 flex-column four text-left\">\r\n                                        <strong> {{label.Methodology}}:</strong>\r\n                                        <span class=\"desc_textmethodology\"\r\n                                          *ngFor=\"let meth of element.Methodologies\">{{meth.methodology}}</span>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td></td>\r\n                                    <td>\r\n                                      <div class=\"d-flex pr-3 flex-column six text-left\">\r\n                                        <strong> {{label.Lab}}:</strong>\r\n                                        <span class=\"desc_text\">\r\n                                          {{ element.LabName }}\r\n                                        </span>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td></td>\r\n                                    <td></td>\r\n                                  </tr>\r\n                                </table>\r\n\r\n                              </div>\r\n\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </td>\r\n                    </ng-container>\r\n\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay; sticky: true\"></tr>\r\n                    <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay\" class=\"example-element-row\"\r\n                      [class.example-expanded-row]=\"expandedElement === element\" (click)=\"expandCard(element)\"></tr>\r\n                    <!-- <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay\" class=\"example-element-row\"\r\n                        [class.example-expanded-row]=\"\r\n                              expandedElement === element\"></tr> -->\r\n                    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\r\n                  </table>\r\n                  <div class=\"noresult\">\r\n                    <tbody class=\"norecord\" *ngIf=\"dataSource === null || dataSource.data.length === 0\">\r\n                      <tr>\r\n                        <td>{{label.Norecordsfound}}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <div class=\"right-filter pl-0\">\r\n      <div class=\"pl-4 pr-4 do_filter_wrapper\">\r\n        <div>\r\n          <div class=\"d-flex justify-content-between mt-4\">\r\n            <span class=\"filter-head\"> {{label.Filters}}</span>\r\n            <a class=\"clrall\" (click)=\"clraeAll()\">{{label.ClearAll}}</a>\r\n          </div>\r\n          <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n            <span matPrefix (click)=\"searchDosTestData()\" style=\"cursor: pointer;\"><img\r\n                src=\"../../../../assets/img/search-icon.png\" alt=\"searchicon\"></span>\r\n            <input type=\"text\" matInput maxlength=\"20\" [(ngModel)]=\"searchValue\" placeholder=\"Search\"\r\n              (keyup.enter)=\"apply(selectedmenu.value,selectedClass.value)\" />\r\n          </mat-form-field>\r\n          <div class=\"mt-2\" id=\"filer_by_menu\">\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n              <span\r\n                [ngClass]=\"{dotdosskyBlue: selectedMenu === 'Blue',dotdosGreen: selectedMenu === 'Green',dotdosorange: selectedMenu === 'Orange',dotdosequine: selectedMenu === 'Equine',dotdosBlue: selectedMenu === 'AvianExotic',dotdosallother: selectedMenu === 'AllOther'}\"></span>\r\n              <mat-select #selectedmenu [(value)]=\"selectedMenu\">\r\n                <mat-option value=\"Filter By Menu\">{{label.FilterByMenu}}</mat-option>\r\n                <mat-option *ngFor=\"let filter of filterMenuData\" [value]=\"filter.Color\">\r\n                  <span\r\n                    [ngClass]=\"{dotdosskyBlue: filter.Color === 'Blue',dotdosGreen: filter.Color === 'Green',dotdosorange: filter.Color === 'Orange',dotdosequine: filter.Color === 'Equine',dotdosBlue: filter.Color === 'AvianExotic',dotdosallother: filter.Color === 'AllOther'}\"></span><span>{{\r\n                    filter.Name }}</span>\r\n                </mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"mt-3\">\r\n            <!-- filterClassData -->\r\n            <mat-form-field appearance=\"outline\" floatLabel=\"always\">\r\n              <mat-select #selectedClass [(value)]=\"selected\">\r\n                <mat-option value=\"Filter By Class\">{{label.FilterByClass}}</mat-option>\r\n                <mat-option *ngFor=\"let filter of filterClassData\" [value]=\"filter.Id\">{{ filter.Name }}</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"mt-3 del_doc del_do\">\r\n            <form [formGroup]=\"CheckForm\">\r\n              <div>\r\n                <!-- (click)=\"changeValue(checked)\" -->\r\n                <mat-checkbox class=\"example-margin\" formControlName=\"checkfavastatus\" value=\"checked\"> {{label.Favorites}}</mat-checkbox>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mt-3 mb-3 d-flex justify-content-center\">\r\n          <button class=\"w-25\" mat-raised-button color=\"warn\" (click)=\"apply(selectedmenu.value,selectedClass.value)\">\r\n            {{label.Apply}}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-drawer-container>","import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { DateFormats, CustomDateAdapter } from '../../shared';\r\nimport { MatModule } from '../../modules/mat-module/mat.module';\r\nimport { RoutingModule } from '../../modules/refrence-lab/routing.module';\r\nimport { HeaderModule } from '../../modules/header/header.module'\r\nimport { SideMenuModule } from '../../modules/side-menu/side-menu.module'\r\nimport { pipeModule } from '../../pipe/pipe.module';\r\nimport { Ng2SearchPipeModule } from '@ngx-maintenance/ng2-search-filter';\r\nimport { RefrenceLabComponent } from './refrence-lab.component';\r\nimport { OrdersComponent } from './orders/orders.component';\r\nimport { DosComponent } from './dos/dos.component';\r\nimport { SideFilterComponent } from './orders/side-filter/side-filter.component';\r\nimport { NoteContentComponent } from './orders/note.content.component';\r\nimport { CreateOrdersComponent } from './orders/create-orders/create-orders.component';\r\nimport { AddOrdersComponent } from './orders/add-orders/add-orders.component';\r\nimport { DosPageModule } from '../../modules/dos-page/dos-page.module';\r\nimport { MatLegacyAutocompleteModule as MatAutocompleteModule } from '@angular/material/legacy-autocomplete';\r\nimport { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\r\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\r\nimport { MatLegacySelectModule as MatSelectModule } from '@angular/material/legacy-select';\r\nimport { MatLegacyTooltipModule as MatTooltipModule } from '@angular/material/legacy-tooltip';\r\nimport { PanelTestListModalComponent } from './orders/panel-test-list-modal/panel-test-list-modal.component'\r\n@NgModule({\r\n    declarations: [\r\n        RefrenceLabComponent,\r\n        SideFilterComponent,\r\n        OrdersComponent,\r\n        NoteContentComponent,\r\n        DosComponent,\r\n        CreateOrdersComponent,\r\n        AddOrdersComponent,\r\n        PanelTestListModalComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RoutingModule,\r\n        MatModule,\r\n        NgbModule,\r\n        MatSelectModule,\r\n        HeaderModule,\r\n        SideMenuModule,\r\n        MatAutocompleteModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        Ng2SearchPipeModule,\r\n        pipeModule,\r\n        DosPageModule,\r\n        MatTooltipModule\r\n    ],\r\n    providers: [\r\n        { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },\r\n        { provide: MAT_DATE_FORMATS, useValue: DateFormats },\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]\r\n})\r\nexport class RefrenceLabModule { }\r\n"],"mappings":"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","names":["state","_c3","_c5","_c4","_c0","_c1","_c2","_c2","_c1","_c3","_c4","_c1","_c0","MyErrorStateMatcher","_c1","_c0","term","_c3","_c4","_c2","_c0","_c1"],"x_google_ignoreList":[22]}