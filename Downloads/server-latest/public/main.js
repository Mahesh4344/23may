import {
  AuthGuard,
  AuthGuardRotor,
  BusinessAdminGuard,
  ConsultantGuard,
  RefLabGuard
} from "./chunk-QTYWUAHD.js";
import {
  PdfViewerComponent,
  PdfViewerModule
} from "./chunk-EAJTA63Z.js";
import {
  CvetStorage,
  DirectivesModule,
  DisableRightClickDirective,
  DndDirective,
  FcrComponent,
  NgHttpLoaderComponent,
  NgHttpLoaderModule,
  QuillModule,
  ResultDetailsComponent,
  ResultDetailsModule,
  SpinnerVisibilityService
} from "./chunk-LOPPESSW.js";
import {
  AngularEditorModule
} from "./chunk-G6PTA6CA.js";
import {
  HeaderComponent,
  HeaderModule,
  LocalDatePipe,
  PhysicianFilterPipe,
  SideMenuComponent,
  SideMenuModule,
  pipeModule
} from "./chunk-YS4O5PGJ.js";
import "./chunk-MG4UUGQT.js";
import {
  ActivatedRoute,
  AlertMessageComponent,
  AlertService,
  AnalysisDetails,
  ApiSetting,
  ApplicationRef,
  AutoLogoutService,
  AutoRefreshService,
  BrowserAnimationsModule,
  BrowserModule,
  CommonModule,
  CommonService,
  ConfirmationDialogService,
  CreditFirstModel,
  CreditModel,
  CustomDateAdapter,
  DOCUMENT,
  DashboardScreen,
  DataService,
  DateAdapter,
  DateFormats,
  DatePipe,
  DefaultValueAccessor,
  DialogRef,
  Directive,
  DomSanitizer,
  DownloadMultipleAnalysisResult,
  EncrDecrService,
  EnmAnalysisSource,
  EnmAnalysisStatus,
  EnmCountry,
  EnmDefaultTimezone,
  EnmLanguage,
  EnmModule,
  EnmNotificationSetting,
  EnmTestType,
  EnmTitle,
  EnmUserStatus,
  EnmUserType,
  ErrorHandler,
  EventEmitter,
  ForgotScreen,
  FormControl,
  FormControlDirective,
  FormControlName,
  FormGroup,
  FormGroupDirective,
  FormsModule,
  FuseService,
  GigyaUserRegisInfo,
  HeaderService,
  Helper,
  ImageSliderComponent,
  Inject,
  Injectable,
  InjectionToken,
  Input,
  JsonPipe,
  LabelService,
  Location,
  LocationStrategy,
  LoginScreen,
  LoginSinUpIntermediate,
  MAT_DATE_FORMATS,
  MAT_DATE_LOCALE,
  MAT_LEGACY_DIALOG_DATA,
  MatAccordion,
  MatCalendar,
  MatDatepicker,
  MatDatepickerInput,
  MatDatepickerModule,
  MatDatepickerToggle,
  MatDivider,
  MatDrawer,
  MatDrawerContainer,
  MatExpansionPanel,
  MatExpansionPanelDescription,
  MatExpansionPanelHeader,
  MatExpansionPanelTitle,
  MatIcon,
  MatIconRegistry,
  MatLegacyAnchor,
  MatLegacyButton,
  MatLegacyCard,
  MatLegacyCell,
  MatLegacyCellDef,
  MatLegacyCheckbox,
  MatLegacyColumnDef,
  MatLegacyDialog,
  MatLegacyDialogActions,
  MatLegacyDialogContent,
  MatLegacyDialogRef,
  MatLegacyDialogTitle,
  MatLegacyError,
  MatLegacyFormField,
  MatLegacyHeaderCell,
  MatLegacyHeaderCellDef,
  MatLegacyHeaderRow,
  MatLegacyHeaderRowDef,
  MatLegacyInput,
  MatLegacyLabel,
  MatLegacyOption,
  MatLegacyPaginator,
  MatLegacyPrefix,
  MatLegacyRadioButton,
  MatLegacyRadioGroup,
  MatLegacyRow,
  MatLegacyRowDef,
  MatLegacySelect,
  MatLegacySlideToggle,
  MatLegacySlider,
  MatLegacySuffix,
  MatLegacyTable,
  MatLegacyTableDataSource,
  MatLegacyTooltip,
  MatModule,
  MatSort,
  MatSortHeader,
  MatTableDataSource,
  MatToolbar,
  MaxLengthValidator,
  MyMonitoringService,
  NavigationEnd,
  NavigationStart,
  NgClass,
  NgControlStatus,
  NgControlStatusGroup,
  NgForOf,
  NgForm,
  NgIf,
  NgImageSliderModule,
  NgModel,
  NgModule,
  NgSelectOption,
  NgStyle,
  NgZone,
  NgbActiveModal,
  NgbModal,
  NgbModule,
  NgbTooltip,
  Optional,
  Output,
  PatientInfo,
  PatientResultByFilter,
  PatientService,
  PendoService,
  Platform,
  ReactiveFormsModule,
  RefLabService,
  Renderer2,
  RequiredValidator,
  ResetSignal,
  ResetSignalRequest,
  Router,
  RouterLink,
  RouterLinkActive,
  RouterModule,
  RouterOutlet,
  SecurityContext,
  SelectionModel,
  SideFilter,
  SidefilterService,
  SidemenuService,
  SidenavService,
  SlicePipe,
  Subject,
  TimeZone,
  Title,
  TitleCasePipe,
  ToastrModule,
  ToastrService,
  UntypedFormBuilder,
  UntypedFormControl,
  UntypedFormGroup,
  UpperCasePipe,
  UserAuth,
  UserDetails,
  UserList,
  UserListDetails,
  UserService,
  Validators,
  animate,
  authInterceptorProviders,
  constant,
  debounceTime,
  distinctUntilChanged,
  enableProdMode,
  environment,
  first,
  platformBrowser,
  provideHttpClient,
  require_moment,
  setClassMetadata,
  state,
  style,
  switchMap,
  transition,
  trigger,
  withInterceptorsFromDi,
  withJsonpSupport,
  ɵNgNoValidate,
  ɵNgSelectMultipleOption,
  ɵsetClassDebugInfo,
  ɵɵInheritDefinitionFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassProp,
  ɵɵconditional,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵinject,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵpipeBind3,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpropertyInterpolate1,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵpureFunction6,
  ɵɵpureFunction7,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵresetView,
  ɵɵresolveWindow,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeUrl,
  ɵɵstyleProp,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtextInterpolate3,
  ɵɵtextInterpolate4,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty,
  ɵɵviewQuery
} from "./chunk-X5ZGY5K2.js";
import {
  __async,
  __commonJS,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-VTXF2OHE.js";

// node_modules/intl-tel-input/build/js/intlTelInput.js
var require_intlTelInput = __commonJS({
  "node_modules/intl-tel-input/build/js/intlTelInput.js"(exports, module2) {
    (function(factory) {
      if (typeof module2 === "object" && module2.exports) module2.exports = factory();
      else window.intlTelInput = factory();
    })(function(undefined2) {
      "use strict";
      return function() {
        var allCountries = [["Afghanistan (\u202B\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646\u202C\u200E)", "af", "93"], ["Albania (Shqip\xEBri)", "al", "355"], ["Algeria (\u202B\u0627\u0644\u062C\u0632\u0627\u0626\u0631\u202C\u200E)", "dz", "213"], ["American Samoa", "as", "1", 5, ["684"]], ["Andorra", "ad", "376"], ["Angola", "ao", "244"], ["Anguilla", "ai", "1", 6, ["264"]], ["Antigua and Barbuda", "ag", "1", 7, ["268"]], ["Argentina", "ar", "54"], ["Armenia (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)", "am", "374"], ["Aruba", "aw", "297"], ["Ascension Island", "ac", "247"], ["Australia", "au", "61", 0], ["Austria (\xD6sterreich)", "at", "43"], ["Azerbaijan (Az\u0259rbaycan)", "az", "994"], ["Bahamas", "bs", "1", 8, ["242"]], ["Bahrain (\u202B\u0627\u0644\u0628\u062D\u0631\u064A\u0646\u202C\u200E)", "bh", "973"], ["Bangladesh (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)", "bd", "880"], ["Barbados", "bb", "1", 9, ["246"]], ["Belarus (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)", "by", "375"], ["Belgium (Belgi\xEB)", "be", "32"], ["Belize", "bz", "501"], ["Benin (B\xE9nin)", "bj", "229"], ["Bermuda", "bm", "1", 10, ["441"]], ["Bhutan (\u0F60\u0F56\u0FB2\u0F74\u0F42)", "bt", "975"], ["Bolivia", "bo", "591"], ["Bosnia and Herzegovina (\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)", "ba", "387"], ["Botswana", "bw", "267"], ["Brazil (Brasil)", "br", "55"], ["British Indian Ocean Territory", "io", "246"], ["British Virgin Islands", "vg", "1", 11, ["284"]], ["Brunei", "bn", "673"], ["Bulgaria (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)", "bg", "359"], ["Burkina Faso", "bf", "226"], ["Burundi (Uburundi)", "bi", "257"], ["Cambodia (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)", "kh", "855"], ["Cameroon (Cameroun)", "cm", "237"], ["Canada", "ca", "1", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]], ["Cape Verde (Kabu Verdi)", "cv", "238"], ["Caribbean Netherlands", "bq", "599", 1, ["3", "4", "7"]], ["Cayman Islands", "ky", "1", 12, ["345"]], ["Central African Republic (R\xE9publique centrafricaine)", "cf", "236"], ["Chad (Tchad)", "td", "235"], ["Chile", "cl", "56"], ["China (\u4E2D\u56FD)", "cn", "86"], ["Christmas Island", "cx", "61", 2, ["89164"]], ["Cocos (Keeling) Islands", "cc", "61", 1, ["89162"]], ["Colombia", "co", "57"], ["Comoros (\u202B\u062C\u0632\u0631 \u0627\u0644\u0642\u0645\u0631\u202C\u200E)", "km", "269"], ["Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)", "cd", "243"], ["Congo (Republic) (Congo-Brazzaville)", "cg", "242"], ["Cook Islands", "ck", "682"], ["Costa Rica", "cr", "506"], ["C\xF4te d\u2019Ivoire", "ci", "225"], ["Croatia (Hrvatska)", "hr", "385"], ["Cuba", "cu", "53"], ["Cura\xE7ao", "cw", "599", 0], ["Cyprus (\u039A\u03CD\u03C0\u03C1\u03BF\u03C2)", "cy", "357"], ["Czech Republic (\u010Cesk\xE1 republika)", "cz", "420"], ["Denmark (Danmark)", "dk", "45"], ["Djibouti", "dj", "253"], ["Dominica", "dm", "1", 13, ["767"]], ["Dominican Republic (Rep\xFAblica Dominicana)", "do", "1", 2, ["809", "829", "849"]], ["Ecuador", "ec", "593"], ["Egypt (\u202B\u0645\u0635\u0631\u202C\u200E)", "eg", "20"], ["El Salvador", "sv", "503"], ["Equatorial Guinea (Guinea Ecuatorial)", "gq", "240"], ["Eritrea", "er", "291"], ["Estonia (Eesti)", "ee", "372"], ["Eswatini", "sz", "268"], ["Ethiopia", "et", "251"], ["Falkland Islands (Islas Malvinas)", "fk", "500"], ["Faroe Islands (F\xF8royar)", "fo", "298"], ["Fiji", "fj", "679"], ["Finland (Suomi)", "fi", "358", 0], ["France", "fr", "33"], ["French Guiana (Guyane fran\xE7aise)", "gf", "594"], ["French Polynesia (Polyn\xE9sie fran\xE7aise)", "pf", "689"], ["Gabon", "ga", "241"], ["Gambia", "gm", "220"], ["Georgia (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)", "ge", "995"], ["Germany (Deutschland)", "de", "49"], ["Ghana (Gaana)", "gh", "233"], ["Gibraltar", "gi", "350"], ["Greece (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)", "gr", "30"], ["Greenland (Kalaallit Nunaat)", "gl", "299"], ["Grenada", "gd", "1", 14, ["473"]], ["Guadeloupe", "gp", "590", 0], ["Guam", "gu", "1", 15, ["671"]], ["Guatemala", "gt", "502"], ["Guernsey", "gg", "44", 1, ["1481", "7781", "7839", "7911"]], ["Guinea (Guin\xE9e)", "gn", "224"], ["Guinea-Bissau (Guin\xE9 Bissau)", "gw", "245"], ["Guyana", "gy", "592"], ["Haiti", "ht", "509"], ["Honduras", "hn", "504"], ["Hong Kong (\u9999\u6E2F)", "hk", "852"], ["Hungary (Magyarorsz\xE1g)", "hu", "36"], ["Iceland (\xCDsland)", "is", "354"], ["India (\u092D\u093E\u0930\u0924)", "in", "91"], ["Indonesia", "id", "62"], ["Iran (\u202B\u0627\u06CC\u0631\u0627\u0646\u202C\u200E)", "ir", "98"], ["Iraq (\u202B\u0627\u0644\u0639\u0631\u0627\u0642\u202C\u200E)", "iq", "964"], ["Ireland", "ie", "353"], ["Isle of Man", "im", "44", 2, ["1624", "74576", "7524", "7924", "7624"]], ["Israel (\u202B\u05D9\u05E9\u05E8\u05D0\u05DC\u202C\u200E)", "il", "972"], ["Italy (Italia)", "it", "39", 0], ["Jamaica", "jm", "1", 4, ["876", "658"]], ["Japan (\u65E5\u672C)", "jp", "81"], ["Jersey", "je", "44", 3, ["1534", "7509", "7700", "7797", "7829", "7937"]], ["Jordan (\u202B\u0627\u0644\u0623\u0631\u062F\u0646\u202C\u200E)", "jo", "962"], ["Kazakhstan (\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D)", "kz", "7", 1, ["33", "7"]], ["Kenya", "ke", "254"], ["Kiribati", "ki", "686"], ["Kosovo", "xk", "383"], ["Kuwait (\u202B\u0627\u0644\u0643\u0648\u064A\u062A\u202C\u200E)", "kw", "965"], ["Kyrgyzstan (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)", "kg", "996"], ["Laos (\u0EA5\u0EB2\u0EA7)", "la", "856"], ["Latvia (Latvija)", "lv", "371"], ["Lebanon (\u202B\u0644\u0628\u0646\u0627\u0646\u202C\u200E)", "lb", "961"], ["Lesotho", "ls", "266"], ["Liberia", "lr", "231"], ["Libya (\u202B\u0644\u064A\u0628\u064A\u0627\u202C\u200E)", "ly", "218"], ["Liechtenstein", "li", "423"], ["Lithuania (Lietuva)", "lt", "370"], ["Luxembourg", "lu", "352"], ["Macau (\u6FB3\u9580)", "mo", "853"], ["Madagascar (Madagasikara)", "mg", "261"], ["Malawi", "mw", "265"], ["Malaysia", "my", "60"], ["Maldives", "mv", "960"], ["Mali", "ml", "223"], ["Malta", "mt", "356"], ["Marshall Islands", "mh", "692"], ["Martinique", "mq", "596"], ["Mauritania (\u202B\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627\u202C\u200E)", "mr", "222"], ["Mauritius (Moris)", "mu", "230"], ["Mayotte", "yt", "262", 1, ["269", "639"]], ["Mexico (M\xE9xico)", "mx", "52"], ["Micronesia", "fm", "691"], ["Moldova (Republica Moldova)", "md", "373"], ["Monaco", "mc", "377"], ["Mongolia (\u041C\u043E\u043D\u0433\u043E\u043B)", "mn", "976"], ["Montenegro (Crna Gora)", "me", "382"], ["Montserrat", "ms", "1", 16, ["664"]], ["Morocco (\u202B\u0627\u0644\u0645\u063A\u0631\u0628\u202C\u200E)", "ma", "212", 0], ["Mozambique (Mo\xE7ambique)", "mz", "258"], ["Myanmar (Burma) (\u1019\u103C\u1014\u103A\u1019\u102C)", "mm", "95"], ["Namibia (Namibi\xEB)", "na", "264"], ["Nauru", "nr", "674"], ["Nepal (\u0928\u0947\u092A\u093E\u0932)", "np", "977"], ["Netherlands (Nederland)", "nl", "31"], ["New Caledonia (Nouvelle-Cal\xE9donie)", "nc", "687"], ["New Zealand", "nz", "64"], ["Nicaragua", "ni", "505"], ["Niger (Nijar)", "ne", "227"], ["Nigeria", "ng", "234"], ["Niue", "nu", "683"], ["Norfolk Island", "nf", "672"], ["North Korea (\uC870\uC120 \uBBFC\uC8FC\uC8FC\uC758 \uC778\uBBFC \uACF5\uD654\uAD6D)", "kp", "850"], ["North Macedonia (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)", "mk", "389"], ["Northern Mariana Islands", "mp", "1", 17, ["670"]], ["Norway (Norge)", "no", "47", 0], ["Oman (\u202B\u0639\u064F\u0645\u0627\u0646\u202C\u200E)", "om", "968"], ["Pakistan (\u202B\u067E\u0627\u06A9\u0633\u062A\u0627\u0646\u202C\u200E)", "pk", "92"], ["Palau", "pw", "680"], ["Palestine (\u202B\u0641\u0644\u0633\u0637\u064A\u0646\u202C\u200E)", "ps", "970"], ["Panama (Panam\xE1)", "pa", "507"], ["Papua New Guinea", "pg", "675"], ["Paraguay", "py", "595"], ["Peru (Per\xFA)", "pe", "51"], ["Philippines", "ph", "63"], ["Poland (Polska)", "pl", "48"], ["Portugal", "pt", "351"], ["Puerto Rico", "pr", "1", 3, ["787", "939"]], ["Qatar (\u202B\u0642\u0637\u0631\u202C\u200E)", "qa", "974"], ["R\xE9union (La R\xE9union)", "re", "262", 0], ["Romania (Rom\xE2nia)", "ro", "40"], ["Russia (\u0420\u043E\u0441\u0441\u0438\u044F)", "ru", "7", 0], ["Rwanda", "rw", "250"], ["Saint Barth\xE9lemy", "bl", "590", 1], ["Saint Helena", "sh", "290"], ["Saint Kitts and Nevis", "kn", "1", 18, ["869"]], ["Saint Lucia", "lc", "1", 19, ["758"]], ["Saint Martin (Saint-Martin (partie fran\xE7aise))", "mf", "590", 2], ["Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)", "pm", "508"], ["Saint Vincent and the Grenadines", "vc", "1", 20, ["784"]], ["Samoa", "ws", "685"], ["San Marino", "sm", "378"], ["S\xE3o Tom\xE9 and Pr\xEDncipe (S\xE3o Tom\xE9 e Pr\xEDncipe)", "st", "239"], ["Saudi Arabia (\u202B\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629\u202C\u200E)", "sa", "966"], ["Senegal (S\xE9n\xE9gal)", "sn", "221"], ["Serbia (\u0421\u0440\u0431\u0438\u0458\u0430)", "rs", "381"], ["Seychelles", "sc", "248"], ["Sierra Leone", "sl", "232"], ["Singapore", "sg", "65"], ["Sint Maarten", "sx", "1", 21, ["721"]], ["Slovakia (Slovensko)", "sk", "421"], ["Slovenia (Slovenija)", "si", "386"], ["Solomon Islands", "sb", "677"], ["Somalia (Soomaaliya)", "so", "252"], ["South Africa", "za", "27"], ["South Korea (\uB300\uD55C\uBBFC\uAD6D)", "kr", "82"], ["South Sudan (\u202B\u062C\u0646\u0648\u0628 \u0627\u0644\u0633\u0648\u062F\u0627\u0646\u202C\u200E)", "ss", "211"], ["Spain (Espa\xF1a)", "es", "34"], ["Sri Lanka (\u0DC1\u0DCA\u200D\u0DBB\u0DD3 \u0DBD\u0D82\u0D9A\u0DCF\u0DC0)", "lk", "94"], ["Sudan (\u202B\u0627\u0644\u0633\u0648\u062F\u0627\u0646\u202C\u200E)", "sd", "249"], ["Suriname", "sr", "597"], ["Svalbard and Jan Mayen", "sj", "47", 1, ["79"]], ["Sweden (Sverige)", "se", "46"], ["Switzerland (Schweiz)", "ch", "41"], ["Syria (\u202B\u0633\u0648\u0631\u064A\u0627\u202C\u200E)", "sy", "963"], ["Taiwan (\u53F0\u7063)", "tw", "886"], ["Tajikistan", "tj", "992"], ["Tanzania", "tz", "255"], ["Thailand (\u0E44\u0E17\u0E22)", "th", "66"], ["Timor-Leste", "tl", "670"], ["Togo", "tg", "228"], ["Tokelau", "tk", "690"], ["Tonga", "to", "676"], ["Trinidad and Tobago", "tt", "1", 22, ["868"]], ["Tunisia (\u202B\u062A\u0648\u0646\u0633\u202C\u200E)", "tn", "216"], ["Turkey (T\xFCrkiye)", "tr", "90"], ["Turkmenistan", "tm", "993"], ["Turks and Caicos Islands", "tc", "1", 23, ["649"]], ["Tuvalu", "tv", "688"], ["U.S. Virgin Islands", "vi", "1", 24, ["340"]], ["Uganda", "ug", "256"], ["Ukraine (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)", "ua", "380"], ["United Arab Emirates (\u202B\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629\u202C\u200E)", "ae", "971"], ["United Kingdom", "gb", "44", 0], ["United States", "us", "1", 0], ["Uruguay", "uy", "598"], ["Uzbekistan (O\u02BBzbekiston)", "uz", "998"], ["Vanuatu", "vu", "678"], ["Vatican City (Citt\xE0 del Vaticano)", "va", "39", 1, ["06698"]], ["Venezuela", "ve", "58"], ["Vietnam (Vi\u1EC7t Nam)", "vn", "84"], ["Wallis and Futuna (Wallis-et-Futuna)", "wf", "681"], ["Western Sahara (\u202B\u0627\u0644\u0635\u062D\u0631\u0627\u0621 \u0627\u0644\u063A\u0631\u0628\u064A\u0629\u202C\u200E)", "eh", "212", 1, ["5288", "5289"]], ["Yemen (\u202B\u0627\u0644\u064A\u0645\u0646\u202C\u200E)", "ye", "967"], ["Zambia", "zm", "260"], ["Zimbabwe", "zw", "263"], ["\xC5land Islands", "ax", "358", 1, ["18"]]];
        for (var i = 0; i < allCountries.length; i++) {
          var c = allCountries[i];
          allCountries[i] = {
            name: c[0],
            iso2: c[1],
            dialCode: c[2],
            priority: c[3] || 0,
            areaCodes: c[4] || null
          };
        }
        "use strict";
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i2 = 0; i2 < props.length; i2++) {
            var descriptor = props[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }
        var intlTelInputGlobals2 = {
          getInstance: function getInstance(input) {
            var id2 = input.getAttribute("data-intl-tel-input-id");
            return window.intlTelInputGlobals.instances[id2];
          },
          instances: {},
          // using a global like this allows us to mock it in the tests
          documentReady: function documentReady() {
            return document.readyState === "complete";
          }
        };
        if (typeof window === "object") window.intlTelInputGlobals = intlTelInputGlobals2;
        var id = 0;
        var defaults = {
          // whether or not to allow the dropdown
          allowDropdown: true,
          // if there is just a dial code in the input: remove it on blur
          autoHideDialCode: true,
          // add a placeholder in the input with an example number for the selected country
          autoPlaceholder: "polite",
          // modify the parentClass
          customContainer: "",
          // modify the auto placeholder
          customPlaceholder: null,
          // append menu to specified element
          dropdownContainer: null,
          // don't display these countries
          excludeCountries: [],
          // format the input value during initialisation and on setNumber
          formatOnDisplay: true,
          // geoIp lookup function
          geoIpLookup: null,
          // inject a hidden input with this name, and on submit, populate it with the result of getNumber
          hiddenInput: "",
          // initial country
          initialCountry: "",
          // localized country names e.g. { 'de': 'Deutschland' }
          localizedCountries: null,
          // don't insert international dial codes
          nationalMode: true,
          // display only these countries
          onlyCountries: [],
          // number type to use for placeholders
          placeholderNumberType: "MOBILE",
          // the countries at the top of the list. defaults to united states and united kingdom
          preferredCountries: ["us", "gb"],
          // display the country dial code next to the selected flag so it's not part of the typed number
          separateDialCode: false,
          // specify the path to the libphonenumber script to enable validation/formatting
          utilsScript: ""
        };
        var regionlessNanpNumbers = ["800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889"];
        var forEachProp = function forEachProp2(obj, callback) {
          var keys = Object.keys(obj);
          for (var i2 = 0; i2 < keys.length; i2++) {
            callback(keys[i2], obj[keys[i2]]);
          }
        };
        var forEachInstance = function forEachInstance2(method) {
          forEachProp(window.intlTelInputGlobals.instances, function(key) {
            window.intlTelInputGlobals.instances[key][method]();
          });
        };
        var Iti = /* @__PURE__ */ function() {
          function Iti2(input, options) {
            var _this = this;
            _classCallCheck(this, Iti2);
            this.id = id++;
            this.telInput = input;
            this.activeItem = null;
            this.highlightedItem = null;
            var customOptions = options || {};
            this.options = {};
            forEachProp(defaults, function(key, value) {
              _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;
            });
            this.hadInitialPlaceholder = Boolean(input.getAttribute("placeholder"));
          }
          _createClass(Iti2, [{
            key: "_init",
            value: function _init() {
              var _this2 = this;
              if (this.options.nationalMode) this.options.autoHideDialCode = false;
              if (this.options.separateDialCode) {
                this.options.autoHideDialCode = this.options.nationalMode = false;
              }
              this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
              if (this.isMobile) {
                document.body.classList.add("iti-mobile");
                if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;
              }
              if (typeof Promise !== "undefined") {
                var autoCountryPromise = new Promise(function(resolve, reject) {
                  _this2.resolveAutoCountryPromise = resolve;
                  _this2.rejectAutoCountryPromise = reject;
                });
                var utilsScriptPromise = new Promise(function(resolve, reject) {
                  _this2.resolveUtilsScriptPromise = resolve;
                  _this2.rejectUtilsScriptPromise = reject;
                });
                this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);
              } else {
                this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {
                };
                this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {
                };
              }
              this.selectedCountryData = {};
              this._processCountryData();
              this._generateMarkup();
              this._setInitialState();
              this._initListeners();
              this._initRequests();
            }
          }, {
            key: "_processCountryData",
            value: function _processCountryData() {
              this._processAllCountries();
              this._processCountryCodes();
              this._processPreferredCountries();
              if (this.options.localizedCountries) this._translateCountriesByLocale();
              if (this.options.onlyCountries.length || this.options.localizedCountries) {
                this.countries.sort(this._countryNameSort);
              }
            }
          }, {
            key: "_addCountryCode",
            value: function _addCountryCode(iso2, countryCode, priority) {
              if (countryCode.length > this.countryCodeMaxLen) {
                this.countryCodeMaxLen = countryCode.length;
              }
              if (!this.countryCodes.hasOwnProperty(countryCode)) {
                this.countryCodes[countryCode] = [];
              }
              for (var i2 = 0; i2 < this.countryCodes[countryCode].length; i2++) {
                if (this.countryCodes[countryCode][i2] === iso2) return;
              }
              var index = priority !== undefined2 ? priority : this.countryCodes[countryCode].length;
              this.countryCodes[countryCode][index] = iso2;
            }
          }, {
            key: "_processAllCountries",
            value: function _processAllCountries() {
              if (this.options.onlyCountries.length) {
                var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {
                  return country.toLowerCase();
                });
                this.countries = allCountries.filter(function(country) {
                  return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;
                });
              } else if (this.options.excludeCountries.length) {
                var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {
                  return country.toLowerCase();
                });
                this.countries = allCountries.filter(function(country) {
                  return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;
                });
              } else {
                this.countries = allCountries;
              }
            }
          }, {
            key: "_translateCountriesByLocale",
            value: function _translateCountriesByLocale() {
              for (var i2 = 0; i2 < this.countries.length; i2++) {
                var iso = this.countries[i2].iso2.toLowerCase();
                if (this.options.localizedCountries.hasOwnProperty(iso)) {
                  this.countries[i2].name = this.options.localizedCountries[iso];
                }
              }
            }
          }, {
            key: "_countryNameSort",
            value: function _countryNameSort(a, b) {
              return a.name.localeCompare(b.name);
            }
          }, {
            key: "_processCountryCodes",
            value: function _processCountryCodes() {
              this.countryCodeMaxLen = 0;
              this.dialCodes = {};
              this.countryCodes = {};
              for (var i2 = 0; i2 < this.countries.length; i2++) {
                var c2 = this.countries[i2];
                if (!this.dialCodes[c2.dialCode]) this.dialCodes[c2.dialCode] = true;
                this._addCountryCode(c2.iso2, c2.dialCode, c2.priority);
              }
              for (var _i = 0; _i < this.countries.length; _i++) {
                var _c = this.countries[_i];
                if (_c.areaCodes) {
                  var rootCountryCode = this.countryCodes[_c.dialCode][0];
                  for (var j = 0; j < _c.areaCodes.length; j++) {
                    var areaCode = _c.areaCodes[j];
                    for (var k = 1; k < areaCode.length; k++) {
                      var partialDialCode = _c.dialCode + areaCode.substr(0, k);
                      this._addCountryCode(rootCountryCode, partialDialCode);
                      this._addCountryCode(_c.iso2, partialDialCode);
                    }
                    this._addCountryCode(_c.iso2, _c.dialCode + areaCode);
                  }
                }
              }
            }
          }, {
            key: "_processPreferredCountries",
            value: function _processPreferredCountries() {
              this.preferredCountries = [];
              for (var i2 = 0; i2 < this.options.preferredCountries.length; i2++) {
                var countryCode = this.options.preferredCountries[i2].toLowerCase();
                var countryData = this._getCountryData(countryCode, false, true);
                if (countryData) this.preferredCountries.push(countryData);
              }
            }
          }, {
            key: "_createEl",
            value: function _createEl(name, attrs, container) {
              var el = document.createElement(name);
              if (attrs) forEachProp(attrs, function(key, value) {
                return el.setAttribute(key, value);
              });
              if (container) container.appendChild(el);
              return el;
            }
          }, {
            key: "_generateMarkup",
            value: function _generateMarkup() {
              if (!this.telInput.hasAttribute("autocomplete") && !(this.telInput.form && this.telInput.form.hasAttribute("autocomplete"))) {
                this.telInput.setAttribute("autocomplete", "off");
              }
              var parentClass = "iti";
              if (this.options.allowDropdown) parentClass += " iti--allow-dropdown";
              if (this.options.separateDialCode) parentClass += " iti--separate-dial-code";
              if (this.options.customContainer) {
                parentClass += " ";
                parentClass += this.options.customContainer;
              }
              var wrapper = this._createEl("div", {
                "class": parentClass
              });
              this.telInput.parentNode.insertBefore(wrapper, this.telInput);
              this.flagsContainer = this._createEl("div", {
                "class": "iti__flag-container"
              }, wrapper);
              wrapper.appendChild(this.telInput);
              this.selectedFlag = this._createEl("div", {
                "class": "iti__selected-flag",
                role: "combobox",
                "aria-controls": "iti-".concat(this.id, "__country-listbox"),
                "aria-owns": "iti-".concat(this.id, "__country-listbox"),
                "aria-expanded": "false"
              }, this.flagsContainer);
              this.selectedFlagInner = this._createEl("div", {
                "class": "iti__flag"
              }, this.selectedFlag);
              if (this.options.separateDialCode) {
                this.selectedDialCode = this._createEl("div", {
                  "class": "iti__selected-dial-code"
                }, this.selectedFlag);
              }
              if (this.options.allowDropdown) {
                this.selectedFlag.setAttribute("tabindex", "0");
                this.dropdownArrow = this._createEl("div", {
                  "class": "iti__arrow"
                }, this.selectedFlag);
                this.countryList = this._createEl("ul", {
                  "class": "iti__country-list iti__hide",
                  id: "iti-".concat(this.id, "__country-listbox"),
                  role: "listbox",
                  "aria-label": "List of countries"
                });
                if (this.preferredCountries.length) {
                  this._appendListItems(this.preferredCountries, "iti__preferred", true);
                  this._createEl("li", {
                    "class": "iti__divider",
                    role: "separator",
                    "aria-disabled": "true"
                  }, this.countryList);
                }
                this._appendListItems(this.countries, "iti__standard");
                if (this.options.dropdownContainer) {
                  this.dropdown = this._createEl("div", {
                    "class": "iti iti--container"
                  });
                  this.dropdown.appendChild(this.countryList);
                } else {
                  this.flagsContainer.appendChild(this.countryList);
                }
              }
              if (this.options.hiddenInput) {
                var hiddenInputName = this.options.hiddenInput;
                var name = this.telInput.getAttribute("name");
                if (name) {
                  var i2 = name.lastIndexOf("[");
                  if (i2 !== -1) hiddenInputName = "".concat(name.substr(0, i2), "[").concat(hiddenInputName, "]");
                }
                this.hiddenInput = this._createEl("input", {
                  type: "hidden",
                  name: hiddenInputName
                });
                wrapper.appendChild(this.hiddenInput);
              }
            }
          }, {
            key: "_appendListItems",
            value: function _appendListItems(countries, className, preferred) {
              var tmp = "";
              for (var i2 = 0; i2 < countries.length; i2++) {
                var c2 = countries[i2];
                var idSuffix = preferred ? "-preferred" : "";
                tmp += "<li class='iti__country ".concat(className, "' tabIndex='-1' id='iti-").concat(this.id, "__item-").concat(c2.iso2).concat(idSuffix, "' role='option' data-dial-code='").concat(c2.dialCode, "' data-country-code='").concat(c2.iso2, "' aria-selected='false'>");
                tmp += "<div class='iti__flag-box'><div class='iti__flag iti__".concat(c2.iso2, "'></div></div>");
                tmp += "<span class='iti__country-name'>".concat(c2.name, "</span>");
                tmp += "<span class='iti__dial-code'>+".concat(c2.dialCode, "</span>");
                tmp += "</li>";
              }
              this.countryList.insertAdjacentHTML("beforeend", tmp);
            }
          }, {
            key: "_setInitialState",
            value: function _setInitialState() {
              var attributeValue = this.telInput.getAttribute("value");
              var inputValue = this.telInput.value;
              var useAttribute = attributeValue && attributeValue.charAt(0) === "+" && (!inputValue || inputValue.charAt(0) !== "+");
              var val = useAttribute ? attributeValue : inputValue;
              var dialCode = this._getDialCode(val);
              var isRegionlessNanp = this._isRegionlessNanp(val);
              var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;
              if (dialCode && !isRegionlessNanp) {
                this._updateFlagFromNumber(val);
              } else if (initialCountry !== "auto") {
                if (initialCountry) {
                  this._setFlag(initialCountry.toLowerCase());
                } else {
                  if (dialCode && isRegionlessNanp) {
                    this._setFlag("us");
                  } else {
                    this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;
                    if (!val) {
                      this._setFlag(this.defaultCountry);
                    }
                  }
                }
                if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {
                  this.telInput.value = "+".concat(this.selectedCountryData.dialCode);
                }
              }
              if (val) this._updateValFromNumber(val);
            }
          }, {
            key: "_initListeners",
            value: function _initListeners() {
              this._initKeyListeners();
              if (this.options.autoHideDialCode) this._initBlurListeners();
              if (this.options.allowDropdown) this._initDropdownListeners();
              if (this.hiddenInput) this._initHiddenInputListener();
            }
          }, {
            key: "_initHiddenInputListener",
            value: function _initHiddenInputListener() {
              var _this3 = this;
              this._handleHiddenInputSubmit = function() {
                _this3.hiddenInput.value = _this3.getNumber();
              };
              if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleHiddenInputSubmit);
            }
          }, {
            key: "_getClosestLabel",
            value: function _getClosestLabel() {
              var el = this.telInput;
              while (el && el.tagName !== "LABEL") {
                el = el.parentNode;
              }
              return el;
            }
          }, {
            key: "_initDropdownListeners",
            value: function _initDropdownListeners() {
              var _this4 = this;
              this._handleLabelClick = function(e) {
                if (_this4.countryList.classList.contains("iti__hide")) _this4.telInput.focus();
                else e.preventDefault();
              };
              var label = this._getClosestLabel();
              if (label) label.addEventListener("click", this._handleLabelClick);
              this._handleClickSelectedFlag = function() {
                if (_this4.countryList.classList.contains("iti__hide") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {
                  _this4._showDropdown();
                }
              };
              this.selectedFlag.addEventListener("click", this._handleClickSelectedFlag);
              this._handleFlagsContainerKeydown = function(e) {
                var isDropdownHidden = _this4.countryList.classList.contains("iti__hide");
                if (isDropdownHidden && ["ArrowUp", "Up", "ArrowDown", "Down", " ", "Enter"].indexOf(e.key) !== -1) {
                  e.preventDefault();
                  e.stopPropagation();
                  _this4._showDropdown();
                }
                if (e.key === "Tab") _this4._closeDropdown();
              };
              this.flagsContainer.addEventListener("keydown", this._handleFlagsContainerKeydown);
            }
          }, {
            key: "_initRequests",
            value: function _initRequests() {
              var _this5 = this;
              if (this.options.utilsScript && !window.intlTelInputUtils) {
                if (window.intlTelInputGlobals.documentReady()) {
                  window.intlTelInputGlobals.loadUtils(this.options.utilsScript);
                } else {
                  window.addEventListener("load", function() {
                    window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);
                  });
                }
              } else this.resolveUtilsScriptPromise();
              if (this.options.initialCountry === "auto") this._loadAutoCountry();
              else this.resolveAutoCountryPromise();
            }
          }, {
            key: "_loadAutoCountry",
            value: function _loadAutoCountry() {
              if (window.intlTelInputGlobals.autoCountry) {
                this.handleAutoCountry();
              } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {
                window.intlTelInputGlobals.startedLoadingAutoCountry = true;
                if (typeof this.options.geoIpLookup === "function") {
                  this.options.geoIpLookup(function(countryCode) {
                    window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();
                    setTimeout(function() {
                      return forEachInstance("handleAutoCountry");
                    });
                  }, function() {
                    return forEachInstance("rejectAutoCountryPromise");
                  });
                }
              }
            }
          }, {
            key: "_initKeyListeners",
            value: function _initKeyListeners() {
              var _this6 = this;
              this._handleKeyupEvent = function() {
                if (_this6._updateFlagFromNumber(_this6.telInput.value)) {
                  _this6._triggerCountryChange();
                }
              };
              this.telInput.addEventListener("keyup", this._handleKeyupEvent);
              this._handleClipboardEvent = function() {
                setTimeout(_this6._handleKeyupEvent);
              };
              this.telInput.addEventListener("cut", this._handleClipboardEvent);
              this.telInput.addEventListener("paste", this._handleClipboardEvent);
            }
          }, {
            key: "_cap",
            value: function _cap(number) {
              var max = this.telInput.getAttribute("maxlength");
              return max && number.length > max ? number.substr(0, max) : number;
            }
          }, {
            key: "_initBlurListeners",
            value: function _initBlurListeners() {
              var _this7 = this;
              this._handleSubmitOrBlurEvent = function() {
                _this7._removeEmptyDialCode();
              };
              if (this.telInput.form) this.telInput.form.addEventListener("submit", this._handleSubmitOrBlurEvent);
              this.telInput.addEventListener("blur", this._handleSubmitOrBlurEvent);
            }
          }, {
            key: "_removeEmptyDialCode",
            value: function _removeEmptyDialCode() {
              if (this.telInput.value.charAt(0) === "+") {
                var numeric = this._getNumeric(this.telInput.value);
                if (!numeric || this.selectedCountryData.dialCode === numeric) {
                  this.telInput.value = "";
                }
              }
            }
          }, {
            key: "_getNumeric",
            value: function _getNumeric(s) {
              return s.replace(/\D/g, "");
            }
          }, {
            key: "_trigger",
            value: function _trigger(name) {
              var e = document.createEvent("Event");
              e.initEvent(name, true, true);
              this.telInput.dispatchEvent(e);
            }
          }, {
            key: "_showDropdown",
            value: function _showDropdown() {
              this.countryList.classList.remove("iti__hide");
              this.selectedFlag.setAttribute("aria-expanded", "true");
              this._setDropdownPosition();
              if (this.activeItem) {
                this._highlightListItem(this.activeItem, false);
                this._scrollTo(this.activeItem, true);
              }
              this._bindDropdownListeners();
              this.dropdownArrow.classList.add("iti__arrow--up");
              this._trigger("open:countrydropdown");
            }
          }, {
            key: "_toggleClass",
            value: function _toggleClass(el, className, shouldHaveClass) {
              if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className);
              else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);
            }
          }, {
            key: "_setDropdownPosition",
            value: function _setDropdownPosition() {
              var _this8 = this;
              if (this.options.dropdownContainer) {
                this.options.dropdownContainer.appendChild(this.dropdown);
              }
              if (!this.isMobile) {
                var pos = this.telInput.getBoundingClientRect();
                var windowTop = window.pageYOffset || document.documentElement.scrollTop;
                var inputTop = pos.top + windowTop;
                var dropdownHeight = this.countryList.offsetHeight;
                var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;
                var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;
                this._toggleClass(this.countryList, "iti__country-list--dropup", !dropdownFitsBelow && dropdownFitsAbove);
                if (this.options.dropdownContainer) {
                  var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;
                  this.dropdown.style.top = "".concat(inputTop + extraTop, "px");
                  this.dropdown.style.left = "".concat(pos.left + document.body.scrollLeft, "px");
                  this._handleWindowScroll = function() {
                    return _this8._closeDropdown();
                  };
                  window.addEventListener("scroll", this._handleWindowScroll);
                }
              }
            }
          }, {
            key: "_getClosestListItem",
            value: function _getClosestListItem(target) {
              var el = target;
              while (el && el !== this.countryList && !el.classList.contains("iti__country")) {
                el = el.parentNode;
              }
              return el === this.countryList ? null : el;
            }
          }, {
            key: "_bindDropdownListeners",
            value: function _bindDropdownListeners() {
              var _this9 = this;
              this._handleMouseoverCountryList = function(e) {
                var listItem = _this9._getClosestListItem(e.target);
                if (listItem) _this9._highlightListItem(listItem, false);
              };
              this.countryList.addEventListener("mouseover", this._handleMouseoverCountryList);
              this._handleClickCountryList = function(e) {
                var listItem = _this9._getClosestListItem(e.target);
                if (listItem) _this9._selectListItem(listItem);
              };
              this.countryList.addEventListener("click", this._handleClickCountryList);
              var isOpening = true;
              this._handleClickOffToClose = function() {
                if (!isOpening) _this9._closeDropdown();
                isOpening = false;
              };
              document.documentElement.addEventListener("click", this._handleClickOffToClose);
              var query = "";
              var queryTimer = null;
              this._handleKeydownOnDropdown = function(e) {
                e.preventDefault();
                if (e.key === "ArrowUp" || e.key === "Up" || e.key === "ArrowDown" || e.key === "Down") _this9._handleUpDownKey(e.key);
                else if (e.key === "Enter") _this9._handleEnterKey();
                else if (e.key === "Escape") _this9._closeDropdown();
                else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {
                  if (queryTimer) clearTimeout(queryTimer);
                  query += e.key.toLowerCase();
                  _this9._searchForCountry(query);
                  queryTimer = setTimeout(function() {
                    query = "";
                  }, 1e3);
                }
              };
              document.addEventListener("keydown", this._handleKeydownOnDropdown);
            }
          }, {
            key: "_handleUpDownKey",
            value: function _handleUpDownKey(key) {
              var next = key === "ArrowUp" || key === "Up" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;
              if (next) {
                if (next.classList.contains("iti__divider")) {
                  next = key === "ArrowUp" || key === "Up" ? next.previousElementSibling : next.nextElementSibling;
                }
                this._highlightListItem(next, true);
              }
            }
          }, {
            key: "_handleEnterKey",
            value: function _handleEnterKey() {
              if (this.highlightedItem) this._selectListItem(this.highlightedItem);
            }
          }, {
            key: "_searchForCountry",
            value: function _searchForCountry(query) {
              for (var i2 = 0; i2 < this.countries.length; i2++) {
                if (this._startsWith(this.countries[i2].name, query)) {
                  var listItem = this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(this.countries[i2].iso2));
                  this._highlightListItem(listItem, false);
                  this._scrollTo(listItem, true);
                  break;
                }
              }
            }
          }, {
            key: "_startsWith",
            value: function _startsWith(a, b) {
              return a.substr(0, b.length).toLowerCase() === b;
            }
          }, {
            key: "_updateValFromNumber",
            value: function _updateValFromNumber(originalNumber) {
              var number = originalNumber;
              if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {
                var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== "+");
                var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;
                var format = useNational ? NATIONAL : INTERNATIONAL;
                number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);
              }
              number = this._beforeSetNumber(number);
              this.telInput.value = number;
            }
          }, {
            key: "_updateFlagFromNumber",
            value: function _updateFlagFromNumber(originalNumber) {
              var number = originalNumber;
              var selectedDialCode = this.selectedCountryData.dialCode;
              var isNanp = selectedDialCode === "1";
              if (number && this.options.nationalMode && isNanp && number.charAt(0) !== "+") {
                if (number.charAt(0) !== "1") number = "1".concat(number);
                number = "+".concat(number);
              }
              if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== "+") {
                number = "+".concat(selectedDialCode).concat(number);
              }
              var dialCode = this._getDialCode(number, true);
              var numeric = this._getNumeric(number);
              var countryCode = null;
              if (dialCode) {
                var countryCodes = this.countryCodes[this._getNumeric(dialCode)];
                var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;
                var isRegionlessNanpNumber = selectedDialCode === "1" && this._isRegionlessNanp(numeric);
                if (!isRegionlessNanpNumber && !alreadySelected) {
                  for (var j = 0; j < countryCodes.length; j++) {
                    if (countryCodes[j]) {
                      countryCode = countryCodes[j];
                      break;
                    }
                  }
                }
              } else if (number.charAt(0) === "+" && numeric.length) {
                countryCode = "";
              } else if (!number || number === "+") {
                countryCode = this.defaultCountry;
              }
              if (countryCode !== null) {
                return this._setFlag(countryCode);
              }
              return false;
            }
          }, {
            key: "_isRegionlessNanp",
            value: function _isRegionlessNanp(number) {
              var numeric = this._getNumeric(number);
              if (numeric.charAt(0) === "1") {
                var areaCode = numeric.substr(1, 3);
                return regionlessNanpNumbers.indexOf(areaCode) !== -1;
              }
              return false;
            }
          }, {
            key: "_highlightListItem",
            value: function _highlightListItem(listItem, shouldFocus) {
              var prevItem = this.highlightedItem;
              if (prevItem) prevItem.classList.remove("iti__highlight");
              this.highlightedItem = listItem;
              this.highlightedItem.classList.add("iti__highlight");
              if (shouldFocus) this.highlightedItem.focus();
            }
          }, {
            key: "_getCountryData",
            value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {
              var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;
              for (var i2 = 0; i2 < countryList.length; i2++) {
                if (countryList[i2].iso2 === countryCode) {
                  return countryList[i2];
                }
              }
              if (allowFail) {
                return null;
              }
              throw new Error("No country data for '".concat(countryCode, "'"));
            }
          }, {
            key: "_setFlag",
            value: function _setFlag(countryCode) {
              var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};
              this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};
              if (this.selectedCountryData.iso2) {
                this.defaultCountry = this.selectedCountryData.iso2;
              }
              this.selectedFlagInner.setAttribute("class", "iti__flag iti__".concat(countryCode));
              var title = countryCode ? "".concat(this.selectedCountryData.name, ": +").concat(this.selectedCountryData.dialCode) : "Unknown";
              this.selectedFlag.setAttribute("title", title);
              if (this.options.separateDialCode) {
                var dialCode = this.selectedCountryData.dialCode ? "+".concat(this.selectedCountryData.dialCode) : "";
                this.selectedDialCode.innerHTML = dialCode;
                var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();
                this.telInput.style.paddingLeft = "".concat(selectedFlagWidth + 6, "px");
              }
              this._updatePlaceholder();
              if (this.options.allowDropdown) {
                var prevItem = this.activeItem;
                if (prevItem) {
                  prevItem.classList.remove("iti__active");
                  prevItem.setAttribute("aria-selected", "false");
                }
                if (countryCode) {
                  var nextItem = this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(countryCode, "-preferred")) || this.countryList.querySelector("#iti-".concat(this.id, "__item-").concat(countryCode));
                  nextItem.setAttribute("aria-selected", "true");
                  nextItem.classList.add("iti__active");
                  this.activeItem = nextItem;
                  this.selectedFlag.setAttribute("aria-activedescendant", nextItem.getAttribute("id"));
                }
              }
              return prevCountry.iso2 !== countryCode;
            }
          }, {
            key: "_getHiddenSelectedFlagWidth",
            value: function _getHiddenSelectedFlagWidth() {
              var containerClone = this.telInput.parentNode.cloneNode();
              containerClone.style.visibility = "hidden";
              document.body.appendChild(containerClone);
              var flagsContainerClone = this.flagsContainer.cloneNode();
              containerClone.appendChild(flagsContainerClone);
              var selectedFlagClone = this.selectedFlag.cloneNode(true);
              flagsContainerClone.appendChild(selectedFlagClone);
              var width = selectedFlagClone.offsetWidth;
              containerClone.parentNode.removeChild(containerClone);
              return width;
            }
          }, {
            key: "_updatePlaceholder",
            value: function _updatePlaceholder() {
              var shouldSetPlaceholder = this.options.autoPlaceholder === "aggressive" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === "polite";
              if (window.intlTelInputUtils && shouldSetPlaceholder) {
                var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];
                var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : "";
                placeholder = this._beforeSetNumber(placeholder);
                if (typeof this.options.customPlaceholder === "function") {
                  placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);
                }
                this.telInput.setAttribute("placeholder", placeholder);
              }
            }
          }, {
            key: "_selectListItem",
            value: function _selectListItem(listItem) {
              var flagChanged = this._setFlag(listItem.getAttribute("data-country-code"));
              this._closeDropdown();
              this._updateDialCode(listItem.getAttribute("data-dial-code"), true);
              this.telInput.focus();
              var len = this.telInput.value.length;
              this.telInput.setSelectionRange(len, len);
              if (flagChanged) {
                this._triggerCountryChange();
              }
            }
          }, {
            key: "_closeDropdown",
            value: function _closeDropdown() {
              this.countryList.classList.add("iti__hide");
              this.selectedFlag.setAttribute("aria-expanded", "false");
              this.dropdownArrow.classList.remove("iti__arrow--up");
              document.removeEventListener("keydown", this._handleKeydownOnDropdown);
              document.documentElement.removeEventListener("click", this._handleClickOffToClose);
              this.countryList.removeEventListener("mouseover", this._handleMouseoverCountryList);
              this.countryList.removeEventListener("click", this._handleClickCountryList);
              if (this.options.dropdownContainer) {
                if (!this.isMobile) window.removeEventListener("scroll", this._handleWindowScroll);
                if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);
              }
              this._trigger("close:countrydropdown");
            }
          }, {
            key: "_scrollTo",
            value: function _scrollTo(element, middle) {
              var container = this.countryList;
              var windowTop = window.pageYOffset || document.documentElement.scrollTop;
              var containerHeight = container.offsetHeight;
              var containerTop = container.getBoundingClientRect().top + windowTop;
              var containerBottom = containerTop + containerHeight;
              var elementHeight = element.offsetHeight;
              var elementTop = element.getBoundingClientRect().top + windowTop;
              var elementBottom = elementTop + elementHeight;
              var newScrollTop = elementTop - containerTop + container.scrollTop;
              var middleOffset = containerHeight / 2 - elementHeight / 2;
              if (elementTop < containerTop) {
                if (middle) newScrollTop -= middleOffset;
                container.scrollTop = newScrollTop;
              } else if (elementBottom > containerBottom) {
                if (middle) newScrollTop += middleOffset;
                var heightDifference = containerHeight - elementHeight;
                container.scrollTop = newScrollTop - heightDifference;
              }
            }
          }, {
            key: "_updateDialCode",
            value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {
              var inputVal = this.telInput.value;
              var newDialCode = "+".concat(newDialCodeBare);
              var newNumber;
              if (inputVal.charAt(0) === "+") {
                var prevDialCode = this._getDialCode(inputVal);
                if (prevDialCode) {
                  newNumber = inputVal.replace(prevDialCode, newDialCode);
                } else {
                  newNumber = newDialCode;
                }
              } else if (this.options.nationalMode || this.options.separateDialCode) {
                return;
              } else {
                if (inputVal) {
                  newNumber = newDialCode + inputVal;
                } else if (hasSelectedListItem || !this.options.autoHideDialCode) {
                  newNumber = newDialCode;
                } else {
                  return;
                }
              }
              this.telInput.value = newNumber;
            }
          }, {
            key: "_getDialCode",
            value: function _getDialCode(number, includeAreaCode) {
              var dialCode = "";
              if (number.charAt(0) === "+") {
                var numericChars = "";
                for (var i2 = 0; i2 < number.length; i2++) {
                  var c2 = number.charAt(i2);
                  if (!isNaN(parseInt(c2, 10))) {
                    numericChars += c2;
                    if (includeAreaCode) {
                      if (this.countryCodes[numericChars]) {
                        dialCode = number.substr(0, i2 + 1);
                      }
                    } else {
                      if (this.dialCodes[numericChars]) {
                        dialCode = number.substr(0, i2 + 1);
                        break;
                      }
                    }
                    if (numericChars.length === this.countryCodeMaxLen) {
                      break;
                    }
                  }
                }
              }
              return dialCode;
            }
          }, {
            key: "_getFullNumber",
            value: function _getFullNumber() {
              var val = this.telInput.value.trim();
              var dialCode = this.selectedCountryData.dialCode;
              var prefix;
              var numericVal = this._getNumeric(val);
              if (this.options.separateDialCode && val.charAt(0) !== "+" && dialCode && numericVal) {
                prefix = "+".concat(dialCode);
              } else {
                prefix = "";
              }
              return prefix + val;
            }
          }, {
            key: "_beforeSetNumber",
            value: function _beforeSetNumber(originalNumber) {
              var number = originalNumber;
              if (this.options.separateDialCode) {
                var dialCode = this._getDialCode(number);
                if (dialCode) {
                  dialCode = "+".concat(this.selectedCountryData.dialCode);
                  var start = number[dialCode.length] === " " || number[dialCode.length] === "-" ? dialCode.length + 1 : dialCode.length;
                  number = number.substr(start);
                }
              }
              return this._cap(number);
            }
          }, {
            key: "_triggerCountryChange",
            value: function _triggerCountryChange() {
              this._trigger("countrychange");
            }
          }, {
            key: "handleAutoCountry",
            value: function handleAutoCountry() {
              if (this.options.initialCountry === "auto") {
                this.defaultCountry = window.intlTelInputGlobals.autoCountry;
                if (!this.telInput.value) {
                  this.setCountry(this.defaultCountry);
                }
                this.resolveAutoCountryPromise();
              }
            }
          }, {
            key: "handleUtils",
            value: function handleUtils() {
              if (window.intlTelInputUtils) {
                if (this.telInput.value) {
                  this._updateValFromNumber(this.telInput.value);
                }
                this._updatePlaceholder();
              }
              this.resolveUtilsScriptPromise();
            }
          }, {
            key: "destroy",
            value: function destroy() {
              var form = this.telInput.form;
              if (this.options.allowDropdown) {
                this._closeDropdown();
                this.selectedFlag.removeEventListener("click", this._handleClickSelectedFlag);
                this.flagsContainer.removeEventListener("keydown", this._handleFlagsContainerKeydown);
                var label = this._getClosestLabel();
                if (label) label.removeEventListener("click", this._handleLabelClick);
              }
              if (this.hiddenInput && form) form.removeEventListener("submit", this._handleHiddenInputSubmit);
              if (this.options.autoHideDialCode) {
                if (form) form.removeEventListener("submit", this._handleSubmitOrBlurEvent);
                this.telInput.removeEventListener("blur", this._handleSubmitOrBlurEvent);
              }
              this.telInput.removeEventListener("keyup", this._handleKeyupEvent);
              this.telInput.removeEventListener("cut", this._handleClipboardEvent);
              this.telInput.removeEventListener("paste", this._handleClipboardEvent);
              this.telInput.removeAttribute("data-intl-tel-input-id");
              var wrapper = this.telInput.parentNode;
              wrapper.parentNode.insertBefore(this.telInput, wrapper);
              wrapper.parentNode.removeChild(wrapper);
              delete window.intlTelInputGlobals.instances[this.id];
            }
          }, {
            key: "getExtension",
            value: function getExtension() {
              if (window.intlTelInputUtils) {
                return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);
              }
              return "";
            }
          }, {
            key: "getNumber",
            value: function getNumber(format) {
              if (window.intlTelInputUtils) {
                var iso2 = this.selectedCountryData.iso2;
                return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);
              }
              return "";
            }
          }, {
            key: "getNumberType",
            value: function getNumberType() {
              if (window.intlTelInputUtils) {
                return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);
              }
              return -99;
            }
          }, {
            key: "getSelectedCountryData",
            value: function getSelectedCountryData() {
              return this.selectedCountryData;
            }
          }, {
            key: "getValidationError",
            value: function getValidationError() {
              if (window.intlTelInputUtils) {
                var iso2 = this.selectedCountryData.iso2;
                return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);
              }
              return -99;
            }
          }, {
            key: "isValidNumber",
            value: function isValidNumber() {
              var val = this._getFullNumber().trim();
              var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : "";
              return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;
            }
          }, {
            key: "setCountry",
            value: function setCountry(originalCountryCode) {
              var countryCode = originalCountryCode.toLowerCase();
              if (!this.selectedFlagInner.classList.contains("iti__".concat(countryCode))) {
                this._setFlag(countryCode);
                this._updateDialCode(this.selectedCountryData.dialCode, false);
                this._triggerCountryChange();
              }
            }
          }, {
            key: "setNumber",
            value: function setNumber(number) {
              var flagChanged = this._updateFlagFromNumber(number);
              this._updateValFromNumber(number);
              if (flagChanged) {
                this._triggerCountryChange();
              }
            }
          }, {
            key: "setPlaceholderNumberType",
            value: function setPlaceholderNumberType(type) {
              this.options.placeholderNumberType = type;
              this._updatePlaceholder();
            }
          }]);
          return Iti2;
        }();
        intlTelInputGlobals2.getCountryData = function() {
          return allCountries;
        };
        var injectScript = function injectScript2(path, handleSuccess, handleFailure) {
          var script = document.createElement("script");
          script.onload = function() {
            forEachInstance("handleUtils");
            if (handleSuccess) handleSuccess();
          };
          script.onerror = function() {
            forEachInstance("rejectUtilsScriptPromise");
            if (handleFailure) handleFailure();
          };
          script.className = "iti-load-utils";
          script.async = true;
          script.src = path;
          document.body.appendChild(script);
        };
        intlTelInputGlobals2.loadUtils = function(path) {
          if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {
            window.intlTelInputGlobals.startedLoadingUtilsScript = true;
            if (typeof Promise !== "undefined") {
              return new Promise(function(resolve, reject) {
                return injectScript(path, resolve, reject);
              });
            }
            injectScript(path);
          }
          return null;
        };
        intlTelInputGlobals2.defaults = defaults;
        intlTelInputGlobals2.version = "17.0.21";
        return function(input, options) {
          var iti = new Iti(input, options);
          iti._init();
          input.setAttribute("data-intl-tel-input-id", iti.id);
          window.intlTelInputGlobals.instances[iti.id] = iti;
          return iti;
        };
      }();
    });
  }
});

// node_modules/intl-tel-input/index.js
var require_intl_tel_input = __commonJS({
  "node_modules/intl-tel-input/index.js"(exports, module2) {
    module2.exports = require_intlTelInput();
  }
});

// node_modules/file-saver/dist/FileSaver.min.js
var require_FileSaver_min = __commonJS({
  "node_modules/file-saver/dist/FileSaver.min.js"(exports, module2) {
    (function(a, b) {
      if ("function" == typeof define && define.amd) define([], b);
      else if ("undefined" != typeof exports) b();
      else {
        b(), a.FileSaver = {
          exports: {}
        }.exports;
      }
    })(exports, function() {
      "use strict";
      function b(a2, b2) {
        return "undefined" == typeof b2 ? b2 = {
          autoBom: false
        } : "object" != typeof b2 && (console.warn("Deprecated: Expected third argument to be a object"), b2 = {
          autoBom: !b2
        }), b2.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a2.type) ? new Blob(["\uFEFF", a2], {
          type: a2.type
        }) : a2;
      }
      function c(a2, b2, c2) {
        var d2 = new XMLHttpRequest();
        d2.open("GET", a2), d2.responseType = "blob", d2.onload = function() {
          g(d2.response, b2, c2);
        }, d2.onerror = function() {
          console.error("could not download file");
        }, d2.send();
      }
      function d(a2) {
        var b2 = new XMLHttpRequest();
        b2.open("HEAD", a2, false);
        try {
          b2.send();
        } catch (a3) {
        }
        return 200 <= b2.status && 299 >= b2.status;
      }
      function e(a2) {
        try {
          a2.dispatchEvent(new MouseEvent("click"));
        } catch (c2) {
          var b2 = document.createEvent("MouseEvents");
          b2.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null), a2.dispatchEvent(b2);
        }
      }
      var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof global && global.global === global ? global : void 0, a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent), g = f.saveAs || ("object" != typeof window || window !== f ? function() {
      } : "download" in HTMLAnchorElement.prototype && !a ? function(b2, g2, h) {
        var i = f.URL || f.webkitURL, j = document.createElement("a");
        g2 = g2 || b2.name || "download", j.download = g2, j.rel = "noopener", "string" == typeof b2 ? (j.href = b2, j.origin === location.origin ? e(j) : d(j.href) ? c(b2, g2, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b2), setTimeout(function() {
          i.revokeObjectURL(j.href);
        }, 4e4), setTimeout(function() {
          e(j);
        }, 0));
      } : "msSaveOrOpenBlob" in navigator ? function(f2, g2, h) {
        if (g2 = g2 || f2.name || "download", "string" != typeof f2) navigator.msSaveOrOpenBlob(b(f2, h), g2);
        else if (d(f2)) c(f2, g2, h);
        else {
          var i = document.createElement("a");
          i.href = f2, i.target = "_blank", setTimeout(function() {
            e(i);
          });
        }
      } : function(b2, d2, e2, g2) {
        if (g2 = g2 || open("", "_blank"), g2 && (g2.document.title = g2.document.body.innerText = "downloading..."), "string" == typeof b2) return c(b2, d2, e2);
        var h = "application/octet-stream" === b2.type, i = /constructor/i.test(f.HTMLElement) || f.safari, j = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((j || h && i || a) && "undefined" != typeof FileReader) {
          var k = new FileReader();
          k.onloadend = function() {
            var a2 = k.result;
            a2 = j ? a2 : a2.replace(/^data:[^;]*;/, "data:attachment/file;"), g2 ? g2.location.href = a2 : location = a2, g2 = null;
          }, k.readAsDataURL(b2);
        } else {
          var l = f.URL || f.webkitURL, m = l.createObjectURL(b2);
          g2 ? g2.location = m : location.href = m, g2 = null, setTimeout(function() {
            l.revokeObjectURL(m);
          }, 4e4);
        }
      });
      f.saveAs = g.saveAs = g, "undefined" != typeof module2 && (module2.exports = g);
    });
  }
});

// src/app/components/patient-managements/patient-info-edit/patient-info-edit.component.ts
var import_moment = __toESM(require_moment());
function PatientInfoEditComponent_mat_option_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const species_r2 = ctx.$implicit;
    \u0275\u0275property("value", species_r2.Code);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", species_r2.Code, " ");
  }
}
function PatientInfoEditComponent_mat_form_field_63_mat_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const species_r3 = ctx.$implicit;
    \u0275\u0275property("value", species_r3.Name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", species_r3.Name, " ");
  }
}
function PatientInfoEditComponent_mat_form_field_63_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-form-field", 18)(1, "mat-select", 33);
    \u0275\u0275template(2, PatientInfoEditComponent_mat_form_field_63_mat_option_2_Template, 2, 2, "mat-option", 24);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r3.dsBreeds);
  }
}
function PatientInfoEditComponent_mat_form_field_64_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-form-field", 18);
    \u0275\u0275element(1, "input", 34);
    \u0275\u0275elementEnd();
  }
}
function PatientInfoEditComponent_mat_option_84_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const gender_r5 = ctx.$implicit;
    \u0275\u0275property("value", gender_r5.GenderName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", gender_r5.GenderName, " ");
  }
}
var PatientInfoEditComponent = class _PatientInfoEditComponent {
  constructor(commonService, patientService, router, labelService, headerService, sidefilterService, confirmationDialogService, dataService, title, EncrDecr, fb, refLabService, dateAdapter) {
    this.commonService = commonService;
    this.patientService = patientService;
    this.router = router;
    this.labelService = labelService;
    this.headerService = headerService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.EncrDecr = EncrDecr;
    this.fb = fb;
    this.refLabService = refLabService;
    this.dateAdapter = dateAdapter;
    this.dsSpecies = [];
    this.dsGenders = [];
    this.dsBreeds = [];
    this.patient = null;
    this.today = /* @__PURE__ */ new Date();
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsEditPatientScreen.EditPatientInformation}`);
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindEditPatientLabel();
      this.labelService.bindUserProfileLabel();
    }
    this.filter = new SideFilter();
  }
  ngOnInit() {
    this.createForm();
    console.log(this.filter, "abc");
    this.filter.PageSize = 60;
    this.filter.IsApplyFilter = true;
    this.filter.PatientId = this.patientService.patientDetails?.PatientId;
    this.filter.BusinessGuid = localStorage.businessGuid;
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.filter.IsExactFilter = true;
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.businessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.commonService.getDashboardPatientList(this.filter).subscribe((data) => {
      if (data.ResponseData && data.ResponseData.PatientList && data.ResponseData.PatientList.length) {
        this.patient = data.ResponseData.PatientList.length > 1 ? data.ResponseData.PatientList.find((x) => x.ZDXPatientId == this.patientService.patientDetails.ZDXPatientId) : data.ResponseData.PatientList[0];
        const filterDropDowns = this.dataService.appData.filterDropDownList;
        this.dsSpecies = filterDropDowns.SpeciesList;
        this.dsGenders = filterDropDowns.GenderList;
        if (this.patient && this.patient.SpeciesName) {
          this.getBreedList(this.patient.SpeciesName);
        }
        this.createForm();
      }
    });
  }
  createForm() {
    console.log(this.patient);
    if (this.patient && this.patient.BirthDate) {
      this.patient.Dob = (0, import_moment.default)(this.patient.BirthDate).format("YYYY-MM-DD");
    }
    this.editForm = this.fb.group({
      patientFirstName: [this.patient ? this.patient.FirstName : null, Validators.compose([Validators.required, Validators.pattern(/^(?:.*)?$/)])],
      patientLastName: [this.patient && this.patient.LastName != "Not Provided" ? this.patient.LastName : null, Validators.pattern(/^(?:.*)?$/)],
      ownerFirstName: [this.patient ? this.patient.OwnerFirstName : null, Validators.compose([Validators.required, Validators.pattern(/^(?:.*)?$/)])],
      ownerLastName: [this.patient ? this.patient.OwnerLastName : null, Validators.pattern(/^(?:.*)?$/)],
      species: [this.patient ? this.patient.SpeciesName : null, Validators.compose([Validators.required])],
      breed: [this.patient ? this.patient.BreedName : ""],
      dob: [this.patient ? this.patient.Dob : null, Validators.required],
      gender: [this.patient ? this.patient.GenderName : null, Validators.required]
    });
  }
  checkPatientName(patient) {
    if (!patient.PatientName) {
      return patient.OwnerName;
    } else {
      return patient.LastName;
    }
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  checkWithLastName(ev) {
    if (!this.editForm.controls["patientLastName"].value && ev.target.value) {
      this.editForm.controls["patientLastName"].setValue(ev.target.value);
    }
  }
  getBreedList(speciesName, fromView = false) {
    this.dsBreeds = [];
    const langId = this.dataService.appData.authDetails["LanguageId"];
    this.refLabService.getBreedListBySpeciesId(speciesName, langId).subscribe((res) => {
      this.dsBreeds = res.ResponseData;
      if (fromView && !this.dsBreeds.length)
        this.editForm.controls["breed"].setValue("");
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindEditPatientLabel();
      this.labelService.bindUserProfileLabel();
    });
  }
  updatePatient() {
    this.editForm.patchValue({
      patientFirstName: this.editForm.controls["patientFirstName"].value?.trim(),
      patientLastName: this.editForm.controls["patientLastName"].value?.trim(),
      ownerFirstName: this.editForm.controls["ownerFirstName"].value?.trim(),
      ownerLastName: this.editForm.controls["ownerLastName"].value?.trim(),
      breed: this.editForm.controls["breed"].value?.trim()
    });
    if (this.editForm.valid) {
      this.editForm.value.dob = (0, import_moment.default)(this.editForm.value.dob).format("YYYY-MM-DD");
      this.patientService.patientUpdate(Object.assign(this.editForm.value, { patientId: this.patient.ZDXPatientId, BusinessGuid: this.businessGuid, UserGuid: this.dataService.appData.authDetails["UserGuid"] })).subscribe({
        next: () => {
          this.showMsg(this.labelService.dsEditPatientScreen.InformationForPatient + " " + this.patient.PatientId + " " + this.labelService.dsEditPatientScreen.IsSuccessfullyUpdated + ".");
        },
        error: () => {
          this.showMsg(this.labelService.dsEditPatientScreen.InformationForPatient + " " + this.patient.PatientId + " " + this.labelService.dsEditPatientScreen.IsSuccessfullyUpdated + ".");
        }
      });
    }
  }
  showMsg(msg) {
    if (msg == void 0 || msg == null || msg == "")
      msg = this.labelService.dsPatientInfoScreen.CanceledTest;
    this.confirmationDialogService.confirm("", msg, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.commonService.goBack();
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  static {
    this.\u0275fac = function PatientInfoEditComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PatientInfoEditComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(DateAdapter));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PatientInfoEditComponent, selectors: [["app-patient-info-edit"]], viewQuery: function PatientInfoEditComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, decls: 90, vars: 25, consts: [["picker", ""], [1, "wrapper"], ["id", "content", 1, "page-wrapper", "editpart"], [1, "title-container"], ["href", "javascript:void(0)", 1, "back-btn", 3, "click"], ["data-testid", "pie-title", 1, "page-title", "font-weight-bold"], [1, "headtext"], ["id", "portal-outer1", 1, "portal-outer", "view-user", "result_block", "view-edit"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1"], [1, "pt-0"], [1, "edit-patient"], [1, "head-text"], [1, "htext"], ["novalidate", "", 3, "submit", "formGroup"], [1, "row", "edit-content"], [1, "col-md-4", "accpart"], ["for", ""], ["appearance", "outline", "floatLabel", "always", 1, "full-50"], ["type", "text", "matInput", "", "maxlength", "50", "formControlName", "patientFirstName", 3, "placeholder"], ["type", "text", "matInput", "", "maxlength", "50", "formControlName", "patientLastName", 3, "placeholder"], ["type", "text", "matInput", "", "maxlength", "50", "formControlName", "ownerFirstName", 3, "placeholder"], ["type", "text", "matInput", "", "maxlength", "50", "formControlName", "ownerLastName", 3, "placeholder"], ["formControlName", "species", 3, "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], ["appearance", "outline", "floatLabel", "always", "class", "full-50", 4, "ngIf"], ["matInput", "", "formControlName", "dob", 3, "max", "matDatepicker"], ["matSuffix", "", 3, "for"], ["formControlName", "gender"], [1, "col-md-12", "row", "d-flex", "mt-4", "justify-content-center", "mt-4"], ["type", "button", "mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", 3, "click"], ["type", "submit", "mat-raised-button", "", "color", "warn"], [3, "value"], ["formControlName", "breed"], ["type", "text", "matInput", "", "maxlength", "100", "formControlName", "breed", 3, "placeholder"]], template: function PatientInfoEditComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div")(4, "div");
        \u0275\u0275element(5, "app-header");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(6, "section", 3)(7, "a", 4);
        \u0275\u0275listener("click", function PatientInfoEditComponent_Template_a_click_7_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.goBack());
        });
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "span", 5);
        \u0275\u0275text(10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "p", 6);
        \u0275\u0275text(12);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "div", 7)(14, "div", 8)(15, "div", 9)(16, "mat-card", 10)(17, "div", 11)(18, "p", 12);
        \u0275\u0275text(19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(20, "h5", 13)(21, "strong");
        \u0275\u0275text(22);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(23, "form", 14);
        \u0275\u0275listener("submit", function PatientInfoEditComponent_Template_form_submit_23_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.updatePatient());
        });
        \u0275\u0275elementStart(24, "div", 15)(25, "div", 16)(26, "label", 17);
        \u0275\u0275text(27);
        \u0275\u0275elementStart(28, "sup");
        \u0275\u0275text(29, "*");
        \u0275\u0275elementEnd();
        \u0275\u0275text(30, " : ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "mat-form-field", 18);
        \u0275\u0275element(32, "input", 19);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(33, "div", 16)(34, "mat-label", 17);
        \u0275\u0275text(35);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "mat-form-field", 18);
        \u0275\u0275element(37, "input", 20);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(38, "div", 16)(39, "mat-label", 17);
        \u0275\u0275text(40);
        \u0275\u0275elementStart(41, "sup");
        \u0275\u0275text(42, "*");
        \u0275\u0275elementEnd();
        \u0275\u0275text(43, " : ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(44, "mat-form-field", 18);
        \u0275\u0275element(45, "input", 21);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(46, "div", 16)(47, "mat-label", 17);
        \u0275\u0275text(48);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(49, "mat-form-field", 18);
        \u0275\u0275element(50, "input", 22);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(51, "div", 16)(52, "mat-label", 17);
        \u0275\u0275text(53);
        \u0275\u0275elementStart(54, "sup");
        \u0275\u0275text(55, "*");
        \u0275\u0275elementEnd();
        \u0275\u0275text(56, " : ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(57, "mat-form-field", 18)(58, "mat-select", 23);
        \u0275\u0275listener("selectionChange", function PatientInfoEditComponent_Template_mat_select_selectionChange_58_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getBreedList($event.value, true));
        });
        \u0275\u0275template(59, PatientInfoEditComponent_mat_option_59_Template, 2, 2, "mat-option", 24);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(60, "div", 16)(61, "mat-label", 17);
        \u0275\u0275text(62);
        \u0275\u0275elementEnd();
        \u0275\u0275template(63, PatientInfoEditComponent_mat_form_field_63_Template, 3, 1, "mat-form-field", 25)(64, PatientInfoEditComponent_mat_form_field_64_Template, 2, 0, "mat-form-field", 25);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(65, "div", 16)(66, "mat-label", 17);
        \u0275\u0275text(67);
        \u0275\u0275elementStart(68, "sup");
        \u0275\u0275text(69, "*");
        \u0275\u0275elementEnd();
        \u0275\u0275text(70, " : ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(71, "mat-form-field", 18);
        \u0275\u0275element(72, "input", 26)(73, "mat-datepicker-toggle", 27)(74, "mat-datepicker", null, 0);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(76, "div", 16)(77, "mat-label", 17);
        \u0275\u0275text(78);
        \u0275\u0275elementStart(79, "sup");
        \u0275\u0275text(80, "*");
        \u0275\u0275elementEnd();
        \u0275\u0275text(81, " : ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(82, "mat-form-field", 18)(83, "mat-select", 28);
        \u0275\u0275template(84, PatientInfoEditComponent_mat_option_84_Template, 2, 2, "mat-option", 24);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(85, "div", 29)(86, "button", 30);
        \u0275\u0275listener("click", function PatientInfoEditComponent_Template_button_click_86_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.goBack());
        });
        \u0275\u0275text(87);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(88, "button", 31);
        \u0275\u0275text(89);
        \u0275\u0275elementEnd()()()()()()()()()();
      }
      if (rf & 2) {
        const picker_r6 = \u0275\u0275reference(75);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.Back);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsEditPatientScreen.EditPatientInformation);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate2("", ctx.labelService.dsEditPatientScreen.YouAreEditingInformationForPatientID, ": ", ctx.patientService.patientDetails == null ? null : ctx.patientService.patientDetails.PatientId, "");
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate2("", ctx.labelService.dsEditPatientScreen.YouAreEditingInformationForPatientID, ": ", ctx.patientService.patientDetails == null ? null : ctx.patientService.patientDetails.PatientId, "");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsEditPatientScreen.Patient);
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.editForm);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.PatientFirstName, "");
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.PatientLastName, " : ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.OwnerFirstName, "");
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.OwnerLastName, " : ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.Species, "");
        \u0275\u0275advance(6);
        \u0275\u0275property("ngForOf", ctx.dsSpecies);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.Breed, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsBreeds.length);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.dsBreeds.length);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.BirthDate, "");
        \u0275\u0275advance(5);
        \u0275\u0275property("max", ctx.today)("matDatepicker", picker_r6);
        \u0275\u0275advance();
        \u0275\u0275property("for", picker_r6);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsEditPatientScreen.Sex, "");
        \u0275\u0275advance(6);
        \u0275\u0275property("ngForOf", ctx.dsGenders);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.Cancel);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.Save);
      }
    }, dependencies: [NgForOf, NgIf, MatLegacyFormField, MatLegacyLabel, MatLegacySuffix, MatLegacyInput, MatLegacyButton, MatLegacyCard, MatLegacySelect, MatLegacyOption, MatDatepicker, MatDatepickerInput, MatDatepickerToggle, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, MaxLengthValidator, FormGroupDirective, FormControlName], styles: ["\n\n.head-text[_ngcontent-%COMP%] {\n  display: block;\n  width: 100%;\n  text-align: center;\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\n.full-50[_ngcontent-%COMP%] {\n  width: 56% !important;\n}\n.accpart[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%], \n.accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  width: 170px;\n  font-weight: bold;\n}\n.accpart[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n}\n  .view-user .mat-form-field-appearance-outline .mat-form-field-outline-end, \n  .view-user .mat-form-field-appearance-outline .mat-form-field-outline-start {\n  background: transparent !important;\n}\n.htext[_ngcontent-%COMP%] {\n  padding-bottom: 15px;\n}\n.mat-warn[_ngcontent-%COMP%] {\n  padding: 0 40px;\n  background: #f65c00 !important;\n}\n.cncl-btn[_ngcontent-%COMP%] {\n  background: #f4f4f4 !important;\n}\n@media screen and (max-width: 767px) {\n  .page-wrapper.editpart[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0px 0 20px;\n    background: #fff;\n    padding: 15px;\n    border-top: 2px solid #d9d3d3;\n    border-bottom: 2px solid #d9d3d3;\n  }\n  .portal-outer.view-user.result_block[_ngcontent-%COMP%] {\n    padding: 0 28px;\n  }\n  .portal-outer[_ngcontent-%COMP%] {\n    height: inherit !important;\n    margin-bottom: 25px;\n  }\n  .accpart[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%], \n   .accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .full-50[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .accpart[_ngcontent-%COMP%] {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n    flex-wrap: wrap;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    background: #f0eff4;\n  }\n    .view-user .mat-form-field-wrapper {\n    background: #ffffff;\n  }\n    #content {\n    background: #ffffff;\n  }\n  .headtext[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    width: 100%;\n    display: block !important;\n  }\n  .head-text[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .htext[_ngcontent-%COMP%] {\n    padding-top: 15px;\n  }\n}\n.head-text[_ngcontent-%COMP%] {\n  display: block;\n}\n.headtext[_ngcontent-%COMP%] {\n  display: none;\n}\n.view-edit[_ngcontent-%COMP%] {\n  margin-right: 37px;\n}\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {\n  .accpart[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%], \n   .accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n    width: 103px;\n  }\n}\n@media only screen and (min-device-width: 810px) and (max-device-width: 1080px) {\n  .accpart[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%], \n   .accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n    width: 103px;\n  }\n}\n@media only screen and (min-device-width: 810px) and (max-device-width: 1080px) and (orientation: landscape) {\n  .accpart[_ngcontent-%COMP%]   mat-label[_ngcontent-%COMP%], \n   .accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n    width: 103px;\n  }\n  .accpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:first-child {\n    padding-top: 4px;\n  }\n}\n/*# sourceMappingURL=patient-info-edit.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PatientInfoEditComponent, { className: "PatientInfoEditComponent", filePath: "src\\app\\components\\patient-managements\\patient-info-edit\\patient-info-edit.component.ts", lineNumber: 16 });
})();

// src/app/components/reset/reset.component.ts
var _c0 = ["formGroupDirective"];
var _c1 = (a0, a1) => ({ "red": a0, "green": a1 });
function ResetComponent_div_15_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 24);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(2, _c1, ctx_r0.isMsgRed, !ctx_r0.isMsgRed));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsLinkScreen.SignalNotMeetCriteria, " ");
  }
}
function ResetComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, ResetComponent_div_15_span_1_Template, 2, 5, "span", 23);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.f == null ? null : ctx_r0.f.NewSignal.touched) && ctx_r0.f.NewSignal.invalid);
  }
}
function ResetComponent_div_16_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 24);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(2, _c1, ctx_r0.isMsgRed, !ctx_r0.isMsgRed));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsLinkScreen.newSignalAndReenterSingnalNotSame, " ");
  }
}
function ResetComponent_div_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, ResetComponent_div_16_span_1_Template, 2, 5, "span", 23);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.f == null ? null : ctx_r0.f.ConfirmSignal.errors.mustMatch);
  }
}
function ResetComponent_mat_icon_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-icon", 25);
    \u0275\u0275text(1, " check");
    \u0275\u0275elementEnd();
  }
}
function ResetComponent_button_27_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 26);
    \u0275\u0275listener("click", function ResetComponent_button_27_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.submitReset());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("disabled", !ctx_r0.userResetForm.valid);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsLinkScreen.Submit, " ");
  }
}
var ResetComponent = class _ResetComponent {
  constructor(formBuilder, labelService, userService, router) {
    this.formBuilder = formBuilder;
    this.labelService = labelService;
    this.userService = userService;
    this.router = router;
    this.isMsgRed = true;
    this.msg = "";
    this.isSubmitVisible = false;
    this.lang = EnmLanguage.English;
    this.redirctUrl = null;
    this.baseUrl = "zoetisdx.com";
    this.subDomain = "staginginternal";
  }
  ngOnInit() {
    if (this.router.url.indexOf("?rst=") != -1) {
      const params = this.router.url.trim().split("?rst=")[1].split("&loc=");
      if (params[1] != void 0 && params[1] != null && params[1] != "") {
        this.lang = parseInt(params[1].split("&rtyp=")[0]);
        debugger;
        if (params[1].split("&rtyp=")[1] != void 0 && params[1].split("&rtyp=")[1].toString().toLocaleLowerCase() == "bkoffice")
          if (location.host == "beta.zoetisdx.com") {
            this.subDomain = "betainternal";
          } else if (location.host == "staging.zoetisdx.com") {
            this.subDomain = "staginginternal";
          } else {
            this.subDomain = "internal";
          }
        this.redirctUrl = `https://${this.subDomain}.zoetisdx.com`;
      }
      this.labelService.selectedLanguage = this.lang;
      this.getLabelDetails();
      this.isSubmitVisible = true;
      this.resetSignal = new ResetSignal();
      this.resetSignal.UserGuid = params[0];
      this.userResetForm = this.createFormGroup(new ResetSignal());
    } else {
      this.isSubmitVisible = false;
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindLinkLabel();
    });
  }
  get f() {
    return this.userResetForm?.controls;
  }
  submitReset() {
    if (this.userResetForm.invalid) {
      this.isMsgRed = true;
      return;
    }
    if (this.userResetForm.controls["NewSignal"].value === this.userResetForm.controls["ConfirmSignal"].value) {
      this.resetSignal.NewSignal = this.userResetForm.controls["NewSignal"].value;
      this.userService.updateSignal(this.resetSignal).subscribe({
        next: () => {
          this.isMsgRed = false;
          this.msg = this.labelService.dsLinkScreen.SignalUpdated;
          this.formGroupDirective.resetForm();
        },
        error: () => {
          this.isMsgRed = true;
          this.msg = this.labelService.dsLinkScreen.InvalidLink;
          this.formGroupDirective.resetForm();
        }
      });
    } else {
      this.isMsgRed = true;
      this.userResetForm.controls["ConfirmSignal"].setValue("");
      this.msg = this.labelService.dsLinkScreen.newSignalAndReenterSingnalNotSame;
    }
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "NewSignal": [dataItem.Signal, Validators.compose([Validators.required, Validators.maxLength(20), Validators.minLength(8), Validators.pattern("(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[A-Za-z0-9$@$!%*?&].{7,}")])],
      "ConfirmSignal": ["", Validators.required]
    }, { validator: this.mustMatch("NewSignal", "ConfirmSignal") });
  }
  mustMatch(controlName, matchingControlName) {
    return (formGroup) => {
      const control = formGroup.controls[controlName];
      const matchingControl = formGroup.controls[matchingControlName];
      if (matchingControl.errors && !matchingControl.errors.mustMatch) {
        return;
      }
      if (control.value !== matchingControl.value) {
        matchingControl.setErrors({ mustMatch: true });
      } else {
        matchingControl.setErrors(null);
      }
    };
  }
  static {
    this.\u0275fac = function ResetComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResetComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ResetComponent, selectors: [["app-reset"]], viewQuery: function ResetComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c0, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, decls: 30, vars: 16, consts: [["formGroupDirective", "ngForm"], [1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-75"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", ""], ["id", "pass-outer", 1, "text-center", "mb-5", "info"], ["placement", "top", 3, "ngbTooltip"], [1, "text-center", "mb-2", "errormsg", 3, "ngClass"], [4, "ngIf"], ["autocomplete", "off", 1, "form-signin", 3, "formGroup"], [1, "form-label-group", "mb-2"], ["appearance", "outline", 1, "w-100"], ["type", "password", "matInput", "", "formControlName", "NewSignal", "maxlength", "20", "required", "", 3, "placeholder"], ["class", "chkmark", 4, "ngIf"], [1, "form-label-group", "mb-4"], ["type", "password", "matInput", "", "matInput", "", "formControlName", "ConfirmSignal", "maxlength", "20", "required", "", 3, "placeholder"], [1, "d-flex", "align-items-center", "justify-content-center", "flex-column"], ["class", "btn btn-lg btn-primary btn-block", "mat-raised-button", "", "color", "warn", 3, "disabled", "click", 4, "ngIf"], ["mat-raised-button", "", "color", "warn", 1, "btn", "btn1", "btn-lg", "btn-primary", "btn-block", "mt-3", 3, "href"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"], [1, "chkmark"], ["mat-raised-button", "", "color", "warn", 1, "btn", "btn-lg", "btn-primary", "btn-block", 3, "click", "disabled"]], template: function ResetComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "div", 4)(4, "div", 5)(5, "div", 6)(6, "div", 7);
        \u0275\u0275element(7, "img", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 9)(9, "span");
        \u0275\u0275text(10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "mat-icon", 10);
        \u0275\u0275text(12, " info");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "div", 11);
        \u0275\u0275text(14);
        \u0275\u0275elementEnd();
        \u0275\u0275template(15, ResetComponent_div_15_Template, 2, 1, "div", 12)(16, ResetComponent_div_16_Template, 2, 1, "div", 12);
        \u0275\u0275elementStart(17, "form", 13, 0)(19, "div", 14)(20, "mat-form-field", 15);
        \u0275\u0275element(21, "input", 16);
        \u0275\u0275template(22, ResetComponent_mat_icon_22_Template, 2, 0, "mat-icon", 17);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(23, "div", 18)(24, "mat-form-field", 15);
        \u0275\u0275element(25, "input", 19);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(26, "div", 20);
        \u0275\u0275template(27, ResetComponent_button_27_Template, 2, 2, "button", 21);
        \u0275\u0275elementStart(28, "a", 22);
        \u0275\u0275text(29);
        \u0275\u0275elementEnd()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(10);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsLinkScreen.ResetYourPassword, "");
        \u0275\u0275advance();
        \u0275\u0275property("ngbTooltip", ctx.labelService.dsLinkScreen.signalHints);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(13, _c1, ctx.isMsgRed, !ctx.isMsgRed));
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.msg, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.f == null ? null : ctx.f.NewSignal.errors);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !(ctx.f == null ? null : ctx.f.NewSignal.invalid) && (ctx.f == null ? null : ctx.f.ConfirmSignal.errors));
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.userResetForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("placeholder", ctx.labelService.dsLinkScreen.NewPassword);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.f.NewSignal.invalid);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsLinkScreen.ReenterPassword);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isSubmitVisible);
        \u0275\u0275advance();
        \u0275\u0275propertyInterpolate("href", ctx.redirctUrl, \u0275\u0275sanitizeUrl);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsLinkScreen.ReturntoLogin, " ");
      }
    }, dependencies: [NgClass, NgIf, NgbTooltip, MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatLegacyAnchor, MatIcon, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, FormGroupDirective, FormControlName], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n  padding: 50px 8px !important;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 70%;\n}\n.select-lang[_ngcontent-%COMP%] {\n  float: right;\n  width: 200px;\n  margin-top: 16px;\n  margin-right: 21px;\n}\na[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-weight: 500;\n}\n.signup[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #407ec9;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  margin-top: 8px;\n  font-size: 14px;\n  position: relative;\n  margin-bottom: 20px !important;\n}\n.btn1[_ngcontent-%COMP%] {\n  color: #000;\n  background-color: #fff;\n  border: solid 0.4px #979797 !important;\n  margin: 0 10px 0 0;\n}\n.mat-flat-button[disabled][_ngcontent-%COMP%] {\n}\n.mat-raised-button[disabled][_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  background-color: #ff640078 !important;\n  cursor: not-allowed !important;\n  color: #fff !important;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n.green[_ngcontent-%COMP%] {\n  color: green;\n}\n.card-signin[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  font-size: 18px;\n  color: #000;\n}\n.card-signin[_ngcontent-%COMP%]   .chkmark[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  font-size: 21px;\n  color: #4CAF50;\n  font-weight: bolder;\n  top: 3px;\n}\n.card-signin[_ngcontent-%COMP%]   .card-body[_ngcontent-%COMP%] {\n  position: relative;\n}\n/*# sourceMappingURL=reset.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ResetComponent, { className: "ResetComponent", filePath: "src\\app\\components\\reset\\reset.component.ts", lineNumber: 14 });
})();

// src/app/components/forgot/forgot.component.ts
var _c02 = ["formGroupDirective"];
var _c12 = (a0, a1) => ({ "red": a0, "black": a1 });
var ForgotComponent = class _ForgotComponent {
  constructor(formBuilder, userService, labelService, commonService) {
    this.formBuilder = formBuilder;
    this.userService = userService;
    this.labelService = labelService;
    this.commonService = commonService;
    this.dsForgotScreen = new ForgotScreen();
    this.isMsgRed = true;
    this.msg = "";
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.bindLabel();
    }
  }
  ngOnInit() {
    this.userResetReqForm = this.createFormGroup(new ResetSignalRequest());
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.bindLabel();
    });
  }
  bindLabel() {
    this.dsForgotScreen = new ForgotScreen();
    if (this.labelService.dsLabelData["ForgotScreen"] != void 0) {
      this.dsForgotScreen.ForgotYourPassword = this.labelService.dsLabelData["ForgotScreen"].find((x) => x.KeyValue == "ForgotYourPassword").LabelName;
      this.dsForgotScreen.EnterEmail = this.labelService.dsLabelData["ForgotScreen"].find((x) => x.KeyValue == "EnterEmail").LabelName;
      this.dsForgotScreen.Submit = this.labelService.dsLabelData["ForgotScreen"].find((x) => x.KeyValue == "Submit").LabelName;
      this.dsForgotScreen.ReturntoLogin = this.labelService.dsLabelData["ForgotScreen"].find((x) => x.KeyValue == "ReturntoLogin").LabelName;
      this.dsForgotScreen.forgotSignalRequest = this.labelService.getValue("ForgotScreen", "forgotSignalRequest", this.dsForgotScreen.forgotSignalRequest);
      this.dsForgotScreen.NotExist = this.labelService.getValue("ForgotScreen", "NotExist", this.dsForgotScreen.NotExist);
      this.dsForgotScreen.EmailIdNotFound = this.labelService.getValue("ForgotScreen", "EmailIdNotFound", this.dsForgotScreen.EmailIdNotFound);
    }
  }
  submitResetReq() {
    if (!this.userResetReqForm.valid) {
      this.msg = this.dsForgotScreen.NotExist;
      this.isMsgRed = true;
      return;
    }
    this.userService.resetSignalRequest(this.userResetReqForm.value).subscribe({ next: () => {
      this.isMsgRed = false;
      this.msg = this.dsForgotScreen.forgotSignalRequest;
      this.formGroupDirective.resetForm();
    }, error: (err) => {
      if (err.error && err.error.DisplayMessage) {
        this.msg = this.dsForgotScreen.EmailIdNotFound;
        this.isMsgRed = false;
      } else {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      }
    } });
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "Email": [dataItem.User, Validators.compose([Validators.required, Validators.maxLength(100), Validators.pattern("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,9}$")])],
      "LanguageId": this.labelService.selectedLanguage
    });
  }
  static {
    this.\u0275fac = function ForgotComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ForgotComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ForgotComponent, selectors: [["app-forgot"]], viewQuery: function ForgotComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c02, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, decls: 22, vars: 10, consts: [["formGroupDirective", "ngForm"], [1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-75"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "img"], ["data-testid", "frgt-title", 1, "text-center", "mb-4", "info"], [1, "text-center", "mb-2", "errormsg", 3, "ngClass"], ["autocomplete", "off", 1, "form-signin", 3, "keyup.enter", "formGroup"], [1, "form-label-group", "mb-3"], ["appearance", "outline", 1, "w-100"], ["matInput", "", "formControlName", "Email", 3, "placeholder"], [1, "d-flex", "align-items-center", "justify-content-center", "flex-column"], ["mat-raised-button", "", "color", "warn", 1, "btn", "btn-lg", "btn-primary", "btn-block", 3, "click"], ["mat-raised-button", "", "color", "warn", "routerLink", "/internal", 1, "btn", "btn1", "btn-lg", "btn-primary", "btn-block", "mt-4"]], template: function ForgotComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "div", 4)(4, "div", 5)(5, "div", 6)(6, "div", 7);
        \u0275\u0275element(7, "img", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 9);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "div", 10);
        \u0275\u0275text(11);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "form", 11, 0);
        \u0275\u0275listener("keyup.enter", function ForgotComponent_Template_form_keyup_enter_12_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.submitResetReq());
        });
        \u0275\u0275elementStart(14, "div", 12)(15, "mat-form-field", 13);
        \u0275\u0275element(16, "input", 14);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 15)(18, "button", 16);
        \u0275\u0275listener("click", function ForgotComponent_Template_button_click_18_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.submitResetReq());
        });
        \u0275\u0275text(19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(20, "button", 17);
        \u0275\u0275text(21);
        \u0275\u0275elementEnd()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate1(" ", ctx.dsForgotScreen.ForgotYourPassword, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(7, _c12, ctx.isMsgRed, !ctx.isMsgRed));
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.msg, " ");
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.userResetReqForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("placeholder", ctx.dsForgotScreen.EnterEmail);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.dsForgotScreen.Submit);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.dsForgotScreen.ReturntoLogin);
      }
    }, dependencies: [NgClass, RouterLink, MatLegacyFormField, MatLegacyInput, MatLegacyButton, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n  padding: 50px 8px !important;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 70%;\n}\n.select-lang[_ngcontent-%COMP%] {\n  float: right;\n  width: 200px;\n  margin-top: 16px;\n  margin-right: 21px;\n}\na[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-weight: 500;\n}\n.signup[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #407ec9;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  margin-top: 16px;\n  font-size: 14px;\n}\n.btn1[_ngcontent-%COMP%] {\n  color: #000;\n  background-color: #fff;\n  border: solid 0.4px #979797 !important;\n  margin: 0 0 0 0;\n}\n.btn-primary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active {\n  color: #fff;\n  background-color: #fd6400 !important;\n  border-color: #fd6400 !important;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n.green[_ngcontent-%COMP%] {\n  color: green;\n}\n/*# sourceMappingURL=forgot.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ForgotComponent, { className: "ForgotComponent", filePath: "src\\app\\components\\forgot\\forgot.component.ts", lineNumber: 13 });
})();

// src/environments/environment.prod.ts
var apiUrl = window.location.href.replace("www", "").replace(".com", ".com/#").split("#")[0].replace(".zoetisdx", "zoetisdx").replace("zoetisdx", "api.zoetisdx");
var insightKey = `InstrumentationKey=b49ae51b-3358-459e-8676-0167c8b094d2;IngestionEndpoint=https://eastus2-0.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=88e2cb06-5458-4e59-b678-ba7c7dff3ad5`;
var ZCSDynamicUrl = "https://zcsdev.zoetisdx.com/";
var ZdxInternalUrl = "https://devinternal.zoetisdx.com/";
var zdxsHelpBaseUrl = "https://help.zoetisdx.com/zoetisdx";
var envName = "";
var zcsResourceId = "128";
if (apiUrl.split(".")[0].split("//")[1] != void 0)
  envName = apiUrl.split(".")[0].split("//")[1];
if (envName.toLowerCase() == "api") {
  insightKey = "InstrumentationKey=a413ee42-ab15-4dac-8f89-1a42f51cb085;IngestionEndpoint=https://eastus2-0.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=eefbb8d3-664c-4d6d-8f46-e4528b65729d";
  ZCSDynamicUrl = "https://zcs.zoetisdx.com/";
  ZdxInternalUrl = "https://internal.zoetisdx.com/";
  zdxsHelpBaseUrl: "https://help.zoetisdx.com/zoetisdx";
}
if (envName.toLowerCase() == "betaapi") {
  insightKey = "InstrumentationKey=7306cbba-a1a5-47e7-aa61-1f568217e612;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=710d6119-1258-4c13-b5b1-fe56ab376097";
  ZCSDynamicUrl = "https://zcs-beta.zoetisdx.com/";
  ZdxInternalUrl = "https://betainternal.zoetisdx.com/";
  zcsResourceId = "131";
}
if (envName.toLowerCase() == "devsupportapi") {
  insightKey = "InstrumentationKey=af3f235f-c5ab-44d6-b8f7-fb2c89d422b9;IngestionEndpoint=https://eastus2-0.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=82aa28f3-065b-416d-a4a1-a8585b002f4d";
  ZCSDynamicUrl = "https://zcs-support.zoetisdx.com/";
} else if (envName.toLowerCase() == "stagingapi") {
  insightKey = `InstrumentationKey=820ac662-492a-4b02-b1f2-0d341f585567;IngestionEndpoint=https://eastus2-0.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=d99f87bf-dcc6-403b-b345-a3dccc6142d0`;
  ZCSDynamicUrl = "https://zcsstage.zoetisdx.com/";
  ZdxInternalUrl = "https://staginginternal.zoetisdx.com/";
} else if (envName.toLowerCase() == "devapi") {
  insightKey = `InstrumentationKey=b49ae51b-3358-459e-8676-0167c8b094d2;IngestionEndpoint=https://eastus2-0.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=88e2cb06-5458-4e59-b678-ba7c7dff3ad5`;
}
var environment2 = {
  production: true,
  zcsResourceId,
  isProduction: location.host == "www.zoetisdx.com",
  cryptoEncryptionKey: "N5O3gVXnGzurtPtO",
  openUrlKey: "AWVH3475DG37FKF772EYE17A25432AU46E2D4UA61TRB1",
  // API_URL: 'https://stagingapi.zoetisdx.com/',                    // Zoetis Stage env
  // API_URL: 'https://devapi.zoetisdx.com/',                        // Zoetis Dev env
  API_URL: apiUrl,
  version: "/v215",
  // Expected Value = 'V213 | v212'|'v211'|'v210 | v29'|'v28'|'v27'|'v20'|'v13'|v12 |'v11'
  ZCSUrl: ZCSDynamicUrl,
  zdxhelpUrl: "zoetisdx",
  ZdxInternalUrl,
  zdxsHelpBaseUrl,
  appInsights: {
    //instrumentationKey: 'a413ee42-ab15-4dac-8f89-1a42f51cb085'    // Zoetis Prod
    //instrumentationKey: '820ac662-492a-4b02-b1f2-0d341f585567'    // Zoetis Stage
    // instrumentationKey: insightKey
    connectionString: insightKey
  },
  // GA_TRACKING_ID: {beta: 'G-GZQZ8JQJ7D', stage: 'GTM-KL26P23'},
  GA_TRACKING_ID: ["www.zoetisdx.com", "zoetisdx.com"].includes(location.host) ? "G-GZQZ8JQJ7D" : location.host == "beta.zoetisdx.com" ? "G-GZQZ8JQJ7D" : "GTM-KL26P23",
  Pendo_APIKey: "d9e7a2f2-6ba9-47ee-4dab-dcd9d66f8e53",
  // ZdxStage config
  firebaseConfig: {
    // file deepcode ignore HardcodedNonCryptoSecret: <Secret keys need instantly when application start>
    apiKey: "AIzaSyCPfq7YHg_Lx6QTcY0n9elZP8TOy3sqRkU",
    authDomain: "moose-uat.firebaseapp.com",
    databaseURL: "https://moose-uat.firebaseio.com",
    projectId: "moose-uat",
    storageBucket: "moose-uat.appspot.com",
    messagingSenderId: "130176374709",
    appId: "1:130176374709:web:1f54b16b550cc7cb8c2bfc",
    measurementId: "G-3STR4N75RL"
  },
  CvetPATH: "/embedded"
};

// src/app/components/dashboard/dashboard-filter/dashboard-filter.component.ts
var _c03 = ["select"];
var _c13 = ["myText"];
var _c2 = (a0) => ({ "toggle-accordion-icon": a0 });
var _c3 = (a0, a1, a2) => ({ "completed": a0, "cancelled": a1, "pending": a2 });
function DashboardFilterComponent_mat_option_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 49);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const species_r2 = ctx.$implicit;
    \u0275\u0275property("value", species_r2.Code);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", species_r2.Code, " ");
  }
}
function DashboardFilterComponent_mat_option_48_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-option", 50);
    \u0275\u0275listener("onSelectionChange", function DashboardFilterComponent_mat_option_48_Template_mat_option_onSelectionChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.selectionChangee($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const dr_r5 = ctx.$implicit;
    \u0275\u0275property("value", dr_r5.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2(" ", dr_r5 == null ? null : dr_r5.FirstName, " ", dr_r5 == null ? null : dr_r5.LastName, " ");
  }
}
function DashboardFilterComponent_p_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsSideFilterScreen.NoRecordsFound, " ");
  }
}
function DashboardFilterComponent_div_81_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 41)(1, "mat-radio-button", 42);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("value", 0);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsSideFilterScreen.All, " ");
  }
}
function DashboardFilterComponent_div_87_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 41)(1, "mat-radio-button", 42);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span");
    \u0275\u0275element(4, "img", 52);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("value", 2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsSideFilterScreen.RefLab, " ");
  }
}
function DashboardFilterComponent_div_97_mat_radio_button_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-radio-button", 42);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "span", 55);
    \u0275\u0275element(3, "img", 56);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const status_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("value", status_r8.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", status_r8.Status, " ");
    \u0275\u0275advance();
    \u0275\u0275property("matTooltip", status_r8.Info);
  }
}
function DashboardFilterComponent_div_97_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 57);
  }
  if (rf & 2) {
    const status_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(1, _c3, ctx_r3.isComplated(status_r8.Id), ctx_r3.isCanceled(status_r8.Id), ctx_r3.isPending(status_r8.Id)));
  }
}
function DashboardFilterComponent_div_97_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 41);
    \u0275\u0275template(1, DashboardFilterComponent_div_97_mat_radio_button_1_Template, 4, 3, "mat-radio-button", 53)(2, DashboardFilterComponent_div_97_span_2_Template, 1, 5, "span", 54);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const status_r8 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", status_r8.InClinic);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", status_r8.InClinic);
  }
}
var DashboardFilterComponent = class _DashboardFilterComponent {
  constructor(commonService, refLabService, patientService, labelService, sidefilterService, dataService, headerService) {
    this.commonService = commonService;
    this.refLabService = refLabService;
    this.patientService = patientService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.dataService = dataService;
    this.headerService = headerService;
    this.outFilterBy = new EventEmitter();
    this.outAnlysisSource = new EventEmitter();
    this.closeFilterPanel = new EventEmitter();
    this.dsAnalyzer = [];
    this.dsAnalysisType = [];
    this.dsGender = [];
    this.dsSpecies = [];
    this.dsSubSpecies = [];
    this.dsBreed = [];
    this.dsAnalysisStatus = [];
    this.breedList = [];
    this.pageNumber = 1;
    this.step = 0;
    this.searchText = "";
    this.enSpeciesList = [];
    this.enGenderList = [];
    this.selectedPhysician = [];
    this.label = this.labelService.dsSideFilterScreen;
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.getLabelDetails();
  }
  ngOnInit(applyDoc = true) {
    this.isRefLabLink = this.dataService.appData.authDetails["IsLinkedRefLabClinic"];
    if (!this.isRefLabLink)
      this.sidefilterService.filter["AnalysisSourceId"] = 1;
    this.select._handleKeydown = (event) => {
      if (event.key == " " || event.code == "Space")
        return;
      if (!this.select.disabled) {
        this.select.panelOpen ? this.select._handleOpenKeydown(event) : this.select._handleClosedKeydown(event);
      }
    };
    this.getPhysicianList("", this.pageNumber, 60, null);
    this.commonService.getFilterDDLDetails(1).subscribe((data) => {
      this.enSpeciesList = data.ResponseData.SpeciesList;
      this.enGenderList = data.ResponseData.GenderList;
    });
    const langId = this.dataService.appData.authDetails["LanguageId"];
    this.commonService.getFilterDDLDetails(langId).subscribe((data) => {
      data.ResponseData["enSpeciesList"] = this.enSpeciesList;
      data.ResponseData["enGenderList"] = this.enGenderList;
      const filterDropDowns = data.ResponseData;
      this.dataService.appData.filterDropDownList = filterDropDowns;
      this.dataService.data.next(this.dataService.appData);
      this.dsBreed = filterDropDowns.Breed;
      this.dsGender = filterDropDowns.GenderList;
      this.dsAnalysisStatus = filterDropDowns.AnalysisStatus;
      this.dsSpecies = filterDropDowns.SpeciesList;
      this.dsAnalysisStatus.forEach((ele) => {
        if (ele.Id == EnmAnalysisStatus.Completed) {
          ele.Status = this.labelService.dsSideFilterScreen.Completed;
          ele.Info = this.labelService.dsSideFilterScreen.TestComplete;
        }
        if (ele.Id == EnmAnalysisStatus.Canceled) {
          ele.Status = this.labelService.dsSideFilterScreen.Canceled;
          ele.Info = this.labelService.dsSideFilterScreen.TestCanceled;
        }
        if (ele.Id == EnmAnalysisStatus.Pending)
          ele.Status = this.labelService.dsSideFilterScreen.Pending;
      });
      this.outAnlysisSource.emit(filterDropDowns.AnalysisSourceList);
    });
    if (this.dataService.pageState.dashboard.selectedRequestingDoctors && applyDoc) {
      this.sidefilterService.filter.selectedDr = this.dataService.pageState.dashboard.selectedRequestingDoctors;
      this.selectedPhysician = this.dataService.pageState.dashboard.selectedRequestingDoctors;
    }
  }
  isComplated(id) {
    return id == EnmAnalysisStatus.Completed;
  }
  isCanceled(id) {
    return id == EnmAnalysisStatus.Canceled;
  }
  isPending(id) {
    return id == EnmAnalysisStatus.Pending;
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((res) => {
      this.labelService.dsLabelData = res.ResponseData;
      this.labelService.bindSideFilterLabel();
    });
  }
  triggerEvent(e) {
    if (e == false) {
      this.searchText = "";
      this.sidefilterService.filter.selectedDr = this.selectedPhysician;
    }
  }
  onChange() {
    this.sidefilterService.filter.selectedDr = this.selectedPhysician;
  }
  onRequestingDrChange() {
    this.sidefilterService.filter.PhysicianName = this.selectedPhysician.join();
  }
  selectionChangee($event) {
    if ($event.isUserInput) {
      if (this.selectedPhysician.indexOf($event.source.value) == -1) {
        this.selectedPhysician.push($event.source.value);
      } else {
        this.selectedPhysician.splice(this.selectedPhysician.indexOf($event.source.value), 1);
      }
    }
  }
  onSpeciesChange(event) {
    if (this.sidefilterService.filter.SpeciesId != null && this.sidefilterService.filter.SpeciesId > 0)
      this.dsSubSpecies = this.dsSpecies.find((x) => x.Id === this.sidefilterService.filter.SpeciesId)["SubSpecies"];
    else
      this.dsSubSpecies = [];
    this.sidefilterService.filter.SpeciesId = event.value;
    this.getBreedList(event.value);
  }
  getBreedList(speciesId) {
    const langId = this.dataService.appData.authDetails["LanguageId"];
    this.refLabService.getBreedListBySpeciesId(speciesId, langId).subscribe((res) => {
      this.sidefilterService.filter.Breed = "";
      this.breedList = res.ResponseData;
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  onAnalyzerChange(analyzerName) {
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.filter.AnalysisSourceId = analyzerName == "Ref Lab" ? 2 : 1;
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.AnalysisTypeId = null;
    this.sidefilterService.FromDate = new Date(this.commonService.twoYearBeforeFromToday);
    this.sidefilterService.ToDate = this.commonService.today;
    this.dsSubSpecies = [];
    this.breedList = [];
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.sidefilterService.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.AnalysisSourceId = this.dataService.appData.authDetails["IsLinkedRefLabClinic"] ? 0 : 1;
  }
  applyFilter(isFilter, isMobile) {
    this.headerService.searchText = "";
    this.commonService.firebase.analytics().logEvent("apply_filter");
    this.sidefilterService.filter.IsApplyFilter = isFilter;
    this.sidefilterService.filter.PageNo = 1;
    this.sidefilterService.filter.FromDate = this.sidefilterService.FromDate != null ? this.commonService.getMomentFromDateTime(this.sidefilterService.FromDate) : null;
    this.sidefilterService.filter.ToDate = this.sidefilterService.ToDate != null ? this.commonService.getMomentToDateTime(this.sidefilterService.ToDate) : null;
    const filter = __spreadValues({}, this.sidefilterService.filter);
    if (filter.selectedDr && filter.selectedDr.length) {
      this.dataService.pageState.dashboard.selectedRequestingDoctors = filter.selectedDr;
      this.dataService.page.next(this.dataService.pageState);
      const selectedDr = [];
      filter.selectedDr.forEach((v) => {
        const doc = this.doctorList.find((x) => x.Id == v);
        selectedDr.push(doc.FirstName + " " + doc.LastName);
      });
      filter.selectedDr = selectedDr;
      filter.PhysicianName = selectedDr.join();
    }
    this.outFilterBy.emit(filter);
    if (isMobile)
      this.closeFilter();
  }
  clearFilter() {
    this.myNameElem.nativeElement.value = "";
    this.setDefaultFilter();
    this.applyFilter(false);
    this.selectedPhysician = [];
    this.ngOnInit(false);
  }
  setStep(index) {
    this.step = this.step == index ? 0 : index;
  }
  closeFilter() {
    this.closeFilterPanel.emit(true);
  }
  getPhysicianList(SearchText, PageNo, PageSize, AnalysisSourceId) {
    if (this.sidefilterService.filter.AnalysisSourceId != 0) {
      AnalysisSourceId = this.sidefilterService.filter.AnalysisSourceId;
    }
    const dd = {
      "BusinessGuid": localStorage.businessGuid,
      "AnalysisSourceId": AnalysisSourceId,
      "PageSize": PageSize,
      "PageNo": PageNo,
      "SearchText": SearchText
    };
    this.refLabService.GetProvidersFilterList(dd).subscribe((data) => {
      const uniquePhysicians = [];
      const seenNames = /* @__PURE__ */ new Set();
      data.ResponseData.Physician?.forEach((ele) => {
        if (ele["FirstName"] == ele["LastName"]) {
          ele["LastName"] = "";
          ele["PhysicianIdName"] = ele["FirstName"];
        }
        const cleanedName = ele.PhysicianIdName.replace(/\s*\([^)]*\)$/, "").trim().toLowerCase();
        if (!seenNames.has(cleanedName)) {
          seenNames.add(cleanedName);
          uniquePhysicians.push(__spreadProps(__spreadValues({}, ele), {
            PhysicianIdName: cleanedName
          }));
        }
        ;
      });
      this.doctorList = uniquePhysicians;
      this.pageNumber += 1;
    }, (err) => {
      console.log(err);
    });
  }
  static {
    this.\u0275fac = function DashboardFilterComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DashboardFilterComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(HeaderService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DashboardFilterComponent, selectors: [["app-dashboard-filter"]], viewQuery: function DashboardFilterComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c03, 7);
        \u0275\u0275viewQuery(_c13, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.select = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.myNameElem = _t.first);
      }
    }, outputs: { outFilterBy: "outFilterBy", outAnlysisSource: "outAnlysisSource", closeFilterPanel: "closeFilterPanel" }, decls: 105, vars: 61, consts: [["select", "matSelect"], ["myText", ""], ["pickerFrom", ""], ["pickerTo", ""], [1, "resp", "clse"], [3, "click"], [1, "resp", "respfilter"], [1, "d-flex", "justify-content-between", "mt-2"], [1, "filter-head"], ["data-testid", "clr-title", 1, "clrall", 3, "click"], [1, "pl-4", "pr-4"], [1, "desk", "d-flex", "justify-content-between", "mt-4"], [1, "clrall", 3, "click"], [1, "d-flex", "flex-column"], [1, "r-head", "mt-1", "heading"], [1, "mt-1"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "maxlength", "20", "ngDefaultControl", "", "autocomplete", "false", 3, "ngModelChange", "keyup.enter", "placeholder", "ngModel"], [1, "mt-2"], ["type", "text", "matInput", "", "maxlength", "20", "ngDefaultControl", "", "autocomplete", "off", 3, "ngModelChange", "keyup.enter", "placeholder", "ngModel"], ["ngDefaultControl", "", 3, "selectionChange", "ngModelChange", "ngModel", "placeholder"], ["value", ""], [3, "value", 4, "ngFor", "ngForOf"], ["multiple", "", "ngDefaultControl", "", "matTooltipPosition", "below", "matTooltipClass", "below", 3, "selectionChange", "openedChange", "ngModelChange", "placeholder", "matTooltip", "ngModel"], ["type", "text", "matInput", "", "ngDefaultControl", "", 2, "margin", "12px", 3, "ngModelChange", "placeholder", "ngModel"], [3, "value", "onSelectionChange", 4, "ngFor", "ngForOf"], ["style", "text-align: center;", 4, "ngIf"], [2, "margin", "14px 5px"], [1, "htext", "heading"], [2, "float", "right", 3, "click"], [1, "closeall", 3, "ngClass"], ["src", "../../../assets/img/updropdwn.png", "alt", "img", 1, "updropdwn"], [3, "hidden"], [1, "d-flex", "flex-column", "range"], [1, "r-head", "mt-3", "heading"], ["matInput", "", "ngDefaultControl", "", "readonly", "", 3, "focus", "ngModelChange", "placeholder", "matDatepicker", "ngModel", "max"], ["matPrefix", "", 3, "for"], ["matInput", "", "ngDefaultControl", "", "readonly", "", 3, "focus", "ngModelChange", "placeholder", "matDatepicker", "ngModel", "min", "max"], [1, "d-flex", "flex-column", "mt-3"], ["ngDefaultControl", "", 1, "d-flex", "flex-column", 3, "ngModelChange", "ngModel"], ["class", "d-flex justify-content-between mb-1", 4, "ngIf"], [1, "d-flex", "justify-content-between", "mb-1"], [1, "example-margin", 3, "value"], [2, "margin-right", "-4px!important"], ["height", "16", "Src", "../../../assets/img/poc-icon@2x.png", "alt", "img", 1, "mr-0", "ng-star-inserted"], ["class", "d-flex justify-content-between mb-1", 4, "ngFor", "ngForOf"], [1, "mt-5", "mb-3", "d-flex", "justify-content-center", "applydesk"], ["mat-raised-button", "", "color", "warn", 1, "w-25", 3, "click"], [1, "mt-5", "mb-3", "d-flex", "justify-content-center", "applymob"], [3, "value"], [3, "onSelectionChange", "value"], [2, "text-align", "center"], ["height", "20", "Src", "../../../assets/img/lab-icon@2x.png", "alt", "img", 1, "mr-0", "ng-star-inserted"], ["class", "example-margin", 3, "value", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["matTooltipPosition", "below", "matTooltipClass", "below", 1, "status-info-icon", 3, "matTooltip"], ["src", "./assets/img/icart.svg", "alt", "", 1, "icart"], [3, "ngClass"]], template: function DashboardFilterComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 4)(1, "p");
        \u0275\u0275text(2, "X ");
        \u0275\u0275elementStart(3, "span", 5);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_span_click_3_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.closeFilter());
        });
        \u0275\u0275text(4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(5, "div", 6)(6, "div", 7)(7, "span", 8);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "a", 9);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_a_click_9_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearFilter());
        });
        \u0275\u0275text(10);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(11, "div", 10)(12, "div", 11)(13, "span", 8);
        \u0275\u0275text(14);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(15, "span", 12);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_span_click_15_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearFilter());
        });
        \u0275\u0275text(16);
        \u0275\u0275elementEnd()();
        \u0275\u0275element(17, "hr");
        \u0275\u0275elementStart(18, "div", 13)(19, "div", 14);
        \u0275\u0275text(20);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(21, "div", 15)(22, "mat-form-field", 16)(23, "input", 17);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_23_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.PatientId, $event) || (ctx.sidefilterService.filter.PatientId = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("keyup.enter", function DashboardFilterComponent_Template_input_keyup_enter_23_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "div")(25, "div", 18)(26, "mat-form-field", 16)(27, "input", 19);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_27_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.PatientName, $event) || (ctx.sidefilterService.filter.PatientName = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("keyup.enter", function DashboardFilterComponent_Template_input_keyup_enter_27_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true));
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(28, "div")(29, "mat-form-field", 16)(30, "input", 19);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_30_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.OwnerName, $event) || (ctx.sidefilterService.filter.OwnerName = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("keyup.enter", function DashboardFilterComponent_Template_input_keyup_enter_30_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(31, "section")(32, "div", 14);
        \u0275\u0275text(33);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(34, "div")(35, "mat-form-field", 16)(36, "mat-select", 20);
        \u0275\u0275listener("selectionChange", function DashboardFilterComponent_Template_mat_select_selectionChange_36_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSpeciesChange($event));
        });
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_mat_select_ngModelChange_36_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.SpeciesId, $event) || (ctx.sidefilterService.filter.SpeciesId = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementStart(37, "mat-option", 21);
        \u0275\u0275text(38);
        \u0275\u0275elementEnd();
        \u0275\u0275template(39, DashboardFilterComponent_mat_option_39_Template, 2, 2, "mat-option", 22);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(40, "div", 18)(41, "div", 14);
        \u0275\u0275text(42);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(43, "mat-form-field", 16)(44, "mat-select", 23, 0);
        \u0275\u0275listener("selectionChange", function DashboardFilterComponent_Template_mat_select_selectionChange_44_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onRequestingDrChange());
        })("openedChange", function DashboardFilterComponent_Template_mat_select_openedChange_44_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.triggerEvent($event));
        });
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_mat_select_ngModelChange_44_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.selectedDr, $event) || (ctx.sidefilterService.filter.selectedDr = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementStart(46, "input", 24, 1);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_46_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.searchText, $event) || (ctx.searchText = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_46_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onChange());
        });
        \u0275\u0275elementEnd();
        \u0275\u0275template(48, DashboardFilterComponent_mat_option_48_Template, 2, 3, "mat-option", 25);
        \u0275\u0275pipe(49, "physicianFilter");
        \u0275\u0275template(50, DashboardFilterComponent_p_50_Template, 2, 1, "p", 26);
        \u0275\u0275pipe(51, "physicianFilter");
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(52, "hr");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(53, "section")(54, "div", 27)(55, "span", 28);
        \u0275\u0275text(56);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(57, "a", 29);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_a_click_57_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.setStep(2));
        });
        \u0275\u0275elementStart(58, "span", 30);
        \u0275\u0275element(59, "img", 31);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(60, "div", 32)(61, "div", 33)(62, "div", 34);
        \u0275\u0275text(63);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(64, "div")(65, "mat-form-field", 16)(66, "input", 35);
        \u0275\u0275listener("focus", function DashboardFilterComponent_Template_input_focus_66_listener() {
          \u0275\u0275restoreView(_r1);
          const pickerFrom_r6 = \u0275\u0275reference(69);
          return \u0275\u0275resetView(pickerFrom_r6.open());
        });
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_66_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.FromDate, $event) || (ctx.sidefilterService.FromDate = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275element(67, "mat-datepicker-toggle", 36)(68, "mat-datepicker", null, 2);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(70, "div")(71, "mat-form-field", 16)(72, "input", 37);
        \u0275\u0275listener("focus", function DashboardFilterComponent_Template_input_focus_72_listener() {
          \u0275\u0275restoreView(_r1);
          const pickerTo_r7 = \u0275\u0275reference(75);
          return \u0275\u0275resetView(pickerTo_r7.open());
        });
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_input_ngModelChange_72_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.ToDate, $event) || (ctx.sidefilterService.ToDate = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275element(73, "mat-datepicker-toggle", 36)(74, "mat-datepicker", null, 3);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(76, "div", 38)(77, "div", 14);
        \u0275\u0275text(78);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(79, "div", 13)(80, "mat-radio-group", 39);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_mat_radio_group_ngModelChange_80_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.AnalysisSourceId, $event) || (ctx.sidefilterService.filter.AnalysisSourceId = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275template(81, DashboardFilterComponent_div_81_Template, 3, 2, "div", 40);
        \u0275\u0275elementStart(82, "div", 41)(83, "mat-radio-button", 42);
        \u0275\u0275text(84);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(85, "span", 43);
        \u0275\u0275element(86, "img", 44);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(87, DashboardFilterComponent_div_87_Template, 5, 2, "div", 40);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275element(88, "hr");
        \u0275\u0275elementStart(89, "div", 38)(90, "div", 14);
        \u0275\u0275text(91);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(92, "div", 13)(93, "mat-radio-group", 39);
        \u0275\u0275twoWayListener("ngModelChange", function DashboardFilterComponent_Template_mat_radio_group_ngModelChange_93_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.AnalysisStatusId, $event) || (ctx.sidefilterService.filter.AnalysisStatusId = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementStart(94, "div", 41)(95, "mat-radio-button", 42);
        \u0275\u0275text(96);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(97, DashboardFilterComponent_div_97_Template, 3, 2, "div", 45);
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(98, "hr");
        \u0275\u0275elementStart(99, "div", 46)(100, "button", 47);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_button_click_100_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true, false));
        });
        \u0275\u0275text(101);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(102, "div", 48)(103, "button", 47);
        \u0275\u0275listener("click", function DashboardFilterComponent_Template_button_click_103_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true, true));
        });
        \u0275\u0275text(104);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        let tmp_28_0;
        const pickerFrom_r6 = \u0275\u0275reference(69);
        const pickerTo_r7 = \u0275\u0275reference(75);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.Cancel);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.FILTERS);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ClearAll);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.FILTERS);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ClearAll);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Patient, " ");
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.PatientID);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.PatientId);
        \u0275\u0275advance(4);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.PatientName);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.PatientName);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.OwnerName);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.OwnerName);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Species, " ");
        \u0275\u0275advance(3);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.SpeciesId);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.Species);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.Species);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsSpecies);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.RequestingDoctor, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.SearchRequestingDoctor)("matTooltip", ctx.labelService.dsSideFilterScreen.RequestingDoctor.length > 24 ? ctx.labelService.dsSideFilterScreen.RequestingDoctor : "");
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.selectedDr);
        \u0275\u0275advance(2);
        \u0275\u0275propertyInterpolate("placeholder", ctx.labelService.dsSideFilterScreen.SearchRequestingDoctor);
        \u0275\u0275twoWayProperty("ngModel", ctx.searchText);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pipeBind2(49, 53, ctx.doctorList, ctx.searchText));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ((tmp_28_0 = \u0275\u0275pipeBind2(51, 56, ctx.doctorList, ctx.searchText)) == null ? null : tmp_28_0.length) <= 0);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Result, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(59, _c2, ctx.step === 2));
        \u0275\u0275advance(2);
        \u0275\u0275property("hidden", !(ctx.step === 2));
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ResultDate);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.From)("matDatepicker", pickerFrom_r6);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.FromDate);
        \u0275\u0275property("max", ctx.sidefilterService.ToDate !== null ? ctx.sidefilterService.ToDate : ctx.commonService.getCurrentDate());
        \u0275\u0275advance();
        \u0275\u0275property("for", pickerFrom_r6);
        \u0275\u0275advance(5);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.To)("matDatepicker", pickerTo_r7);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.ToDate);
        \u0275\u0275property("min", ctx.sidefilterService.FromDate)("max", ctx.commonService.getCurrentDate());
        \u0275\u0275advance();
        \u0275\u0275property("for", pickerTo_r7);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.Source);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.AnalysisSourceId);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isRefLabLink);
        \u0275\u0275advance(2);
        \u0275\u0275property("value", 1);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.InClinic, " ");
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.isRefLabLink);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.Status);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.AnalysisStatusId);
        \u0275\u0275advance(2);
        \u0275\u0275property("value", 0);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.All, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsAnalysisStatus);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Apply, " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Apply, " ");
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyFormField, MatLegacyPrefix, MatLegacyInput, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatDatepicker, MatDatepickerInput, MatDatepickerToggle, MatLegacyRadioGroup, MatLegacyRadioButton, MatLegacyTooltip, DefaultValueAccessor, NgControlStatus, MaxLengthValidator, NgModel, PhysicianFilterPipe], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.heading[_ngcontent-%COMP%] {\n  color: #585858;\n  margin-bottom: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.clrall[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  cursor: pointer;\n  font-weight: bold;\n}\n.srch[_ngcontent-%COMP%] {\n  position: relative;\n  top: -5px;\n}\n.newtest[_ngcontent-%COMP%] {\n  min-width: 178px !important;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 16px;\n  width: 16px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 16px;\n  width: 16px;\n}\n.cancelled[_ngcontent-%COMP%] {\n  background: red;\n  height: 16px;\n  width: 16px;\n}\n.processing[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  height: 16px;\n  width: 16px;\n}\n.filter-head[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-family: "GothamNarrowBold", sans-serif;\n  color: #585858;\n  margin-bottom: 12px;\n}\n.toggle-accordion-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: none !important;\n}\n.updropdwn[_ngcontent-%COMP%] {\n  transform: rotate(-180deg) !important;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: #f5f7f9;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  box-shadow: none !important;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not(.mat-expanded)   .mat-expansion-panel-header[_ngcontent-%COMP%]:hover:not([aria-disabled=true]) {\n  background: none;\n}\n.mat-raised-button[_ngcontent-%COMP%] {\n  background: #f5f7f9;\n  min-width: 15px;\n  padding: 0;\n  line-height: 10px !important;\n}\n.mat-expansion-panel-body[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.mat-expansion-panel-header[_ngcontent-%COMP%] {\n  height: 40px !important;\n  padding: 0 0;\n}\n.mat-content[_ngcontent-%COMP%] {\n  justify-content: space-between;\n}\n.resp[_ngcontent-%COMP%], \n.respfilter[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.applymob[_ngcontent-%COMP%] {\n  display: none !important;\n}\n@media screen and (max-width: 767px) {\n  .respfilter[_ngcontent-%COMP%] {\n    padding: 0 20px 10px 20px;\n    border-bottom: 1px solid #ccc;\n  }\n  .respfilter[_ngcontent-%COMP%]   .filter-head[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    color: #2476ce;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    margin-right: 20px;\n    text-align: right;\n    font-weight: bold;\n    padding-top: 8px;\n    color: red;\n    font-size: 16px;\n  }\n  .resp.clse[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-size: 15px;\n  }\n  .resp[_ngcontent-%COMP%], \n   .respfilter[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .applymob[_ngcontent-%COMP%] {\n    display: block !important;\n    margin-left: 25% !important;\n  }\n  .applydesk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .desk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 767px)and (max-width: 1024px) {\n  .respfilter[_ngcontent-%COMP%] {\n    padding: 0 20px 10px 20px;\n    border-bottom: 1px solid #ccc;\n  }\n  .respfilter[_ngcontent-%COMP%]   .filter-head[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    color: #2476ce;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    margin-right: 20px;\n    text-align: right;\n    font-weight: bold;\n    padding-top: 8px;\n    color: red;\n    font-size: 16px;\n  }\n  .resp.clse[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-size: 15px;\n  }\n  .resp[_ngcontent-%COMP%], \n   .respfilter[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .applymob[_ngcontent-%COMP%] {\n    display: block !important;\n    margin-left: 25% !important;\n  }\n  .applydesk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .desk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n}\n  .mat-tooltip-panel {\n  margin-top: 10px;\n}\n  .mat-tooltip {\n  background-color: #fff;\n  color: #000 !important;\n  -webkit-box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  -moz-box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  position: relative;\n}\n  .mat-tooltip::after {\n  width: 0;\n  height: 0;\n  content: "";\n  position: absolute;\n  border-left: 0.5rem solid transparent;\n  border-right: 0.5rem solid transparent;\n  border-bottom: 0.5rem solid #ffffff;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\nspan.status-info-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 10PX;\n  right: -16px;\n}\n.icart[_ngcontent-%COMP%] {\n  width: 15px;\n}\n  .mat-radio-label-content {\n  position: relative;\n}\n  .mat-select-panel.mat-primary {\n  min-width: calc(85% + 64px) !important;\n}\n@-moz-document url-prefix() {\n  ::ng-deep .mat-select-panel {\n    max-width: 238px;\n  }\n}\n/*# sourceMappingURL=dashboard-filter.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DashboardFilterComponent, { className: "DashboardFilterComponent", filePath: "src\\app\\components\\dashboard\\dashboard-filter\\dashboard-filter.component.ts", lineNumber: 12 });
})();

// src/app/components/dashboard/dashboard.component.ts
var _c04 = () => ["expandedDetail"];
var _c14 = (a0, a1, a2) => ({ completed: a0, cancelled: a1, pending: a2 });
var _c22 = (a0) => ({ "font-weight": a0 });
var _c32 = (a0) => ({ "color": a0 });
function DashboardComponent_span_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 50);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2(" ", ctx_r1.selectedAnalysisSource, " (", ctx_r1.originData.length, ") ");
  }
}
function DashboardComponent_th_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 51);
  }
}
function DashboardComponent_td_44_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 54);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label.new);
  }
}
function DashboardComponent_td_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52);
    \u0275\u0275template(1, DashboardComponent_td_44_span_1_Template, 2, 1, "span", 53);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.ViewedFlag === false);
  }
}
function DashboardComponent_th_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.LastAnalysis, " ");
  }
}
function DashboardComponent_td_47_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.LastAnalysis);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r5.DateReceivedStr, " ");
  }
}
function DashboardComponent_th_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.PatientID, " ");
  }
}
function DashboardComponent_td_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.PatientID);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r6.PatientId, " ");
  }
}
function DashboardComponent_th_52_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.PatientName, " ");
  }
}
function DashboardComponent_td_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.PatientName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r7.PatientName, " ");
  }
}
function DashboardComponent_th_55_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.OwnerName, " ");
  }
}
function DashboardComponent_td_56_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.OwnerName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r8.OwnerName, " ");
  }
}
function DashboardComponent_th_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Species, " ");
  }
}
function DashboardComponent_td_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Species);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r9.SpeciesName, " ");
  }
}
function DashboardComponent_th_61_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Breed, " ");
  }
}
function DashboardComponent_td_62_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52)(1, "span", 55);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Breed);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r10.BreedName, " ");
  }
}
function DashboardComponent_th_64_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 56);
  }
}
function DashboardComponent_td_65_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 52);
    \u0275\u0275element(1, "span", 55);
    \u0275\u0275elementEnd();
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_img_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 80);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_img_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 81);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label.InClinic);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, DashboardComponent_td_67_ng_container_3_div_1_span_11_ng_container_1_Template, 2, 1, "ng-container", 60);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subEle_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceName === "In Clinic");
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_12_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label.RefLab);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, DashboardComponent_td_67_ng_container_3_div_1_span_12_ng_container_1_Template, 2, 1, "ng-container", 60);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subEle_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceName === "Ref Lab");
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span")(1, "span", 82);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3, "/");
    \u0275\u0275elementStart(4, "span", 82);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const subEle_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(4, _c32, subEle_r12.HighCount ? "red" : "black"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", subEle_r12.HighCount ? subEle_r12.HighCount : "--", " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(6, _c32, subEle_r12.LowCount ? "blue" : "black"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(subEle_r12.LowCount ? subEle_r12.LowCount : "--");
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 83);
    \u0275\u0275listener("click", function DashboardComponent_td_67_ng_container_3_div_1_span_15_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r16);
      const subEle_r12 = \u0275\u0275nextContext().$implicit;
      const element_r14 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.markAs(subEle_r12, "READ", element_r14));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(4);
    \u0275\u0275propertyInterpolate("title", ctx_r1.label.MarkAsViewed);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label.new);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 84);
    \u0275\u0275listener("click", function DashboardComponent_td_67_ng_container_3_div_1_span_16_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r17);
      const subEle_r12 = \u0275\u0275nextContext().$implicit;
      const element_r14 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.markAs(subEle_r12, "UNREAD", element_r14));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(4);
    \u0275\u0275propertyInterpolate("title", ctx_r1.label.MarkAsNew);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label.Viewed);
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_span_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 85);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subEle_r12 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275classMapInterpolate1("float-left statusCode ", ctx_r1.commonService.ACPStatusCodeShow(subEle_r12.StatusCode), "");
    \u0275\u0275propertyInterpolate("title", ctx_r1.label[subEle_r12.StatusName]);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.commonService.ACPStatusCodeShow(subEle_r12.StatusCode));
  }
}
function DashboardComponent_td_67_ng_container_3_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 64)(1, "mat-card", 65)(2, "div", 66)(3, "span", 67);
    \u0275\u0275listener("click", function DashboardComponent_td_67_ng_container_3_div_1_Template_span_click_3_listener() {
      const subEle_r12 = \u0275\u0275restoreView(_r11).$implicit;
      const ctx_r12 = \u0275\u0275nextContext(2);
      const element_r14 = ctx_r12.$implicit;
      const i_r15 = ctx_r12.dataIndex;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.gotToResultDetails(i_r15, element_r14, subEle_r12));
    });
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "span", 68);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 69)(8, "span", 70);
    \u0275\u0275template(9, DashboardComponent_td_67_ng_container_3_div_1_img_9_Template, 1, 0, "img", 71)(10, DashboardComponent_td_67_ng_container_3_div_1_img_10_Template, 1, 0, "img", 72)(11, DashboardComponent_td_67_ng_container_3_div_1_span_11_Template, 2, 1, "span", 60)(12, DashboardComponent_td_67_ng_container_3_div_1_span_12_Template, 2, 1, "span", 60);
    \u0275\u0275elementEnd();
    \u0275\u0275template(13, DashboardComponent_td_67_ng_container_3_div_1_span_13_Template, 6, 8, "span", 60);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "div", 73);
    \u0275\u0275template(15, DashboardComponent_td_67_ng_container_3_div_1_span_15_Template, 2, 2, "span", 74)(16, DashboardComponent_td_67_ng_container_3_div_1_span_16_Template, 2, 2, "span", 75)(17, DashboardComponent_td_67_ng_container_3_div_1_span_17_Template, 2, 5, "span", 76);
    \u0275\u0275elementStart(18, "span", 77);
    \u0275\u0275listener("click", function DashboardComponent_td_67_ng_container_3_div_1_Template_span_click_18_listener() {
      const subEle_r12 = \u0275\u0275restoreView(_r11).$implicit;
      const ctx_r12 = \u0275\u0275nextContext(2);
      const element_r14 = ctx_r12.$implicit;
      const i_r15 = ctx_r12.dataIndex;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.gotToResultDetails(i_r15, element_r14, subEle_r12));
    });
    \u0275\u0275elementStart(19, "button", 78);
    \u0275\u0275element(20, "i", 79);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const subEle_r12 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(15, _c14, subEle_r12.AnalysisStatusId === 1, subEle_r12.AnalysisStatusId === 2, subEle_r12.AnalysisStatusId === 3));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(19, _c22, subEle_r12.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", subEle_r12.AnalysisTypeName, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(21, _c22, subEle_r12.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", subEle_r12.DateReceivedStr, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(23, _c22, subEle_r12.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceId === ctx_r1.analysisSrcId);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceId === 2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceName === "In Clinic");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceName === "Ref Lab");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.AnalysisSourceId === 2);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", subEle_r12.ViewedFlag === false && subEle_r12.AnalysisStatusId !== 2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.ViewedFlag === true && subEle_r12.AnalysisStatusId !== 2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", subEle_r12.SourceType === "ReferenceLab" && ctx_r1.commonService.ACPText(subEle_r12));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(25, _c32, subEle_r12.AnalysisStatusName === "Completed" ? "#067cd3" : "#0201009e"));
  }
}
function DashboardComponent_td_67_ng_container_3_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 86);
    \u0275\u0275listener("click", function DashboardComponent_td_67_ng_container_3_div_3_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r12 = \u0275\u0275nextContext(2);
      const element_r14 = ctx_r12.$implicit;
      const i_r15 = ctx_r12.dataIndex;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.navToPatientInfo(element_r14, i_r15));
    });
    \u0275\u0275elementStart(1, "span", 87);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "img", 88);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Viewmore, "");
  }
}
function DashboardComponent_td_67_ng_container_3_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 89)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Norecordsfound);
  }
}
function DashboardComponent_td_67_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, DashboardComponent_td_67_ng_container_3_div_1_Template, 21, 27, "div", 61);
    \u0275\u0275pipe(2, "slice");
    \u0275\u0275template(3, DashboardComponent_td_67_ng_container_3_div_3_Template, 4, 1, "div", 62)(4, DashboardComponent_td_67_ng_container_3_div_4_Template, 3, 1, "div", 63);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const element_r14 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", \u0275\u0275pipeBind3(2, 3, element_r14.preDetails || element_r14.Details, 0, element_r14.Details.length > 10 ? 10 : element_r14.Details.length));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r14.Details.length >= 1);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r14.Details.length === 0);
  }
}
function DashboardComponent_td_67_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 57)(1, "div", 58)(2, "div", 59);
    \u0275\u0275template(3, DashboardComponent_td_67_ng_container_3_Template, 5, 7, "ng-container", 60);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const i_r15 = ctx.dataIndex;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275attribute("colspan", ctx_r1.columnsToDisplay.length);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate1("id", "row", i_r15, "");
    \u0275\u0275property("@detailExpand", i_r15 === ctx_r1.expandedElement || ctx_r1.allRowsExpanded ? "expanded" : "collapsed");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r14.Details);
  }
}
function DashboardComponent_tr_68_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 90);
  }
}
function DashboardComponent_tr_69_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 91);
    \u0275\u0275listener("click", function DashboardComponent_tr_69_Template_tr_click_0_listener() {
      const ctx_r19 = \u0275\u0275restoreView(_r19);
      const element_r21 = ctx_r19.$implicit;
      const i_r22 = ctx_r19.dataIndex;
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.selectedRow(i_r22);
      return \u0275\u0275resetView(ctx_r1.expandedElement !== null ? ctx_r1.getPatientResultDetails(element_r21) : ctx_r1.none);
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r21 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classProp("example-expanded-row", ctx_r1.expandedElement === element_r21);
  }
}
function DashboardComponent_tr_70_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 92);
  }
}
function DashboardComponent_div_71_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "p");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "ul");
    \u0275\u0275text(6);
    \u0275\u0275element(7, "br");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Wewereunabletofindresults);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.SearchTips, "");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Pleaseverifyyourspelling, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Widenthescopeofyoursearch, " ");
  }
}
function DashboardComponent_div_71_tbody_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsAnaysisResultsScreen.Norecordsfound);
  }
}
function DashboardComponent_div_71_tbody_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsAnaysisResultsScreen.NorecordsfoundByFilter);
  }
}
function DashboardComponent_div_71_tbody_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 89)(1, "tr");
    \u0275\u0275template(2, DashboardComponent_div_71_tbody_2_div_2_Template, 2, 1, "div", 60)(3, DashboardComponent_div_71_tbody_2_div_3_Template, 2, 1, "div", 60);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.sidefilterService.filter.IsApplyFilter == false);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.sidefilterService.filter.IsApplyFilter == true);
  }
}
function DashboardComponent_div_71_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 93);
    \u0275\u0275template(1, DashboardComponent_div_71_div_1_Template, 9, 4, "div", 60)(2, DashboardComponent_div_71_tbody_2_Template, 4, 2, "tbody", 63);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isAdvSearched);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.isAdvSearched);
  }
}
var DashboardComponent = class _DashboardComponent {
  constructor(router, commonService, modalService, sidemenuService, confirmationDialogService, headerService, patientService, labelService, sidefilterService, dataService, EncrDecr, title, alertService, toaster) {
    this.router = router;
    this.commonService = commonService;
    this.modalService = modalService;
    this.sidemenuService = sidemenuService;
    this.confirmationDialogService = confirmationDialogService;
    this.headerService = headerService;
    this.patientService = patientService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.dataService = dataService;
    this.EncrDecr = EncrDecr;
    this.title = title;
    this.alertService = alertService;
    this.toaster = toaster;
    this.allRowsExpanded = false;
    this.isAdvSearched = false;
    this.isNotificationSelected = false;
    this.recordCount = 0;
    this.columnsToDisplay = [
      "ViewedFlag",
      "DateReceivedStr",
      "PatientId",
      "PatientName",
      "OwnerName",
      "SpeciesName",
      "BreedName",
      " "
    ];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.dsAnalysisSource = [];
    this.Eula = [];
    this.headerText = "Results";
    this.analysisSrcId = EnmAnalysisSource.POC;
    this.canceledAnalysisStatusId = EnmAnalysisStatus.Canceled;
    this.start = 0;
    this.limit = 30;
    this.end = this.limit + this.start;
    this.patientIdList = [];
    this.pataientList = [];
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);
    this.ToDateLabel = this.commonService.today;
    this.label = this.labelService.dsDashboardScreen;
    this.filter = new SideFilter();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.BusinessGuId = this.dataService.appData.authDetails["BusinessGuid"];
    this.filter.BusinessGuid = this.BusinessGuId;
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.dataService.pageState.default.requestParams = this.filter;
    this.sortState = this.dataService.pageState.dashboard.sortState;
    if (!this.dataService.pageState.dashboard.requestParams) {
      this.dataService.pageState.dashboard.requestParams = this.filter;
    }
    if (this.dataService.pageState.dashboard.requestParams) {
      if (this.dataService.pageState.dashboard.requestParams.FromDate) {
        this.sidefilterService.FromDate = new Date(this.dataService.pageState.dashboard.requestParams.FromDate);
      }
      if (this.dataService.pageState.dashboard.requestParams.ToDate) {
        this.sidefilterService.ToDate = new Date(this.dataService.pageState.dashboard.requestParams.ToDate);
      }
    }
    this.sidemenuService.selectedModuleId = EnmModule.Dashboard;
  }
  ngOnInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsSideMenuScreen.Dashboard}`);
    if (!this.dataService.appData.authDetails["IsLinkedRefLabClinic"])
      this.filter["AnalysisSourceId"] = 1;
    if (this.dataService.appData.authDetails["IsLicenseAgreement"]) {
      this.confirmationDialogService.confirm("EULA update", "", this.labelService.dsRotorManagementScreen.AgreeLabel, "Cancel", "lg", true, true).then((confirmed) => {
        if (confirmed) {
          this.commonService.UpdateAgreementFlag({
            UserGuid: JSON.parse(localStorage.authDetails).UserGuid,
            FlagId: 1
          }).subscribe({
            next: (data) => {
              this.Eula = data.ResponseData;
              this.dataService.appData.authDetails["IsLicenseAgreement"] = false;
              this.dataService.data.next(this.dataService.appData);
            },
            error: () => {
              this.confirmationDialogService.confirm("Alert", this.labelService.dsFuseManagementScreen.AddRefLabAccountRespErrorMessage, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
            }
          });
        } else {
          this.sidemenuService.logOut();
          this.router.navigate(["/login"]);
          window.location.reload();
        }
      });
    }
    if (this.dataService.pageState.dashboard.requestParams.FromDate != null && this.dataService.pageState.dashboard.requestParams.FromDate != "") {
      this.sidefilterService.FromDate = new Date(this.dataService.pageState.dashboard.requestParams.FromDate);
      this.sidefilterService.filter.FromDate = this.dataService.pageState.dashboard.requestParams.FromDate;
    }
    if (this.dataService.pageState.dashboard.requestParams.ToDate != null && this.dataService.pageState.dashboard.requestParams.ToDate != "") {
      this.sidefilterService.ToDate = new Date(this.dataService.pageState.dashboard.requestParams.ToDate);
      this.sidefilterService.filter.ToDate = this.dataService.pageState.dashboard.requestParams.ToDate;
    }
    if (this.headerService.selectedNotification != void 0 && this.headerService.selectedNotification != null) {
      this.getPatientBySelectedNotification(this.headerService.selectedNotification);
    } else {
      if (this.dataService.pageState.dashboard.resultsList.length > 0) {
        debugger;
        this.FromDateLabel = this.sidefilterService.FromDate ? this.sidefilterService.FromDate : new Date(this.commonService.twoYearBeforeFromToday);
        this.ToDateLabel = this.sidefilterService.ToDate ? this.sidefilterService.ToDate : this.commonService.today;
        this.sidefilterService.filter = this.dataService.pageState.dashboard.requestParams;
        this.originData = this.dataService.pageState.dashboard.resultsList;
        this.isLoadMore = this.dataService.pageState.dashboard?.loadmore;
        this.pataientList = this.dataService.pageState.dashboard.resultsList;
        this.dataSource = new MatLegacyTableDataSource(this.originData);
        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
        this.dataSource.sort = this.sort;
        this.bindDVMDDL();
        if (this.dataService.pageState.dashboard && this.dataService.pageState.dashboard.selectedRow) {
          const patient = this.pataientList[this.dataService.pageState.dashboard.selectedRow];
          patient.ViewedFlag = patient.Details.filter((x) => {
            return x.ViewedFlag === false;
          }).length < 1;
        }
      } else {
        this.sidefilterService.FromDate = new Date(this.commonService.twoYearBeforeFromToday);
        this.sidefilterService.ToDate = this.commonService.today;
        this.getPatientList(this.dataService.pageState.dashboard.requestParams);
      }
    }
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "Results");
    console.log(this.sidefilterService.filter.IsApplyFilter);
  }
  ngAfterViewInit() {
    try {
      this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
        this.labelService.dsLabelData = data.ResponseData;
        this.labelService.getDashboardScreenLabel();
        this.labelService.bindAnaysisResultsLabel();
        this.headerText = this.labelService.dsDashboardScreen.AnalysisResults;
        this.label = __spreadValues(__spreadValues({}, this.labelService.dsAnaysisResultsScreen), this.labelService.dsDashboardScreen);
        this.selectedAnalysisSource = this.filter.SearchTextToDisplayOnDashboard ? this.filter.SearchTextToDisplayOnDashboard : this.labelService.dsDashboardScreen.All;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } catch (error) {
      console.log(error);
    }
    if (this.dataService.pageState.dashboard.resultsList.length > 0) {
      setTimeout(() => {
        this.expandedElement = this.dataService.pageState.dashboard.selectedRow;
        const elmnt = document.getElementById("row" + this.expandedElement);
        if (elmnt)
          elmnt.scrollIntoView({
            behavior: "smooth",
            block: "center",
            inline: "center"
          });
        const patient = this.pataientList[this.expandedElement];
        this.getPatientResultDetails(patient);
      }, 1e3);
    }
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
    this.sidefilterService.ToDate = null;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.filter = new SideFilter();
  }
  selectedRow(rowIindex) {
    if (this.expandedElement == rowIindex) {
      this.expandedElement = null;
    } else {
      this.expandedElement = null;
      this.expandedElement = rowIindex;
    }
  }
  gotToResultDetails(rowIindex, ele, subEle) {
    gtag("event", "Results_Page", {
      Total_Results: "",
      Total_Unique_Results: "",
      Patient_ID: ele.PatientId,
      Patient_Name: ele.PatientName,
      Owner_Name: ele.OwnerName,
      Species: ele.SpeciesName,
      Breed: ele.BreedName,
      Result_Status: subEle.AnalysisStatusName,
      Result_Source: subEle.SourceType,
      Requesting_Doctor: subEle.PhysicianName,
      Clinic_Name: ""
    });
    console.log(this.dataService);
    this.dataService.appState.selectedResult.element = ele;
    this.dataService.appState.selectedResult.subElement = subEle;
    this.dataService.state.next(this.dataService.appState);
    this.expandedElement = rowIindex;
    this.dataService.pageState.dashboard.selectedRow = rowIindex;
    if (subEle.AnalysisStatusId == this.canceledAnalysisStatusId) {
      this.showMsg(subEle.CancelComment);
    } else {
      this.dataService.pageState.dashboard.resultsList = this.originData;
      this.markAs(subEle, "READ");
      this.patientService.showPataientTestResult(ele, subEle, this.headerService.filter, this.sidefilterService.filter, this.sort.active, this.sort.direction);
    }
    this.dataService.page.next(this.dataService.pageState);
  }
  onDataSort(e) {
    this.expandedElement = null;
    this.dataService.pageState.dashboard.sortState = e;
    this.dataService.page.next(this.dataService.pageState);
    this.scrolltoTop(null);
  }
  scrolltoTop(topVal) {
    const scrollabe = document.getElementById("dashboard-scrollabe");
    scrollabe.scrollTop = topVal;
    this.isLoadMore = false;
  }
  getAnlysisSourceList(event) {
    this.dsAnalysisSource = event;
  }
  onAnalysisSourceChange(obj) {
    if (obj != null) {
      this.filter.AnalysisSourceId = obj.Id;
    } else {
      this.filter.AnalysisSourceId = 0;
    }
  }
  filterDataSource(event) {
    this.getPatientList(event);
  }
  bindDVMDDL() {
    this.sidefilterService.dsDVM = [];
    if (this.originData != null) {
      const arrDVM = [];
      let noDVMText = "";
      this.originData.forEach((element) => {
        if (element.Details) {
          element.Details.forEach((subEle) => {
            if (subEle.PhysicianName != null && !arrDVM.includes(subEle.PhysicianName)) {
              if (subEle.PhysicianName == "None") {
                noDVMText = subEle.PhysicianName;
              } else {
                arrDVM.push(subEle.PhysicianName.trim());
                this.sidefilterService.dsDVM.push(subEle.PhysicianName.trim());
              }
            }
          });
        }
      });
      this.sidefilterService.dsDVM = this.commonService.arraySortByAscendingOrders(arrDVM);
      if (noDVMText != null && noDVMText.trim() != "") {
        this.sidefilterService.dsDVM.splice(0, 0, noDVMText.trim());
      }
    }
  }
  getPatientListByAdvSearch(event) {
    this.sidefilterService.filter = this.dataService.pageState.default.requestParams;
    if (event.FromDate == null)
      this.sidefilterService.FromDate = null;
    if (event.ToDate == null)
      this.sidefilterService.ToDate = null;
    this.isAdvSearched = true;
    this.selectedAnalysisSource = event.SearchTextToDisplayOnDashboard != null ? event.SearchTextToDisplayOnDashboard : this.labelService.dsDashboardScreen.All;
    this.getPatientList(event);
  }
  onAdvSearchCrossClick() {
    this.setDefaultFilter();
    this.headerService.setDefaultAdvSearch();
    this.getPatientList(this.headerService.filter);
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      if (this.dataService.pageState.dashboard.resultsList.length >= 60) {
        this.pageNo = this.dataService.pageState.dashboard.requestParams.PageNo;
        this.isLoadMore = true;
        this.pageNo++;
        this.start = this.end;
        this.end = this.limit + this.start;
        this.dataService.pageState.dashboard.requestParams["PageNo"] = this.pageNo;
        this.getPatientList(this.dataService.pageState.dashboard.requestParams);
      }
    }
  }
  getPatientList(event) {
    return __async(this, null, function* () {
      if (this.sidefilterService?.FromDate) {
        this.FromDateLabel = this.sidefilterService.FromDate;
      } else {
        this.FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);
        this.sidefilterService.FromDate = new Date(this.commonService.twoYearBeforeFromToday);
      }
      if (this.sidefilterService?.ToDate) {
        this.ToDateLabel = this.sidefilterService.ToDate;
      } else {
        this.ToDateLabel = this.commonService.today;
        this.sidefilterService.ToDate = this.commonService.today;
      }
      this.selectedAnalysisSource = event.SearchText ? event.SearchTextToDisplayOnDashboard : this.labelService.dsDashboardScreen.All;
      this.expandedElement = null;
      if (!event.SearchText) {
        this.isAdvSearched = false;
      }
      event.IsBackOfficeUser = this.isBackOfficeUser;
      this.pageNo = event.PageNo;
      if (event.PageNo == 1) {
        this.originData = [];
        this.pataientList = [];
      }
      event["IsExactFilter"] = this.isNotificationSelected ? true : false;
      event.isSortByLastResultDate = true;
      this.dataService.pageState.dashboard.requestParams = event;
      this.dataService.appState.updatedFilterRequest = event;
      this.dataService.page.next(this.dataService.pageState);
      const params = Object.assign({}, this.dataService.pageState.dashboard.requestParams);
      if (params.FromDate) {
        params.FromDate = params.FromDate != null ? this.commonService.getMomentFromDateTime(params.FromDate) : null;
      }
      if (params.ToDate) {
        params.ToDate = params.ToDate != null ? this.commonService.getMomentToDateTime(params.ToDate) : null;
      }
      this.commonService.getDashboardPatientList(this.dataService.pageState.dashboard.requestParams).subscribe((data) => {
        this.isNotificationSelected = false;
        if (event.PageNo == 1) {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.pataientList = data.ResponseData.PatientList;
          } else {
            this.pataientList = [];
          }
        } else {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.pataientList = this.pataientList.concat(data.ResponseData.PatientList);
          }
        }
        if (data.ResponseData.PatientList != null && this.pataientList.length < 60) {
          event.PageNo += 1;
          this.pageNo = event.PageNo;
          this.dataService.pageState.dashboard.requestParams["PageNo"] = this.pageNo;
          this.getPatientList(event);
        }
        if (this.pataientList && this.pataientList.length > 0) {
          this.pataientList = this.pataientList.map((item) => {
            if (!item.PhysicianName || item.PhysicianName.trim() == "None")
              item.PhysicianName = this.labelService.dsDashboardScreen.none;
            return item;
          });
          if (this.originData.length > 0 && this.isLoadMore) {
            this.isLoadMore = data.ResponseData.PatientList != null ? false : true;
            this.dataService.pageState.dashboard.loadmore = this.isLoadMore;
          } else {
            this.scrolltoTop(null);
          }
          this.originData = this.pataientList;
          this.dataSource = new MatLegacyTableDataSource(this.originData);
          this.dataService.pageState.dashboard.resultsList = this.originData;
          this.dataService.page.next(this.dataService.pageState);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
          if (this.dataService.pageState.dashboard.selectedRow) {
            const expandedRowDetails = this.dataService.pageState.dashboard.selectedRow;
            this.expandedElement = this.originData.find((x) => x.Id == expandedRowDetails.Id && x.PatientId == expandedRowDetails.PatientId && x.PatientName == expandedRowDetails.PatientName && x.dob == expandedRowDetails.dob && x.owner_id == expandedRowDetails.owner_id);
          }
          this.sortState = this.dataService.pageState.dashboard.sortState;
        } else {
          this.dataSource.data = [];
        }
      }, (err) => {
        this.originData = [];
        this.dataSource.data = [];
        console.log(JSON.stringify(err));
      });
    });
  }
  getPatientResultDetails(element) {
    let reqbody;
    if (element?.PatientId) {
      reqbody = JSON.parse(JSON.stringify(this.dataService.pageState.dashboard.requestParams));
      reqbody.AnalysisTypeId = this.checkAnalysisTypId(reqbody);
      reqbody.PageNo = 1;
      reqbody.IsApplyFilter = true;
      reqbody.IsExactFilter = true;
      reqbody.PatientId = element.PatientId;
      reqbody.ZDXPatientInfoId = element.ZDXPatientId;
      this.commonService.getPatientResultList(reqbody).subscribe((data) => {
        const patientDetails = [];
        if (data.ResponseData.DashboardPatientList) {
          data.ResponseData.DashboardPatientList.forEach((data2) => {
            if (this.checkPatDetails(data2)) {
              patientDetails.push(...data2.Details);
            }
          });
        }
        this.pataientList.forEach((patient) => {
          if (patient.PatientId == element.PatientId && patient.ZDXPatientId == element.ZDXPatientId) {
            patient.Details = patientDetails;
            patient.ViewedFlag = patient.Details.filter((x) => {
              return x.ViewedFlag === false;
            }).length < 1;
          }
        });
        this.originData = this.pataientList;
        this.dataSource = new MatLegacyTableDataSource(this.originData);
        this.dataService.pageState.dashboard.resultsList = this.originData;
        this.dataService.page.next(this.dataService.pageState);
        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
        this.dataSource.sort = this.sort;
        const elmnt = document.getElementById("row" + this.expandedElement);
        if (elmnt)
          elmnt.scrollIntoView({
            behavior: "smooth",
            block: "center",
            inline: "center"
          });
        this.bindDVMDDL();
      });
    } else {
      this.expandedElement = null;
    }
  }
  checkPatDetails(data) {
    return data.Details && data.Details.length > 0;
  }
  checkAnalysisTypId(reqbody) {
    return reqbody.AnalysisTypeId == null ? 0 : reqbody.AnalysisTypeId;
  }
  openRefLabNote(element) {
    const noteStr = element.PanelNote ? element.PanelNote : "Note not found";
    this.confirmationDialogService.confirm("Additional Note", noteStr, this.labelService.dsDashboardScreen.Ok, "", "lg", true, false);
  }
  getPatientBySelectedNotification(event) {
    this.isNotificationSelected = true;
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.PatientId = event.PatientId;
    this.sidefilterService.filter.BusinessGuid = this.BusinessGuId;
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.IsApplyFilter = true;
    this.sidefilterService.filter.ZDXPatientInfoId = event.ZDXPatientInfoId;
    this.getPatientList(this.sidefilterService.filter);
    this.headerService.selectedNotification = null;
  }
  setDefaultFilter() {
    this.filter = new SideFilter();
    this.filter.BusinessGuid = this.BusinessGuId;
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.filter.PatientName = null;
    this.filter.PatientId = null;
    this.filter.OwnerName = null;
    this.filter.FromDate = null;
    this.filter.ToDate = null;
    this.filter.AnalysisSourceId = this.dataService.appData.authDetails["IsLinkedRefLabClinic"] ? 0 : 1;
    this.filter.AnalysisTypeId = 0;
    this.filter.AnalysisStatusId = 0;
    this.filter.SpeciesId = 0;
    this.filter.Breed = null;
    this.filter.SearchText = null;
    this.filter.SearchTextToDisplayOnDashboard = null;
    this.isAdvSearched = false;
    this.selectedAnalysisSource = this.labelService.dsDashboardScreen.All;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.ToDate = null;
  }
  showMsg(cancelComment) {
    if (cancelComment && /user.cancelled/.test(cancelComment)) {
      cancelComment = this.labelService.dsDashboardScreen.CanceledTestMessage;
    } else if (cancelComment && /11 :/.test(cancelComment)) {
      cancelComment = this.labelService.dsDashboardScreen.CanceledTestMessage11;
    } else if (cancelComment && /X :/.test(cancelComment)) {
      cancelComment = this.labelService.dsDashboardScreen.CanceledTestMessageX;
    } else {
      cancelComment = this.labelService.dsDashboardScreen.CanceledTest;
    }
    this.confirmationDialogService.confirm("", cancelComment, this.labelService.dsDashboardScreen.Ok, "", "sm", true, false);
  }
  toggle() {
    this.allRowsExpanded = !this.allRowsExpanded;
    this.expandedElement = null;
  }
  navigateTo(e, ele) {
    e.stopPropagation();
    const authDetails = this.dataService.appData.authDetails;
    const emailId = this.bckBusinessInfo ? this.bckBusinessInfo["EmailId"] : "";
    const doctorName = ele.Details.length > 0 && ele.Details[0].PhysicianName ? ele.Details[0].PhysicianName : "";
    let urlStr = "email=" + authDetails["Email"] + "&bkoClinicEmail=" + emailId + "&token=" + JSON.parse(localStorage.authDetails).access_token + "&refresh_token=" + JSON.parse(localStorage.authDetails).refresh_token + "&deviceId=" + localStorage.UIGuid + "&clinicname=" + authDetails["BusinessName"] + "&clinicphone=" + authDetails["BusinessPhoneNo"] + "&doctorname=" + doctorName + "&patientId=" + ele.PatientId + "&patientName=" + ele.PatientName + "&Isbackoffice=" + JSON.parse(localStorage.authDetails).BackOfficeFlag + "&species=" + ele.SpeciesName + "&breed=" + ele.BreedName + "&accessionId=" + (ele.AccessionId ? ele.AccessionId : "") + "&backUrl=" + location.href;
    urlStr = this.EncrDecr.encrypt(urlStr);
    if (this.headerService.isNRP) {
      this.commonService.getRedirectionKey({ ValueString: urlStr }).subscribe({
        next: (data) => {
          window.location.href = environment2.ZCSUrl + "#/user/consultation-request?ref=" + data.ResponseData;
        },
        error: () => {
          this.confirmationDialogService.confirm("Alert", this.labelService.dsFuseManagementScreen.AddRefLabAccountRespErrorMessage, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
        }
      });
    } else {
      this.commonService.getEncryptDetail({ toEncryptStr: urlStr }).subscribe({
        next: (res) => {
          window.location.href = environment2.ZCSUrl + "#/user/consultation-request?ref=" + res.ResponseData.encryptedKey;
        },
        error: () => {
          this.commonService.showCommonToastrError();
        }
      });
    }
  }
  closeFilter() {
    this.drawer.close();
  }
  navToPatientInfo(element, rowIndex) {
    this.dataService.appState.selectedResult.element = element;
    this.expandedElement = rowIndex;
    this.dataService.pageState.dashboard.selectedRow = rowIndex;
    this.dataService.pageState.dashboard.resultsList = this.originData;
    this.dataService.page.next(this.dataService.pageState);
    this.patientService.showPataientInfo(element, this.headerService.filter, this.sidefilterService.filter, this.sort.active, this.sort.direction);
  }
  navigateToInfoPage(element) {
    this.dataService.pageState.PatientList.resultsList = this.originData;
    this.dataService.page.next(this.dataService.pageState);
    this.patientService.showPataientInfo(element, this.sidefilterService.filter, this.sidefilterService.filter.PageNo, null, null);
  }
  markAs(elem, as, ele = false) {
    if (this.commonService.isInternalUsers()) {
      const req = {
        BusinessGuid: this.BusinessGuId,
        UserGuid: this.dataService.appData.authDetails["UserGuid"],
        ObjResultTagModel: [
          {
            Source: elem.SourceType,
            ResultIds: elem.RecID,
            Tag: as
          }
        ]
      };
      this.commonService.UpdateResultTag(req).subscribe({
        next: () => {
          elem.ViewedFlag = as == "READ";
          if (ele && ele.Details) {
            ele.ViewedFlag = ele.Details.filter((x) => {
              return x.ViewedFlag === false;
            }).length < 1;
          }
        }
      });
    }
  }
  static {
    this.\u0275fac = function DashboardComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DashboardComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(AlertService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DashboardComponent, selectors: [["app-dashboard"]], viewQuery: function DashboardComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, decls: 77, vars: 18, consts: [["drawer", ""], [1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], [3, "outFilterBy", "outFilterNotification"], ["hasBackdrop", "true", 1, "example-container1"], ["mode", "over", "position", "end", 1, "example-sidenav", "sidefilter", "right-filter"], [3, "outAnlysisSource", "outFilterBy", "closeFilterPanel"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "left-block"], [1, "ques-icon", "text-right"], [1, "title-container", "title-card"], ["data-testid", "mk-app-title", 1, "page-title"], ["src", "../../../assets/img/help-icon.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qicon", 3, "click", "matTooltip"], [1, "p-0", "m-card"], [1, "mt-0"], [1, "d-flex", "justify-content-between", "pt-2", "pl-3", "pr-3", "align-items-center", "toprow"], [1, "filter-txt", "justify-content-between"], ["class", "all", 4, "ngIf"], [2, "font-weight", "bold"], [1, "page-title"], [1, "d-flex"], [1, "ipadfiler", "align-items-center", "pr-2"], ["type", "button", "mat-button", "", 1, "pr-0", 3, "click"], ["src", "../../../assets/img/filterIcon@2x.png", "alt", "img", 1, "filtericon"], ["src", "../../../assets/img/help-circle.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qpart", "qicon", 3, "click", "matTooltip"], [1, "p-0", "pt-2", "cust-postion"], [1, "d-flex", "justify-content-between", "mb-1"], ["id", "dashboard-scrollabe", 1, "example-container", "dashboard-result", "pt-0", 3, "scroll"], ["mat-table", "", "multiTemplateDataRows", "", "matSort", "", "summary", "", 1, "dashboard-table", 3, "matSortChange", "dataSource", "matSortActive", "matSortDirection"], ["matColumnDef", "ViewedFlag"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "DateReceivedStr"], ["matColumnDef", "PatientId"], ["matColumnDef", "PatientName"], ["matColumnDef", "OwnerName"], ["matColumnDef", "SpeciesName"], ["matColumnDef", "BreedName"], ["matColumnDef", " "], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", "expandedDetail", 1, "expanded-detail"], ["mat-cell", "", "td", "", "class", "expanded-detail", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "example-element-row", 3, "example-expanded-row", "click", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", "class", "example-detail-row", 4, "matRowDef", "matRowDefColumns"], ["class", "noresult", 4, "ngIf"], [2, "background", "#fff", "margin-right", "3px", "text-align", "right", "z-index", "999999", "position", "relative"], [1, "material-icons", "gotToTopBtn", 3, "click"], [1, "right-filter", "pl-0"], [3, "outAnlysisSource", "outFilterBy"], [1, "all"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], ["style", "color: #fd6400; font-weight: bold;", "class", "textTtl text-bold", 4, "ngIf"], [1, "textTtl", "text-bold", 2, "color", "#fd6400", "font-weight", "bold"], [1, "textTtl", "d-none"], ["mat-header-cell", ""], ["mat-cell", "", "td", "", 1, "expanded-detail"], [1, "example-element-detail", 3, "id"], [1, "row", "pt-3", "pb-3", "card-block", "w-100"], [4, "ngIf"], ["class", "card-width col-sm-4 ", 4, "ngFor", "ngForOf"], ["class", "d-flex justify-content-center align-items-center viewcontainer", 3, "click", 4, "ngIf"], ["class", "norecord", 4, "ngIf"], [1, "card-width", "col-sm-4"], [1, "inner-card", 3, "ngClass"], [1, "d-flex", "justify-content-between", "align-items-top", "card-heading"], [1, "card-head", "clickable", 3, "click", "ngStyle"], [1, "card-date", 3, "ngStyle"], [1, "d-flex", "justify-content-between", "align-items-center"], [1, "cardimg", 3, "ngStyle"], ["class", "mr-2 ng-star-inserted", "height", "16", "Src", "../../../assets/img/poc-icon@2x.png", "alt", "img", 4, "ngIf"], ["class", "mr-2 ng-star-inserted", "height", "16", "Src", "../../../assets/img/lab-icon@2x.png", "alt", "img", 4, "ngIf"], [1, "layout-row", 2, "margin-top", "14px"], ["class", "float-left new-status-border mr-2", 3, "title", "click", 4, "ngIf"], ["class", "float-left viewed-status-border mr-2", 3, "title", "click", 4, "ngIf"], ["style", "cursor: pointer;", 3, "title", "class", 4, "ngIf"], [1, "float-right", 3, "click"], ["mat-icon-button", "", "aria-label", "right arrow", 3, "ngStyle"], ["aria-hidden", "true", 1, "fa", "fa-chevron-right"], ["height", "16", "Src", "../../../assets/img/poc-icon@2x.png", "alt", "img", 1, "mr-2", "ng-star-inserted"], ["height", "16", "Src", "../../../assets/img/lab-icon@2x.png", "alt", "img", 1, "mr-2", "ng-star-inserted"], [3, "ngStyle"], [1, "float-left", "new-status-border", "mr-2", 3, "click", "title"], [1, "float-left", "viewed-status-border", "mr-2", 3, "click", "title"], [2, "cursor", "pointer", 3, "title"], [1, "d-flex", "justify-content-center", "align-items-center", "viewcontainer", 3, "click"], [1, "viewmoretxt"], ["src", "./assets/img/viewmore.svg", "alt", "img", 1, "viewmoreIcn"], [1, "norecord"], ["mat-header-row", ""], ["mat-row", "", 1, "example-element-row", 3, "click"], ["mat-row", "", 1, "example-detail-row"], [1, "noresult"]], template: function DashboardComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div")(4, "app-header", 3);
        \u0275\u0275listener("outFilterBy", function DashboardComponent_Template_app_header_outFilterBy_4_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientListByAdvSearch($event));
        })("outFilterNotification", function DashboardComponent_Template_app_header_outFilterNotification_4_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientBySelectedNotification($event));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(5, "mat-drawer-container", 4)(6, "mat-drawer", 5, 0)(8, "app-dashboard-filter", 6);
        \u0275\u0275listener("outAnlysisSource", function DashboardComponent_Template_app_dashboard_filter_outAnlysisSource_8_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getAnlysisSourceList($event));
        })("outFilterBy", function DashboardComponent_Template_app_dashboard_filter_outFilterBy_8_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.filterDataSource($event));
        })("closeFilterPanel", function DashboardComponent_Template_app_dashboard_filter_closeFilterPanel_8_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.closeFilter());
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(9, "div", 7)(10, "div", 8)(11, "div", 9)(12, "section", 10)(13, "h5")(14, "span", 11);
        \u0275\u0275text(15);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(16, "img", 12);
        \u0275\u0275listener("click", function DashboardComponent_Template_img_click_16_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "mat-card", 13)(18, "div", 14)(19, "div", 15)(20, "div", 16);
        \u0275\u0275template(21, DashboardComponent_span_21_Template, 2, 2, "span", 17);
        \u0275\u0275elementStart(22, "span");
        \u0275\u0275text(23);
        \u0275\u0275elementStart(24, "span", 18);
        \u0275\u0275text(25);
        \u0275\u0275elementEnd();
        \u0275\u0275text(26);
        \u0275\u0275elementStart(27, "span", 18);
        \u0275\u0275text(28);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(29, "h5")(30, "span", 19);
        \u0275\u0275text(31);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(32, "span", 20)(33, "span", 21)(34, "button", 22);
        \u0275\u0275listener("click", function DashboardComponent_Template_button_click_34_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r3 = \u0275\u0275reference(7);
          return \u0275\u0275resetView(drawer_r3.toggle());
        });
        \u0275\u0275element(35, "img", 23);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "img", 24);
        \u0275\u0275listener("click", function DashboardComponent_Template_img_click_36_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(37, "div", 25)(38, "div");
        \u0275\u0275element(39, "div", 26);
        \u0275\u0275elementStart(40, "div", 27);
        \u0275\u0275listener("scroll", function DashboardComponent_Template_div_scroll_40_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onTableScroll($event));
        });
        \u0275\u0275elementStart(41, "table", 28);
        \u0275\u0275listener("matSortChange", function DashboardComponent_Template_table_matSortChange_41_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onDataSort($event));
        });
        \u0275\u0275elementContainerStart(42, 29);
        \u0275\u0275template(43, DashboardComponent_th_43_Template, 1, 0, "th", 30)(44, DashboardComponent_td_44_Template, 2, 1, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(45, 32);
        \u0275\u0275template(46, DashboardComponent_th_46_Template, 2, 1, "th", 30)(47, DashboardComponent_td_47_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(48, 33);
        \u0275\u0275template(49, DashboardComponent_th_49_Template, 2, 1, "th", 30)(50, DashboardComponent_td_50_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(51, 34);
        \u0275\u0275template(52, DashboardComponent_th_52_Template, 2, 1, "th", 30)(53, DashboardComponent_td_53_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(54, 35);
        \u0275\u0275template(55, DashboardComponent_th_55_Template, 2, 1, "th", 30)(56, DashboardComponent_td_56_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(57, 36);
        \u0275\u0275template(58, DashboardComponent_th_58_Template, 2, 1, "th", 30)(59, DashboardComponent_td_59_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(60, 37);
        \u0275\u0275template(61, DashboardComponent_th_61_Template, 2, 1, "th", 30)(62, DashboardComponent_td_62_Template, 4, 2, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(63, 38);
        \u0275\u0275template(64, DashboardComponent_th_64_Template, 1, 0, "th", 39)(65, DashboardComponent_td_65_Template, 2, 0, "td", 31);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(66, 40);
        \u0275\u0275template(67, DashboardComponent_td_67_Template, 4, 5, "td", 41);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(68, DashboardComponent_tr_68_Template, 1, 0, "tr", 42)(69, DashboardComponent_tr_69_Template, 1, 2, "tr", 43)(70, DashboardComponent_tr_70_Template, 1, 0, "tr", 44);
        \u0275\u0275elementEnd();
        \u0275\u0275template(71, DashboardComponent_div_71_Template, 3, 2, "div", 45);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(72, "div", 46)(73, "span", 47);
        \u0275\u0275listener("click", function DashboardComponent_Template_span_click_73_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.scrolltoTop(null));
        });
        \u0275\u0275text(74, " arrow_upward ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(75, "div", 48)(76, "app-dashboard-filter", 49);
        \u0275\u0275listener("outAnlysisSource", function DashboardComponent_Template_app_dashboard_filter_outAnlysisSource_76_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getAnlysisSourceList($event));
        })("outFilterBy", function DashboardComponent_Template_app_dashboard_filter_outFilterBy_76_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientList($event));
        });
        \u0275\u0275elementEnd()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(15);
        \u0275\u0275textInterpolate(ctx.headerText);
        \u0275\u0275advance();
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.selectedAnalysisSource === ctx.label.All);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsDashboardScreen.ShowingResultDated, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.commonService.getMomentFromatedDate(ctx.FromDateLabel), " ");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsDashboardScreen.To, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.commonService.getMomentFromatedDate(ctx.ToDateLabel), " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.headerText);
        \u0275\u0275advance(5);
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(5);
        \u0275\u0275property("dataSource", ctx.dataSource)("matSortActive", ctx.sortState.active)("matSortDirection", ctx.sortState.direction);
        \u0275\u0275advance(27);
        \u0275\u0275property("matHeaderRowDef", ctx.columnsToDisplay)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.columnsToDisplay);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", \u0275\u0275pureFunction0(17, _c04));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource.data.length === 0);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, NgStyle, MatLegacyButton, MatLegacyCard, MatDrawer, MatDrawerContainer, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyTooltip, HeaderComponent, SideMenuComponent, DashboardFilterComponent, SlicePipe], styles: ['\n\n.viewmoreIcn[_ngcontent-%COMP%] {\n  width: 22.8px;\n  height: 29.45px;\n  left: 6.6px;\n  top: 3.27px;\n  margin-left: 13px;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\n.viewcontainer[_ngcontent-%COMP%]   .viewmoretxt[_ngcontent-%COMP%] {\n  width: 75px;\n  height: 18px;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 14px;\n  line-height: 18px;\n  color: #0072ce;\n  position: relative;\n}\n.viewcontainer[_ngcontent-%COMP%]   .viewmoretxt[_ngcontent-%COMP%]:before {\n  content: "";\n  width: 100%;\n  height: 2px;\n  background: #0072ce;\n  position: absolute;\n  bottom: -2px;\n  left: 2px;\n}\n.viewcontainer[_ngcontent-%COMP%] {\n  width: 14%;\n  height: 127.5px;\n}\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: calc(100vh - 180px) !important;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: calc(100vh - 220px);\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n  color: #000;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  padding: 0 10px;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 23px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 45px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.card-complete[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.mat-column-expandedDetail[_ngcontent-%COMP%] {\n  background: #f5f7f9;\n}\n.card-head[_ngcontent-%COMP%] {\n  font-size: 14px;\n  width: 55%;\n  word-break: break-word;\n  white-space: break-spaces;\n  text-align: left;\n  line-height: 16px;\n}\n.card-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  width: 45%;\n  white-space: normal;\n  text-align: right;\n}\n.card-block[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  box-shadow: none !important;\n  margin-bottom: 13px;\n  padding: 12px;\n  height: 100% !important;\n  border-radius: 5px !important;\n  padding-bottom: 0;\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(1), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(2), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(3) {\n  margin-bottom: 10px;\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n.card-arrow[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.cdk-column-expandedDetail[_ngcontent-%COMP%] {\n  padding-right: 0 !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child, \ntr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  padding-left: 14px;\n}\n.dashboard-table[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  padding-right: 0;\n}\n.dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1) {\n  background-color: #fbfbfb !important;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(1) {\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 15px;\n  margin-top: 20px;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(2) {\n  font-size: 15px;\n  margin-top: 20px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  padding-left: 18px;\n}\n.closeall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(0deg);\n  transition: all 0.1s;\n}\n.closeall.expandedall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(-180deg);\n}\n.closeall[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 999;\n  top: 36px;\n  right: 37px;\n  background: transparent;\n  min-width: 34px;\n  padding: 0;\n}\n.cust-postion[_ngcontent-%COMP%] {\n  position: relative;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dvn_name[_ngcontent-%COMP%] {\n  width: auto !important;\n  min-width: 60px;\n  display: block;\n}\n.drName[_ngcontent-%COMP%] {\n  margin-right: 7px;\n  padding-top: 2px;\n  float: left;\n  max-width: 75%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: help;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ed8b00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media (max-width: 1024px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n    top: 56px;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 8%;\n  }\n}\n@media only screen and (min-width: 1024px) and (max-height: 1366px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.5) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n.filter-txt[_ngcontent-%COMP%] {\n  position: relative;\n  height: 22px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding-right: 0.5rem;\n}\n.cros-btn[_ngcontent-%COMP%] {\n  position: relative;\n  right: 0;\n  top: 0;\n  height: 30px !important;\n  width: 30px;\n  margin-left: 6px;\n}\n.gotToTopBtn[_ngcontent-%COMP%] {\n  margin: 0 5px;\n  padding: 5px;\n  color: #ed8b00;\n  font-weight: bold;\n  border: 1px solid #fd6400;\n  border-radius: 20px;\n  cursor: pointer;\n}\n.mat-icon-button.mat-primary[_ngcontent-%COMP%] {\n  color: #067cd3;\n}\n.dashboard_arrow_right[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 30px;\n}\n.m-card[_ngcontent-%COMP%]   .toprow[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  .example-container1[_ngcontent-%COMP%] {\n    height: inherit;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n  .filtericon[_ngcontent-%COMP%] {\n    padding-right: 5px;\n  }\n  .qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: initial;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    right: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%]   .mat-drawer-content[_ngcontent-%COMP%] {\n    overflow: initial !important;\n  }\n  .viewcontainer[_ngcontent-%COMP%] {\n    justify-content: flex-start !important;\n    margin-left: 20px;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    height: calc(100vh - 95px);\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 0 45px 0 45px;\n    font-size: 17px;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    height: auto !important;\n  }\n  .filter-txt[_ngcontent-%COMP%] {\n    width: initial;\n  }\n  .mat-cell[_ngcontent-%COMP%], \n   .mat-footer-cell[_ngcontent-%COMP%] {\n    font-size: 13px;\n  }\n    .mat-drawer-content {\n    overflow: hidden !important;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    top: 0;\n  }\n  .m-card[_ngcontent-%COMP%]   .toprow[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    display: block;\n    margin-bottom: 0;\n  }\n  .title-card[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .m-card[_ngcontent-%COMP%]   .toprow[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%], \n   .mat-table[_ngcontent-%COMP%] {\n    background-color: transparent !important;\n  }\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 0px solid rgb(255, 255, 255);\n    position: relative;\n    padding-left: 50%;\n  }\n  .dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 0;\n    padding-right: 10px;\n    white-space: inherit;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n    padding-left: 13%;\n    padding-bottom: 10px;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n   .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n    padding-top: 36px;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding: 0px;\n  }\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    width: 100%;\n  }\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: auto !important;\n  }\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 32%;\n    min-width: 32% !important;\n    padding-left: 4%;\n    text-align: left !important;\n    word-break: break-all;\n    line-height: 12px;\n    padding-top: 37px;\n  }\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1), \n   .mat-row[_ngcontent-%COMP%]:nth-child(odd) {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n    padding: 10px 0 25px;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n  }\n  .mat-row[_ngcontent-%COMP%]:nth-child(even) {\n    background-color: transparent;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n  }\n  .example-container[_ngcontent-%COMP%]   td.expanded-detail[_ngcontent-%COMP%] {\n    width: 100% !important;\n    max-width: 100% !important;\n    border-bottom-left-radius: 10px !important;\n    border-bottom-right-radius: 10px !important;\n    padding-left: 4% !important;\n    background: #ffffff;\n    margin: 10px 0;\n    margin: -11px 0 29px;\n    box-shadow: 0 13px 13px 0 rgb(0 0 0 / 13%) !important;\n    border: none;\n  }\n  .example-container[_ngcontent-%COMP%]   td.expanded-detail[_ngcontent-%COMP%]   .inner-card[_ngcontent-%COMP%] {\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n    background-color: #fff !important;\n    border-radius: 10px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   td.expanded-detail[_ngcontent-%COMP%]   .card-width[_ngcontent-%COMP%] {\n    width: 50%;\n    flex: 0 0 50%;\n  }\n  .card-head[_ngcontent-%COMP%] {\n    font-size: 12px;\n  }\n  .card-heading[_ngcontent-%COMP%] {\n    min-height: 50px;\n  }\n  tr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n    background: #ffffff;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 23%;\n  }\n  .noresult[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    max-width: inherit !important;\n  }\n  .card-head[_ngcontent-%COMP%] {\n    margin-right: 10px;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    width: inherit !important;\n    right: 0 !important;\n  }\n}\n@media screen and (max-width: 465px) {\n  .example-container[_ngcontent-%COMP%]   td.expanded-detail[_ngcontent-%COMP%]   .card-width[_ngcontent-%COMP%] {\n    width: 100%;\n    flex: 0 0 100%;\n  }\n}\n@media screen and (max-width: 365px) {\n  .dashboard-result[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 50%;\n    min-width: 50%;\n  }\n}\n@media screen and (max-width: 453px) {\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    min-width: 111px !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    right: 0 !important;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 364px) {\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    left: 0;\n    padding-left: 8%;\n  }\n}\n.left-block[_ngcontent-%COMP%] {\n  width: calc(97vw - 445px);\n  right: 298px;\n}\n.right-filter[_ngcontent-%COMP%] {\n  right: 42px;\n}\n  .dashboard-wrapper .mat-drawer-content {\n  overflow: hidden !important;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  display: none;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  display: none;\n}\n@media only screen and (min-device-width: 820px) and (max-device-width: 1180px) and (orientation: landscape) {\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n    min-width: 150px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n    min-width: 122px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n    min-width: 122px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n    min-width: 122px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n    min-width: 100px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6) {\n    min-width: 100px !important;\n  }\n  .viewcontainer[_ngcontent-%COMP%] {\n    padding-left: 40px;\n  }\n}\n@media only screen and (min-device-width: 810px) and (max-device-width: 1080px) and (orientation: landscape) {\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n    min-width: 145px !important;\n    padding-left: 15px;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n    min-width: 100px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n    min-width: 122px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n    min-width: 122px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n    min-width: 70px !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6) {\n    min-width: 70px !important;\n  }\n  .viewcontainer[_ngcontent-%COMP%] {\n    padding-left: 70px;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n}\n.ques-icon[_ngcontent-%COMP%] {\n  position: relative;\n}\n.ques-icon[_ngcontent-%COMP%]   .qicon[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 0;\n  right: 12px;\n  cursor: pointer;\n}\n  .mat-column-ViewedFlag {\n  flex: 0 0 5% !important;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  width: 16%;\n  word-break: break-all;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  padding-left: 10px;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  min-width: 50px !important;\n  padding: 0 0 0 10px;\n  width: 50px;\n}\n/*# sourceMappingURL=dashboard.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed, void", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)")),
        transition("expanded <=> void", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DashboardComponent, { className: "DashboardComponent", filePath: "src\\app\\components\\dashboard\\dashboard.component.ts", lineNumber: 63 });
})();

// src/app/modules/sidefilter/sidefilter.component.ts
var _c05 = ["select"];
var _c15 = ["myText"];
var _c23 = (a0, a1, a2) => ({ "completed": a0, "cancelled": a1, "pending": a2 });
function SidefilterComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 31)(1, "mat-form-field", 17)(2, "input", 32);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_18_Template_input_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.PatientId, $event) || (ctx_r2.sidefilterService.filter.PatientId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keyup.enter", function SidefilterComponent_div_18_Template_input_keyup_enter_2_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.applyFilter(true));
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.PatientID);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.PatientId);
  }
}
function SidefilterComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 33)(1, "mat-form-field", 17)(2, "input", 32);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_20_Template_input_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.PatientName, $event) || (ctx_r2.sidefilterService.filter.PatientName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keyup.enter", function SidefilterComponent_div_20_Template_input_keyup_enter_2_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.applyFilter(true));
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.PatientName);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.PatientName);
  }
}
function SidefilterComponent_div_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "mat-form-field", 17)(2, "input", 32);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_21_Template_input_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.OwnerName, $event) || (ctx_r2.sidefilterService.filter.OwnerName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("keyup.enter", function SidefilterComponent_div_21_Template_input_keyup_enter_2_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.applyFilter(true));
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.OwnerName);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.OwnerName);
  }
}
function SidefilterComponent_div_22_mat_option_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const species_r7 = ctx.$implicit;
    \u0275\u0275property("value", species_r7.Code);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", species_r7.Code, " ");
  }
}
function SidefilterComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 33)(1, "mat-form-field", 17)(2, "mat-select", 34);
    \u0275\u0275listener("selectionChange", function SidefilterComponent_div_22_Template_mat_select_selectionChange_2_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onSpeciesChange($event.value));
    });
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_22_Template_mat_select_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.SpeciesId, $event) || (ctx_r2.sidefilterService.filter.SpeciesId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(3, "mat-option", 35);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, SidefilterComponent_div_22_mat_option_5_Template, 2, 2, "mat-option", 36);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.SpeciesId);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.Species);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsSideFilterScreen.Species);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.dsSpecies);
  }
}
function SidefilterComponent_div_23_mat_option_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const gender_r9 = ctx.$implicit;
    \u0275\u0275property("value", gender_r9.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", gender_r9.GenderName, " ");
  }
}
function SidefilterComponent_div_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 33)(1, "mat-form-field", 17)(2, "mat-select", 38);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_23_Template_mat_select_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.GenderId, $event) || (ctx_r2.sidefilterService.filter.GenderId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(3, SidefilterComponent_div_23_mat_option_3_Template, 2, 2, "mat-option", 36);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.Sex);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.GenderId);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.dsGender);
  }
}
function SidefilterComponent_mat_option_30_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-option", 39);
    \u0275\u0275listener("onSelectionChange", function SidefilterComponent_mat_option_30_Template_mat_option_onSelectionChange_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.selectionChangee($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const dr_r11 = ctx.$implicit;
    \u0275\u0275property("value", dr_r11.FirstName + " " + dr_r11.LastName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2(" ", dr_r11 == null ? null : dr_r11.FirstName, " ", dr_r11 == null ? null : dr_r11.LastName, " ");
  }
}
function SidefilterComponent_p_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 40);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsSideFilterScreen.NoRecordsFound, " ");
  }
}
function SidefilterComponent_div_49_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41)(1, "div", 42);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 12)(4, "mat-radio-group", 43);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_49_Template_mat_radio_group_ngModelChange_4_listener($event) {
      \u0275\u0275restoreView(_r14);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.AnalysisSourceId, $event) || (ctx_r2.sidefilterService.filter.AnalysisSourceId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(5, "div", 44)(6, "mat-radio-button", 45);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 44)(9, "mat-radio-button", 45);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "span", 46);
    \u0275\u0275element(12, "img", 47);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 44)(14, "mat-radio-button", 45);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "span");
    \u0275\u0275element(17, "img", 48);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsSideFilterScreen.Source);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.AnalysisSourceId);
    \u0275\u0275advance(2);
    \u0275\u0275property("value", 0);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsSideFilterScreen.All, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("value", 1);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsSideFilterScreen.InClinic, " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("value", 2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsSideFilterScreen.RefLab, " ");
  }
}
function SidefilterComponent_div_50_mat_option_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const analyzer_r16 = ctx.$implicit;
    \u0275\u0275property("value", analyzer_r16);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", analyzer_r16.AnalyzerDisplayName, " ");
  }
}
function SidefilterComponent_div_50_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 33)(1, "mat-form-field", 17)(2, "mat-select", 49);
    \u0275\u0275listener("selectionChange", function SidefilterComponent_div_50_Template_mat_select_selectionChange_2_listener($event) {
      \u0275\u0275restoreView(_r15);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onAnalyzerChange($event.value));
    });
    \u0275\u0275template(3, SidefilterComponent_div_50_mat_option_3_Template, 2, 2, "mat-option", 36);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.AnalysisSource);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.dsAnalyzer);
  }
}
function SidefilterComponent_div_51_mat_option_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const analysisType_r18 = ctx.$implicit;
    \u0275\u0275property("value", analysisType_r18 == null ? null : analysisType_r18.analysisTypeName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", analysisType_r18 == null ? null : analysisType_r18.analysisTypeName, " ");
  }
}
function SidefilterComponent_div_51_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 33)(1, "mat-form-field", 17)(2, "mat-select", 38);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_51_Template_mat_select_ngModelChange_2_listener($event) {
      \u0275\u0275restoreView(_r17);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.AnalysisTypeName, $event) || (ctx_r2.sidefilterService.filter.AnalysisTypeName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(3, SidefilterComponent_div_51_mat_option_3_Template, 2, 2, "mat-option", 36);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsSideFilterScreen.AnalysisType);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.AnalysisTypeName);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.dsAnalysisType);
  }
}
function SidefilterComponent_div_52_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 44)(1, "mat-radio-button", 45);
    \u0275\u0275text(2);
    \u0275\u0275elementStart(3, "span", 51);
    \u0275\u0275element(4, "img", 52);
    \u0275\u0275elementEnd()();
    \u0275\u0275element(5, "span", 53);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const status_r20 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("value", status_r20.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", status_r20.Status, " ");
    \u0275\u0275advance();
    \u0275\u0275property("matTooltip", status_r20.Info)("matTooltipPosition", status_r20.Placement || "below");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(5, _c23, ctx_r2.isComplated(status_r20.Id), ctx_r2.isCanceled(status_r20.Id), ctx_r2.isPending(status_r20.Id)));
  }
}
function SidefilterComponent_div_52_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41)(1, "div", 42);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 12)(4, "mat-radio-group", 43);
    \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_div_52_Template_mat_radio_group_ngModelChange_4_listener($event) {
      \u0275\u0275restoreView(_r19);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.sidefilterService.filter.AnalysisStatusId, $event) || (ctx_r2.sidefilterService.filter.AnalysisStatusId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(5, "div", 44)(6, "mat-radio-button", 45);
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(8, SidefilterComponent_div_52_div_8_Template, 6, 9, "div", 50);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsSideFilterScreen.Status);
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.sidefilterService.filter.AnalysisStatusId);
    \u0275\u0275advance(2);
    \u0275\u0275property("value", 0);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsSideFilterScreen.All, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r2.dsAnalysisStatus);
  }
}
var SidefilterComponent = class _SidefilterComponent {
  constructor(commonService, labelService, sidefilterService, dataService, refLabService, patientService, headerService, toastr) {
    this.commonService = commonService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.dataService = dataService;
    this.refLabService = refLabService;
    this.patientService = patientService;
    this.headerService = headerService;
    this.toastr = toastr;
    this.outFilterBy = new EventEmitter();
    this.clearFilterEvent = new EventEmitter();
    this.outAnlysisSource = new EventEmitter();
    this.dsAnalyzer = [];
    this.dsAnalysisType = [];
    this.dsGender = [];
    this.dsSpecies = [];
    this.dsSubSpecies = [];
    this.dsBreed = [];
    this.dsAnalysisStatus = [];
    this.breedList = [];
    this.searchText1 = "";
    this.isVisibleDVM = true;
    this.isVisiblePatientName = true;
    this.isVisiblePatientID = true;
    this.isVisibleStatus = true;
    this.isVisibleSource = true;
    this.isVisibleAnalyzer = false;
    this.isVisibleAnalysisType = false;
    this.isVisibleGender = false;
    this.isVisibleSpecies = true;
    this.isVisibleBreed = true;
    this.isVisibleOwnerName = true;
    this.pageNumber = 1;
    this.isRefLabLink = true;
    this.selectedPhysician = [];
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.sidefilterService.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindSideFilterLabel();
    }
    if (window.location.href.indexOf("patient/list") > -1) {
      this.isVisibleDVM = false;
      this.isVisibleGender = true;
      this.isVisibleStatus = false;
      this.isVisibleAnalysisType = false;
      this.isVisibleAnalyzer = false;
      this.isVisibleSource = false;
    }
    if (window.location.href.indexOf("patient/info") > -1) {
      this.isVisiblePatientName = false;
      this.isVisiblePatientID = false;
      this.isVisibleAnalyzer = true;
      this.isVisibleAnalysisType = true;
      this.isVisibleSpecies = false;
      this.isVisibleBreed = false;
      this.isVisibleOwnerName = false;
      this.isVisibleSource = false;
    }
    this.sidefilterService.FromDate = new Date(this.commonService.twoYearBeforeFromToday);
    this.sidefilterService.ToDate = this.commonService.today;
  }
  // getTranslationByLang() {
  //   console.log('Initiated')
  // }
  ngOnInit() {
    const langId = this.dataService.appData.authDetails["LanguageId"];
    if (langId) {
      this.commonService.getFilterDDLDetails(langId).subscribe((res) => {
        this.dataService.appData.filterDropDownList = res.ResponseData;
        this.dataService.data.next(this.dataService.appData);
        console.log(this.dataService.appData);
        this.isRefLabLink = this.dataService.appData.authDetails["IsLinkedRefLabClinic"];
        if (!this.isRefLabLink)
          this.sidefilterService.filter["AnalysisSourceId"] = 1;
        this.select._handleKeydown = (event) => {
          if (event.key == " " || event.code == "Space")
            return;
          if (!this.select.disabled) {
            this.select.panelOpen ? this.select._handleOpenKeydown(event) : this.select._handleClosedKeydown(event);
          }
        };
        this.getPhysicianList("", this.pageNumber, 60, null);
        if (this.dataService.appData.authDetails["IsConsultantUser"] != true) {
          const businessGuid = this.dataService.appData.authDetails["BusinessGuid"];
          this.patientService.getAnalyzer(businessGuid).subscribe({
            next: (data) => {
              this.dsAnalyzer = data.ResponseData.Analyzers.filter((ele) => {
                if (ele.AnalyzerName != "Ref Lab" || this.isRefLabLink) {
                  return ele;
                }
              });
            },
            error: () => {
              this.commonService.showCommonToastrError();
            }
          });
        }
        this.dataService.state.subscribe((data) => {
          this.dsAnalysisType = data.analysisTypeList;
        });
        const filterDropDowns = this.dataService.appData.filterDropDownList;
        console.log("filterDropDowns", filterDropDowns);
        this.dsGender = filterDropDowns.GenderList;
        console.log(this.dsGender);
        this.dsSpecies = filterDropDowns.SpeciesList;
        this.dsBreed = filterDropDowns.Breed;
        this.dsAnalysisStatus = filterDropDowns.AnalysisStatus.filter((ele) => {
          if (ele.Id == EnmAnalysisStatus.Completed || ele.Id == EnmAnalysisStatus.Canceled || ele.Id == EnmAnalysisStatus.Pending) {
            return ele;
          }
        });
        console.log(this.dsAnalysisStatus);
        this.dsAnalysisStatus.forEach((ele) => {
          if (ele.Status == "Completed") {
            ele.Status = this.labelService.dsSideFilterScreen.Completed;
            ele.Info = this.labelService.dsSideFilterScreen.TestComplete;
          }
          if (ele.Status == "Canceled") {
            ele.Status = this.labelService.dsSideFilterScreen.Canceled;
            ele.Info = this.labelService.dsSideFilterScreen.TestCanceled;
          }
          if (ele.Status == "Ordered") {
            ele.Status = this.labelService.dsSideFilterScreen.Pending;
            ele.Info = this.labelService.dsSideFilterScreen.TestNotAvailable;
          }
        });
        this.outAnlysisSource.emit(filterDropDowns.AnalysisSourceList);
      }, (err) => {
        console.log(JSON.stringify(err));
      });
    }
  }
  isComplated(Id) {
    return Id == EnmAnalysisStatus.Completed;
  }
  isCanceled(Id) {
    return Id == EnmAnalysisStatus.Canceled;
  }
  isPending(Id) {
    return Id == EnmAnalysisStatus.Pending;
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindSideFilterLabel();
    });
  }
  triggerEvent(e) {
    if (e == false) {
      this.searchText1 = "";
      this.sidefilterService.filter.selectedDr = this.selectedPhysician;
    }
  }
  onChange() {
    this.sidefilterService.filter.selectedDr = this.selectedPhysician;
  }
  onRequestingDrChange() {
    this.sidefilterService.filter.PhysicianName = this.selectedPhysician.join();
  }
  selectionChangee($event) {
    if ($event.isUserInput) {
      console.log($event.source.value);
      if (this.selectedPhysician.indexOf($event.source.value) == -1) {
        this.selectedPhysician.push($event.source.value);
      } else {
        this.selectedPhysician.splice(this.selectedPhysician.indexOf($event.source.value), 1);
      }
      console.log(this.selectedPhysician);
    }
  }
  onSpeciesChange(speciesId) {
    if (this.sidefilterService.filter.SpeciesId != null && this.sidefilterService.filter.SpeciesId > 0)
      this.dsSubSpecies = this.dsSpecies.find((x) => x.Id === this.sidefilterService.filter.SpeciesId)["SubSpecies"];
    else
      this.dsSubSpecies = [];
    this.sidefilterService.filter.SpeciesId = speciesId;
    this.getBreedList(speciesId);
  }
  getBreedList(speciesId) {
    const langId = this.dataService.appData.authDetails["LanguageId"];
    this.refLabService.getBreedListBySpeciesId(speciesId, langId).subscribe((res) => {
      this.sidefilterService.filter.Breed = "";
      this.breedList = res.ResponseData;
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  onAnalyzerChange(element) {
    this.sidefilterService.filter.Analyzer = element.AnalyzerName;
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.filter.AnalysisSourceId = element.AnalyzerName == "Ref Lab" ? 2 : 1;
    this.dsAnalysisType = this.dataService.appState?.analysisTypeList?.filter((ele) => {
      if (element.AnalyzerDisplayName == "Vetscan Vue/Vue+" && new RegExp("Vetscan Vue", "i").test(ele.analyzerDisplayName)) {
        return ele;
      } else {
        return ele.analyzerDisplayName == element.AnalyzerDisplayName;
      }
    });
  }
  applyFilter(isFilter, isMobile) {
    this.headerService.searchText = "";
    this.commonService.firebase.analytics().logEvent("apply_filter");
    this.sidefilterService.filter.FromDate = this.sidefilterService.FromDate != null ? this.commonService.getMomentFromDateTime(this.sidefilterService.FromDate) : null;
    this.sidefilterService.filter.ToDate = this.sidefilterService.ToDate != null ? this.commonService.getMomentToDateTime(this.sidefilterService.ToDate) : null;
    this.sidefilterService.filter.IsApplyFilter = isFilter;
    this.sidefilterService.filter.PageNo = 1;
    this.outFilterBy.emit(this.sidefilterService.filter);
    if (isMobile)
      this.closeFilter();
  }
  clearFilter() {
    this.myNameElem.nativeElement.value = "";
    this.clearFilterEvent.emit(null);
    this.setDefaultFilter();
    this.applyFilter(false);
    this.getPhysicianList("", this.pageNumber, 60, null);
    this.selectedPhysician = [];
    this.ngOnInit();
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.sidefilterService.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.AnalysisSourceId = this.dataService.appData.authDetails["IsLinkedRefLabClinic"] ? 0 : 1;
    this.sidefilterService.filter.AnalysisTypeId = null;
    this.sidefilterService.FromDate = new Date(this.commonService.twoYearBeforeFromToday);
    this.sidefilterService.ToDate = this.commonService.today;
    this.dsSubSpecies = [];
    this.breedList = [];
  }
  closeFilter() {
    this.commonService.closeFilterForPatient.next(true);
  }
  getPhysicianList(SearchText, PageNo, PageSize, AnalysisSourceId) {
    const dd = {
      BusinessGuid: localStorage.businessGuid,
      AnalysisSourceId,
      PageSize,
      PageNo,
      SearchText
    };
    this.refLabService.GetProvidersFilterList(dd).subscribe((data) => {
      if (PageNo == 1) {
        const uniquePhysicians = [];
        const seenNames = /* @__PURE__ */ new Set();
        data.ResponseData.Physician?.forEach((ele) => {
          if (ele["FirstName"] == ele["LastName"]) {
            ele["LastName"] = "";
            ele["PhysicianIdName"] = ele["FirstName"];
          }
          const cleanedName = ele.PhysicianIdName.replace(/\s*\([^)]*\)$/, "").trim().toLowerCase();
          if (!seenNames.has(cleanedName)) {
            seenNames.add(cleanedName);
            uniquePhysicians.push(__spreadProps(__spreadValues({}, ele), {
              PhysicianIdName: cleanedName
            }));
          }
          ;
        });
        this.doctorList = uniquePhysicians;
      }
      this.pageNumber += 1;
    }, (err) => {
      console.log(err);
    });
  }
  static {
    this.\u0275fac = function SidefilterComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SidefilterComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SidefilterComponent, selectors: [["app-sidefilter"]], viewQuery: function SidefilterComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c05, 7);
        \u0275\u0275viewQuery(_c15, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.select = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.myNameElem = _t.first);
      }
    }, outputs: { outFilterBy: "outFilterBy", clearFilterEvent: "clearFilterEvent", outAnlysisSource: "outAnlysisSource" }, decls: 59, vars: 41, consts: [["select", "matSelect"], ["myText", ""], ["pickerFrom", ""], ["pickerTo", ""], [1, "resp", "clse"], [3, "click"], [1, "resp", "respfilter"], [1, "d-flex", "justify-content-between", "mt-4"], [1, "filter-head"], [1, "clrall", 3, "click"], [1, "pl-4", "pr-4"], [1, "desk", "d-flex", "justify-content-between", "mt-4"], [1, "d-flex", "flex-column"], ["class", "mt-1", 4, "ngIf"], ["class", "mt-2", 4, "ngIf"], [4, "ngIf"], [1, "mt-2", 3, "hidden"], ["appearance", "outline", "floatLabel", "always"], ["multiple", "", 3, "selectionChange", "openedChange", "ngModelChange", "placeholder", "ngModel"], ["type", "text", "matInput", "", 2, "margin", "12px", 3, "ngModelChange", "placeholder", "ngModel"], [3, "value", "onSelectionChange", 4, "ngFor", "ngForOf"], ["style", "text-align: center;", 4, "ngIf"], [1, "d-flex", "flex-column", "range"], [1, "r-head", "mt-3", "heading"], ["matInput", "", "readonly", "", 3, "focus", "ngModelChange", "placeholder", "matDatepicker", "ngModel", "max"], ["matPrefix", "", 3, "for"], ["matInput", "", "readonly", "", 3, "focus", "ngModelChange", "placeholder", "matDatepicker", "ngModel", "min", "max"], ["class", "d-flex flex-column mt-3 ", 4, "ngIf"], [1, "mt-5", "mb-3", "d-flex", "justify-content-center", "applydesk"], ["mat-raised-button", "", "color", "warn", 1, "w-25", 3, "click"], [1, "mt-5", "mb-3", "d-flex", "justify-content-center", "applymob"], [1, "mt-1"], ["type", "text", "matInput", "", "maxlength", "20", 3, "ngModelChange", "keyup.enter", "placeholder", "ngModel"], [1, "mt-2"], [3, "selectionChange", "ngModelChange", "ngModel", "placeholder"], ["value", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "ngModelChange", "placeholder", "ngModel"], [3, "onSelectionChange", "value"], [2, "text-align", "center"], [1, "d-flex", "flex-column", "mt-3"], [1, "r-head", "mt-1", "heading"], [1, "d-flex", "flex-column", 3, "ngModelChange", "ngModel"], [1, "d-flex", "justify-content-between", "mb-1"], [1, "example-margin", 3, "value"], [2, "margin-right", "-4px!important"], ["height", "16", "Src", "../../../assets/img/poc-icon@2x.png", "alt", "poc-icon", 1, "mr-0", "ng-star-inserted"], ["height", "20", "Src", "../../../assets/img/lab-icon@2x.png", "alt", "lab-icon", 1, "mr-0", "ng-star-inserted"], [3, "selectionChange", "placeholder"], ["class", "d-flex justify-content-between mb-1", 4, "ngFor", "ngForOf"], ["matTooltipClass", "below", 1, "status-info-icon", 3, "matTooltip", "matTooltipPosition"], ["src", "./assets/img/info.png", "alt", ""], [3, "ngClass"]], template: function SidefilterComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 4)(1, "p", 5);
        \u0275\u0275listener("click", function SidefilterComponent_Template_p_click_1_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.closeFilter());
        });
        \u0275\u0275text(2, "X ");
        \u0275\u0275elementStart(3, "span");
        \u0275\u0275text(4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(5, "div", 6)(6, "div", 7)(7, "span", 8);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "a", 9);
        \u0275\u0275listener("click", function SidefilterComponent_Template_a_click_9_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearFilter());
        });
        \u0275\u0275text(10);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(11, "div", 10)(12, "div", 11)(13, "span", 8);
        \u0275\u0275text(14);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(15, "a", 9);
        \u0275\u0275listener("click", function SidefilterComponent_Template_a_click_15_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearFilter());
        });
        \u0275\u0275text(16);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 12);
        \u0275\u0275template(18, SidefilterComponent_div_18_Template, 3, 2, "div", 13);
        \u0275\u0275elementStart(19, "div");
        \u0275\u0275template(20, SidefilterComponent_div_20_Template, 3, 2, "div", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275template(21, SidefilterComponent_div_21_Template, 3, 2, "div", 15)(22, SidefilterComponent_div_22_Template, 6, 4, "div", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275template(23, SidefilterComponent_div_23_Template, 4, 3, "div", 14);
        \u0275\u0275elementStart(24, "div", 16)(25, "mat-form-field", 17)(26, "mat-select", 18, 0);
        \u0275\u0275listener("selectionChange", function SidefilterComponent_Template_mat_select_selectionChange_26_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onRequestingDrChange());
        })("openedChange", function SidefilterComponent_Template_mat_select_openedChange_26_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.triggerEvent($event));
        });
        \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_Template_mat_select_ngModelChange_26_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.filter.selectedDr, $event) || (ctx.sidefilterService.filter.selectedDr = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementStart(28, "input", 19, 1);
        \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_Template_input_ngModelChange_28_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.searchText1, $event) || (ctx.searchText1 = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("ngModelChange", function SidefilterComponent_Template_input_ngModelChange_28_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onChange());
        });
        \u0275\u0275elementEnd();
        \u0275\u0275template(30, SidefilterComponent_mat_option_30_Template, 2, 3, "mat-option", 20);
        \u0275\u0275pipe(31, "physicianFilter");
        \u0275\u0275template(32, SidefilterComponent_p_32_Template, 2, 1, "p", 21);
        \u0275\u0275pipe(33, "physicianFilter");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(34, "div", 22)(35, "div", 23);
        \u0275\u0275text(36);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(37, "div")(38, "mat-form-field", 17)(39, "input", 24);
        \u0275\u0275listener("focus", function SidefilterComponent_Template_input_focus_39_listener() {
          \u0275\u0275restoreView(_r1);
          const pickerFrom_r12 = \u0275\u0275reference(42);
          return \u0275\u0275resetView(pickerFrom_r12.open());
        });
        \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_Template_input_ngModelChange_39_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.FromDate, $event) || (ctx.sidefilterService.FromDate = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275element(40, "mat-datepicker-toggle", 25)(41, "mat-datepicker", null, 2);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(43, "div")(44, "mat-form-field", 17)(45, "input", 26);
        \u0275\u0275listener("focus", function SidefilterComponent_Template_input_focus_45_listener() {
          \u0275\u0275restoreView(_r1);
          const pickerTo_r13 = \u0275\u0275reference(48);
          return \u0275\u0275resetView(pickerTo_r13.open());
        });
        \u0275\u0275twoWayListener("ngModelChange", function SidefilterComponent_Template_input_ngModelChange_45_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.sidefilterService.ToDate, $event) || (ctx.sidefilterService.ToDate = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275element(46, "mat-datepicker-toggle", 25)(47, "mat-datepicker", null, 3);
        \u0275\u0275elementEnd()()();
        \u0275\u0275template(49, SidefilterComponent_div_49_Template, 18, 8, "div", 27)(50, SidefilterComponent_div_50_Template, 4, 2, "div", 14)(51, SidefilterComponent_div_51_Template, 4, 3, "div", 14)(52, SidefilterComponent_div_52_Template, 9, 5, "div", 27);
        \u0275\u0275elementStart(53, "div", 28)(54, "button", 29);
        \u0275\u0275listener("click", function SidefilterComponent_Template_button_click_54_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true, false));
        });
        \u0275\u0275text(55);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(56, "div", 30)(57, "button", 29);
        \u0275\u0275listener("click", function SidefilterComponent_Template_button_click_57_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.applyFilter(true, true));
        });
        \u0275\u0275text(58);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        let tmp_20_0;
        const pickerFrom_r12 = \u0275\u0275reference(42);
        const pickerTo_r13 = \u0275\u0275reference(48);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.Cancel);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.FILTERS);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ClearAll);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.FILTERS);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ClearAll);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVisiblePatientID);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVisiblePatientName);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleOwnerName);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleSpecies);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleGender);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", !ctx.isVisibleDVM);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.SearchRequestingDoctor);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.filter.selectedDr);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.SearchRequestingDoctor);
        \u0275\u0275twoWayProperty("ngModel", ctx.searchText1);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", \u0275\u0275pipeBind2(31, 35, ctx.doctorList, ctx.searchText1));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ((tmp_20_0 = \u0275\u0275pipeBind2(33, 38, ctx.doctorList, ctx.searchText1)) == null ? null : tmp_20_0.length) <= 0);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.ResultDate);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.From)("matDatepicker", pickerFrom_r12);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.FromDate);
        \u0275\u0275property("max", ctx.sidefilterService.ToDate !== null ? ctx.sidefilterService.ToDate : ctx.commonService.getCurrentDate());
        \u0275\u0275advance();
        \u0275\u0275property("for", pickerFrom_r12);
        \u0275\u0275advance(5);
        \u0275\u0275property("placeholder", ctx.labelService.dsSideFilterScreen.To)("matDatepicker", pickerTo_r13);
        \u0275\u0275twoWayProperty("ngModel", ctx.sidefilterService.ToDate);
        \u0275\u0275property("min", ctx.sidefilterService.FromDate)("max", ctx.commonService.getCurrentDate());
        \u0275\u0275advance();
        \u0275\u0275property("for", pickerTo_r13);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.isVisibleSource);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleAnalyzer);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleAnalysisType);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isVisibleStatus);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Apply, " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsSideFilterScreen.Apply, " ");
      }
    }, dependencies: [NgClass, NgForOf, NgIf, DefaultValueAccessor, NgControlStatus, MaxLengthValidator, NgModel, MatLegacyFormField, MatLegacyPrefix, MatLegacyInput, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatDatepicker, MatDatepickerInput, MatDatepickerToggle, MatLegacyRadioGroup, MatLegacyRadioButton, MatLegacyTooltip, PhysicianFilterPipe], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.heading[_ngcontent-%COMP%] {\n  color: #585858;\n  margin-bottom: 10px;\n  font-size: 14px;\n  font-weight: bold;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.clrall[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  cursor: pointer;\n  font-weight: bold;\n}\n.srch[_ngcontent-%COMP%] {\n  position: relative;\n  top: -5px;\n}\n.newtest[_ngcontent-%COMP%] {\n  min-width: 178px !important;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 16px;\n  width: 16px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 16px;\n  width: 16px;\n}\n.cancelled[_ngcontent-%COMP%] {\n  background: red;\n  height: 16px;\n  width: 16px;\n}\n.processing[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  height: 16px;\n  width: 16px;\n}\n.filter-head[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-family: "GothamNarrowBold", sans-serif;\n  color: #585858;\n  margin-bottom: 12px;\n}\n.resp[_ngcontent-%COMP%], \n.respfilter[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.applymob[_ngcontent-%COMP%] {\n  display: none !important;\n}\n@media screen and (max-width: 767px) {\n  .respfilter[_ngcontent-%COMP%] {\n    padding: 0 20px 10px 20px;\n    border-bottom: 1px solid #ccc;\n  }\n  .respfilter[_ngcontent-%COMP%]   .filter-head[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    color: #2476ce;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    margin-right: 20px;\n    text-align: right;\n    font-weight: bold;\n    padding-top: 8px;\n    color: red;\n    font-size: 16px;\n  }\n  .resp.clse[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-size: 15px;\n  }\n  .resp[_ngcontent-%COMP%], \n   .respfilter[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .applymob[_ngcontent-%COMP%] {\n    display: block !important;\n    margin-left: 25% !important;\n  }\n  .applydesk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .desk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 767px) and (max-width: 1024px) {\n  .respfilter[_ngcontent-%COMP%] {\n    padding: 0 20px 10px 20px;\n    border-bottom: 1px solid #ccc;\n  }\n  .respfilter[_ngcontent-%COMP%]   .filter-head[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    color: #2476ce;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    margin-right: 20px;\n    text-align: right;\n    font-weight: bold;\n    padding-top: 8px;\n    color: red;\n    font-size: 16px;\n  }\n  .resp.clse[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-size: 15px;\n  }\n  .resp[_ngcontent-%COMP%], \n   .respfilter[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .applymob[_ngcontent-%COMP%] {\n    display: block !important;\n    margin-left: 25% !important;\n  }\n  .applydesk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .desk[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    top: 56px;\n  }\n}\n  .mat-tooltip-panel {\n  margin-top: 10px;\n}\n  .mat-tooltip {\n  background-color: #fff;\n  color: #000 !important;\n  -webkit-box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  -moz-box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  box-shadow: 1px 1px 1px 1px rgba(209, 209, 209, 1);\n  position: relative;\n}\n  .mat-tooltip::after {\n  width: 0;\n  height: 0;\n  content: "";\n  position: absolute;\n  border-left: 0.5rem solid transparent;\n  border-right: 0.5rem solid transparent;\n  border-bottom: 0.5rem solid #ffffff;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\nspan.status-info-icon[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 10PX;\n  right: -16px;\n}\n  .mat-radio-label-content {\n  position: relative;\n}\n  .mat-select-panel.mat-primary {\n  min-width: calc(85% + 64px) !important;\n}\n  .mat-option-text {\n  width: 175px;\n}\n@-moz-document url-prefix() {\n  ::ng-deep .mat-select-panel {\n    max-width: 238px;\n  }\n}\n/*# sourceMappingURL=sidefilter.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SidefilterComponent, { className: "SidefilterComponent", filePath: "src\\app\\modules\\sidefilter\\sidefilter.component.ts", lineNumber: 27 });
})();

// src/app/components/clinic-management/clinic-management.component.ts
var ClinicManagementComponent = class _ClinicManagementComponent {
  constructor() {
    this.panelOpenState = false;
  }
  static {
    this.\u0275fac = function ClinicManagementComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ClinicManagementComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ClinicManagementComponent, selectors: [["app-clinic-management"]], decls: 63, vars: 0, consts: [[1, "wrapper"], ["id", "content"], [1, "outer", "sidefilter"], [1, "row"], [1, "col-sm-9"], [1, "mt-4"], [1, "d-flex", "justify-content-between", "mb-3"], [1, "col"], ["type", "button", "routerLink", "/login", 1, "btn", "btn-light", "back", "mr-4"], [1, "fa", "fa-angle-left"], [1, "col", "text-uppercase", "text-center"], ["data-testid", "cm-title"], [1, "col", "text-right", "pr-0"], ["type", "button", "routerLink", "/login", 1, "btn", "addclinic"], ["summary", "", 1, "table"], [1, "thead-light"], ["scope", "col"], ["scope", "row"], [1, "row", "mt-4"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "placeholder", "Enter Phone No.", "maxlength", "15"], ["src", "../../../assets/img/plus.png", "alt", "img", 1, "mr-2", "mt-2"], ["src", "../../../assets/img/minus.png", "alt", "img", 1, "mt-2"], [1, "col-sm-3", "d-flex", "justify-content-end", "align-items-center"], ["mat-flat-button", "", "color", "accent", 1, "mt-2", "g-btn"], [1, "col-sm-3", "right-filter"]], template: function ClinicManagementComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "div", 4)(8, "mat-card")(9, "div", 5)(10, "div", 6)(11, "div", 7)(12, "button", 8);
        \u0275\u0275element(13, "em", 9);
        \u0275\u0275text(14, " Back ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(15, "div", 10)(16, "h5", 11);
        \u0275\u0275text(17, "Clinic Management View");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(18, "div", 12)(19, "button", 13);
        \u0275\u0275text(20, " Add Clinic ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(21, "table", 14)(22, "thead", 15)(23, "tr")(24, "th", 16);
        \u0275\u0275text(25, "Clinic Name");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(26, "th", 16);
        \u0275\u0275text(27, "Address");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(28, "th", 16);
        \u0275\u0275text(29, "Zip Code");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(30, "th", 16);
        \u0275\u0275text(31, "Phone No.");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(32, "tbody")(33, "tr")(34, "th", 17);
        \u0275\u0275text(35, "Paw");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "td");
        \u0275\u0275text(37, "121,NY");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(38, "td");
        \u0275\u0275text(39, "75821");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(40, "td");
        \u0275\u0275text(41, "124568951");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(42, "div", 3)(43, "div", 4)(44, "div", 18)(45, "div", 7)(46, "mat-form-field", 19)(47, "mat-label");
        \u0275\u0275text(48, "FUSE Serial No. ");
        \u0275\u0275elementEnd();
        \u0275\u0275element(49, "input", 20);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(50, "div", 7)(51, "mat-form-field", 19)(52, "mat-label");
        \u0275\u0275text(53, "Enter Pin. ");
        \u0275\u0275elementEnd();
        \u0275\u0275element(54, "input", 20);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(55, "div", 7);
        \u0275\u0275element(56, "img", 21)(57, "img", 22);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(58, "div", 23)(59, "button", 24);
        \u0275\u0275text(60, " Save ");
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275elementStart(61, "div", 25);
        \u0275\u0275element(62, "app-sidefilter");
        \u0275\u0275elementEnd()()()()();
      }
    }, dependencies: [RouterLink, MatLegacyFormField, MatLegacyLabel, MatLegacyInput, MatLegacyButton, MatLegacyCard, HeaderComponent, SideMenuComponent, SidefilterComponent], styles: ["\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: calc(100vh - 110px);\n}\n.addclinic[_ngcontent-%COMP%] {\n  color: #ffffff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n  border-radius: 6px;\n}\n/*# sourceMappingURL=clinic-management.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ClinicManagementComponent, { className: "ClinicManagementComponent", filePath: "src\\app\\components\\clinic-management\\clinic-management.component.ts", lineNumber: 7 });
})();

// src/app/modules/add-user/add-user.component.ts
var _c06 = (a0) => ({ "addbox": a0 });
function AddUserComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 18);
    \u0275\u0275listener("click", function AddUserComponent_ng_container_6_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addMultipleUsers());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.AddMultipleUsers, " ");
  }
}
function AddUserComponent_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 19);
    \u0275\u0275listener("click", function AddUserComponent_ng_container_7_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.removeRow());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "button", 20);
    \u0275\u0275listener("click", function AddUserComponent_ng_container_7_Template_button_click_3_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.addRow());
    });
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.DeleteRow, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.AddRow, " ");
  }
}
function AddUserComponent_ng_container_23_mat_option_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 23);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const userType_r4 = ctx.$implicit;
    \u0275\u0275property("value", userType_r4.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", userType_r4.TypeName, " ");
  }
}
function AddUserComponent_ng_container_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "mat-form-field", 9)(2, "mat-label");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "mat-select", 21);
    \u0275\u0275template(5, AddUserComponent_ng_container_23_mat_option_5_Template, 2, 2, "mat-option", 22);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const UserTypeId_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Role);
    \u0275\u0275advance();
    \u0275\u0275property("formControl", UserTypeId_r5)("placeholder", ctx_r1.labelService.dsUserManagementScreen.Choose);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.rolesType);
  }
}
function AddUserComponent_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "mat-form-field", 24)(2, "mat-label");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "input", 25);
    \u0275\u0275listener("blur", function AddUserComponent_ng_container_25_Template_input_blur_4_listener() {
      const Email_r7 = \u0275\u0275restoreView(_r6).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.checkDublicateEmail(Email_r7));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const Email_r7 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Email);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.emailPlaceholder)("formControl", Email_r7);
  }
}
var AddUserComponent = class _AddUserComponent {
  constructor(formBuilder, commonService, refLabService, labelService, dataService, headerService, router, confirmationDialogService, activeModal) {
    this.formBuilder = formBuilder;
    this.commonService = commonService;
    this.refLabService = refLabService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.headerService = headerService;
    this.router = router;
    this.confirmationDialogService = confirmationDialogService;
    this.activeModal = activeModal;
    this.userTypeList = [];
    this.rolesType = [];
    this.headerTxt = "";
    this.emailPlaceholder = "";
    this.message = "";
    this.authDetails = this.dataService.appData.authDetails;
    this.user = new UserDetails();
    this.emailPlaceholder = this.labelService.dsUserManagementScreen.EnterEmail;
  }
  ngOnInit() {
    const bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    const countryId = this.dataService.appData.authDetails["BackOfficeFlag"] && bckBusinessInfo && bckBusinessInfo["BCountryId"] ? bckBusinessInfo["BCountryId"] : localStorage.getItem("userCountryId");
    this.refLabService.insideUSCAuser = [31, 40].indexOf(parseInt(countryId)) === -1 ? false : true;
    this.userForm = this.formBuilder.group({
      //Id: '',
      FirstName: ["", Validators.compose([Validators.maxLength(50), Validators.pattern('[^,;:!`~"?#&@$%^+{}*<>=]+$')])],
      LastName: ["", Validators.compose([Validators.maxLength(50), Validators.pattern('[^,;:!`~"?#&@$%^+{}*<>=]+$')])],
      UserTypeId: this.formBuilder.array([null]),
      // ['dvm','vettech']
      Email: this.formBuilder.array([null]),
      BusinessGuid: this.headerService.businessGuid
    });
    this.commonService.getUserManagmentDDLDetails(this.labelService.selectedLanguage, null).subscribe((data) => {
      this.userTypeList = data.ResponseData.UserTypeList;
      if (!this.refLabService.insideUSCAuser) {
        this.rolesType = this.userTypeList.filter((item) => !/[()]/g.test(item.TypeName));
      } else {
        this.rolesType = data.ResponseData.UserTypeList;
      }
    });
  }
  addMultipleUsers() {
    this.isAddingMultiple = true;
    this.headerTxt = this.labelService.dsUserManagementScreen.AddMultipleUsers;
  }
  onSubmit() {
    this.checkEmailValidation();
    if (this.userForm.valid) {
      this.userListDetails = new UserListDetails();
      try {
        gtag("event", "User_Management", {
          Total_Users: "",
          User_Name: this.userForm.value.FirstName + " " + this.userForm.value.LastName,
          User_Role: this.userForm.value.UserTypeId,
          User_Email_ID: this.userForm.value.Email,
          User_Phone: "",
          User_Status: "Request Sent",
          User_Action: "Add User"
        });
      } catch (error) {
        console.log(error);
      }
      if (this.requestFrom == "admin") {
        this.userListDetails.BusinessGuid = this.businessInfo.BusinessGuid;
        this.userListDetails.CreatedGuid = null;
        this.userListDetails.LanguageId = 1;
      } else {
        this.userListDetails.BusinessGuid = localStorage.businessGuid;
        this.userListDetails.CreatedGuid = this.headerService.loginUserGuid;
        this.userListDetails.LanguageId = this.labelService.selectedLanguage;
      }
      this.userListDetails.ObjUsersModel = [];
      for (let i = 0; i < this.userForm.value.Email.length; i++) {
        this.userList = new UserList();
        this.userList.FirstName = this.userForm.value.FirstName;
        this.userList.LastName = this.userForm.value.LastName;
        this.userList.Email = this.userForm.value.Email[i];
        this.userList.RoleID = this.userForm.value.UserTypeId[i];
        this.userListDetails.ObjUsersModel.push(this.userList);
      }
      this.commonService.addUpdateMultipleUsers(this.userListDetails).subscribe(() => {
        let okText;
        if (this.requestFrom == "admin") {
          okText = "OK";
        } else {
          okText = this.labelService.dsUserManagementScreen.OK;
        }
        this.activeModal.close("inviteSuccess");
        this.confirmationDialogService.confirm("", this.labelService.dsUserManagementScreen.UserAddedSuccessfully, okText, "", "sm", true, false).then(() => {
        }).catch(() => console.log("Error Ocoured"));
      }, (error) => {
        if (error.error.DisplayMessage == "Data not Saved") {
          if (error.error.ResponseData != void 0) {
            this.message = "";
            const index = this.userForm.get("Email").controls.length;
            const indexarr = [];
            for (let i = 0; i < error.error.ResponseData.length; i++) {
              this.message += error.error.ResponseData[i].Email;
              if (i != error.error.ResponseData.length - 1)
                this.message += ", ";
              for (let indx = 0; indx < index; indx++) {
                if (this.userForm.value.Email[indx].trim() == error.error.ResponseData[i].Email.trim())
                  indexarr.push(indx);
              }
            }
            this.message += " " + this.labelService.dsUserManagementScreen.EmailAlreadyExists;
          }
        } else
          this.message = this.labelService.dsUserManagementScreen.Error;
      });
    } else {
      this.message = this.labelService.dsUserManagementScreen.PleaseEnterMandatoryFields;
    }
  }
  addRow() {
    this.userForm.get("UserTypeId").push(this.formBuilder.control(null));
    this.userForm.get("Email").push(this.formBuilder.control(null));
  }
  removeRow() {
    const index = this.userForm.get("Email").controls.length - 1;
    if (index > 0) {
      this.userForm.get("UserTypeId").removeAt(index);
      this.userForm.get("Email").removeAt(index);
    }
  }
  checkEmailValidation() {
    for (let i = 0; i < this.userForm.value.Email.length; i++) {
      if (!this.checkEmailPater(this.userForm.get("Email").controls[i].value))
        this.userForm.get("Email").controls[i].setErrors({ status: "INVALID" });
    }
  }
  checkEmailPater(email) {
    const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
  }
  checkDublicateEmail(email) {
    let cnt = 0;
    this.userForm.get("Email").value.forEach((ele) => {
      if (ele == email.value) {
        cnt++;
        if (cnt > 1)
          email.setErrors({ status: "INVALID" });
      }
    });
    if (cnt <= 1 && !this.checkEmailPater(email.value))
      email.setErrors({ status: "INVALID" });
  }
  getUserTypeIdFormControls() {
    return this.userForm.get("UserTypeId").controls;
  }
  getEmailFormControls() {
    return this.userForm.get("Email").controls;
  }
  static {
    this.\u0275fac = function AddUserComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AddUserComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(NgbActiveModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AddUserComponent, selectors: [["app-add-user"]], inputs: { requestFrom: "requestFrom", businessInfo: "businessInfo" }, decls: 31, vars: 17, consts: [[1, "modal-header"], ["id", "editProfileLabel", 1, "modal-title"], [2, "text-align", "right", "margin", "0px 8px", "margin-bottom", "10px"], [1, "custom-error"], [4, "ngIf"], [1, "modal-body", "edit-profile"], ["autocomplete", "off", 1, "add-user-form", 3, "ngSubmit", "formGroup"], [1, "row", "mt-5", 3, "hidden"], [1, "col"], ["appearance", "outline", "floatLabel", "always", 1, "left_block"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "FirstName", "maxlength", "50", 3, "placeholder"], ["appearance", "outline", "floatLabel", "always", 1, "right_block"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "LastName", "maxlength", "50", 3, "placeholder"], [1, "row", "multuser_outer", 3, "ngClass"], [4, "ngFor", "ngForOf"], [1, "row", "mt-5", "justify-content-center"], ["type", "button", "mat-flat-button", "", "color", "accent", 2, "margin", "5px 15px", 3, "click"], ["mat-flat-button", "", "color", "accent", "type", "submit"], ["type", "button", "mat-flat-button", "", "color", "accent", 1, "multuser", 3, "click"], ["type", "button", "mat-flat-button", "", "color", "accent", 1, "cncl_btn", 2, "margin", "0px 7px", 3, "click"], ["type", "button", "mat-flat-button", "", "color", "accent", 3, "click"], ["required", "", 3, "formControl", "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["appearance", "outline", "floatLabel", "always", 1, "right_block", "right-part"], ["type", "text", "matInput", "", "autocomplete", "off", "maxlength", "100", "required", "", 3, "blur", "placeholder", "formControl"]], template: function AddUserComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "h5", 1);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(3, "div", 2)(4, "span", 3);
        \u0275\u0275text(5);
        \u0275\u0275elementEnd();
        \u0275\u0275template(6, AddUserComponent_ng_container_6_Template, 3, 1, "ng-container", 4)(7, AddUserComponent_ng_container_7_Template, 5, 2, "ng-container", 4);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 5)(9, "form", 6);
        \u0275\u0275listener("ngSubmit", function AddUserComponent_Template_form_ngSubmit_9_listener() {
          return ctx.onSubmit();
        });
        \u0275\u0275elementStart(10, "div", 7)(11, "div", 8)(12, "mat-form-field", 9)(13, "mat-label");
        \u0275\u0275text(14);
        \u0275\u0275elementEnd();
        \u0275\u0275element(15, "input", 10);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(16, "div", 8)(17, "mat-form-field", 11)(18, "mat-label");
        \u0275\u0275text(19);
        \u0275\u0275elementEnd();
        \u0275\u0275element(20, "input", 12);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(21, "div", 13)(22, "div", 8);
        \u0275\u0275template(23, AddUserComponent_ng_container_23_Template, 6, 4, "ng-container", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "div", 8);
        \u0275\u0275template(25, AddUserComponent_ng_container_25_Template, 5, 3, "ng-container", 14);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(26, "div", 15)(27, "button", 16);
        \u0275\u0275listener("click", function AddUserComponent_Template_button_click_27_listener() {
          return ctx.activeModal.close("close");
        });
        \u0275\u0275text(28);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(29, "button", 17);
        \u0275\u0275text(30);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.headerTxt);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.message);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isAddingMultiple);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isAddingMultiple);
        \u0275\u0275advance(2);
        \u0275\u0275property("formGroup", ctx.userForm);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", ctx.isAddingMultiple);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserManagementScreen.FirstName, " ");
        \u0275\u0275advance();
        \u0275\u0275property("placeholder", ctx.labelService.dsUserManagementScreen.EnterFirstName);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserManagementScreen.LastName, " ");
        \u0275\u0275advance();
        \u0275\u0275property("placeholder", ctx.labelService.dsUserManagementScreen.EnterLastName);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(15, _c06, ctx.isAddingMultiple));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.getUserTypeIdFormControls());
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.getEmailFormControls());
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserManagementScreen.Close, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserManagementScreen.SendInvite, " ");
      }
    }, dependencies: [NgClass, NgForOf, NgIf, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, FormControlDirective, FormGroupDirective, FormControlName, MatLegacyFormField, MatLegacyLabel, MatLegacyInput, MatLegacyButton, MatLegacySelect, MatLegacyOption], styles: ["\n\n.mat-flat-button.mat-accent[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  line-height: 40px;\n  padding: 0 19px;\n  border: transparent;\n  margin-top: 5px;\n}\n.custom-error[_ngcontent-%COMP%] {\n  color: red;\n  display: block;\n  position: absolute;\n  width: 65%;\n  margin-top: 10px;\n  text-align: center;\n}\n.edit-profile[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 88%;\n}\n.left_block[_ngcontent-%COMP%] {\n  width: 78%;\n}\n.right_block[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.multuser_outer[_ngcontent-%COMP%] {\n  max-height: calc(100vh - 540px);\n  overflow: auto;\n  padding-top: 38px;\n}\n.multuser_outer[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\n  margin-bottom: 25px;\n}\n.cncl_btn[_ngcontent-%COMP%] {\n  background: #919191 !important;\n}\n@media screen and (max-width: 767px) {\n  .add-user-form[_ngcontent-%COMP%]   .multuser_outer.addbox[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n    min-width: 32% !important;\n  }\n  .add-user-form[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n    min-width: 100% !important;\n  }\n  .add-user-form[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]:nth-child(1) {\n    margin-bottom: 28px;\n  }\n  .add-user-form[_ngcontent-%COMP%]   .multuser_outer[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]:nth-child(1) {\n    margin-bottom: 0;\n  }\n  .add-user-form[_ngcontent-%COMP%]   .left_block[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .add-user-form[_ngcontent-%COMP%]   .multuser_outer.addbox[_ngcontent-%COMP%] {\n    max-height: calc(100vh - 540px) !important;\n  }\n  .multuser_outer[_ngcontent-%COMP%] {\n    max-height: inherit !important;\n    padding-top: 28px;\n  }\n  .custom-error[_ngcontent-%COMP%] {\n    top: 87px;\n    left: 0;\n    width: 100%;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .custom-error[_ngcontent-%COMP%] {\n    left: -66px;\n    top: 91px;\n  }\n}\n  .mat-option-text {\n  display: inline-block;\n  flex-grow: 1;\n  overflow: hidden;\n  text-overflow: initial;\n  max-width: 100%;\n  white-space: initial;\n  line-height: 1.3em;\n}\n  .mat-select-panel .mat-option {\n  height: 3.3em;\n}\n.right-part[_ngcontent-%COMP%] {\n  height: 40.81px;\n}\n/*# sourceMappingURL=add-user.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AddUserComponent, { className: "AddUserComponent", filePath: "src\\app\\modules\\add-user\\add-user.component.ts", lineNumber: 15 });
})();

// src/app/components/user-managements/user-list/user-list.component.ts
var _c07 = (a0) => ({ "color": a0 });
var _c16 = (a0) => ({ "email-block": a0 });
function UserListComponent_th_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.Name, " ");
  }
}
function UserListComponent_td_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.FullName, " ");
  }
}
function UserListComponent_th_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.Role, " ");
  }
}
function UserListComponent_td_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "span");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Role);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r4.UserType, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r4.RefLabProviderId, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r4.InClinicProviderId, " ");
  }
}
function UserListComponent_th_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.EmailID, "");
  }
}
function UserListComponent_td_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.EmailID);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r5.Email, " ");
  }
}
function UserListComponent_th_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.PhoneNo, "");
  }
}
function UserListComponent_td_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.PhoneNo);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r6.PhoneNo, " ");
  }
}
function UserListComponent_th_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.Status, " ");
  }
}
function UserListComponent_td_35_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.getTraslation(element_r7));
  }
}
function UserListComponent_td_35_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "span", 34);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "mat-slide-toggle", 35);
    \u0275\u0275twoWayListener("ngModelChange", function UserListComponent_td_35_ng_container_4_Template_mat_slide_toggle_ngModelChange_3_listener($event) {
      \u0275\u0275restoreView(_r8);
      const element_r7 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(element_r7.IsActive, $event) || (element_r7.IsActive = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("click", function UserListComponent_td_35_ng_container_4_Template_mat_slide_toggle_click_3_listener($event) {
      \u0275\u0275restoreView(_r8);
      const element_r7 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.updateActiveInactive($event.target, element_r7));
    });
    \u0275\u0275elementStart(4, "span", 34);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const element_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(5, _c07, !element_r7.IsActive ? "black" : "grey"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Inactive, " ");
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", element_r7.IsActive);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(7, _c07, element_r7.IsActive ? "black" : "grey"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Active, " ");
  }
}
function UserListComponent_td_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, UserListComponent_td_35_span_3_Template, 2, 1, "span", 33)(4, UserListComponent_td_35_ng_container_4_Template, 6, 9, "ng-container", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Status);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !element_r7.IsActiveInactive && !element_r7.IsUserOtherBusiness);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r7.IsActiveInactive);
  }
}
function UserListComponent_th_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 36);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Action);
  }
}
function UserListComponent_td_38_span_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275listener("click", function UserListComponent_td_38_span_3_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r9);
      const element_r10 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      const editProfileModal_r11 = \u0275\u0275reference(44);
      return \u0275\u0275resetView(ctx_r1.openModal(editProfileModal_r11, element_r10));
    });
    \u0275\u0275elementStart(1, "button", 39);
    \u0275\u0275element(2, "img", 40);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("matTooltip", ctx_r1.labelService.dsUserManagementScreen.Edit);
  }
}
function UserListComponent_td_38_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31)(1, "span", 32);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, UserListComponent_td_38_span_3_Template, 3, 1, "span", 37);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Action);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (!element_r10.IsActiveInactive || element_r10.IsActive) && !element_r10.IsUserOtherBusiness);
  }
}
function UserListComponent_tr_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 41);
  }
}
function UserListComponent_tr_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 42);
  }
}
function UserListComponent_tbody_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 43)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Norecordsfound);
  }
}
function UserListComponent_ng_template_43_mat_option_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 67);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const userType_r13 = ctx.$implicit;
    \u0275\u0275property("value", userType_r13.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", userType_r13.TypeName, " ");
  }
}
function UserListComponent_ng_template_43_div_40_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 71);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_40_button_3_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.linkDoctorid());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.LinkDoctorID, " ");
  }
}
function UserListComponent_ng_template_43_div_40_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 71);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_40_button_4_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r17);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.deleteDoctorid());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.DeleteID);
  }
}
function UserListComponent_ng_template_43_div_40_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 68)(1, "button", 69);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_40_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r14);
      const modal_r15 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView(modal_r15.dismiss());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, UserListComponent_ng_template_43_div_40_button_3_Template, 2, 1, "button", 70)(4, UserListComponent_ng_template_43_div_40_button_4_Template, 2, 1, "button", 70);
    \u0275\u0275elementStart(5, "button", 71);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_40_Template_button_click_5_listener() {
      \u0275\u0275restoreView(_r14);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.addUser());
    });
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Close);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.islinkDoctor);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.deleteDoctor);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.popupSubmitText);
  }
}
function UserListComponent_ng_template_43_div_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 72)(1, "div", 73)(2, "button", 74);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_41_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.deleteRequest());
    });
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "div", 75)(5, "button", 69);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_41_Template_button_click_5_listener() {
      \u0275\u0275restoreView(_r18);
      const modal_r15 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView(modal_r15.dismiss());
    });
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "div", 76)(8, "button", 71);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_41_Template_button_click_8_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.addUser());
    });
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.DeleteRequest);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Close);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.popupSubmitText);
  }
}
function UserListComponent_ng_template_43_div_42_mat_option_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 67);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const provider_r20 = ctx.$implicit;
    \u0275\u0275property("value", provider_r20);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", provider_r20.ProviderIdName, " ");
  }
}
function UserListComponent_ng_template_43_div_42_mat_option_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 67);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const p_r21 = ctx.$implicit;
    \u0275\u0275property("value", p_r21);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", p_r21.PhysicianIdName, " ");
  }
}
function UserListComponent_ng_template_43_div_42_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "div", 77)(2, "div", 78)(3, "label", 79)(4, "strong");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "mat-form-field", 80)(7, "mat-select", 81);
    \u0275\u0275twoWayListener("ngModelChange", function UserListComponent_ng_template_43_div_42_Template_mat_select_ngModelChange_7_listener($event) {
      \u0275\u0275restoreView(_r19);
      const ctx_r1 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r1.selectedProvider, $event) || (ctx_r1.selectedProvider = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(8, "mat-option", 82);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275template(10, UserListComponent_ng_template_43_div_42_mat_option_10_Template, 2, 2, "mat-option", 55);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(11, "div", 77)(12, "div", 78)(13, "label", 79)(14, "strong");
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "mat-form-field", 80)(17, "mat-select", 83);
    \u0275\u0275twoWayListener("ngModelChange", function UserListComponent_ng_template_43_div_42_Template_mat_select_ngModelChange_17_listener($event) {
      \u0275\u0275restoreView(_r19);
      const ctx_r1 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r1.selectedInclinic, $event) || (ctx_r1.selectedInclinic = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(18, "mat-option", 82);
    \u0275\u0275text(19);
    \u0275\u0275elementEnd();
    \u0275\u0275template(20, UserListComponent_ng_template_43_div_42_mat_option_20_Template, 2, 2, "mat-option", 55);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.RefLabProviderID, " : ");
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.selectedProvider);
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.Select);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Select, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.providerData);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.InClinicProviderID, " : ");
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.selectedInclinic);
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.Select);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Select, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.physician);
  }
}
function UserListComponent_ng_template_43_div_54_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 89)(1, "mat-checkbox", 90);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_54_div_5_Template_mat_checkbox_click_1_listener() {
      \u0275\u0275restoreView(_r23);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.changeValue(ctx_r1.checked));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate2(" ", ctx_r1.labelService.dsUserManagementScreen.RefLabProviderID, " :", ctx_r1.rowwiseData.RefLabProviderId, " ");
  }
}
function UserListComponent_ng_template_43_div_54_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "mat-checkbox", 91);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_54_div_6_Template_mat_checkbox_click_1_listener() {
      \u0275\u0275restoreView(_r24);
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1.changeValue(ctx_r1.checkedIN, "IN"));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate2(" ", ctx_r1.labelService.dsUserManagementScreen.InClinicProviderID, " : ", ctx_r1.rowwiseData.InClinicProviderId, " ");
  }
}
function UserListComponent_ng_template_43_div_54_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 84)(1, "form", 85)(2, "div", 86)(3, "strong");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(5, UserListComponent_ng_template_43_div_54_div_5_Template, 3, 2, "div", 87)(6, UserListComponent_ng_template_43_div_54_div_6_Template, 3, 2, "div", 33);
    \u0275\u0275elementStart(7, "div", 88)(8, "button", 69);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_54_Template_button_click_8_listener() {
      \u0275\u0275restoreView(_r22);
      const modal_r15 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView(modal_r15.dismiss());
    });
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "button", 71);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_div_54_Template_button_click_10_listener() {
      \u0275\u0275restoreView(_r22);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.DeleteProvider());
    });
    \u0275\u0275text(11);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("formGroup", ctx_r1.CheckForm);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.PleaseSelectIDtoDelete, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.rowwiseData.RefLabProviderId);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.rowwiseData.InClinicProviderId);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Cancel, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Delete, " ");
  }
}
function UserListComponent_ng_template_43_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 44)(1, "h5", 45);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "div", 46)(4, "form", 47)(5, "div", 48)(6, "div", 49)(7, "mat-form-field", 50)(8, "mat-label");
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275element(10, "input", 51);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "div", 49)(12, "mat-form-field", 50)(13, "mat-label");
    \u0275\u0275text(14);
    \u0275\u0275elementEnd();
    \u0275\u0275element(15, "input", 52);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "div", 49)(17, "mat-form-field", 50)(18, "mat-label");
    \u0275\u0275text(19);
    \u0275\u0275elementEnd();
    \u0275\u0275element(20, "input", 53);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(21, "div", 48)(22, "div", 49)(23, "mat-form-field", 50)(24, "mat-label");
    \u0275\u0275text(25);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "mat-select", 54);
    \u0275\u0275template(27, UserListComponent_ng_template_43_mat_option_27_Template, 2, 2, "mat-option", 55);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(28, "div", 56)(29, "mat-form-field", 50)(30, "mat-label");
    \u0275\u0275text(31);
    \u0275\u0275elementEnd();
    \u0275\u0275element(32, "input", 57);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "span", 58);
    \u0275\u0275text(34);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(35, "div", 49)(36, "mat-form-field", 50)(37, "mat-label");
    \u0275\u0275text(38);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(39, "input", 59);
    \u0275\u0275listener("keyup", function UserListComponent_ng_template_43_Template_input_keyup_39_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.validateNumber());
    })("blur", function UserListComponent_ng_template_43_Template_input_blur_39_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.validateITIPhone());
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275template(40, UserListComponent_ng_template_43_div_40_Template, 7, 4, "div", 60)(41, UserListComponent_ng_template_43_div_41_Template, 10, 3, "div", 61);
    \u0275\u0275elementEnd();
    \u0275\u0275template(42, UserListComponent_ng_template_43_div_42_Template, 21, 10, "div", 33);
    \u0275\u0275elementStart(43, "div", 62);
    \u0275\u0275text(44);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(45, "div", 62);
    \u0275\u0275text(46);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(47, "div", 63)(48, "button", 64);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_Template_button_click_48_listener() {
      const modal_r15 = \u0275\u0275restoreView(_r12).$implicit;
      return \u0275\u0275resetView(modal_r15.dismiss());
    });
    \u0275\u0275text(49);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "button", 65);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_Template_button_click_50_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.PostProviderDetails());
    });
    \u0275\u0275text(51);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(52, "button", 65);
    \u0275\u0275listener("click", function UserListComponent_ng_template_43_Template_button_click_52_listener() {
      const modal_r15 = \u0275\u0275restoreView(_r12).$implicit;
      return \u0275\u0275resetView(modal_r15.dismiss());
    });
    \u0275\u0275text(53);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(54, UserListComponent_ng_template_43_div_54_Template, 12, 6, "div", 66);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.popupTitle);
    \u0275\u0275advance(2);
    \u0275\u0275property("formGroup", ctx_r1.addUserForm)("hidden", ctx_r1.hideModal);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Title);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.Title)("value", ctx_r1.selectedUser.PrefixType);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.FirstName, " ");
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.EnterFirstName);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.LastName, " ");
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.EnterLastName);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Role);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.Select);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.rolesType);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(34, _c16, ctx_r1.isEmailReadOnly));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsUserManagementScreen.Email);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.EnterEmail)("readonly", ctx_r1.isEmailReadOnly);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.userExist);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.PhoneNo, " ");
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsUserManagementScreen.PhoneExtNo);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.isStatueRequestSent);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isStatueRequestSent);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.linkID);
    \u0275\u0275advance();
    \u0275\u0275property("hidden", !ctx_r1.linkingMsg);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.IDLinkedSuccessfully, " ");
    \u0275\u0275advance();
    \u0275\u0275property("hidden", !ctx_r1.DelMsg);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.IDDeletedSuccessfully, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("hidden", !ctx_r1.bottonsCondition);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.Cancel, " ");
    \u0275\u0275advance();
    \u0275\u0275property("hidden", !ctx_r1.bottonsCondition);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsUserManagementScreen.Confirm, " ");
    \u0275\u0275advance();
    \u0275\u0275property("hidden", !ctx_r1.linkingOK);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsUserManagementScreen.Ok, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.RecordExist);
  }
}
var UserListComponent = class _UserListComponent {
  constructor(commonService, headerService, fb, modalService, refLabService, confirmationDialogService, labelService, title, dataService) {
    this.commonService = commonService;
    this.headerService = headerService;
    this.fb = fb;
    this.modalService = modalService;
    this.refLabService = refLabService;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.title = title;
    this.dataService = dataService;
    this.label1 = "Inactive";
    this.label2 = "Active";
    this.userStatusId = 0;
    this.userTypeId = 0;
    this.userId = localStorage.authDetails ? JSON.parse(localStorage.authDetails).UserGuid : null;
    this.dsUserStatus = [];
    this.dsUserType = [];
    this.rolesType = [];
    this.dsTitle = [];
    this.providerData = [];
    this.physician = [];
    this.isEmailReadOnly = true;
    this.isStatueRequestSent = false;
    this.islinkDoctor = false;
    this.deleteDoctor = false;
    this.hideModal = false;
    this.linkID = false;
    this.linkingMsg = false;
    this.linkingOK = false;
    this.DelMsg = false;
    this.bottonsCondition = false;
    this.RecordExist = false;
    this.checked = true;
    this.checkedIN = false;
    this.displayedColumns = ["FullName", "UserType", "Email", "PhoneNo", "Status", "action"];
    this.dataSource = new MatLegacyTableDataSource();
    this.CheckForm = new UntypedFormGroup({});
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.CheckForm = fb.group({
      checkProviderID: [true],
      checkClinicID: [false]
    });
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindUserManagementLabel();
    }
  }
  ngOnInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsUserManagementScreen.UserManagement}`);
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "User-Management");
    const bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    const countryId = this.dataService.appData.authDetails["BackOfficeFlag"] && bckBusinessInfo && bckBusinessInfo["BCountryId"] ? bckBusinessInfo["BCountryId"] : localStorage.getItem("userCountryId");
    this.refLabService.insideUSCAuser = [40].indexOf(parseInt(countryId)) === -1 ? false : true;
    if (localStorage.getItem("alert-popup") == "true") {
      this.modalService.open(AlertMessageComponent, {
        centered: true,
        backdrop: "static",
        scrollable: false
      });
    }
    this.commonService.getUserManagmentDDLDetails(this.labelService.selectedLanguage, null).subscribe((data) => {
      this.dsUserStatus = data.ResponseData.StatusList;
      this.dsUserType = data.ResponseData.UserTypeList;
      this.dsTitle = data.ResponseData.TitleDetails;
      if (!this.refLabService.insideUSCAuser) {
        this.rolesType = this.dsUserType.filter((item) => !/[()]/g.test(item.TypeName));
      } else {
        this.rolesType = data.ResponseData.UserTypeList;
      }
    });
    this.getUserList();
  }
  openAddUserModal() {
    const modalRef = this.modalService.open(AddUserComponent, {
      centered: true,
      backdrop: "static",
      scrollable: false
    });
    modalRef.componentInstance.headerTxt = this.labelService.dsUserManagementScreen.AddUser;
    modalRef.componentInstance.requestFrom = "clinic";
    modalRef.result.then((result) => {
      if (result == "inviteSuccess") {
        this.getUserList();
      }
    });
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindUserManagementLabel();
    });
  }
  getUserList() {
    this.commonService.getUserList(this.headerService.loginUserGuid, this.headerService.selectedBusinessGuid, this.userStatusId > 0 ? this.userStatusId : null, this.userTypeId > 0 ? this.userTypeId : null, this.labelService.selectedLanguage).subscribe({ next: (data) => {
      this.dsUserList = data.ResponseData;
      this.dataSource = new MatLegacyTableDataSource(this.dsUserList);
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    }, error: () => {
      this.dataSource = null;
    } });
  }
  GetProviderDetails() {
    this.commonService.GetProviderList(localStorage.businessGuid).subscribe((data) => {
      this.providerData = data.ResponseData.Provider;
      this.physician = data.ResponseData.Physician;
    });
  }
  openModal(targetModal, user) {
    this.selectedUser = user;
    this.userExist = "";
    if (user != null) {
      this.commonService.getUserManagmentDDLDetails(this.labelService.selectedLanguage, user.PrefixTypeId).subscribe((data) => {
        this.dsTitle = data.ResponseData.TitleDetails;
      });
      this.rowwiseData = user;
      this.popupTitle = this.labelService.dsUserManagementScreen.EditProfile;
      this.popupSubmitText = this.labelService.dsUserManagementScreen.Savechanges;
      this.hideModal = false;
      this.linkID = false;
      this.bottonsCondition = false;
      this.linkingMsg = false;
      this.linkingOK = false;
      this.DelMsg = false;
      this.RecordExist = false;
      this.islinkDoctor = false;
      this.deleteDoctor = false;
      if (user.UserTypeId == EnmUserType.DVM && user.RefLabProviderId == "" && user.InClinicProviderId == "" || user.UserTypeId == 35 && user.RefLabProviderId == "" && user.InClinicProviderId == "") {
        this.islinkDoctor = true;
      }
      if (user.UserTypeId == EnmUserType.DVM && user.RefLabProviderId != "" || user.UserTypeId == EnmUserType.DVM && user.InClinicProviderId != "" || user.UserTypeId == 35 && user.RefLabProviderId != "" || user.UserTypeId == 35 && user.InClinicProviderId != "") {
        this.deleteDoctor = true;
      }
      if (user.StatusId == EnmUserStatus.RequestSent)
        this.isStatueRequestSent = true;
      else
        this.isStatueRequestSent = false;
      this.isEmailReadOnly = true;
      this.addUserForm = this.createFormGroup(user);
    } else {
      this.popupTitle = this.labelService.dsUserManagementScreen.AddUser;
      this.islinkDoctor = false;
      this.deleteDoctor = false;
      this.popupSubmitText = this.labelService.dsUserManagementScreen.SendInvite;
      this.isStatueRequestSent = false;
      this.isEmailReadOnly = false;
      this.addUserForm = this.createFormGroup(new UserDetails());
      this.hideModal = false;
      this.linkID = false;
      this.bottonsCondition = false;
      this.linkingMsg = false;
      this.linkingOK = false;
      this.DelMsg = false;
      this.RecordExist = false;
      this.islinkDoctor = false;
      this.deleteDoctor = false;
    }
    this.modalService.open(targetModal, {
      centered: true,
      backdrop: "static",
      keyboard: false
    });
  }
  linkDoctorid() {
    if (this.rowwiseData.RefLabProviderId == "" || this.rowwiseData.InClinicProviderId == "") {
      this.GetProviderDetails();
      this.popupTitle = this.labelService.dsUserManagementScreen.LinkDoctorID;
      this.hideModal = true;
      this.linkID = true;
      this.bottonsCondition = true;
    }
  }
  deleteDoctorid() {
    if (this.rowwiseData.RefLabProviderId != "" || this.rowwiseData.InClinicProviderId != "") {
      this.hideModal = true;
      this.RecordExist = true;
      return this.popupTitle = this.labelService.dsUserManagementScreen.DeleteID;
    }
  }
  get f() {
    return this.CheckForm.controls;
  }
  changeValue(value, IN) {
    if (IN == void 0) {
      this.checked = !value;
    }
    if (IN != void 0) {
      this.checkedIN = !value;
    }
  }
  DeleteProvider() {
    if (this.rowwiseData.RefLabProviderId != "" && this.CheckForm.controls["checkProviderID"].value == true || this.rowwiseData.InClinicProviderId != "" && this.CheckForm.controls["checkClinicID"].value == true) {
      if (this.rowwiseData.RefLabProviderId != "" && this.CheckForm.controls["checkProviderID"].value == true) {
        this.ReflabIDOUT = "";
      } else {
        this.ReflabIDOUT = this.rowwiseData.SelectedRefLabProviderId;
      }
      if (this.rowwiseData.InClinicProviderId != "" && this.CheckForm.controls["checkClinicID"].value == true) {
        this.InclinicIDout = "";
      } else {
        this.InclinicIDout = this.rowwiseData.SelectedInClinicProviderId;
      }
      const reflabID = {
        ReflabProviderId: this.ReflabIDOUT,
        ClinicProviderId: this.InclinicIDout,
        FirstName: "",
        LastName: "",
        BusinessGuid: localStorage.businessGuid,
        UserGuid: this.rowwiseData.UserGuid
      };
      this.commonService.postProviderDetails(reflabID).subscribe(() => {
        this.getUserList();
        this.RecordExist = false;
        this.DelMsg = true;
        this.linkingOK = true;
        this.checkedIN = false;
        this.CheckForm.get("checkClinicID").setValue(false);
      });
    }
    return this.popupTitle = this.labelService.dsUserManagementScreen.DeleteID;
  }
  PostProviderDetails() {
    const providerDetails = {
      ReflabProviderId: this.selectedProvider ? this.selectedProvider.Id : "",
      ClinicProviderId: this.selectedInclinic.Id,
      FirstName: this.selectedProvider ? this.selectedProvider.FirstName : this.selectedInclinic.FirstName,
      LastName: this.selectedProvider ? this.selectedProvider.LastName : this.selectedInclinic.LastName,
      BusinessGuid: localStorage.businessGuid,
      UserGuid: this.rowwiseData.UserGuid
    };
    this.commonService.postProviderDetails(providerDetails).subscribe((data) => {
      if (data.StatusCode == "302") {
        this.showMsg("This ID is already linked to another user. Please contact your clinic administrator");
      } else if (data.StatusCode == "200") {
        this.getUserList();
        this.linkID = false;
        this.bottonsCondition = false;
        this.linkingMsg = true;
        this.linkingOK = true;
        this.selectedInclinic = "";
        this.selectedProvider = "";
      } else {
        this.showMsg("Record not found");
      }
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  addUser() {
    if (this.addUserForm.status == "VALID") {
      gtag("event", "User_Management", {
        Total_Users: "",
        User_Name: this.addUserForm.value.FirstName + " " + this.addUserForm.value.LastName,
        User_Role: this.addUserForm.value.UserTypeId,
        User_Email_ID: this.addUserForm.value.Email,
        User_Phone: this.addUserForm.value.PhoneNo,
        User_Status: this.addUserForm.value.StatusId,
        User_Action: "Update User"
      });
      this.commonService.addUpdateUser(this.addUserForm.value).subscribe({ next: () => {
        this.selectedRole = this.addUserForm.get("UserTypeId").value;
        console.log(this.selectedRole, "selected role");
        this.getUserList();
        this.modalService.dismissAll();
        if (this.addUserForm.value.UserGuid != null)
          this.showMsg(this.labelService.dsUserManagementScreen.Userupdatedsuccessfully);
        else
          this.showMsg(this.labelService.dsUserManagementScreen.Invitesentsuccessfully);
      }, error: (error) => {
        if (error != null && error.error.DisplayMessage == "Record already exist!") {
          this.userExist = this.labelService.dsUserManagementScreen.useralreadyexists;
        } else if (error != null && error.error.DisplayMessage == "User already exist") {
          this.userExist = this.labelService.dsUserManagementScreen.UserAlreadyExistsInOtherClinic;
        } else
          this.userExist = this.labelService.dsUserManagementScreen.Error;
      } });
    }
  }
  deleteRequest() {
    this.modalService.dismissAll();
    this.confirmationDialogService.confirm("Please Confirm", this.labelService.dsUserManagementScreen.DeletConfirmationMsg, this.labelService.dsUserManagementScreen.Yes, this.labelService.dsUserManagementScreen.No).then((confirmed) => {
      if (confirmed) {
        this.addUserForm.controls["IsDeleted"].setValue(true);
        this.updateUser(this.addUserForm.value);
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  updateActiveInactive(val, element) {
    const msg = element.IsActive ? this.labelService.dsUserManagementScreen.UserInactiveConfirmationMsg : this.labelService.dsUserManagementScreen.UserActiveConfirmationMsg;
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserManagementScreen.Yes, this.labelService.dsUserManagementScreen.No).then((confirmed) => {
      if (confirmed) {
        element.StatusId = element.IsActive ? EnmUserStatus.Active : EnmUserStatus.Inactive;
        this.updateUser(element);
      } else {
        element.IsActive = element.IsActive = !element.IsActive;
      }
    }).catch(() => {
      console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)");
    });
  }
  updateUser(ele) {
    this.commonService.addUpdateUser(ele).subscribe({ next: (data) => {
      if (data.DisplayMessage == "Alredy Verified")
        this.showMsg(this.labelService.dsUserManagementScreen.RequestCanNotBeDeleted);
      this.getUserList();
    }, error: () => {
      this.showMsg(this.labelService.dsUserManagementScreen.Error);
    } });
  }
  getTraslation(ele) {
    let rtnValue = ele.Status;
    switch (ele.StatusId) {
      case EnmUserStatus.RequestSent:
        rtnValue = this.labelService.dsUserManagementScreen.RequestSent;
        break;
      case EnmUserStatus.RequestCanceled:
        rtnValue = this.labelService.dsUserManagementScreen.RequestCancelled;
        break;
    }
    return rtnValue;
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserManagementScreen.OK, this.labelService.dsUserManagementScreen.Cancel, "sm", true, false);
  }
  createFormGroup(dataItem) {
    return this.fb.group({
      "BusinessGuid": localStorage.businessGuid,
      "PrefixTypeId": dataItem.Id > 0 ? dataItem.PrefixTypeId : EnmTitle.Choose,
      "Email": [dataItem.Email, Validators.compose([Validators.required, Validators.maxLength(100), Validators.pattern("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,9}$")])],
      "FirstName": [dataItem.FirstName, Validators.pattern("^[A-Za-z0-9.,'?/][A-Za-z0-9.,'?/ ]{0,50}")],
      "LastName": [dataItem.LastName, Validators.pattern("^[A-Za-z0-9.,'?/][A-Za-z0-9.,'?/ ]{0,50}")],
      "SuffixTypeId": dataItem.SuffixTypeId,
      "PhoneNo": [dataItem.PhoneNo],
      "UserTypeId": dataItem.UserTypeId > 0 ? dataItem.UserTypeId : EnmUserType.DVM,
      "CountryId": dataItem.CountryId,
      "StateId": dataItem.StateId,
      "StatusId": dataItem.StatusId,
      "IsDeleted": dataItem.IsDeleted,
      "UserGuid": dataItem.UserGuid,
      "UserRelationGuid": dataItem.UserRelationGuid,
      "CreatedAt": dataItem.CreatedAt,
      "LanguageId": this.labelService.selectedLanguage
    });
  }
  static {
    this.\u0275fac = function UserListComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _UserListComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserListComponent, selectors: [["app-user-list"]], viewQuery: function UserListComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(MatSort, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
      }
    }, decls: 45, vars: 10, consts: [["editProfileModal", ""], [1, "wrapper"], ["id", "content", 1, "userlist"], [1, "ques-icon", "text-right"], [1, "title-container"], ["data-testid", "um-title", 1, "page-title"], ["src", "../../../assets/img/help-icon.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qicon", 3, "click", "matTooltip"], [1, "outer", "view-user", "outpart"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1"], [1, "p-0"], [1, "d-flex", "justify-content-between", "pb-3", "align-items-center", "pt-0", "w-100"], [1, "col", "text-right", "d-flex", "justify-content-end", "select-outer", "align-items-center"], ["mat-flat-button", "", "color", "accent", 1, "ml-4", "adduser-btn", 2, "margin", "14px 0px 0px", 3, "click"], [1, "userpart", "user-section"], [1, "usermangemt", "pt-0"], ["mat-table", "", "matSort", "", "summary", "", 1, "mat-elevation-z2_", 3, "dataSource"], ["matColumnDef", "FullName"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "UserType"], ["matColumnDef", "Email"], ["matColumnDef", "PhoneNo"], ["matColumnDef", "Status"], ["matColumnDef", "action"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", "  norecord", 4, "ngIf"], ["_intl.itemsPerPageLabel", "", "showFirstLastButtons", "", 1, "mat-paginator-sticky", 3, "pageSize", "hidePageSize"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], [1, "textTtl", "d-none"], [4, "ngIf"], [3, "ngStyle"], [3, "ngModelChange", "click", "ngModel"], ["mat-header-cell", ""], ["class", "editicon", 3, "click", 4, "ngIf"], [1, "editicon", 3, "click"], ["mat-icon-button", "", "color", "accent", "matTooltipPosition", "above", 3, "matTooltip"], ["src", "../../../../assets/img/edit-button@2x.png", "alt", "edit", 1, "rounded-0"], ["mat-header-row", ""], ["mat-row", ""], [1, "norecord"], [1, "modal-header"], ["id", "editProfileLabel", 1, "modal-title"], [1, "modal-body", "edit-profile"], ["autocomplete", "off", 3, "formGroup", "hidden"], [1, "row", "mt-5"], [1, "col"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "autocomplete", "off", "readonly", "", 3, "placeholder", "value"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "FirstName", "maxlength", "50", "readonly", "", 3, "placeholder"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "LastName", "maxlength", "50", "readonly", "", 3, "placeholder"], ["required", "", "formControlName", "UserTypeId", 3, "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], [1, "col", 3, "ngClass"], ["type", "text", "matInput", "", "autocomplete", "off", "maxlength", "100", "formControlName", "Email", "required", "", 3, "placeholder", "readonly"], [1, "custom-error"], ["type", "tell", "id", "phone", "matInput", "", "autocomplete", "off", "formControlName", "PhoneNo", "maxlength", "15", "readonly", "", 3, "keyup", "blur", "placeholder"], ["class", "row mt-5 justify-content-center", 4, "ngIf"], ["class", "row mt-5 justify-content-center edit-mob-view", 4, "ngIf"], [1, "msg", 3, "hidden"], [1, "d-flex", "justify-content-center", "mt-5", "linkpart"], ["type", "button", "mat-raised-button", "", "color", "primary", 1, "cancel-btn", "mr-2", 3, "click", "hidden"], ["type", "button", "mat-raised-button", "", "color", "accent", 1, "save-change", "mr-2", 3, "click", "hidden"], ["class", "w-50 mx-auto del_doc", 4, "ngIf"], [3, "value"], [1, "row", "mt-5", "justify-content-center"], ["type", "button", "mat-raised-button", "", "color", "primary", 1, "cancel-btn", "mr-2", 3, "click"], ["type", "button", "class", "save-change mr-2", "mat-raised-button", "", "color", "accent", 3, "click", 4, "ngIf"], ["type", "button", "mat-raised-button", "", "color", "accent", 1, "save-change", "mr-2", 3, "click"], [1, "row", "mt-5", "justify-content-center", "edit-mob-view"], [1, "colr", "text-right"], ["type", "button", "mat-raised-button", "", "color", "accent", 1, "save-change", "delbtn", "mr-2", 3, "click"], [1, "colr", "text-center"], [1, "colr", "text-left"], [1, "col1", "d-flex", "w-100"], [1, "d-flex", "align-items-center", "justify-content-between", "w-100"], [1, "mr-2", "mb-0"], ["appearance", "outline", "floatLabel", "always", 1, "w-75"], ["ngDefaultControls", "", 3, "ngModelChange", "ngModel", "placeholder"], ["value", ""], [3, "ngModelChange", "ngModel", "placeholder"], [1, "w-50", "mx-auto", "del_doc"], [3, "formGroup"], [1, "mb-4", "msg"], ["class", "mb-3", 4, "ngIf"], [1, "d-flex", "justify-content-center", "mt-5"], [1, "mb-3"], ["formControlName", "checkProviderID", "value", "checked", 1, "example-margin", "xbt", 3, "click"], ["formControlName", "checkClinicID", "value", "checkedIN", 1, "example-margin", "xbt", 3, "click"]], template: function UserListComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "section", 4)(7, "span", 5);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "img", 6);
        \u0275\u0275listener("click", function UserListComponent_Template_img_click_9_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(10, "div", 7)(11, "div", 8)(12, "div", 9)(13, "mat-card", 10)(14, "div", 11)(15, "div", 12)(16, "button", 13);
        \u0275\u0275listener("click", function UserListComponent_Template_button_click_16_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.openAddUserModal());
        });
        \u0275\u0275text(17);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "div", 14)(19, "div", 15)(20, "table", 16);
        \u0275\u0275elementContainerStart(21, 17);
        \u0275\u0275template(22, UserListComponent_th_22_Template, 2, 1, "th", 18)(23, UserListComponent_td_23_Template, 4, 2, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(24, 20);
        \u0275\u0275template(25, UserListComponent_th_25_Template, 2, 1, "th", 18)(26, UserListComponent_td_26_Template, 9, 4, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(27, 21);
        \u0275\u0275template(28, UserListComponent_th_28_Template, 2, 1, "th", 18)(29, UserListComponent_td_29_Template, 4, 2, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(30, 22);
        \u0275\u0275template(31, UserListComponent_th_31_Template, 2, 1, "th", 18)(32, UserListComponent_td_32_Template, 4, 2, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(33, 23);
        \u0275\u0275template(34, UserListComponent_th_34_Template, 2, 1, "th", 18)(35, UserListComponent_td_35_Template, 5, 3, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(36, 24);
        \u0275\u0275template(37, UserListComponent_th_37_Template, 2, 1, "th", 25)(38, UserListComponent_td_38_Template, 4, 2, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(39, UserListComponent_tr_39_Template, 1, 0, "tr", 26)(40, UserListComponent_tr_40_Template, 1, 0, "tr", 27);
        \u0275\u0275elementEnd();
        \u0275\u0275template(41, UserListComponent_tbody_41_Template, 4, 1, "tbody", 28);
        \u0275\u0275element(42, "mat-paginator", 29);
        \u0275\u0275elementEnd()()()()()()()();
        \u0275\u0275template(43, UserListComponent_ng_template_43_Template, 55, 36, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
      }
      if (rf & 2) {
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserManagementScreen.UserManagement);
        \u0275\u0275advance();
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserManagementScreen.AddUser);
        \u0275\u0275advance(3);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(19);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource === null || ctx.dataSource.data.length === 0);
        \u0275\u0275advance();
        \u0275\u0275property("pageSize", 10)("hidePageSize", true);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, NgStyle, MatLegacyFormField, MatLegacyLabel, MatLegacyInput, MatLegacyButton, MatLegacyCheckbox, MatLegacyCard, MatLegacySelect, MatLegacyOption, MatLegacySlideToggle, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyPaginator, MatLegacyTooltip, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, NgModel, FormGroupDirective, FormControlName], styles: ['/* src/app/components/user-managements/user-list/user-list.component.css */\n.usermangemt {\n  height: calc(100vh - 225px);\n  overflow: auto;\n  padding: 12px;\n}\n.outer.outpart {\n  height: calc(100vh - 200px);\n}\ntable {\n  width: 100%;\n}\n.select-outer {\n  float: right;\n}\n.heading {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.color1 {\n  background: red;\n  height: 34px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n}\nth.mat-sort-header-sorted {\n  color: black;\n}\n.links {\n  color: #0075bc;\n  cursor: pointer !important;\n  text-decoration: underline;\n}\n.adduser-btn {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.view-user .mat-form-field-infix {\n  display: block;\n  position: relative;\n  flex: auto;\n  min-width: 0;\n  width: 115px;\n}\n.view-user .mat-form-field-appearance-outline .mat-form-field-infix {\n  padding: 4px 6px 7px 4px;\n  margin: 0 !important;\n  top: -2px;\n  font-size: 14px;\n}\n.view-user .mat-select-value {\n  color: #585858;\n}\n.view-user .mat-card {\n  padding: 0;\n  border-radius: 10px 10px 0 0;\n}\n.edit-profile .mat-form-field-wrapper {\n  padding-bottom: 0px;\n}\n.cancel-btn {\n  background-color: #9e9e9e;\n  min-width: 125px;\n}\n.save-change {\n  background-color: #ff6400;\n  color: #fff;\n  min-width: 125px;\n}\n.editicon .mat-icon-button.mat-accent {\n  color: #1072ce !important;\n}\n.deleteicon .mat-icon-button.mat-accent {\n  color: #1072ce !important;\n  margin-right: 10px;\n}\n.usermangemt table tr th:last-child,\n.usermangemt table tr td:last-child {\n  width: 100px;\n}\n.usermangemt table tr th:nth-of-type(5),\n.usermangemt table tr td:nth-of-type(5) {\n  width: 190px;\n  text-align: left;\n}\n.usermangemt table tr th:nth-of-type(2),\n.usermangemt table tr td:nth-of-type(2) {\n  width: 126px;\n}\n.usermangemt table tr td:last-child {\n  text-align: center;\n}\n.usermangemt table tr th:last-child {\n  padding-right: 30px !important;\n}\n.delbtn {\n  background: #1072ce !important;\n}\n.norecord {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\n.custom-error {\n  color: red;\n  display: block;\n  font-size: 11px;\n  position: absolute;\n  left: 26px;\n}\ntable {\n  border-collapse: separate;\n  border-spacing: 0 1em;\n}\n.user-section table.mat-table {\n  border-collapse: separate !important;\n  border-spacing: 0 12px !important;\n}\n.usermangemt table tr td:first-child {\n  border-radius: 10px 0 0 10px !important;\n}\n.userpart .usermangemt table tr td {\n  background: #fff !important;\n  border-radius: 10px !important;\n}\n.usermangemt table tbody tr {\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\n.userpart .usermangemt tr.mat-footer-row,\n.userpart .usermangemt tr.mat-row {\n  height: 60px;\n}\n.usermangemt tr th:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\n.usermangemt tr th:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.name_outer {\n  line-height: 16px;\n}\n[hidden] {\n  display: none !important;\n}\n.msg {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.userpart .usermangemt table tr td {\n  width: 16.66% !important;\n  padding-right: 15px;\n}\n.usermangemt table tr th:last-child {\n  text-align: center;\n  padding-left: 15px;\n}\n.edit-profile label {\n  font-size: 13px;\n}\n.userlist {\n  padding: 20px 58px 20px 20px !important;\n}\n@media screen and (max-width: 767px) {\n  table,\n  thead,\n  tbody,\n  th,\n  td,\n  tr {\n    display: inline-block;\n  }\n  .del_doc {\n    width: 100% !important;\n  }\n  .norecord tr td {\n    padding: 0;\n    border-bottom: none;\n    border-top: transparent;\n    background-color: transparent;\n  }\n  .norecord tr {\n    border: none;\n  }\n  thead tr {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr {\n    border: 1px solid #ccc;\n  }\n  td {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td span.textTtl {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  .usermangemt table tr {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  .usermangemt table tr {\n    border: none;\n    width: 100%;\n  }\n  .usermangemt table tr th {\n    display: none;\n  }\n  .btn-toggle:after {\n    width: 5rem;\n  }\n  .usermangemt table tr td {\n    width: 100% !important;\n    padding-left: 45% !important;\n    text-align: left !important;\n    height: 45px;\n    word-break: break-all;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 8px;\n    border: none;\n    font-size: 13px;\n  }\n  .usermangemt table tr td:last-child {\n    padding-top: 5px;\n  }\n  .usermangemt table tr td:nth-of-type(2) {\n    display: flex;\n    flex-direction: column;\n    line-height: 1.1 !important;\n    padding-top: 15px;\n    justify-content: center;\n    padding-bottom: 20px;\n  }\n  .modal-dialog {\n    max-width: auto !important;\n    min-width: auto !important;\n    margin: 0 auto;\n  }\n  .edit-profile .col {\n    min-width: 100%;\n    margin-bottom: 28px;\n  }\n  .edit-profile .col:nth-child(3) {\n    margin-bottom: 0;\n  }\n  .edit-profile .cancel-btn {\n    min-width: 0;\n    padding: 10px 32px;\n    line-height: 14px !important;\n    left: 3px;\n  }\n  .edit-profile .save-change {\n    min-width: 0;\n    padding: 10px 5px;\n    line-height: 14px !important;\n    margin-bottom: 10px;\n  }\n  .edit-profile .col .mat-form-field {\n    width: 100% !important;\n  }\n  .edit-mob-view .col {\n    min-width: 32% !important;\n  }\n  tr.mat-header-row {\n    height: 0 !important;\n    display: none;\n  }\n  .usermangemt table {\n    background: transparent;\n  }\n  .view-user .mat-card {\n    background: transparent;\n    box-shadow: none !important;\n  }\n  .usermangemt table tr td:first-child {\n    border-radius: 10px !important;\n  }\n  .edit-profile label {\n    font-size: 12px;\n    margin-right: 0.3rem !important;\n  }\n  .linkpart button {\n    padding: 10px 22px !important;\n  }\n  .userlist {\n    padding: 20px 0 0 0 !important;\n  }\n  .outer.outpart {\n    padding: 0 20px;\n  }\n  .title-container {\n    margin: 0 0 20px;\n  }\n  .page-title {\n    width: 100%;\n    display: block;\n    border-radius: 0;\n    border-top: 2px solid #ccc;\n    border-bottom: 2px solid #ccc;\n    font-size: 17px;\n  }\n  .userlist .ques-icon .qicon {\n    bottom: 18px;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 374px) {\n  .usermangemt table tr td {\n    padding-left: 35% !important;\n    padding-right: 5px;\n    border: none;\n    font-size: 12px;\n  }\n  .usermangemt table tr td:nth-of-type(2) {\n    display: flex;\n    flex-direction: column;\n    line-height: 1.1 !important;\n    padding-top: 15px;\n    justify-content: center;\n    padding-bottom: 20px;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .usermangemt table tr td {\n    padding-right: 10px;\n  }\n}\n@media screen and (max-width: 400px) {\n  .usermangemt table tr td {\n    padding-left: 36% !important;\n  }\n}\n.ques-icon {\n  position: relative;\n}\n.ques-icon .qicon {\n  position: absolute;\n  bottom: 0;\n  right: 12px;\n  cursor: pointer;\n}\n.mat-slide-toggle-bar,\n.mat-slide-toggle.mat-checked .mat-slide-toggle-bar {\n  border-radius: 1.5rem;\n  background: #e8e8e8;\n  box-shadow: none;\n  margin: 0 1.3rem !important;\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb,\n.mat-slide-toggle-thumb {\n  border-radius: 1.125rem;\n  background: #3da3e1;\n}\n#status-toggle {\n  display: flex;\n  align-items: center;\n  vertical-align: middle;\n  height: inherit;\n  width: 250px !important;\n}\n.mat-slide-toggle-content {\n  overflow: inherit !important;\n}\n.save-change.delbtn {\n  background: #1c6fb1 !important;\n}\n.cancel-btn {\n  background: #a7a4a4 !important;\n}\n.save-change {\n  background: #ff6400 !important;\n}\n.edit-profile button {\n  min-width: 120px !important;\n}\n/*# sourceMappingURL=user-list.component.css.map */\n'], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserListComponent, { className: "UserListComponent", filePath: "src\\app\\components\\user-managements\\user-list\\user-list.component.ts", lineNumber: 22 });
})();

// src/app/components/verify/verify.component.ts
function VerifyComponent_span_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 15);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.verifiedMsg);
  }
}
function VerifyComponent_span_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.verifiedMsg);
  }
}
function VerifyComponent_button_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "button", 17);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsLinkScreen.ReturntoLogin, " ");
  }
}
var VerifyComponent = class _VerifyComponent {
  constructor(router, commonService, labelService, dataService) {
    this.router = router;
    this.commonService = commonService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.isVerified = false;
    this.verifiedMsg = "";
    if (this.router.url.indexOf("?vry=") != -1) {
      const params = this.router.url.trim().split("?vry=")[1].split("&loc=");
      if (params[1] != void 0 && params[1] != null && params[1] != "")
        this.labelService.selectedLanguage = parseInt(params[1]);
      this.userGuid = params[0];
      this.businessGuid = params[1].split("verifyid=")[1];
      this.getLabelDetails();
    } else if (this.router.url.indexOf("verify?") != -1) {
      let languages = [];
      const params = this.router.url.trim().split("?lang=");
      if (params[1] != void 0 && params[1] != null && params[1] != "") {
        this.dataService.data.pipe(first()).subscribe((resp) => {
          languages = resp.userDropDownList.LanguageDetails;
          const gigyaLangCode = params[1].split("&")[0];
          const filteredLangs = this.getLanIdByLanCode(gigyaLangCode, languages);
          this.labelService.selectedLanguage = filteredLangs ? filteredLangs.Id : this.labelService.selectedLanguage;
          this.getLabelDetails(false);
          this.router.navigateByUrl("/thanks");
          this.isVerified = true;
        });
      }
    } else {
      this.router.navigateByUrl("/thanks");
      this.isVerified = true;
    }
  }
  getLanIdByLanCode(val, languages) {
    return languages.find((x) => x.GigyaLanguageCode.find((y) => y.GigyaLangCode == val));
  }
  getLabelDetails(verify = true) {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe({ next: (data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindLinkLabel();
      if (verify)
        this.verifyLink();
    }, error: () => {
      this.verifiedMsg = this.labelService.dsLinkScreen.InvalidRegisLink;
    } });
  }
  verifyLink() {
    this.commonService.verifyLinkByGuId(this.userGuid, this.businessGuid).subscribe({ next: (data) => {
      if (data.IsSuccess == true) {
        this.isVerified = true;
        this.dataService.appState.isInviteLinkExpired = true;
        this.dataService.state.next(this.dataService.appState);
        if (data.DisplayMessage == "Alredy Verified") {
          this.verifiedMsg = this.labelService.dsLinkScreen.BusinessRegisLinkAlreadyValidated;
        } else {
          this.router.navigateByUrl("/thanks");
        }
      } else {
        this.verifiedMsg = this.labelService.dsLinkScreen.InvalidRegisLink;
        this.isVerified = false;
        this.dataService.appState.isInviteLinkExpired = true;
        this.dataService.state.next(this.dataService.appState);
      }
    }, error: () => {
      this.verifiedMsg = this.labelService.dsLinkScreen.BusinessRegisLinkValidationFail;
      this.isVerified = false;
      this.dataService.appState.isInviteLinkExpired = true;
      this.dataService.state.next(this.dataService.appState);
    } });
  }
  static {
    this.\u0275fac = function VerifyComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _VerifyComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _VerifyComponent, selectors: [["app-verify"]], decls: 15, vars: 3, consts: [[1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-75"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo.png", "width", "196", "alt", "logo"], ["autocomplete", "off", 1, "form-signin"], [1, "form-label-group", "mb-4"], [1, "text-center", "mb-4", "info"], ["class", "verify", 4, "ngIf"], ["class", "notverify", 4, "ngIf"], [1, "d-flex", "align-items-center", "justify-content-center", "flex-column"], ["class", "btn btn1 btn-lg btn-primary btn-block text-uppercase mt-3", "mat-raised-button", "", "color", "warn", "routerLink", "/login", 4, "ngIf"], [1, "verify"], [1, "notverify"], ["mat-raised-button", "", "color", "warn", "routerLink", "/login", 1, "btn", "btn1", "btn-lg", "btn-primary", "btn-block", "text-uppercase", "mt-3"]], template: function VerifyComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6);
        \u0275\u0275element(7, "img", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "form", 8)(9, "div", 9)(10, "div", 10);
        \u0275\u0275template(11, VerifyComponent_span_11_Template, 2, 1, "span", 11)(12, VerifyComponent_span_12_Template, 2, 1, "span", 12);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(13, "div", 13);
        \u0275\u0275template(14, VerifyComponent_button_14_Template, 2, 1, "button", 14);
        \u0275\u0275elementEnd()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(11);
        \u0275\u0275property("ngIf", ctx.isVerified);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isVerified);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.isVerified);
      }
    }, dependencies: [NgIf, RouterLink, MatLegacyButton, \u0275NgNoValidate, NgControlStatusGroup, NgForm], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n  padding: 50px 8px !important;\n  height: 400px;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 72%;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  display: flex;\n  color: #3e3e3e;\n  margin-top: 16px;\n  font-size: 14px;\n  height: 88px;\n  align-items: center;\n  justify-content: center;\n}\n.btn1[_ngcontent-%COMP%] {\n  color: #000;\n  background-color: #fff;\n  border: solid 0.4px #979797 !important;\n  margin: 0 10px 0 0;\n}\n.verify[_ngcontent-%COMP%] {\n  color: green;\n  font-size: 20px;\n  font-family: "gothambook", sans-serif;\n  font-weight: bolder;\n}\n.notverify[_ngcontent-%COMP%] {\n  color: red;\n  font-size: 15px;\n  font-family: "gothambook", sans-serif;\n}\n/*# sourceMappingURL=verify.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(VerifyComponent, { className: "VerifyComponent", filePath: "src\\app\\components\\verify\\verify.component.ts", lineNumber: 13 });
})();

// src/app/components/thanks/thanks.component.ts
var ThanksComponent = class _ThanksComponent {
  constructor(labelService, dataService, router, route) {
    this.labelService = labelService;
    this.dataService = dataService;
    this.router = router;
    this.route = route;
    this.displayMessage = "";
    this.loginUrl = "login";
  }
  ngOnInit() {
    this.route.queryParams.subscribe((params) => {
      this.loginUrl = params.next || this.loginUrl;
    });
    this.isInviteLinkExpired = this.dataService.appState.isInviteLinkExpired;
    this.getLabelDetails();
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindLinkLabel();
      this.displayMsg();
    });
  }
  displayMsg() {
    if (this.router.url.indexOf("/thanks") !== -1) {
      this.displayMessage = "<p>" + this.labelService.dsLinkScreen.ThankYouMsg + "</p>";
    }
    if (this.router.url.indexOf("/link-expired") !== -1) {
      this.displayMessage = this.labelService.dsLinkScreen.InvalidRegisLink;
      document.getElementById("responseMessage").style.color = "red";
    }
    if (this.router.url.indexOf("/alredy-verified") !== -1) {
      this.displayMessage = this.labelService.dsLinkScreen.BusinessRegisLinkAlreadyValidated;
      document.getElementById("responseMessage").style.color = "green";
      document.getElementById("responseMessage").style.padding = "40px 0px";
      document.getElementById("responseMessage").style.fontSize = "15px";
    }
  }
  goToLogin() {
    this.router.navigateByUrl("/" + this.loginUrl);
  }
  static {
    this.\u0275fac = function ThanksComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ThanksComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ThanksComponent, selectors: [["app-thanks"]], decls: 18, vars: 1, consts: [[1, "bg", "d-flex", "align-items-center", "justify-content-center", "flex-column", "reg-outer"], [1, "card"], [1, "card-body"], [1, "d-flex", "justify-content-center", "align-items-center", "mb-2", "flex-column"], [1, "mt-0", "mb-3"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "logo-login"], [1, "spacer"], [1, "reg-form"], [1, "thanks-outer"], ["id", "responseMessage", 1, "t-head", 3, "innerHTML"], [1, "d-flex", "justify-content-center", "icon-outer"], [3, "click"], ["src", "../../../assets/img/browser@2x.png", "alt", "browser"], [1, "mr-4", "ml-4"], ["src", "../../../assets/img/googleplay@2x.png", "alt", "googleplay"], ["src", "../../../assets/img/appstore@2x.png", "alt", "appstore"]], template: function ThanksComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4);
        \u0275\u0275element(5, "img", 5);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 6);
        \u0275\u0275element(7, "mat-divider");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(8, "div", 7)(9, "div", 8);
        \u0275\u0275element(10, "div", 9);
        \u0275\u0275elementStart(11, "div", 10)(12, "span", 11);
        \u0275\u0275listener("click", function ThanksComponent_Template_span_click_12_listener() {
          return ctx.goToLogin();
        });
        \u0275\u0275element(13, "img", 12);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "span", 13);
        \u0275\u0275element(15, "img", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "span");
        \u0275\u0275element(17, "img", 15);
        \u0275\u0275elementEnd()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(10);
        \u0275\u0275property("innerHTML", ctx.displayMessage, \u0275\u0275sanitizeHtml);
      }
    }, dependencies: [MatDivider], styles: ['\n\n.thanks-outer[_ngcontent-%COMP%] {\n  padding: 5px;\n}\n.t-head[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-size: 21px;\n  text-align: center;\n  padding-top: 0px;\n  padding-bottom: 20px;\n  font-family: "GothamNarrowBold", sans-serif;\n  line-height: 48px;\n}\n.thanks-outer[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  padding-top: 0px;\n  margin-bottom: 30px;\n}\n.icon-outer[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  min-width: 56px;\n  text-align: center;\n  cursor: pointer;\n}\n.outer[_ngcontent-%COMP%] {\n  height: 93vh;\n  margin-top: 70px;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n.bg[_ngcontent-%COMP%] {\n  background: url("./media/background.jpg");\n  background-size: cover;\n  height: 100vh;\n}\n.card[_ngcontent-%COMP%] {\n  max-width: 777px;\n  background-color: rgba(255, 255, 255, 0.8);\n  height: auto;\n  border-radius: 40px;\n  width: 548px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  overflow: auto;\n}\n.card-body[_ngcontent-%COMP%] {\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  min-height: 1px;\n  padding: 2.25rem;\n}\n.moose-head[_ngcontent-%COMP%] {\n  font-size: 24px;\n  background-color: #eaeaea;\n  text-align: center;\n  color: #f26323;\n  padding: 10px 35px;\n  border-radius: 13px;\n}\n.card-body[_ngcontent-%COMP%] {\n  padding: 40px;\n}\n.spacer[_ngcontent-%COMP%] {\n  width: calc(100% + 68px);\n  margin-top: 22px;\n  margin-bottom: 19px;\n}\n.reg-form[_ngcontent-%COMP%] {\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: space-between;\n}\n.mat-divider[_ngcontent-%COMP%] {\n  border-top-color: rgba(0, 0, 0, 0.05);\n}\n/*# sourceMappingURL=thanks.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ThanksComponent, { className: "ThanksComponent", filePath: "src\\app\\components\\thanks\\thanks.component.ts", lineNumber: 10 });
})();

// src/app/components/patient-managements/patient-list/patient-list.component.ts
function PatientListComponent_ng_container_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "a", 40);
    \u0275\u0275listener("click", function PatientListComponent_ng_container_12_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.sidemenuService.goToLink(184, ctx_r2.backUrl));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientInfoScreen.Back);
  }
}
function PatientListComponent_th_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsPatientListScreen.PatientID, "");
  }
}
function PatientListComponent_td_43_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "a", 44);
    \u0275\u0275listener("click", function PatientListComponent_td_43_Template_a_click_3_listener() {
      const element_r6 = \u0275\u0275restoreView(_r5).$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.navigateToInfoPage(element_r6));
    });
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.PatientID);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r6.PatientId, " ");
  }
}
function PatientListComponent_th_45_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsPatientListScreen.PatientName, "");
  }
}
function PatientListComponent_td_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 45);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.PatientName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r7.PatientName, " ");
  }
}
function PatientListComponent_th_48_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsPatientListScreen.OwnerName, "");
  }
}
function PatientListComponent_td_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.OwnerName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r8.OwnerName, " ");
  }
}
function PatientListComponent_th_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsPatientListScreen.Species, "");
  }
}
function PatientListComponent_td_52_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.Species);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r9.SpeciesName, " ");
  }
}
function PatientListComponent_th_54_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.labelService.dsPatientListScreen.Breed, " ");
  }
}
function PatientListComponent_td_55_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.Breed);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r10.BreedName, " ");
  }
}
function PatientListComponent_th_57_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.labelService.dsPatientListScreen.Sex, " ");
  }
}
function PatientListComponent_td_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.Sex);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r11.GenderName, " ");
  }
}
function PatientListComponent_th_60_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsPatientListScreen.LastAnalysis, "");
  }
}
function PatientListComponent_td_61_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "span", 46);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r12.DateReceivedStr, "");
  }
}
function PatientListComponent_td_61_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 42)(1, "span", 43);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, PatientListComponent_td_61_div_3_Template, 3, 1, "div", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.LastAnalysis);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r12.DateReceivedStr);
  }
}
function PatientListComponent_tr_62_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 47);
  }
}
function PatientListComponent_tr_63_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 48);
  }
}
function PatientListComponent_tbody_64_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.Norecordsfound);
  }
}
function PatientListComponent_tbody_64_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsPatientListScreen.NorecordsfoundByFilter);
  }
}
function PatientListComponent_tbody_64_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 49)(1, "tr");
    \u0275\u0275template(2, PatientListComponent_tbody_64_div_2_Template, 2, 1, "div", 10)(3, PatientListComponent_tbody_64_div_3_Template, 2, 1, "div", 10);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r2.sidefilterService.filter.IsApplyFilter == false);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.sidefilterService.filter.IsApplyFilter == true);
  }
}
var PatientListComponent = class _PatientListComponent {
  constructor(commonService, headerService, router, patientService, sidemenuService, labelService, sidefilterService, confirmationDialogService, dataService, title, modalService, location2, loc) {
    this.commonService = commonService;
    this.headerService = headerService;
    this.router = router;
    this.patientService = patientService;
    this.sidemenuService = sidemenuService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.modalService = modalService;
    this.location = location2;
    this.loc = loc;
    this.businessGuid = localStorage.businessGuid != void 0 && localStorage.businessGuid != null && localStorage.businessGuid != "" ? localStorage.businessGuid : 0;
    this.displayedColumns = ["PatientId", "PatientName", "OwnerName", "SpeciesName", "BreedName", "GenderName", "DateReceived"];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.start = 0;
    this.limit = 15;
    this.end = this.limit + this.start;
    this.selectedRowIndex = null;
    this.unsubscriber = new Subject();
    this.FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);
    this.ToDateLabel = this.commonService.today;
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.filter = new SideFilter();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.dataService.pageState.default.requestParams = this.filter;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientListLabel();
    }
    if (!this.dataService.pageState.PatientList.requestParams) {
      this.sidefilterService.filter = this.filter;
    }
  }
  ngOnInit() {
    const redirectionData = localStorage.getItem("rediretionDetails");
    if (redirectionData) {
      this.backUrl = redirectionData.split("backURL=")[1] != void 0 ? redirectionData.split("backURL=")[1].split("&")[0] : "";
      this.backUrl = "#" + this.backUrl.split("#")[1] + "?ref=";
    }
    this.closeFilterRegister();
    if (localStorage.getItem("alert-popup") == "true") {
      this.modalService.open(AlertMessageComponent, {
        centered: true,
        backdrop: "static",
        scrollable: false
      });
    }
    if (this.dataService.pageState.PatientList.requestParams) {
      if (this.dataService.pageState.PatientList.requestParams.FromDate != null && this.dataService.pageState.PatientList.requestParams.FromDate != "") {
        this.sidefilterService.FromDate = new Date(this.dataService.pageState.PatientList.requestParams.FromDate);
        this.sidefilterService.filter.FromDate = this.dataService.pageState.PatientList.requestParams.FromDate;
      }
      if (this.dataService.pageState.PatientList.requestParams.ToDate != null && this.dataService.pageState.PatientList.requestParams.ToDate != "") {
        this.sidefilterService.ToDate = new Date(this.dataService.pageState.PatientList.requestParams.ToDate);
        this.sidefilterService.filter.ToDate = this.dataService.pageState.PatientList.requestParams.ToDate;
      }
    }
    if (this.dataService.pageState.PatientList.requestParams) {
      this.sidefilterService.filter = this.dataService.pageState.PatientList.requestParams;
      this.sidefilterService.filter.PageNo = 1;
    } else {
      this.sidefilterService.filter = new SideFilter();
      this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    }
    this.getPatientList(this.sidefilterService.filter);
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "Patients");
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsPatientListScreen.PatientsList}`);
  }
  // ngAfterViewInit() { }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
    this.dataService.pageState.PatientList.requestParams = this.sidefilterService.filter;
    this.dataService.page.next(this.dataService.pageState);
    this.sidefilterService.ToDate = null;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.filter = new SideFilter();
    this.unsubscriber.next();
    if (this.isConsultantUser) {
      location.reload();
    }
  }
  onPopState() {
    if (this.isConsultantUser) {
      console.log("Back button Clicked");
      history.pushState(null, "");
      this.sidemenuService.goToLink(184);
    }
  }
  navigateToInfoPage(element) {
    this.dataService.pageState.PatientList.resultsList = this.originData;
    this.dataService.page.next(this.dataService.pageState);
    this.patientService.showPataientInfo(element, this.sidefilterService.filter, this.sidefilterService.filter.PageNo, null, null);
  }
  onDataSort(e) {
    this.dataService.pageState.PatientList.sortState = e;
    this.dataService.page.next(this.dataService.pageState);
    this.scrolltoTop(null);
  }
  clearPageHistory() {
    this.dataService.pageState.PatientList.requestParams = null;
    this.dataService.pageState.PatientList.resultsList = [];
    this.dataService.page.next(this.dataService.pageState);
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientListLabel();
    });
  }
  filterData(e) {
    this.getPatientList(e);
  }
  getPatientList(event) {
    this.FromDateLabel = this.sidefilterService.FromDate;
    this.ToDateLabel = this.sidefilterService.ToDate;
    event.UserGuid = this.headerService.loginUserGuid;
    event.LanguageId = this.labelService.selectedLanguage;
    event.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    if (event.IsApplyFilter) {
      this.sidefilterService.filter.PageNo = event.PageNo;
    }
    if (event.PageNo == 1) {
      this.originData = [];
    }
    this.dataService.pageState.PatientList.requestParams = event;
    this.dataService.page.next(this.dataService.pageState);
    this.commonService.getPatientList(event).subscribe({
      next: (data) => {
        if (event.PageNo == 1) {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.originData = data.ResponseData.PatientList;
          } else {
            this.originData = [];
          }
        } else {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.originData = this.originData.concat(data.ResponseData.PatientList);
          }
        }
        if (data.ResponseData.PatientList != null && this.originData.length < 60) {
          event.PageNo += 1;
          this.sidefilterService.filter.PageNo = event.PageNo;
          this.getPatientList(event);
        }
        if (this.originData.length > 0) {
          if (this.originData.length > 0 && this.isLoadMore) {
            this.isLoadMore = false;
          } else {
            this.scrolltoTop(null);
          }
          this.dataService.pageState.PatientList.resultsList = this.originData;
          this.dataService.page.next(this.dataService.pageState);
          this.dataSource = new MatLegacyTableDataSource(this.originData);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
        } else {
          this.dataSource.data = [];
        }
      },
      error: () => {
        this.dataSource.data = [];
      }
    });
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      this.isLoadMore = true;
      this.sidefilterService.filter.PageNo++;
      this.sidefilterService.filter.PageSize = 60;
      this.getPatientList(this.sidefilterService.filter);
    }
  }
  scrolltoTop(topVal) {
    const scrollabe = document.getElementById("patient-list-scrollabe");
    scrollabe.scrollTop = topVal;
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.PatientName = null;
    this.sidefilterService.filter.PatientId = null;
    this.sidefilterService.filter.OwnerName = null;
    this.sidefilterService.filter.FromDate = null;
    this.sidefilterService.filter.ToDate = null;
    this.sidefilterService.filter.AnalysisSourceId = 0;
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.filter.AnalysisStatusId = 0;
    this.sidefilterService.filter.SpeciesId = null;
    this.sidefilterService.filter.Breed = null;
    this.sidefilterService.filter.UserGuid = 0;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.ToDate = null;
  }
  onToggleFollowPatient(e, obj) {
    if (this.headerService.notificationSettingId == EnmNotificationSetting.FollowPatients) {
      this.onOffFollowPatient(e.checked, obj);
    } else {
      const msg = this.labelService.dsPatientListScreen.ConfirmMessage;
      this.confirmationDialogService.confirm("", msg, this.labelService.dsPatientListScreen.Updatepreferences, this.labelService.dsPatientListScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.dataService.appState.admin.profilePageSelectedAccordion = 1;
          this.dataService.state.next(this.dataService.appState);
          this.router.navigateByUrl("/user/account");
        } else {
          this.dataSource.data.forEach((item) => {
            if (item.PatientId == obj.PatientId) {
              item.IsFollowedPatient = !item.IsFollowedPatient;
            }
            return item;
          });
        }
      });
    }
  }
  onOffFollowPatient(toggleValue, obj) {
    const params = {
      UserGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.headerService.selectedBusinessGuid,
      PatientId: obj.PatientId,
      FuseSerialNo: obj.fuse_serial_number,
      IsActive: toggleValue
    };
    this.patientService.onOffFollowPatient(params).subscribe({
      next: () => {
        this.getPatientList(this.sidefilterService.filter);
      },
      error: () => {
        this.commonService.showCommonToastrError();
      }
    });
  }
  closeFilterRegister() {
    this.commonService.closeFilterForPatient.subscribe((ev) => {
      if (ev) {
        this.drawer.close();
      }
    });
  }
  static {
    this.\u0275fac = function PatientListComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PatientListComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(LocationStrategy), \u0275\u0275directiveInject(Location));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PatientListComponent, selectors: [["app-patient-list"]], viewQuery: function PatientListComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, hostBindings: function PatientListComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("popstate", function PatientListComponent_popstate_HostBindingHandler($event) {
          return ctx.onPopState($event);
        }, false, \u0275\u0275resolveWindow);
      }
    }, decls: 67, vars: 14, consts: [["drawer", ""], [1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], [3, "outFilterBy"], ["hasBackdrop", "true", 1, "example-container1"], ["mode", "over", "position", "end", 1, "example-sidenav", "sidefilter", "right-filter"], [3, "outFilterBy", "clearFilterEvent"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "left-block"], [1, "title-container", "title-card", "icon-cont"], [4, "ngIf"], ["data-testid", "pl-title", 1, "page-title"], ["src", "../../../assets/img/help-icon.svg", "matTooltipPosition", "below", "matTooltipClass", "below", "alt", "help-circle", 1, "iconquestion", 3, "click", "matTooltip"], [1, "p-0", "m-card"], [1, "mt-0"], [1, "d-flex", "justify-content-between", "pt-2", "pl-3", "pr-3", "align-items-center", "toprow"], [1, "page-title"], [1, "d-flex"], [1, "ipadfiler", "align-items-center", "pr-2"], ["type", "button", "mat-button", "", 1, "pr-0", 3, "click"], ["src", "../../../assets/img/filterIcon@2x.png", "alt", "", 1, "filtericon"], ["src", "../../../assets/img/help-circle.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qpart", "qicon", 3, "click", "matTooltip"], [1, "p-0", "pt-2", "cust-postion"], [1, "pr-4", 2, "text-align", "right"], [2, "font-weight", "bold"], ["id", "patient-list-scrollabe", 1, "example-container", "pt-0", 3, "scroll"], ["mat-table", "", "summary", "", "matSort", "", 1, "patient-table", "ptpart", 3, "matSortChange", "dataSource"], ["matColumnDef", "PatientId"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "PatientName"], ["matColumnDef", "OwnerName"], ["matColumnDef", "SpeciesName"], ["matColumnDef", "BreedName"], ["matColumnDef", "GenderName"], ["matColumnDef", "DateReceived"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", " norecord", 4, "ngIf"], [1, "right-filter", "pl-0"], ["href", "javascript:void(0)", 1, "back-btn", 3, "click"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], [1, "textTtl", "d-none"], ["href", "javascript:void(0)", 3, "click"], [1, ""], [1, "plist-date"], ["mat-header-row", ""], ["mat-row", ""], [1, "norecord"]], template: function PatientListComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div")(4, "app-header", 3);
        \u0275\u0275listener("outFilterBy", function PatientListComponent_Template_app_header_outFilterBy_4_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientList($event));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(5, "mat-drawer-container", 4)(6, "mat-drawer", 5, 0)(8, "app-sidefilter", 6);
        \u0275\u0275listener("outFilterBy", function PatientListComponent_Template_app_sidefilter_outFilterBy_8_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.filterData($event));
        })("clearFilterEvent", function PatientListComponent_Template_app_sidefilter_clearFilterEvent_8_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearPageHistory());
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(9, "div", 7)(10, "div", 8)(11, "section", 9);
        \u0275\u0275template(12, PatientListComponent_ng_container_12_Template, 3, 1, "ng-container", 10);
        \u0275\u0275elementStart(13, "h5")(14, "span", 11);
        \u0275\u0275text(15);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(16, "img", 12);
        \u0275\u0275listener("click", function PatientListComponent_Template_img_click_16_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "mat-card", 13)(18, "div", 14)(19, "div", 15);
        \u0275\u0275element(20, "span");
        \u0275\u0275elementStart(21, "h5")(22, "span", 16);
        \u0275\u0275text(23);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(24, "span", 17)(25, "span", 18)(26, "button", 19);
        \u0275\u0275listener("click", function PatientListComponent_Template_button_click_26_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r4 = \u0275\u0275reference(7);
          return \u0275\u0275resetView(drawer_r4.toggle());
        });
        \u0275\u0275element(27, "img", 20);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(28, "img", 21);
        \u0275\u0275listener("click", function PatientListComponent_Template_img_click_28_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(29, "div", 22)(30, "p", 23)(31, "span");
        \u0275\u0275text(32);
        \u0275\u0275elementStart(33, "span", 24);
        \u0275\u0275text(34);
        \u0275\u0275elementEnd();
        \u0275\u0275text(35);
        \u0275\u0275elementStart(36, "span", 24);
        \u0275\u0275text(37);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(38, "div")(39, "div", 25);
        \u0275\u0275listener("scroll", function PatientListComponent_Template_div_scroll_39_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onTableScroll($event));
        });
        \u0275\u0275elementStart(40, "table", 26);
        \u0275\u0275listener("matSortChange", function PatientListComponent_Template_table_matSortChange_40_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onDataSort($event));
        });
        \u0275\u0275elementContainerStart(41, 27);
        \u0275\u0275template(42, PatientListComponent_th_42_Template, 2, 1, "th", 28)(43, PatientListComponent_td_43_Template, 5, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(44, 30);
        \u0275\u0275template(45, PatientListComponent_th_45_Template, 2, 1, "th", 28)(46, PatientListComponent_td_46_Template, 5, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(47, 31);
        \u0275\u0275template(48, PatientListComponent_th_48_Template, 2, 1, "th", 28)(49, PatientListComponent_td_49_Template, 4, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(50, 32);
        \u0275\u0275template(51, PatientListComponent_th_51_Template, 2, 1, "th", 28)(52, PatientListComponent_td_52_Template, 4, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(53, 33);
        \u0275\u0275template(54, PatientListComponent_th_54_Template, 2, 1, "th", 28)(55, PatientListComponent_td_55_Template, 4, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(56, 34);
        \u0275\u0275template(57, PatientListComponent_th_57_Template, 2, 1, "th", 28)(58, PatientListComponent_td_58_Template, 4, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(59, 35);
        \u0275\u0275template(60, PatientListComponent_th_60_Template, 2, 1, "th", 28)(61, PatientListComponent_td_61_Template, 4, 2, "td", 29);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(62, PatientListComponent_tr_62_Template, 1, 0, "tr", 36)(63, PatientListComponent_tr_63_Template, 1, 0, "tr", 37);
        \u0275\u0275elementEnd();
        \u0275\u0275template(64, PatientListComponent_tbody_64_Template, 4, 2, "tbody", 38);
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275elementStart(65, "div", 39)(66, "app-sidefilter", 6);
        \u0275\u0275listener("outFilterBy", function PatientListComponent_Template_app_sidefilter_outFilterBy_66_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.filterData($event));
        })("clearFilterEvent", function PatientListComponent_Template_app_sidefilter_clearFilterEvent_66_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clearPageHistory());
        });
        \u0275\u0275elementEnd()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(12);
        \u0275\u0275property("ngIf", ctx.isConsultantUser);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientListScreen.PatientsList);
        \u0275\u0275advance();
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientListScreen.PatientsList);
        \u0275\u0275advance(5);
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientListScreen.ShowingResultDated, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.commonService.getMomentFromatedDate(ctx.FromDateLabel), " ");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientListScreen.To, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.commonService.getMomentFromatedDate(ctx.ToDateLabel), " ");
        \u0275\u0275advance(3);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(22);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource.data.length === 0);
      }
    }, dependencies: [NgIf, MatLegacyButton, MatLegacyCard, MatDrawer, MatDrawerContainer, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyTooltip, HeaderComponent, SideMenuComponent, SidefilterComponent], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: calc(100vh - 165px);\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n    top: 56px;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 8%;\n  }\n}\n.ptpart[_ngcontent-%COMP%]   .plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n  width: inherit;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 106px !important;\n  word-break: break-all !important;\n}\n.mat-row[_ngcontent-%COMP%]:hover {\n  background-color: whitesmoke !important;\n}\ntd.mat-cell[_ngcontent-%COMP%] {\n  cursor: default !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ED8B00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n}\n.m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  display: none;\n}\n.left-block[_ngcontent-%COMP%] {\n  width: calc(97vw - 445px);\n  right: 298px;\n}\n.right-filter[_ngcontent-%COMP%] {\n  right: 43px;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n    .modal-dialog {\n    padding: 0 15px;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n  .filtericon[_ngcontent-%COMP%] {\n    padding-right: 5px;\n  }\n  .qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: initial;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    right: 0;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    width: inherit !important;\n    right: 0 !important;\n  }\n  .title-card[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 0;\n    font-size: 17px;\n  }\n  .m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    display: block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .mat-table[_ngcontent-%COMP%], \n   .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n    padding-left: 20% !important;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 23%;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]::before {\n    display: none;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 0 !important;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 100px);\n    padding: 12px 12px 0 12px;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type {\n    font-family: "gothambook", sans-serif !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width:1024px) {\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    width: inherit !important;\n    right: 0 !important;\n  }\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n  width: 190px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n  width: 180px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n  width: 180px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n  width: 180px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n  width: 180px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6) {\n  width: 180px;\n  padding-right: 15px;\n}\n.patient-table.ptpart[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(7) {\n  width: 180px;\n}\n/*# sourceMappingURL=patient-list.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PatientListComponent, { className: "PatientListComponent", filePath: "src\\app\\components\\patient-managements\\patient-list\\patient-list.component.ts", lineNumber: 28 });
})();

// src/app/models/fuse.ts
var FuseDetails = class {
  constructor() {
    this.Id = 0;
    this.IsDeleted = false;
  }
};
var PIMSDetails = class {
};
var BusineesDetails = class {
};
var ReflabDetails = class {
};

// src/app/components/fuse-managements/fuse-list/fuse-list.component.ts
var import_intl_tel_input = __toESM(require_intl_tel_input());
var import_moment2 = __toESM(require_moment());

// node_modules/@angular/cdk/fesm2022/clipboard.mjs
var PendingCopy = class {
  constructor(text, _document) {
    this._document = _document;
    const textarea = this._textarea = this._document.createElement("textarea");
    const styles = textarea.style;
    styles.position = "fixed";
    styles.top = styles.opacity = "0";
    styles.left = "-999em";
    textarea.setAttribute("aria-hidden", "true");
    textarea.value = text;
    textarea.readOnly = true;
    (this._document.fullscreenElement || this._document.body).appendChild(textarea);
  }
  /** Finishes copying the text. */
  copy() {
    const textarea = this._textarea;
    let successful = false;
    try {
      if (textarea) {
        const currentFocus = this._document.activeElement;
        textarea.select();
        textarea.setSelectionRange(0, textarea.value.length);
        successful = this._document.execCommand("copy");
        if (currentFocus) {
          currentFocus.focus();
        }
      }
    } catch {
    }
    return successful;
  }
  /** Cleans up DOM changes used to perform the copy operation. */
  destroy() {
    const textarea = this._textarea;
    if (textarea) {
      textarea.remove();
      this._textarea = void 0;
    }
  }
};
var Clipboard = class _Clipboard {
  constructor(document2) {
    this._document = document2;
  }
  /**
   * Copies the provided text into the user's clipboard.
   *
   * @param text The string to copy.
   * @returns Whether the operation was successful.
   */
  copy(text) {
    const pendingCopy = this.beginCopy(text);
    const successful = pendingCopy.copy();
    pendingCopy.destroy();
    return successful;
  }
  /**
   * Prepares a string to be copied later. This is useful for large strings
   * which take too long to successfully render and be copied in the same tick.
   *
   * The caller must call `destroy` on the returned `PendingCopy`.
   *
   * @param text The string to copy.
   * @returns the pending copy operation.
   */
  beginCopy(text) {
    return new PendingCopy(text, this._document);
  }
  static {
    this.\u0275fac = function Clipboard_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _Clipboard)(\u0275\u0275inject(DOCUMENT));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
      token: _Clipboard,
      factory: _Clipboard.\u0275fac,
      providedIn: "root"
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Clipboard, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken("CDK_COPY_TO_CLIPBOARD_CONFIG");
var CdkCopyToClipboard = class _CdkCopyToClipboard {
  constructor(_clipboard, _ngZone, config) {
    this._clipboard = _clipboard;
    this._ngZone = _ngZone;
    this.text = "";
    this.attempts = 1;
    this.copied = new EventEmitter();
    this._pending = /* @__PURE__ */ new Set();
    if (config && config.attempts != null) {
      this.attempts = config.attempts;
    }
  }
  /** Copies the current text to the clipboard. */
  copy(attempts = this.attempts) {
    if (attempts > 1) {
      let remainingAttempts = attempts;
      const pending = this._clipboard.beginCopy(this.text);
      this._pending.add(pending);
      const attempt = () => {
        const successful = pending.copy();
        if (!successful && --remainingAttempts && !this._destroyed) {
          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));
        } else {
          this._currentTimeout = null;
          this._pending.delete(pending);
          pending.destroy();
          this.copied.emit(successful);
        }
      };
      attempt();
    } else {
      this.copied.emit(this._clipboard.copy(this.text));
    }
  }
  ngOnDestroy() {
    if (this._currentTimeout) {
      clearTimeout(this._currentTimeout);
    }
    this._pending.forEach((copy) => copy.destroy());
    this._pending.clear();
    this._destroyed = true;
  }
  static {
    this.\u0275fac = function CdkCopyToClipboard_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CdkCopyToClipboard)(\u0275\u0275directiveInject(Clipboard), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(CDK_COPY_TO_CLIPBOARD_CONFIG, 8));
    };
  }
  static {
    this.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
      type: _CdkCopyToClipboard,
      selectors: [["", "cdkCopyToClipboard", ""]],
      hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {
        if (rf & 1) {
          \u0275\u0275listener("click", function CdkCopyToClipboard_click_HostBindingHandler() {
            return ctx.copy();
          });
        }
      },
      inputs: {
        text: [0, "cdkCopyToClipboard", "text"],
        attempts: [0, "cdkCopyToClipboardAttempts", "attempts"]
      },
      outputs: {
        copied: "cdkCopyToClipboardCopied"
      }
    });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkCopyToClipboard, [{
    type: Directive,
    args: [{
      selector: "[cdkCopyToClipboard]",
      host: {
        "(click)": "copy()"
      }
    }]
  }], function() {
    return [{
      type: Clipboard
    }, {
      type: NgZone
    }, {
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [CDK_COPY_TO_CLIPBOARD_CONFIG]
      }]
    }];
  }, {
    text: [{
      type: Input,
      args: ["cdkCopyToClipboard"]
    }],
    attempts: [{
      type: Input,
      args: ["cdkCopyToClipboardAttempts"]
    }],
    copied: [{
      type: Output,
      args: ["cdkCopyToClipboardCopied"]
    }]
  });
})();
var ClipboardModule = class _ClipboardModule {
  static {
    this.\u0275fac = function ClipboardModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ClipboardModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
      type: _ClipboardModule
    });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClipboardModule, [{
    type: NgModule,
    args: [{
      declarations: [CdkCopyToClipboard],
      exports: [CdkCopyToClipboard]
    }]
  }], null, null);
})();

// src/app/components/pims-management/pims-management.component.ts
var _c08 = ["mep4"];
var _c17 = ["successModal"];
var _c24 = ["failureModal"];
var _c33 = ["pimsremove"];
var _c4 = ["drawer1"];
var _c5 = ["formGroupDirective"];
var _c6 = (a0) => ({ disablebtn: a0 });
var _c7 = (a0) => ({ "toggle-accordion-icon": a0 });
function PimsManagementComponent_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "mat-option", 50);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const Pims_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("value", Pims_r3.proxyPartnerId);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", Pims_r3.proxyPartnerId, " ");
  }
}
function PimsManagementComponent_p_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.IncorrectClientId, " ");
  }
}
function PimsManagementComponent_span_33_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 52)(1, "button", 53);
    \u0275\u0275listener("click", function PimsManagementComponent_span_33_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext();
      const drawer1_r2 = \u0275\u0275reference(2);
      return \u0275\u0275resetView(ctx_r3.isPimsActive ? ctx_r3.openModal("pimsadd") : ctx_r3.openDrawer(drawer1_r2));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.AddIntegration, " ");
  }
}
function PimsManagementComponent_th_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 54);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.Pims, " ");
  }
}
function PimsManagementComponent_td_38_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r7.proxyPartnerId, " ");
  }
}
function PimsManagementComponent_th_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 54);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.ProxyClientId, " ");
  }
}
function PimsManagementComponent_td_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 55)(1, "span", 56);
    \u0275\u0275text(2, "Proxy Client Id");
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", element_r8.ClientId, " ");
  }
}
function PimsManagementComponent_th_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 54);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.Status, " ");
  }
}
function PimsManagementComponent_td_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 55)(1, "span", 56);
    \u0275\u0275text(2, "Status");
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", element_r9.Status, " ");
  }
}
function PimsManagementComponent_th_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 57);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.LastUpdated, " ");
  }
}
function PimsManagementComponent_td_47_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r10.CreatedAtStr, " ");
  }
}
function PimsManagementComponent_th_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 58);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.Action, " ");
  }
}
function PimsManagementComponent_td_50_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "span", 61);
    \u0275\u0275listener("click", function PimsManagementComponent_td_50_ng_container_3_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r11);
      const element_r12 = \u0275\u0275nextContext().$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.openModal("pimsremove", element_r12));
    });
    \u0275\u0275element(2, "img", 62);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate("matTooltip", ctx_r3.labelService.dsFuseManagementScreen.Delete);
  }
}
function PimsManagementComponent_td_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 59)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, PimsManagementComponent_td_50_ng_container_3_Template, 3, 1, "ng-container", 60);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.Action);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r12.Status != "Cancelled");
  }
}
function PimsManagementComponent_tr_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 63);
  }
}
function PimsManagementComponent_tr_52_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 64);
  }
}
function PimsManagementComponent_tbody_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 65)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsFuseManagementScreen.Norecordsfound, " ");
  }
}
function PimsManagementComponent_ng_template_55_span_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 75);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.textCopy);
  }
}
function PimsManagementComponent_ng_template_55_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 66)(1, "p", 67)(2, "strong");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "section", 68)(5, "p");
    \u0275\u0275text(6);
    \u0275\u0275elementStart(7, "span");
    \u0275\u0275text(8, "(PIMS partner)");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "div", 69)(10, "p")(11, "strong", null, 6);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "a", 70);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_55_Template_a_click_14_listener() {
      \u0275\u0275restoreView(_r13);
      const otptext_r14 = \u0275\u0275reference(12);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.copyToClipboard(otptext_r14));
    });
    \u0275\u0275element(15, "i", 71);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(16, PimsManagementComponent_ng_template_55_span_16_Template, 2, 1, "span", 72);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "p");
    \u0275\u0275text(18);
    \u0275\u0275elementStart(19, "strong");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275text(21);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(22, "div", 73)(23, "button", 74);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_55_Template_button_click_23_listener() {
      const modal_r15 = \u0275\u0275restoreView(_r13).$implicit;
      return \u0275\u0275resetView(modal_r15.close("Save click"));
    });
    \u0275\u0275text(24);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.IntegrationMsg);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.describeMsg, " ");
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r3.pimsOtp);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r3.copySuccess);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r3.labelService.dsPimsScreen.youHave, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.display);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.minuteTxt, "");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsFuseManagementScreen.Close);
  }
}
function PimsManagementComponent_ng_template_57_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 66)(1, "p", 67)(2, "strong");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "section", 76)(5, "div");
    \u0275\u0275element(6, "img", 77);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 78)(8, "strong");
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275element(10, "br");
    \u0275\u0275text(11);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(12, "div", 73)(13, "button", 79);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_57_Template_button_click_13_listener() {
      const modal_r17 = \u0275\u0275restoreView(_r16).$implicit;
      return \u0275\u0275resetView(modal_r17.close("Save click"));
    });
    \u0275\u0275text(14);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.CvetFailed);
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.FailureDetails, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.failureMsg, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsFuseManagementScreen.Close);
  }
}
function PimsManagementComponent_ng_template_59_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 80)(1, "h4", 81);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "button", 82);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_59_Template_button_click_3_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.modalService.dismissAll());
    });
    \u0275\u0275elementStart(4, "span", 83);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_59_Template_span_click_4_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.modalService.dismissAll());
    });
    \u0275\u0275text(5, "\xD7");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(6, "div", 84)(7, "div", 85)(8, "p");
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "div", 85)(11, "div", 86)(12, "div", 87);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "div", 88);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "div", 89)(17, "div", 87);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "div", 88);
    \u0275\u0275text(20);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(21, "div", 90)(22, "button", 91);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_59_Template_button_click_22_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.modalService.dismissAll());
    });
    \u0275\u0275text(23);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(24, "button", 92);
    \u0275\u0275listener("click", function PimsManagementComponent_ng_template_59_Template_button_click_24_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.removePIMs(ctx_r3.selectedPims.id));
    });
    \u0275\u0275text(25);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPimsScreen.deletePims, " ");
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.DeleteConfirmMsg);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.PimsId);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.selectedPims.proxyPartnerId);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPimsScreen.Status);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.selectedPims.Status);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsFuseManagementScreen.Cancel, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsFuseManagementScreen.Delete, " ");
  }
}
var PimsManagementComponent = class _PimsManagementComponent {
  constructor(fuseService, labelService, dataService, modalService, clipboard, renderer, confirmationDialogService, fb, commonService) {
    this.fuseService = fuseService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.clipboard = clipboard;
    this.renderer = renderer;
    this.confirmationDialogService = confirmationDialogService;
    this.fb = fb;
    this.commonService = commonService;
    this.displayedColumns = [
      "proxyPartnerId",
      "Id",
      "Status",
      "Last Updated",
      "Action"
    ];
    this.pimsDataSource = new MatTableDataSource();
    this.NgbModalOptions = {
      windowClass: "pims-modal",
      centered: true,
      backdrop: "static"
    };
    this.copySuccess = false;
    this.isPimsActive = true;
    this.uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.getPimsScreenLabel();
      this.labelService.bindFuseManagementLabel();
    }
  }
  ngOnInit() {
    this.getddPimsList();
    this.assignPimsHistoryList();
    this.pimsForm = this.createPimsFormGroup(new PIMSDetails());
  }
  ngAfterViewInit() {
    setTimeout(() => {
      this.commonService.clinicNavigation.subscribe((data) => {
        if (data) {
          this.exp.open();
          this.assignPimsHistoryList();
          document.getElementById("mExpansion").scrollIntoView({ behavior: "smooth", block: "start" });
        }
      });
    }, 2e3);
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.getPimsScreenLabel();
    });
  }
  createPimsFormGroup(data) {
    return this.fb.group({
      proxyPartnerId: [data.proxyPartnerId, Validators.required],
      proxyClientId: [data.proxyClientId, Validators.compose([Validators.required, Validators.pattern(this.uuidPattern)])]
    });
  }
  createForm() {
    this.pimsForm = new FormGroup({
      pimsPartner: new FormControl("", Validators.compose([Validators.required])),
      clientId: new FormControl("", Validators.compose([Validators.required, Validators.pattern(this.uuidPattern)]))
    });
  }
  openDrawer(drawer) {
    this.formGroupDirective.resetForm();
    drawer.open();
    this.pimsForm = this.createPimsFormGroup(new PIMSDetails());
    console.log(this.pimsDataSource?.data);
  }
  // PIMs list for dropdown
  getddPimsList() {
    this.fuseService.getPimsList().subscribe((res) => {
      this.ddPImslist = res.ResponseData;
    });
  }
  onSubmit() {
    this.fuseService.addPims(this.pimsForm.value).subscribe((res) => {
      debugger;
      if (res.StatusCode == 200 && res.DisplayMessage == "Success") {
        if (res.ResponseData.Status == null) {
          this.pimsOtp = res.ResponseData.Otp;
          this.display = res?.ResponseData?.OtpExpiryInMin;
          this.pimsForm.reset();
          this.openModal("successModal");
          this.drawer1.close();
          this.assignPimsHistoryList();
        } else if (res?.ResponseData?.Status == "active") {
          this.messagePopup(res?.ResponseData?.Message);
        }
      } else {
        this.openModal("failureModal");
        this.assignPimsHistoryList();
      }
    }, (err) => {
      this.openModal("failureModal");
      console.log(err);
    });
  }
  openModal(modal, otherData) {
    if (modal == "pimsremove") {
      const modal2 = this.modalService.open(this.PimsRemoveModal, this.NgbModalOptions);
      this.selectedPims = otherData;
    } else if (modal == "failureModal") {
      this.modalService.open(this.failureModal, this.NgbModalOptions);
    } else if (modal == "pimsadd") {
      this.messagePopup(this.labelService.dsPimsScreen.IsActiveMsg);
    } else if (modal == "successModal") {
      this.modalService.open(this.successModal, this.NgbModalOptions);
    }
  }
  copyToClipboard(otpElement) {
    const text = otpElement.innerText.trim();
    const isCopied = this.clipboard.copy(text);
    if (isCopied) {
      this.copySuccess = true;
      setTimeout(() => this.copySuccess = false, 2e3);
    }
  }
  //Method to show history of PIMs list data
  assignPimsHistoryList() {
    let Bguid = this.dataService.appData.authDetails["BusinessGuid"]?.toUpperCase();
    let Obj = { BusinessGuid: Bguid };
    this.fuseService.getAssignPimsList(Obj).subscribe((data) => {
      if (data.DisplayMessage == "Success") {
        this.isPimsActive = data.ResponseData?.some((x) => ["Pending", "Active"].includes(x?.Status));
        let activeKeys = /* @__PURE__ */ new Set();
        data.ResponseData.forEach((item) => {
          if (item.Status === "Active") {
            activeKeys.add(`${item.ClientId}_${item.proxyPartnerId}`);
          }
        });
        data.ResponseData = data.ResponseData.map((item) => {
          const key = `${item.ClientId}_${item.proxyPartnerId}`;
          if (activeKeys.has(key) && item.Status !== "Active") {
            return __spreadProps(__spreadValues({}, item), { Status: "Expired" });
          }
          return item;
        });
        this.pimsDataSource = new MatTableDataSource(data.ResponseData);
        this.pimsDataSource.paginator = this.paginator;
      }
    });
  }
  cvetLink() {
    const aTag = document.createElement("a");
    aTag.href = "https://zdxpoc-api.mobileprogramming.net/";
    aTag.target = "_blank";
    aTag.click();
  }
  //Remove Pims integeration
  removePIMs(Id) {
    this.modalService.dismissAll();
    this.fuseService.removePims({ "ZdxIntegrationId": Id }).subscribe((res) => {
      if (res.DisplayMessage == "Success") {
        this.messagePopup(this.labelService.dsPimsScreen.deletesuccessMsg);
        this.assignPimsHistoryList();
      } else {
        this.messagePopup(this.labelService.dsPimsScreen.failureMsg);
      }
    }, (error) => {
      this.messagePopup(this.labelService.dsPimsScreen.failureMsg);
    });
  }
  messagePopup(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel, "sm", true, false).then((confirmed) => {
      this.modalService.dismissAll();
    }).catch(() => {
      console.log("error...");
    });
  }
  ngOnDestroy() {
    this.commonService.clinicNavigation.next(false);
  }
  static {
    this.\u0275fac = function PimsManagementComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PimsManagementComponent)(\u0275\u0275directiveInject(FuseService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(Clipboard), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PimsManagementComponent, selectors: [["app-pims-management"]], viewQuery: function PimsManagementComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c08, 7);
        \u0275\u0275viewQuery(_c17, 5);
        \u0275\u0275viewQuery(_c24, 5);
        \u0275\u0275viewQuery(_c33, 5);
        \u0275\u0275viewQuery(_c4, 5);
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(_c5, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.exp = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.successModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.failureModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.PimsRemoveModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer1 = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, decls: 61, vars: 23, consts: [["drawer1", ""], ["formGroupDirective", "ngForm"], ["mep4", "matExpansionPanel"], ["successModal", ""], ["failureModal", ""], ["pimsremove", ""], ["otptext", ""], ["id", "mExpansion", 1, "example-container", 2, "min-height", "350px", "margin-bottom", "20px"], ["mode", "side", "position", "end", 1, "example-sidenav", "ml-4"], ["id", "fuse-side", 1, "rounded-0", "p-0"], [1, "w-100"], [1, "cardheader", "d-flex", "justify-content-between", "p-4"], [1, "heading"], ["src", "../../../../assets/img/cancel-button@2x.png", "alt", "img", 1, "closefuse", 3, "click"], [1, "p-4"], ["autocomplete", "off", 3, "formGroup"], [1, "form-label-group", "mt-2"], ["appearance", "outline", "floatLabel", "always", 1, "w-100"], ["name", "pimsPartner", "formControlName", "proxyPartnerId", "required", "", 3, "placeholder"], [4, "ngFor", "ngForOf"], [1, "form-label-group", "mb-2"], ["appearance", "outline", 1, "w-100"], ["type", "text", "name", "proxyClientId", "formControlName", "proxyClientId", "matInput", "", "required", "", 3, "placeholder"], ["class", "text-left errormsg", "style", "color: red", 4, "ngIf"], [1, "d-flex", "justify-content-center", "mb-4", "pms-part"], ["type", "button", "mat-button", "", 1, "add-PIMS", "addfuse", 3, "click", "disabled", "ngClass"], ["disabled", "true"], [1, "lastprt"], [1, "panel-header-text"], [1, "headingone", "heading", "text-right"], [3, "ngClass"], ["src", "../../../assets/img/updropdwn.png", "alt", "img", 1, "updropdwn", 3, "click"], [1, "heading", "Hbtn", "mb-0", "text-right", "ml-4"], ["class", "text-right", 4, "ngIf"], [1, "fuse-outer", "fus-section", "fuse-part", "pt-4"], ["mat-table", "", "summary", "", "matSort", "", 3, "dataSource"], ["matColumnDef", "proxyPartnerId"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "Id"], ["matColumnDef", "Status"], ["matColumnDef", "Last Updated"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", "Action"], ["class", "tBody", "mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", "id", "status-toggle", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", "norecord", 4, "ngIf"], ["_intl.itemsPerPageLabel", "", "showFirstLastButtons", "", 1, "mat-paginator-sticky", 3, "pageSize", "hidePageSize"], [3, "value"], [1, "text-left", "errormsg", 2, "color", "red"], [1, "text-right"], ["type", "button", "mat-button", "", 1, "addfuse", "addfuse1", "addcon", 2, "margin-top", "28px", 3, "click"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], [1, "textTtl", "d-none"], ["mat-header-cell", ""], ["mat-header-cell", "", 1, "tBody"], ["mat-cell", "", "id", "status-toggle"], [4, "ngIf"], [2, "padding-right", "23px", 3, "click"], ["src", "../../../assets/img/delet icon.svg", "matTooltipPosition", "below", 3, "matTooltip"], ["mat-header-row", ""], ["mat-row", ""], [1, "norecord"], [1, "modal-body"], [1, "text-center"], [1, "modal-box", 2, "text-align", "center"], [1, "clipbox"], ["href", "javascript:void(0)", 3, "click"], ["aria-hidden", "true", 1, "fa", "fa-clone"], ["class", "text-success", 4, "ngIf"], [1, "text-center", 2, "margin", "0px 0px 20px 0px"], ["type", "button", 1, "mat-button", "mat-button-base", "addfuse", 2, "margin-right", "25px", 3, "click"], [1, "text-success"], [1, "modal-box", "failure"], ["src", "../../../assets/img/danger-icon.svg", "alt", ""], [2, "padding", "0px 14px"], ["type", "button", 1, "mat-button", "mat-button-base", "addfuse", 3, "click"], [1, "modal-header", "text-center"], ["id", "modal-basic-title", 1, "modal-title", "w-100"], ["type", "button", "aria-label", "Close", 1, "close", 3, "click"], [3, "click"], [1, "modal-body", "px-5", "pt-3"], [1, "d-flex", "justify-content-center"], [1, "d-flex", "flex-column", "fuse-block", "mr-3"], [1, "fuse-label1"], [1, "fuse-text"], [1, "d-flex", "flex-column", "fuse-block"], [1, "modal-footer", "row", "justify-content-center", "updateBtn"], ["type", "button", "mat-raised-button", "", "color", "primary", 1, "cancel-btn", "mr-3", 3, "click"], ["type", "button", "mat-raised-button", "", "color", "accent", 1, "save-change", "mr-1", 3, "click"]], template: function PimsManagementComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "mat-drawer-container", 7)(1, "mat-drawer", 8, 0)(3, "mat-card", 9)(4, "div", 10)(5, "div", 11)(6, "span", 12);
        \u0275\u0275text(7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "span")(9, "img", 13);
        \u0275\u0275listener("click", function PimsManagementComponent_Template_img_click_9_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer1_r2 = \u0275\u0275reference(2);
          return \u0275\u0275resetView(drawer1_r2.close());
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(10, "div", 14)(11, "form", 15, 1)(13, "div", 16)(14, "mat-form-field", 17)(15, "mat-select", 18);
        \u0275\u0275template(16, PimsManagementComponent_ng_container_16_Template, 3, 2, "ng-container", 19);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(17, "div", 20)(18, "mat-form-field", 21);
        \u0275\u0275element(19, "input", 22);
        \u0275\u0275elementEnd();
        \u0275\u0275template(20, PimsManagementComponent_p_20_Template, 2, 1, "p", 23);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(21, "div", 24)(22, "button", 25);
        \u0275\u0275listener("click", function PimsManagementComponent_Template_button_click_22_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onSubmit());
        });
        \u0275\u0275text(23);
        \u0275\u0275elementEnd()()()()()()();
        \u0275\u0275elementStart(24, "mat-expansion-panel", 26, 2)(26, "mat-expansion-panel-header", 27)(27, "p", 28);
        \u0275\u0275text(28);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(29, "div", 29)(30, "span", 30)(31, "img", 31);
        \u0275\u0275listener("click", function PimsManagementComponent_Template_img_click_31_listener() {
          \u0275\u0275restoreView(_r1);
          const mep4_r5 = \u0275\u0275reference(25);
          return \u0275\u0275resetView(mep4_r5.expanded = !mep4_r5.expanded);
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(32, "div", 32);
        \u0275\u0275template(33, PimsManagementComponent_span_33_Template, 3, 1, "span", 33);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(34, "div", 34)(35, "table", 35);
        \u0275\u0275elementContainerStart(36, 36);
        \u0275\u0275template(37, PimsManagementComponent_th_37_Template, 2, 1, "th", 37)(38, PimsManagementComponent_td_38_Template, 2, 1, "td", 38);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(39, 39);
        \u0275\u0275template(40, PimsManagementComponent_th_40_Template, 2, 1, "th", 37)(41, PimsManagementComponent_td_41_Template, 4, 1, "td", 38);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(42, 40);
        \u0275\u0275template(43, PimsManagementComponent_th_43_Template, 2, 1, "th", 37)(44, PimsManagementComponent_td_44_Template, 4, 1, "td", 38);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(45, 41);
        \u0275\u0275template(46, PimsManagementComponent_th_46_Template, 2, 1, "th", 42)(47, PimsManagementComponent_td_47_Template, 2, 1, "td", 38);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(48, 43);
        \u0275\u0275template(49, PimsManagementComponent_th_49_Template, 2, 1, "th", 44)(50, PimsManagementComponent_td_50_Template, 4, 2, "td", 45);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(51, PimsManagementComponent_tr_51_Template, 1, 0, "tr", 46)(52, PimsManagementComponent_tr_52_Template, 1, 0, "tr", 47);
        \u0275\u0275elementEnd();
        \u0275\u0275template(53, PimsManagementComponent_tbody_53_Template, 4, 1, "tbody", 48);
        \u0275\u0275element(54, "mat-paginator", 49);
        \u0275\u0275elementEnd()()();
        \u0275\u0275template(55, PimsManagementComponent_ng_template_55_Template, 25, 8, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(57, PimsManagementComponent_ng_template_57_Template, 15, 4, "ng-template", null, 4, \u0275\u0275templateRefExtractor)(59, PimsManagementComponent_ng_template_59_Template, 26, 8, "ng-template", null, 5, \u0275\u0275templateRefExtractor);
      }
      if (rf & 2) {
        let tmp_11_0;
        const drawer1_r2 = \u0275\u0275reference(2);
        const mep4_r5 = \u0275\u0275reference(25);
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.labelService.dsPimsScreen.AddIntegration);
        \u0275\u0275advance(4);
        \u0275\u0275property("formGroup", ctx.pimsForm);
        \u0275\u0275advance(4);
        \u0275\u0275propertyInterpolate("placeholder", ctx.labelService.dsPimsScreen.CvetPlaceholder);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.ddPImslist);
        \u0275\u0275advance(3);
        \u0275\u0275propertyInterpolate("placeholder", ctx.labelService.dsPimsScreen.EnterClientId);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ((tmp_11_0 = ctx.pimsForm.get("proxyClientId")) == null ? null : tmp_11_0.errors == null ? null : tmp_11_0.errors["pattern"]) && ((tmp_11_0 = ctx.pimsForm.get("proxyClientId")) == null ? null : tmp_11_0.touched));
        \u0275\u0275advance(2);
        \u0275\u0275property("disabled", !ctx.pimsForm.valid)("ngClass", \u0275\u0275pureFunction1(19, _c6, !ctx.pimsForm.valid));
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsFuseManagementScreen.Add, " ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsPimsScreen.PimsManagement);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(21, _c7, mep4_r5.expanded == true));
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !drawer1_r2.opened);
        \u0275\u0275advance(2);
        \u0275\u0275property("dataSource", ctx.pimsDataSource);
        \u0275\u0275advance(16);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.pimsDataSource === null || (ctx.pimsDataSource == null ? null : ctx.pimsDataSource.data == null ? null : ctx.pimsDataSource.data.length) === 0);
        \u0275\u0275advance();
        \u0275\u0275property("pageSize", 10)("hidePageSize", true);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatLegacyCard, MatLegacySelect, MatLegacyOption, MatExpansionPanel, MatExpansionPanelHeader, MatDrawer, MatDrawerContainer, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyPaginator, MatLegacyTooltip, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, FormGroupDirective, FormControlName], styles: ['\n\n.mat-card[_ngcontent-%COMP%] {\n  border-radius: 10px;\n  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.1);\n  height: 100%;\n}\n.fuse-label[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 13px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.fuse-text[_ngcontent-%COMP%] {\n  font-family: "gothamlight", sans-serif;\n  font-weight: bold;\n  color: #000;\n  font-size: 13px;\n  opacity: 0.5;\n}\n.example-container[_ngcontent-%COMP%] {\n  width: 100%;\n  background-color: transparent;\n}\n.example-sidenav-content[_ngcontent-%COMP%] {\n  background: #fff;\n  height: 100%;\n  border-radius: 10px 10px 0 0 !important;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 10px;\n}\n.mat-drawer.mat-drawer-end[_ngcontent-%COMP%] {\n  width: 290px;\n  background: transparent;\n  border: none;\n  padding-top: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n#fuse-side[_ngcontent-%COMP%] {\n  box-shadow: none;\n  background: transparent;\n  height: 100%;\n}\n#fuse-side[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.addfuse[_ngcontent-%COMP%] {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.addfuse1[_ngcontent-%COMP%] {\n  position: absolute !important;\n  right: 20px !important;\n  top: 15px !important;\n}\n.addfuse1[_ngcontent-%COMP%]:disabled {\n  background-color: #ff944c !important;\n}\n.addfuseDiff[_ngcontent-%COMP%] {\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n  position: absolute;\n  right: 20px;\n  top: 15px;\n}\n.cardheader[_ngcontent-%COMP%] {\n  background: #fff;\n}\n.mat-drawer-content[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  height: calc(100vh - 290px);\n}\n.fuse-container[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.addfuse1[_ngcontent-%COMP%] {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 250px;\n  width: 250px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.fusmang[_ngcontent-%COMP%] {\n  border-radius: 10px 10px 0 0 !important;\n  padding: 0;\n}\n  .portal-outer {\n  height: calc(100vh - 200px);\n}\n.fuse-outer[_ngcontent-%COMP%] {\n  height: calc(100vh - 485px);\n  overflow: auto;\n  padding-top: 0 !important;\n  margin-top: 25px;\n}\n.pad[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.save-change[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  min-width: 125px;\n}\n.cancel-btn[_ngcontent-%COMP%] {\n  background-color: #9e9e9e;\n  min-width: 125px;\n}\n.fuse-label1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.msg[_ngcontent-%COMP%] {\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.save-change.del_btn[_ngcontent-%COMP%] {\n  background-color: #1072ce !important;\n}\n.fuse-block[_ngcontent-%COMP%] {\n  width: 25%;\n}\n.fuse-text[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.xct[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  font-size: 13px;\n  color: #000;\n  font-weight: 700;\n}\n.xct[_ngcontent-%COMP%]   .span_font[_ngcontent-%COMP%] {\n  font-size: 13px;\n  color: #000;\n  opacity: 0.5;\n}\n.fuselist[_ngcontent-%COMP%] {\n  padding: 20px 58px 20px 20px !important;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  .textup[_ngcontent-%COMP%] {\n    padding-top: 2px;\n  }\n  .mat-form-field[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .fuse-block[_ngcontent-%COMP%] {\n    margin-top: 8px;\n  }\n    .mat-drawer-inner-container {\n    height: 97% !important;\n    overflow: hidden !important;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    margin-bottom: 45px;\n  }\n  .addfuseDiff[_ngcontent-%COMP%] {\n    right: 35%;\n    bottom: 15px;\n    top: initial;\n  }\n  .editadd[_ngcontent-%COMP%] {\n    right: 2% !important;\n    bottom: 15px;\n    top: initial !important;\n  }\n  p.panel-header-text[_ngcontent-%COMP%] {\n    width: 100% !important;\n    margin-top: 5px;\n  }\n  .addcon[_ngcontent-%COMP%] {\n    top: 10px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background: #fff;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none !important;\n    margin-left: 25%;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    border-bottom: none !important;\n    padding-left: 0;\n    text-align: center !important;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: 1px solid #ccc;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 7px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    -webkit-box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n    -moz-box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n    box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n    .fuse-outer.fuse-part table thead {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    word-break: break-all;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .pad[_ngcontent-%COMP%] {\n    padding-bottom: 0px;\n    flex-direction: row !important;\n  }\n  .pad[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%] {\n    width: 35%;\n    text-align: left !important;\n  }\n  .pad[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 65%;\n  }\n  .fusepart[_ngcontent-%COMP%] {\n    flex-wrap: wrap;\n  }\n  .fusepart[_ngcontent-%COMP%]   .fuse-block[_ngcontent-%COMP%] {\n    flex-direction: row !important;\n    justify-content: space-between;\n  }\n  .cancel-btn[_ngcontent-%COMP%] {\n    min-width: 0;\n    padding: 10px 20px;\n    line-height: 14px !important;\n    margin-bottom: 15px;\n  }\n  .modal-footer[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n  }\n  .save-change[_ngcontent-%COMP%] {\n    min-width: 0;\n    padding: 10px 3px;\n    line-height: 14px !important;\n    margin-bottom: 15px;\n  }\n  #status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n    margin: 0 4.5rem;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:before {\n    left: -4.5rem;\n  }\n  .addfuse[_ngcontent-%COMP%] {\n    padding: 10px 16px !important;\n    height: auto !important;\n    line-height: 14px !important;\n  }\n  .updateBtn[_ngcontent-%COMP%]   .save-change[_ngcontent-%COMP%] {\n    padding: 6px 12px !important;\n  }\n  .fuselist[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .portal-outer[_ngcontent-%COMP%] {\n    padding: 0 20px;\n  }\n  .title-container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 100%;\n    display: block;\n    border-radius: 0;\n    border-top: 2px solid #ccc;\n    border-bottom: 2px solid #ccc;\n    font-size: 17px;\n  }\n  .heading.Hbtn[_ngcontent-%COMP%] {\n    margin-left: 0 !important;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0 0 20px;\n  }\n  .fuse-outer[_ngcontent-%COMP%] {\n    overflow: auto !important;\n    height: calc(100vh - 350px);\n    padding: 10px 4px;\n  }\n    .modal-dialog {\n    padding: 0 10px;\n  }\n  .logo_container[_ngcontent-%COMP%], \n   .edit-logo[_ngcontent-%COMP%] {\n    width: 100% !important;\n    height: 200px !important;\n  }\n  .log-head[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n  }\n  .frlog[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n    width: 100%;\n  }\n  .contpart[_ngcontent-%COMP%] {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 12px 5px;\n  }\n  .contpart[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2) {\n    text-align: center !important;\n  }\n  .errorcon[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .errorcard[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n  }\n  .errorcard[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .filepart[_ngcontent-%COMP%] {\n    height: 160px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .dumimg[_ngcontent-%COMP%] {\n    width: 100% !important;\n    height: auto !important;\n  }\n  .fuselist[_ngcontent-%COMP%]   .ques-icon[_ngcontent-%COMP%]   .qicon[_ngcontent-%COMP%] {\n    bottom: 18px;\n  }\n}\n@media screen and (max-width: 374px) {\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 43% !important;\n    font-size: 12px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 10px;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 440px) {\n  table.mat-table[_ngcontent-%COMP%] {\n    min-width: 295px;\n  }\n  .fuse-outer[_ngcontent-%COMP%] {\n    overflow: auto !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .fuse-block[_ngcontent-%COMP%] {\n    width: 46%;\n    margin-top: 15px;\n  }\n}\np.panel-header-text[_ngcontent-%COMP%] {\n  font-weight: bold;\n  border-bottom: 2px solid #0000005c;\n  padding-bottom: 6px;\n}\n.textBoxToText[_ngcontent-%COMP%] {\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: inherit;\n  padding: none;\n  width: auto;\n}\n#inputFile[_ngcontent-%COMP%] {\n  opacity: 0;\n  z-index: 2;\n  width: 100%;\n  position: absolute;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.container[_ngcontent-%COMP%] {\n  width: 450px;\n  height: 160px;\n  text-align: center;\n  border: dashed 2px #03a9f4 !important;\n  border-radius: 10px;\n  background: #fafcfe !important;\n  position: relative;\n  margin: 0 auto;\n}\n.logo_container[_ngcontent-%COMP%] {\n  width: 350px;\n  height: 150px;\n  text-align: center;\n  border: 2px solid #0000005c;\n  position: relative;\n  margin: 0 auto;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px;\n}\n.clinicBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  height: 34px;\n  padding: 0px 30px;\n  border-radius: 6px;\n  border: 1px solid #ff6400;\n}\n.updateBtn.modalupdate[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0 35px;\n  border: 2px solid #4c4a4a;\n  background: transparent;\n  color: #000;\n  font-weight: 700;\n}\n.enUpdateBtn.modalupdate[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0 35px;\n  border: 1px solid #ff6400 !important;\n  background: #ff6400 !important;\n  color: #fff !important;\n  font-weight: 700 !important;\n}\n.log-head[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  font-weight: 700;\n  padding: 15px 15px 0 15px;\n}\n.replaceBtn[_ngcontent-%COMP%] {\n  background: #ff6400 !important;\n  color: #fff !important;\n  border: 1px solid #ff6400 !important;\n}\n.edit-logo[_ngcontent-%COMP%] {\n  border: dashed 2px #03a9f4 !important;\n  border-radius: 10px;\n}\n.errorcon[_ngcontent-%COMP%] {\n  width: 450px;\n  margin: 0 auto;\n}\n.errorcard[_ngcontent-%COMP%] {\n  background: #fcf4f2;\n  border: 1px solid #f9c9bf !important;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-left: 7px solid #bf2e23 !important;\n}\n.errorcard[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  color: #bf2e23;\n  padding-left: 15px;\n  font-weight: 600;\n}\n.error-logo[_ngcontent-%COMP%] {\n  width: 450px;\n  height: 160px;\n  text-align: center;\n  border: dashed 2px #bf2e23 !important;\n  border-radius: 10px;\n  background: #fcf4f2 !important;\n  position: relative;\n  margin: 0 auto;\n}\n.ptext[_ngcontent-%COMP%] {\n  font-weight: 600;\n  font-size: 16px;\n}\n.btnadd[_ngcontent-%COMP%] {\n  width: 100px;\n}\n.btndel[_ngcontent-%COMP%] {\n  width: 100px;\n  background: transparent;\n}\n.checkImg[_ngcontent-%COMP%] {\n  width: 225px !important;\n  height: 225px !important;\n}\n  .fusemat .mat-select-arrow-wrapper {\n  right: 10px;\n}\n.profile-edit.editpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  width: 95%;\n  word-break: break-word;\n}\n.ques-icon[_ngcontent-%COMP%] {\n  position: relative;\n}\n.ques-icon[_ngcontent-%COMP%]   .qicon[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 0;\n  right: 12px;\n  cursor: pointer;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: center;\n  padding-right: 0;\n  justify-content: flex-end;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-left: 35px;\n}\n.pims-modal[_ngcontent-%COMP%]   .modal-dialog[_ngcontent-%COMP%] {\n}\n.modal-box[_ngcontent-%COMP%] {\n  margin: 0px 14px;\n  padding: 0px 25px;\n}\n.failure[_ngcontent-%COMP%] {\n  border: 1px solid grey;\n  display: flex;\n  padding: 15px;\n}\n.clipbox[_ngcontent-%COMP%] {\n  position: relative;\n  text-align: center;\n}\n.clipbox[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  background: #8fe2d891;\n  padding: 7px 3px 7px 14px;\n  display: inline-block;\n}\n.clipbox[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  color: #0c5148;\n  margin: 0px 14px;\n}\n.clipbox[_ngcontent-%COMP%]   .text-success[_ngcontent-%COMP%] {\n  position: absolute;\n  padding: 7px 10px;\n}\n.headingone[_ngcontent-%COMP%] {\n  height: 26px;\n  margin-left: -23px !important;\n}\n.headingone[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 22px;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.lastprt[_ngcontent-%COMP%]     span p {\n  width: 100%;\n}\n  .mat-slide-toggle-bar, \n.mat-slide-toggle.mat-checked[_ngcontent-%COMP%]   .mat-slide-toggle-bar[_ngcontent-%COMP%] {\n  border-radius: 1.5rem;\n  background: #e8e8e8 !important;\n  box-shadow: none;\n  margin: 0 1.3rem !important;\n}\n  .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb, \n.mat-slide-toggle-thumb[_ngcontent-%COMP%] {\n  border-radius: 1.125rem;\n  background: #3da3e1 !important;\n}\n#status-toggle[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  vertical-align: middle;\n  height: inherit;\n  width: initial !important;\n  max-width: initial !important;\n  justify-content: center;\n  padding-left: 35px;\n}\n  .pims-modal button.close {\n  z-index: 9999;\n  margin-top: -13px;\n}\n.mat-slide-toggle-content[_ngcontent-%COMP%] {\n  overflow: inherit !important;\n}\n.tBody[_ngcontent-%COMP%] {\n  text-align: center !important;\n}\n@media screen and (max-height: 700px) {\n  .fus-section[_ngcontent-%COMP%] {\n    height: calc(100vh - 200px);\n  }\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n  width: 150px;\n  word-break: break-all;\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n  width: 300px;\n  word-break: break-all;\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n  width: 150px;\n  word-break: break-all;\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n  width: 150px;\n  word-break: break-all;\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n  width: 107px;\n  word-break: break-all;\n}\n.fuse-outer.fus-section[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6) {\n  width: 100px;\n  word-break: break-all;\n}\n.toggle-accordion-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: none !important;\n}\n.updropdwn[_ngcontent-%COMP%] {\n  transform: rotate(-180deg) !important;\n}\n.disablebtn[_ngcontent-%COMP%] {\n  cursor: not-allowed;\n  background-color: #fba368 !important;\n}\n.pms-part[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n/*# sourceMappingURL=pims-management.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PimsManagementComponent, { className: "PimsManagementComponent", filePath: "src\\app\\components\\pims-management\\pims-management.component.ts", lineNumber: 21 });
})();

// src/app/components/fuse-managements/fuse-list/fuse-list.component.ts
var _c09 = ["editModal"];
var _c18 = ["addLogModal"];
var _c25 = ["ViewLogModal"];
var _c34 = ["editLogModal"];
var _c42 = ["deleteLogo"];
var _c52 = ["fuseInactiveCalender"];
var _c62 = ["formGroupDirective"];
var _c72 = (a0) => ({ "toggle-accordion-icon": a0 });
var _c8 = (a0) => ({ "view-mode": a0 });
function FuseListComponent_img_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 102);
    \u0275\u0275listener("click", function FuseListComponent_img_18_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.editProfile());
    });
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.dsUserPreference.BusinessName, ", ");
  }
}
function FuseListComponent_span_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 103);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.dsUserPreference.ZoetisAccountNumber, ", ");
  }
}
function FuseListComponent_span_28_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ",");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275template(2, FuseListComponent_span_28_span_2_Template, 2, 0, "span", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.dsUserPreference.AddressLine1, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.isJapanese);
  }
}
function FuseListComponent_span_29_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ",");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275template(2, FuseListComponent_span_29_span_2_Template, 2, 0, "span", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.dsUserPreference.AddressLine2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.isJapanese);
  }
}
function FuseListComponent_span_30_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ",");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275template(2, FuseListComponent_span_30_span_2_Template, 2, 0, "span", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.dsUserPreference.City);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.isJapanese);
  }
}
function FuseListComponent_span_31_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ",");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275template(2, FuseListComponent_span_31_span_2_Template, 2, 0, "span", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.dsUserPreference.State);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.isJapanese);
  }
}
function FuseListComponent_span_32_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ",");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_span_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275template(2, FuseListComponent_span_32_span_2_Template, 2, 0, "span", 29);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.dsUserPreference.ZipCode);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r2.isJapanese);
  }
}
function FuseListComponent_span_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r2.getCountryName(ctx_r2.dsUserPreference.CountryId), " ");
  }
}
function FuseListComponent_span_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275element(1, "input", 105);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("value", ctx_r2.dsUserPreference.BusinessPhoneNo);
  }
}
function FuseListComponent_span_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 104);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.dsUserPreference.ContactEmail, " ");
  }
}
function FuseListComponent_mat_error_79_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-error");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsUserProfileScreen.InvalidEmail, " ");
  }
}
function FuseListComponent_div_100_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 36)(1, "div", 37)(2, "div", 38)(3, "label");
    \u0275\u0275text(4);
    \u0275\u0275elementStart(5, "sup");
    \u0275\u0275text(6, " *");
    \u0275\u0275elementEnd();
    \u0275\u0275text(7, " :");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 39)(9, "mat-form-field", 40);
    \u0275\u0275element(10, "input", 106);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsUserProfileScreen.City);
    \u0275\u0275advance(6);
    \u0275\u0275property("placeholder", ctx_r2.labelService.dsUserProfileScreen.EnterCity);
  }
}
function FuseListComponent_ng_container_101_sup_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "sup");
    \u0275\u0275text(1, " *");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_ng_container_101_mat_option_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 111);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const state_r5 = ctx.$implicit;
    \u0275\u0275property("value", state_r5.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", state_r5.StateName, " ");
  }
}
function FuseListComponent_ng_container_101_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 107)(2, "div", 37)(3, "div", 38)(4, "label");
    \u0275\u0275text(5);
    \u0275\u0275template(6, FuseListComponent_ng_container_101_sup_6_Template, 2, 0, "sup", 29);
    \u0275\u0275text(7, " :");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 108)(9, "mat-form-field", 40)(10, "mat-select", 109);
    \u0275\u0275template(11, FuseListComponent_ng_container_101_mat_option_11_Template, 2, 2, "mat-option", 110);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsUserProfileScreen.State);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.dsUserProfile.CountryId !== "79");
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx_r2.dsState);
  }
}
function FuseListComponent_img_131_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 102);
    \u0275\u0275listener("click", function FuseListComponent_img_131_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.openLogoModal("editlogo"));
    });
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_button_136_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 112);
    \u0275\u0275listener("click", function FuseListComponent_button_136_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.openLogoModal("addlogo"));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.UploadClinicLogo, " ");
  }
}
function FuseListComponent_ng_container_137_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 113);
    \u0275\u0275element(2, "img", 114);
    \u0275\u0275elementStart(3, "strong", 115);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 116)(6, "button", 117);
    \u0275\u0275listener("click", function FuseListComponent_ng_container_137_Template_button_click_6_listener() {
      \u0275\u0275restoreView(_r9);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.openLogoModal("viewlogo"));
    });
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r2.displayLogoName);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.ViewLogo);
  }
}
function FuseListComponent_div_138_span_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span")(1, "button", 123);
    \u0275\u0275listener("click", function FuseListComponent_div_138_span_17_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.addlistAccountpopup());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !ctx_r2.refLabService.insideUSCAuser);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.AddAccount, " ");
  }
}
function FuseListComponent_div_138_span_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span")(1, "button", 124);
    \u0275\u0275listener("click", function FuseListComponent_div_138_span_18_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.editListaccount());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !ctx_r2.refLabService.insideUSCAuser);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.EditAccount, " ");
  }
}
function FuseListComponent_div_138_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 60)(1, "mat-expansion-panel", 82, 11)(3, "mat-expansion-panel-header")(4, "p", 22);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 118)(7, "span", 25)(8, "img", 26);
    \u0275\u0275listener("click", function FuseListComponent_div_138_Template_img_click_8_listener() {
      \u0275\u0275restoreView(_r10);
      const mep2_r11 = \u0275\u0275reference(2);
      return \u0275\u0275resetView(mep2_r11.expanded = !mep2_r11.expanded);
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(9, "div", 119)(10, "div")(11, "label", 120)(12, "strong");
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(14, "span", 121);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "div", 122);
    \u0275\u0275template(17, FuseListComponent_div_138_span_17_Template, 3, 2, "span", 29)(18, FuseListComponent_div_138_span_18_Template, 3, 2, "span", 29);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const mep2_r11 = \u0275\u0275reference(2);
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.RefLabManagement);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(6, _c72, mep2_r11.expanded == true));
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate1("", ctx_r2.labelService.dsFuseManagementScreen.RefLabId, " :");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.businessDetails.RefLabClinicId, "");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !(ctx_r2.refID == null ? null : ctx_r2.refID.length));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.refID == null ? null : ctx_r2.refID.length);
  }
}
function FuseListComponent_span_173_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 125)(1, "button", 126);
    \u0275\u0275listener("click", function FuseListComponent_span_173_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r2 = \u0275\u0275nextContext();
      const drawer_r14 = \u0275\u0275reference(142);
      return \u0275\u0275resetView(ctx_r2.openDrawer(drawer_r14));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.AddFuse, " ");
  }
}
function FuseListComponent_th_177_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 127);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.FuseSerialNo, " ");
  }
}
function FuseListComponent_td_178_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 128)(1, "span", 129);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r17 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.FuseSerialNo);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r17.FuseSerialNo, " ");
  }
}
function FuseListComponent_th_180_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 127);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.StartDate, " ");
  }
}
function FuseListComponent_td_181_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 128)(1, "span", 129);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r18 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.StartDate);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r18.StartDateStr, " ");
  }
}
function FuseListComponent_th_183_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 127);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.EndDate, " ");
  }
}
function FuseListComponent_td_184_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 128)(1, "span", 129);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r19 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.EndDate);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r19.EndDateStr, " ");
  }
}
function FuseListComponent_th_186_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 130);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Action, " ");
  }
}
function FuseListComponent_td_187_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 133);
    \u0275\u0275listener("click", function FuseListComponent_td_187_button_3_Template_button_click_0_listener($event) {
      \u0275\u0275restoreView(_r20);
      const element_r21 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.updateActiveInactive($event.target, element_r21));
    });
    \u0275\u0275element(1, "div", 134);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r21 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active", element_r21.IsActive);
    \u0275\u0275attribute("data-inactive", ctx_r2.labelService.dsFuseManagementScreen.Inactive)("data-active", ctx_r2.labelService.dsFuseManagementScreen.Active);
  }
}
function FuseListComponent_td_187_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 131)(1, "span", 129);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, FuseListComponent_td_187_button_3_Template, 2, 4, "button", 132);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r21 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Action);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r21.shouldShow);
  }
}
function FuseListComponent_tr_188_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 135);
  }
}
function FuseListComponent_tr_189_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 136);
  }
}
function FuseListComponent_tbody_190_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 137)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Norecordsfound, " ");
  }
}
function FuseListComponent_div_192_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 64);
    \u0275\u0275element(1, "app-pims-management");
    \u0275\u0275elementEnd();
  }
}
function FuseListComponent_ng_template_193_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "label", 148);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 149)(4, "mat-form-field", 76)(5, "input", 150);
    \u0275\u0275twoWayListener("ngModelChange", function FuseListComponent_ng_template_193_div_6_Template_input_ngModelChange_5_listener($event) {
      \u0275\u0275restoreView(_r22);
      const ctx_r2 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r2.filterName, $event) || (ctx_r2.filterName = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.SAPIDLISID);
    \u0275\u0275advance(3);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.filterName);
  }
}
function FuseListComponent_ng_template_193_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 151)(1, "div", 152)(2, "div", 153);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 154);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 152)(7, "div", 153);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "div", 154);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "div", 152)(12, "div", 153);
    \u0275\u0275text(13);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "div", 154);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.ClinicName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.reflabDetails.name_1);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Address);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate4("", ctx_r2.reflabDetails.address_1, " ", ctx_r2.reflabDetails.address_2, " ", ctx_r2.reflabDetails.city, " ", ctx_r2.reflabDetails.state, " ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Zipcode);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.reflabDetails.zip);
  }
}
function FuseListComponent_ng_template_193_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.IdExist, " ");
  }
}
function FuseListComponent_ng_template_193_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.CliniclinkedSuccessfully, " ");
  }
}
function FuseListComponent_ng_template_193_div_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.WantToDeleteAccount, " ");
  }
}
function FuseListComponent_ng_template_193_div_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.AccountDeletedSuccessfully, " ");
  }
}
function FuseListComponent_ng_template_193_div_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.linkidError, " ");
  }
}
function FuseListComponent_ng_template_193_div_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.supportError, " ");
  }
}
function FuseListComponent_ng_template_193_div_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 155);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.connectionError, " ");
  }
}
function FuseListComponent_ng_template_193_button_16_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 156);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_16_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r23);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.closePopupall());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Cancel, " ");
  }
}
function FuseListComponent_ng_template_193_button_17_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_17_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r24);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.getClinicData());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Next, " ");
  }
}
function FuseListComponent_ng_template_193_button_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_18_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r25);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.postClinicdetails());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Confirm, " ");
  }
}
function FuseListComponent_ng_template_193_button_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r26 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_19_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r26);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.okbuttonchg());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.OK, " ");
  }
}
function FuseListComponent_ng_template_193_button_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_20_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r27);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.deleteAccountdetails());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.DeleteAccount, " ");
  }
}
function FuseListComponent_ng_template_193_button_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_21_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r28);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.updateClinicdetails());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.UpdateAccount, " ");
  }
}
function FuseListComponent_ng_template_193_button_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 157);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_193_button_22_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r29);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.deleteConfirm());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Confirm, " ");
  }
}
function FuseListComponent_ng_template_193_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 138)(1, "h4", 139);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "div", 140)(4, "form", 141)(5, "div", 142);
    \u0275\u0275template(6, FuseListComponent_ng_template_193_div_6_Template, 6, 2, "div", 29)(7, FuseListComponent_ng_template_193_div_7_Template, 16, 9, "div", 143)(8, FuseListComponent_ng_template_193_div_8_Template, 2, 1, "div", 144)(9, FuseListComponent_ng_template_193_div_9_Template, 2, 1, "div", 144)(10, FuseListComponent_ng_template_193_div_10_Template, 2, 1, "div", 144)(11, FuseListComponent_ng_template_193_div_11_Template, 2, 1, "div", 144)(12, FuseListComponent_ng_template_193_div_12_Template, 2, 1, "div", 144)(13, FuseListComponent_ng_template_193_div_13_Template, 2, 1, "div", 144)(14, FuseListComponent_ng_template_193_div_14_Template, 2, 1, "div", 144);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(15, "div", 145);
    \u0275\u0275template(16, FuseListComponent_ng_template_193_button_16_Template, 2, 1, "button", 146)(17, FuseListComponent_ng_template_193_button_17_Template, 2, 1, "button", 147)(18, FuseListComponent_ng_template_193_button_18_Template, 2, 1, "button", 147)(19, FuseListComponent_ng_template_193_button_19_Template, 2, 1, "button", 147)(20, FuseListComponent_ng_template_193_button_20_Template, 2, 1, "button", 147)(21, FuseListComponent_ng_template_193_button_21_Template, 2, 1, "button", 147)(22, FuseListComponent_ng_template_193_button_22_Template, 2, 1, "button", 147);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.LISpopupTitle, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("formGroup", ctx_r2.refLabform);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r2.Lisfirstdetails);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.LisgetDetails);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.doesnotExist);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.clinicLinked);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.isconfirm);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.delectedmsg);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.linkerror);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.supporterror);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.connectionerror);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r2.cancelbutton);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.nextbutton);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.confirmbutton);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.okbutton);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.deleteAccount);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.updateAccount);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.isconfirm);
  }
}
function FuseListComponent_ng_template_195_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r31 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 168)(1, "mat-card", 169)(2, "div");
    \u0275\u0275element(3, "img", 170);
    \u0275\u0275elementStart(4, "span");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "img", 171);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_195_div_6_Template_img_click_6_listener() {
      \u0275\u0275restoreView(_r31);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.fileRemove());
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", ctx_r2.errorMsg, " ");
  }
}
function FuseListComponent_ng_template_195_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r32 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "input", 172);
    \u0275\u0275listener("change", function FuseListComponent_ng_template_195_ng_container_8_Template_input_change_1_listener($event) {
      \u0275\u0275restoreView(_r32);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.readFile($event.target.files));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", 173)(3, "div", 174);
    \u0275\u0275element(4, "img", 175);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 176)(6, "strong");
    \u0275\u0275text(7);
    \u0275\u0275elementEnd();
    \u0275\u0275element(8, "br");
    \u0275\u0275elementStart(9, "span");
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275element(11, "br");
    \u0275\u0275elementStart(12, "span");
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("accept", ctx_r2.acceptExtension);
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.UploadDndMsg);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.FileSizeMsg);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.FileFormatMsg);
  }
}
function FuseListComponent_ng_template_195_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r33 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 177)(1, "div");
    \u0275\u0275element(2, "img", 178);
    \u0275\u0275elementStart(3, "span", 179);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "img", 180);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_195_div_9_Template_img_click_5_listener() {
      \u0275\u0275restoreView(_r33);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.fileRemove());
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r2.fileName);
  }
}
function FuseListComponent_ng_template_195_Template(rf, ctx) {
  if (rf & 1) {
    const _r30 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 158)(1, "h5", 159);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 160);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_195_Template_span_click_3_listener() {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modaldismiss());
    });
    \u0275\u0275element(4, "img", 161);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 162);
    \u0275\u0275template(6, FuseListComponent_ng_template_195_div_6_Template, 7, 1, "div", 163);
    \u0275\u0275elementStart(7, "div", 164);
    \u0275\u0275listener("fileDropped", function FuseListComponent_ng_template_195_Template_div_fileDropped_7_listener($event) {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.readFile($event));
    });
    \u0275\u0275template(8, FuseListComponent_ng_template_195_ng_container_8_Template, 14, 4, "ng-container", 29)(9, FuseListComponent_ng_template_195_div_9_Template, 6, 1, "div", 165);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "div", 166)(11, "button", 167);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_195_Template_button_click_11_listener() {
      \u0275\u0275restoreView(_r30);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.uploadLogo());
    });
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.isEdit ? ctx_r2.labelService.dsFuseManagementScreen.EditClinicLogo : ctx_r2.labelService.dsFuseManagementScreen.UploadClinicLogo, " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("ngIf", ctx_r2.fileError);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", ctx_r2.fileError ? "error-logo" : "container");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.fileName === "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r2.fileName !== "");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", ctx_r2.fileName !== "" ? "enUpdateBtn" : "updateBtn");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r2.fileName !== "" ? false : true);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Upload);
  }
}
function FuseListComponent_ng_template_197_Template(rf, ctx) {
  if (rf & 1) {
    const _r34 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 158)(1, "h5", 181);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 160);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_197_Template_span_click_3_listener() {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modalService.dismissAll());
    });
    \u0275\u0275element(4, "img", 161);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 182);
    \u0275\u0275element(6, "img", 183);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 145)(8, "button", 184);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_197_Template_button_click_8_listener() {
      \u0275\u0275restoreView(_r34);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modalService.dismissAll());
    });
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.PreviewLogo, " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("src", ctx_r2.displayLogo, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Close);
  }
}
function FuseListComponent_ng_template_199_Template(rf, ctx) {
  if (rf & 1) {
    const _r35 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 158)(1, "h5", 181);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 160);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_199_Template_span_click_3_listener() {
      \u0275\u0275restoreView(_r35);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modalService.dismissAll());
    });
    \u0275\u0275element(4, "img", 161);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 185);
    \u0275\u0275element(6, "img", 183);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "div", 145)(8, "button", 186);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_199_Template_button_click_8_listener() {
      \u0275\u0275restoreView(_r35);
      const ctx_r2 = \u0275\u0275nextContext();
      ctx_r2.modalService.dismissAll();
      return \u0275\u0275resetView(ctx_r2.openLogoModal("addlogo"));
    });
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "button", 184);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_199_Template_button_click_10_listener() {
      \u0275\u0275restoreView(_r35);
      const ctx_r2 = \u0275\u0275nextContext();
      ctx_r2.modalService.dismissAll();
      return \u0275\u0275resetView(ctx_r2.openLogoModal("deletelogo"));
    });
    \u0275\u0275text(11);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.EditClinicLogo, " ");
    \u0275\u0275advance(4);
    \u0275\u0275property("src", ctx_r2.displayLogo, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.ReplaceLogo);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Delete);
  }
}
function FuseListComponent_ng_template_201_Template(rf, ctx) {
  if (rf & 1) {
    const _r36 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 187)(1, "span", 160);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_201_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r36);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modalService.dismissAll());
    });
    \u0275\u0275element(2, "img", 161);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "div", 188)(4, "p", 189);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 145)(7, "button", 190);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_201_Template_button_click_7_listener() {
      \u0275\u0275restoreView(_r36);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.DeleteLogo());
    });
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "button", 184);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_201_Template_button_click_9_listener() {
      \u0275\u0275restoreView(_r36);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.modalService.dismissAll());
    });
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.DeleteMsg);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Yes, "");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.No);
  }
}
function FuseListComponent_ng_template_203_Template(rf, ctx) {
  if (rf & 1) {
    const _r37 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 191)(1, "p", 192);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(3, "div", 193)(4, "p", 194)(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275text(7, " \xA0 \xA0 ");
    \u0275\u0275elementStart(8, "span", 195);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "mat-card", 196)(11, "mat-calendar", 197);
    \u0275\u0275listener("selectedChange", function FuseListComponent_ng_template_203_Template_mat_calendar_selectedChange_11_listener($event) {
      \u0275\u0275restoreView(_r37);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.updaeFuseEndDateStr($event));
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(12, "div", 198)(13, "button", 199);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_203_Template_button_click_13_listener() {
      \u0275\u0275restoreView(_r37);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.closeFuseToggleModal());
    });
    \u0275\u0275text(14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "button", 200);
    \u0275\u0275listener("click", function FuseListComponent_ng_template_203_Template_button_click_15_listener() {
      \u0275\u0275restoreView(_r37);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.fuseUpdate(true));
    });
    \u0275\u0275text(16);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.OnWhatDateInactive, " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r2.labelService.dsFuseManagementScreen.TodaysDate, ": ");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.dateFormat);
    \u0275\u0275advance(2);
    \u0275\u0275property("minDate", ctx_r2.fuseElem.StDate)("maxDate", ctx_r2.maxDate)("selected", ctx_r2.fuseEndDateStr);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r2.labelService.dsFuseManagementScreen.Cancel, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r2.labelService.dsFuseManagementScreen.Submit);
  }
}
var FuseListComponent = class _FuseListComponent {
  constructor(commonService, headerService, fuseService, fb, confirmationDialogService, labelService, dataService, modalService, userService, formBuilder, refLabService, sanitizer, title) {
    this.commonService = commonService;
    this.headerService = headerService;
    this.fuseService = fuseService;
    this.fb = fb;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.userService = userService;
    this.formBuilder = formBuilder;
    this.refLabService = refLabService;
    this.sanitizer = sanitizer;
    this.title = title;
    this.msg = "";
    this.langID = localStorage.getItem("languageId");
    this.show = false;
    this.displayedColumns = [
      "FuseSerialNo",
      "StartDateStr",
      "EndDateStr",
      " "
    ];
    this.dataSource = new MatLegacyTableDataSource();
    this.Lisfirstdetails = false;
    this.LisgetDetails = false;
    this.cancelbutton = false;
    this.okbutton = false;
    this.confirmbutton = false;
    this.addLisButton = true;
    this.deleteAccount = false;
    this.isconfirm = false;
    this.delectedmsg = false;
    this.clinicLinked = false;
    this.doesnotExist = false;
    this.nextbutton = false;
    this.editLisbutton = false;
    this.supporterror = false;
    this.connectionerror = false;
    this.linkerror = false;
    this.updateDeside = false;
    this.updateforDelete = false;
    this.updateAccount = false;
    this.panelOpenState = false;
    this.isProfileEditable = false;
    this.isPreferenceEditable = false;
    this.dsUserProfile = {};
    this.dsUserPreference = {};
    this.isUserTypeBusiness = false;
    this.resetReqMsg = "";
    this.profileEmail = "";
    this.securityEmail = "";
    this.dsState = [];
    this.countryData = intlTelInputGlobals.getCountryData();
    this.dateFormateList = ["MM/DD/YY", "DD/MM/YY"];
    this.timeFormateList = [
      { value: true, text: "On (23:59)" },
      { value: false, text: "Off (11:59 AM/PM)" }
    ];
    this.selectedTimeFormate = this.dataService.appState.date.is24Hours;
    this.isNumberValue = true;
    this.acceptExtension = ["image/jpeg", "image/png"];
    this.fileName = "";
    this.fileError = false;
    this.isEdit = false;
    this.hideState = true;
    this.hideCity = true;
    this.changeStateTxt = true;
    this.selectedCountryCode = "US";
    this.maxDate = /* @__PURE__ */ new Date();
    this.dateFormat = (0, import_moment2.default)(/* @__PURE__ */ new Date()).format(localStorage.DateTimeFormat || "YYYY-MM-DD");
    this.fuseEndDateStr = /* @__PURE__ */ new Date();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindUserProfileLabel();
      this.labelService.bindFuseManagementLabel();
      this.mutateLabelText();
    }
    this.businessGUID = this.dataService.appData.authDetails["BusinessGuid"];
  }
  ngOnInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsFuseManagementScreen.ClinicManagement}`);
    console.log(this.isJapanese);
    if (localStorage.getItem("langCode") && localStorage.getItem("langCode") != void 0) {
      this.isJapanese = localStorage.getItem("langCode").toLowerCase().indexOf("jp") != -1 ? true : false;
    }
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "Clinic-Management");
    const bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    const countryId = this.dataService.appData.authDetails["BackOfficeFlag"] && bckBusinessInfo && bckBusinessInfo["BCountryId"] ? bckBusinessInfo["BCountryId"] : localStorage.getItem("userCountryId");
    this.refLabService.insideUSCAuser = [40, 31].indexOf(parseInt(countryId)) === -1 ? false : true;
    this.profileForm = this.createProfileFormGroup(new UserDetails());
    this.dsUserPreference = new UserDetails();
    this.getUserDDLDetails(null);
    if (localStorage.getItem("alert-popup") == "true") {
      this.modalService.open(AlertMessageComponent, {
        centered: true,
        backdrop: "static",
        scrollable: false
      });
    }
    this.addFuseForm = this.createFormGroup(new FuseDetails());
    this.refLabform = this.createFormGroupref(new ReflabDetails());
    this.businessDetails = new BusineesDetails();
    this.businessDetails.FuseDetails = [];
    this.getFuseList();
    this.getUserSetting();
    this.getBusinessLog();
    this.isClinicAdmin = this.dataService.appData.authDetails["UserTypeId"] == 1 ? true : false;
  }
  mutateLabelText() {
    const countryId = localStorage.getItem("userCountryId");
    const postalCodeCountries = [
      "31",
      "38",
      "49",
      "53",
      "167",
      "64",
      "168",
      "33",
      "169",
      "170",
      "63",
      "3",
      "51",
      "22",
      "24",
      "18",
      "213",
      "44",
      "21",
      "56",
      "37",
      "65",
      "5",
      "34",
      "27",
      "341",
      "348",
      "77",
      "361",
      "412",
      "405",
      "376",
      "419",
      "369",
      "383"
    ];
    const postCodeCountries = ["20", "68", "79", "58", "71", "50", "46", "328"];
    const provinceCountries = [
      "31",
      "49",
      "53",
      "24",
      "60",
      "47",
      "18",
      "21",
      "7",
      "65"
    ];
    const countyCountries = [
      "79",
      "58",
      "71",
      "50",
      "64",
      "3",
      "51",
      "77",
      "376",
      "369",
      "383"
    ];
    const stateUTCountries = ["44"];
    const regionCountries = ["56", "27", "341", "170", "328", "412", "405"];
    const departmentCountries = ["37", "12"];
    const cantonCountries = ["34"];
    const StateAbvCountries = ["20"];
    const DistrictCountries = ["45", "361"];
    const PrefectureCountries = ["390"];
    const VoivodeshipCountires = ["398"];
    const otherStateTexts = [
      { id: "348", text: "Emirate" }
      // UAE
    ];
    const GovernorateCountries = ["51"];
    const District = ["3", "60"];
    if (provinceCountries.indexOf(countryId) !== -1) {
      if (localStorage.languageId == "6" && localStorage.userCountryId == "49") {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Region;
      } else if (localStorage.languageId == "1" && localStorage.userCountryId == "31") {
        this.labelService.dsUserProfileScreen.State = "Province/Territory";
      } else {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Province;
      }
    } else if (countyCountries.indexOf(countryId) !== -1) {
      if (localStorage.languageId == "2" && localStorage.userCountryId == "50") {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Department;
      } else if (localStorage.languageId == "8" && localStorage.userCountryId == "71") {
        const state2 = this.labelService.dsUserProfileScreen.State;
        this.labelService.dsUserProfileScreen.State = state2;
      } else {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.County;
      }
    } else if (stateUTCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.StateUT;
    } else if (regionCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Region;
    } else if (cantonCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Canton;
    } else if (departmentCountries.indexOf(countryId) !== -1) {
      if (localStorage.languageId == "4") {
        this.labelService.dsUserProfileScreen.State = "Departmento";
      } else {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Department;
      }
    } else if (StateAbvCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = "State Abbreviation";
    } else if (DistrictCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = "District";
    } else if (PrefectureCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen.Prefecture;
    } else if (VoivodeshipCountires.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = "Voivodeship";
    }
    if (postalCodeCountries.indexOf(countryId) !== -1) {
      if (localStorage.languageId == "7") {
        this.labelService.dsUserProfileScreen.EnterZipCode = this.labelService.dsUserProfileScreen.EnterPostalcode;
      } else {
        this.labelService.dsUserProfileScreen.EnterZipCode = this.labelService.dsUserProfileScreen.EnterPostalCode;
      }
      this.labelService.dsUserProfileScreen.ZipCode = this.labelService.dsUserProfileScreen.PostalCode;
    } else if (postCodeCountries.indexOf(countryId) !== -1) {
      if (localStorage.languageId != "2") {
        this.labelService.dsUserProfileScreen.EnterZipCode = this.labelService.dsUserProfileScreen.EnterPostCode;
      }
      this.labelService.dsUserProfileScreen.ZipCode = this.labelService.dsUserProfileScreen.PostCode;
    }
    if (["45"].indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.EnterZipCode = this.labelService.dsUserProfileScreen.EnterZipcode;
      this.labelService.dsUserProfileScreen.ZipCode = this.labelService.dsUserProfileScreen.Zipcode;
    }
    otherStateTexts.forEach((p) => {
      if (p["id"] == countryId) {
        this.labelService.dsUserProfileScreen.State = this.labelService.dsUserProfileScreen[p["text"]];
      }
    });
    if (GovernorateCountries.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.City = this.labelService.dsUserProfileScreen.Governorate;
    } else if (District.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.City = this.labelService.dsUserProfileScreen.District;
    } else if (["20"].indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.City = "Suburb";
    } else if (["77"].indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.City = "Region";
    }
  }
  getUserSetting() {
    this.userService.getUserSettingDetails(this.headerService.loginUserGuid, this.businessGUID).subscribe({
      next: (data) => {
        this.userService.originalUserProfileData = data.ResponseData;
        if (this.userService.originalUserProfileData.FollowPatient == void 0 || this.userService.originalUserProfileData.FollowPatient == null)
          this.userService.originalUserProfileData.FollowPatient = EnmNotificationSetting.AllClinicResults;
        this.getUserTitleDetails(this.userService.originalUserProfileData.PrefixTypeId);
        this.setDataSource();
      },
      error: () => {
        this.userService.originalUserProfileData = null;
        this.dsUserProfile = {};
        this.dsUserPreference = {};
        this.profileEmail = "";
        this.securityEmail = "";
        this.isUserTypeBusiness = false;
      }
    });
    this.checkCountryBasedChange();
  }
  setDataSource() {
    this.dsUserProfile = Object.assign({}, this.userService.originalUserProfileData);
    Object.assign(this.dsUserPreference, this.userService.originalUserProfileData);
    this.securityEmail = this.userService.originalUserProfileData.Email;
    this.profileEmail = this.userService.originalUserProfileData.Email;
    this.profileForm.controls["ZoetisAccountNumber"].setValue(this.dsUserProfile.ZoetisAccountNumber);
    this.isNumberValue = this.dsUserProfile.PhoneNo ? true : false;
    if (this.dsUserProfile.UserTypeId == EnmUserType.Business) {
      this.isUserTypeBusiness = true;
      if (this.userService.dsCountry.length) {
        this.dsState = this.userService.dsCountry.find((x) => x.Id == this.dsUserProfile.CountryId).StateDetails;
        if (this.dsUserProfile.CountryId == "213" && !this.dsUserProfile.StateId && this.dsUserProfile.City) {
          this.dsUserProfile.StateId = this.dsState.find((x) => x.StateName == this.dsUserProfile.City)?.Id;
          this.dsUserProfile.State = this.dsUserProfile.City;
          this.dsUserPreference.StateId = this.dsState.find((x) => x.StateName == this.dsUserProfile.City)?.Id;
          this.dsUserPreference.State = this.dsUserProfile.City;
        }
        this.profileForm.controls["StateId"].setValue(this.dsUserProfile.StateId);
      }
    } else {
      this.isUserTypeBusiness = false;
    }
    console.log(this.dsUserProfile.CountryId);
    this.checkCountryBasedChange(this.dsUserProfile.CountryId.toString());
  }
  getUserTitleDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsTitle = data.ResponseData.TitleDetails;
    });
  }
  checkCountryBasedChange(countryid) {
    const countryId = countryid;
    const changeStatelabelName = ["22", "213"];
    const hideStateField = ["169", "33", "168", "63", "167", "419", "534", "590", "550", "542", "582", "566", "558", "574", "598", "606", "614", "638", "622", "630", "678", "686", "694", "670", "654", "646", "710", "718", "662", "702"];
    const hideCityField = ["376", "390", "369"];
    if (changeStatelabelName.indexOf(countryId) !== -1) {
      this.labelService.dsUserProfileScreen.State = countryId == 22 ? this.labelService.dsUserProfileScreen.City : "Town";
      this.changeStateTxt = false;
      this.hideCity = false;
    }
    if (hideStateField.indexOf(countryId) !== -1) {
      this.hideState = false;
    }
    if (hideCityField.indexOf(countryId) !== -1) {
      this.hideCity = false;
      this.changeStateTxt = false;
    }
  }
  reIti() {
    const businessPhoneNo = this.businessPhoneITI.getNumber();
    const phoneNo = this.dsUserProfile.PhoneNo;
    if (phoneNo && this.iti)
      this.iti.setNumber(phoneNo);
    if (businessPhoneNo && this.businessPhoneITI)
      this.businessPhoneITI.setNumber(businessPhoneNo);
    if (businessPhoneNo && this.businessPhoneITI)
      this.businessPhoneITI.setCountry(this.selectedCountryCode);
  }
  editProfile() {
    this.isProfileEditable = true;
    this.profileForm = this.createProfileFormGroup(new UserDetails());
    this.profileForm.patchValue(this.dsUserProfile);
    this.formateEditableBusinessPhone();
  }
  cancelEditProfile() {
    this.isProfileEditable = false;
    this.profileForm.patchValue(this.dsUserProfile);
    this.formateDisplayBusinessPhone();
    this.formateEditableBusinessPhone();
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindUserProfileLabel();
      this.labelService.bindFuseManagementLabel();
      this.mutateLabelText();
    });
  }
  getUserDDLDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsCountry = data.ResponseData.CountryDetails;
      this.userService.dsTitle = data.ResponseData.TitleDetails;
      this.userService.dsSuffix = data.ResponseData.SuffixDetails;
      this.userService.dsLanguage = data.ResponseData.LanguageDetails;
      this.userService.dsNotification = data.ResponseData.NotificationSettingsValue;
      this.getUserSetting();
    });
  }
  onCountryChange() {
    this.dsState = this.userService.dsCountry.find((x) => x.Id == this.profileForm.controls["CountryId"].value).StateDetails;
  }
  getCountryName(cId) {
    return cId && this.userService.dsCountry.length ? this.userService.dsCountry.find((x) => x.Id == cId).CountryName : "";
  }
  validateBusinessPhoneNo() {
    this.profileForm.controls["BusinessPhoneNo"].setValue(this.profileForm.controls["BusinessPhoneNo"].value.replace(/[^0-9-+ ]*/g, ""));
    const BusinessPhoneNo = this.businessPhoneITI.getNumber().trim();
    const inputValue = this.profileForm.controls["BusinessPhoneNo"].value;
    const isOnlyNumber = /^[0-9-]+$/.test(inputValue);
    if (BusinessPhoneNo) {
      if (isOnlyNumber && this.businessPhoneITI.isValidNumber()) {
      } else {
        this.businessPhoneITI.getValidationError();
        this.profileForm.controls["BusinessPhoneNo"].setErrors({
          incorrect: true
        });
      }
    }
  }
  updateUserProfile() {
    if (this.selectedCountryCode != void 0 && this.selectedCountryCode.toLowerCase() != this.businessPhoneITI.defaultCountry) {
      this.profileForm.controls["BusinessPhoneNo"].setErrors({
        incorrect: true
      });
    }
    if (!this.profileForm.valid) {
      this.profileForm.setErrors({ invalid: true });
      const msg = this.labelService.dsUserProfileScreen.ErrorMessage;
      this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel, "sm", true, false).then((confirmed) => {
        console.log(confirmed);
      }).catch(() => {
        console.log("error...");
      });
      return;
    }
    this.profileForm.addControl("IsBusinessUpdate", new UntypedFormControl(true));
    this.userService.updateUserProfile(this.profileForm.value).subscribe({
      next: (data) => {
        if (data.StatusCode == 200) {
          this.headerService.selectedBusinessName = this.profileForm.controls["BusinessName"].value;
          localStorage.setItem("businessName", this.headerService.selectedBusinessName);
          localStorage.setItem("userName", this.headerService.userName);
          if (this.profileForm.controls["CountryId"].value != null) {
            localStorage.setItem("userCountryId", this.profileForm.controls["CountryId"].value);
            this.labelService.userCountryId = this.profileForm.controls["CountryId"].value;
            this.dataService.appData.masterData.userCountryId = this.profileForm.controls["CountryId"].value;
            this.dataService.data.next(this.dataService.appData);
          }
          this.headerService.getBusinessListDetailsByUserId(this.businessGUID);
          this.dataService.appData.authDetails["BusinessPhoneNo"] = this.profileForm.value.BusinessPhoneNo;
          this.dataService.appData.authDetails["Email"] = this.profileForm.value.Email;
          this.dataService.data.next(this.dataService.appData);
          this.getUserDDLDetails(null);
          this.cancelEditProfile();
          this.showMsg(this.labelService.dsUserProfileScreen.UserProfileUpdatedSuccessfully);
        } else {
          this.showMsg(this.labelService.dsUserProfileScreen.Error);
        }
      },
      error: () => {
        this.showMsg(this.labelService.dsUserProfileScreen.Error);
      }
    });
  }
  createProfileFormGroup(dataItem) {
    return this.formBuilder.group({
      PrefixTypeId: dataItem.PrefixTypeId,
      Email: dataItem.Email,
      ContactEmail: [
        dataItem.ContactEmail,
        Validators.compose([Validators.email])
      ],
      // Validators.pattern("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,9}$")
      FirstName: [dataItem.FirstName],
      // Validators.compose([Validators.required, Validators.maxLength(50), Validators.pattern("[a-zA-Z0-9-.,' ]{1,50}")])
      LastName: [dataItem.LastName],
      // , Validators.compose([Validators.maxLength(50), Validators.pattern("[a-zA-Z0-9-.,' ]{1,50}")])
      Suffix: [dataItem.Suffix],
      Title: [dataItem.Title],
      PhoneNo: [dataItem.PhoneNo, [Validators.pattern("^[0-9-+ ]{1,15}")]],
      CountryId: dataItem.CountryId,
      BusinessName: [
        dataItem.BusinessName,
        Validators.compose([Validators.required, Validators.maxLength(255)])
      ],
      //Validators.pattern(`^[a-zA-Z0-9-.&@$"'][a-zA-Z0-9-.&@$'()", ]{0,100}`)
      AddressLine1: [
        dataItem.AddressLine1,
        Validators.compose([Validators.required, Validators.maxLength(255)])
      ],
      //Validators.pattern("^[a-zA-Z0-9-'][a-zA-Z0-9-.,' ]{0,100}")
      AddressLine2: [
        dataItem.AddressLine2,
        Validators.compose([Validators.maxLength(100)])
      ],
      //Validators.pattern("^[a-zA-Z0-9-'][a-zA-Z0-9-.,' ]{0,100}")
      City: [
        dataItem.City,
        this.isUserTypeBusiness ? Validators.compose([
          this.hideCity ? Validators.required : Validators.nullValidator,
          Validators.maxLength(50)
        ]) : Validators.nullValidator
      ],
      //Validators.pattern("^[a-zA-Z0-9][a-zA-ZâäèéêëîïôœùûüÿçÀÂÄÈÉÊËÎÏÔŒÙÛÜŸÇ0-9-..,' ]{1,50}")
      StateId: [
        dataItem.StateId,
        this.hideState && localStorage.userCountryId != "79" ? Validators.required : Validators.nullValidator
      ],
      ZipCode: [
        dataItem.ZipCode,
        Validators.compose([Validators.required, Validators.maxLength(11)])
      ],
      // Validators.pattern('^[a-zA-Z0-9][a-zA-Z0-9- ]{1,11}')
      BusinessPhoneNo: [dataItem.BusinessPhoneNo],
      UserRelationGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.headerService.businessGuid,
      CreatedGuid: this.headerService.businessGuid,
      UserTypeId: dataItem.UserTypeId,
      UserGuid: dataItem.UserGuid,
      CreatedAt: dataItem.CreatedAt,
      ZoetisAccountNumber: [
        dataItem.ZoetisAccountNumber,
        Validators.compose([
          Validators.maxLength(100),
          Validators.pattern("^[a-zA-Z0-9-]{1,100}")
        ])
      ]
    });
  }
  ngAfterViewInit() {
    const selectedCountryId = this.dataService.appData.authDetails["CountryId"];
    if (this.dataService.appData.userDropDownList.CountryDetails != void 0) {
      this.selectedCountryCode = this.dataService.appData.userDropDownList.CountryDetails.filter((ele) => selectedCountryId == ele.Id)[0].CountryCode;
    }
    for (let i = 0; i < this.countryData.length; i++) {
      const country = this.countryData[i];
      country.name = "";
    }
    this.formateDisplayBusinessPhone();
    this.formateEditableBusinessPhone();
  }
  formateDisplayBusinessPhone() {
    setTimeout(() => {
      const BPhone = document.querySelector("#BPhone");
      if (BPhone) {
        (0, import_intl_tel_input.default)(document.querySelector("#BPhone"), {
          allowDropdown: false,
          separateDialCode: true,
          initialCountry: this.selectedCountryCode,
          onlyCountries: [this.selectedCountryCode],
          formatOnDisplay: true,
          utilsScript: "assets/intl-tel-input/js/utils.js"
        });
      }
    }, 3e3);
  }
  formateEditableBusinessPhone() {
    setTimeout(() => {
      this.businessPhoneITI = (0, import_intl_tel_input.default)(document.querySelector("#businessPhone"), {
        allowDropdown: false,
        separateDialCode: true,
        initialCountry: this.selectedCountryCode,
        onlyCountries: [this.selectedCountryCode],
        formatOnDisplay: true,
        utilsScript: "assets/intl-tel-input/js/utils.js"
      });
    }, 500);
  }
  getFuseList() {
    const params = {
      businessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      IsBackOfficeUser: this.isBackOfficeUser
    };
    this.fuseService.getFuseList(params).subscribe({
      next: (data) => {
        this.businessDetails = data.ResponseData[0];
        this.dataService.appData.authDetails["IsReflabActive"] = this.businessDetails.RefLabClinicId;
        this.dataService.data.next(this.dataService.appData);
        this.businessDetails.FuseDetails.map((x, y) => {
          x["StDate"] = (0, import_moment2.default)(x["StartDate"].split("T")[0], "YYYY-MM-DD");
          x["shouldShow"] = this.toggleFlagGenerator(x);
        });
        console.log(this.businessDetails.FuseDetails.filter((x) => x.FuseSerialNo === "VFU000091"), "pp");
        this.dataSource = new MatLegacyTableDataSource(this.businessDetails.FuseDetails);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
        this.refID = this.businessDetails.RefLabClinicId;
        this.show = true;
        gtag("event", "Clinic_Management", {
          Clinic_Name: this.businessDetails.BusinessName,
          Clinic_Address: this.businessDetails.Address,
          Clinic_Zipcode: this.businessDetails.Zipcode,
          Clinic_Phone: this.businessDetails.Phone,
          Ref_Lab_ID: this.businessDetails.RefLabClinicId,
          FUSE_Serial_No: this.businessDetails.FuseDetails.length > 0 ? this.businessDetails.FuseDetails["FuseSerialNo"] : "",
          Start_Date: this.businessDetails.FuseDetails.length > 0 ? this.businessDetails.FuseDetails["StartDateStr"] : "",
          End_Date: this.businessDetails.FuseDetails.length > 0 ? this.businessDetails.FuseDetails["EndDateStr"] : "",
          Action: this.businessDetails.FuseDetails.length > 0 ? this.businessDetails.FuseDetails["IsActive"] : ""
        });
      },
      error: () => {
        this.dataSource = null;
      }
    });
  }
  openDrawer(drawer) {
    this.msg = "";
    this.formGroupDirective.resetForm();
    drawer.open();
    this.addFuseForm = this.createFormGroup(new FuseDetails());
  }
  addUpdateFuse(drawer) {
    if (this.addFuseForm.status == "VALID") {
      this.fuseService.addUpdateFuse(this.addFuseForm.value).subscribe((data) => {
        if (data.DisplayMessage == "Pin is not valid") {
          this.msg = this.labelService.dsFuseManagementScreen.ThisPINisincorrect;
          this.addFuseForm.controls.FusePin.setValue("");
        } else if (data.DisplayMessage == "Record already exist!") {
          this.msg = this.labelService.dsFuseManagementScreen.ThisFUSEisalreadypaired;
        } else if (data.DisplayMessage == "Fuse serial number is not valid") {
          this.msg = this.labelService.dsFuseManagementScreen.InvalidFuseSerialNo;
          this.addFuseForm.controls.FusePin.setValue("");
        } else {
          this.getFuseList();
          drawer.close();
          this.showMsg(this.labelService.dsFuseManagementScreen.Fuseaddedsuccessfully);
        }
      }, (error) => {
        if (error.error.DisplayMessage == "Record already exist!") {
          this.msg = this.labelService.dsFuseManagementScreen.ThisFUSEisalreadypaired;
        } else if (error.error.DisplayMessage == "Fuse serial number is not valid") {
          this.msg = this.labelService.dsFuseManagementScreen.InvalidFuseSerialNo;
          this.addFuseForm.controls.FusePin.setValue("");
        } else
          this.msg = this.labelService.dsFuseManagementScreen.Error;
      });
    }
  }
  restrictSpace(event) {
    console.log(event);
    if (event.target.selectionStart == 0 && event.code == "Space") {
      event.preventDefault();
    }
  }
  updateActiveInactive(val, element) {
    console.log(element, "lll");
    this.fuseElem = element;
    const checkHandle = val.getAttribute("class");
    if (checkHandle.includes("handle") === true) {
      val = val.parentElement;
    }
    const currStatus = val.getAttribute("class");
    const checked = currStatus.includes("active");
    const msg = checked ? this.labelService.dsFuseManagementScreen.FuseInactivateConfirmation : this.labelService.dsFuseManagementScreen.FuseActivateConfirmation;
    this.confirmationDialogService.confirm("NO_HEADER", msg, this.labelService.dsFuseManagementScreen.Continue, this.labelService.dsFuseManagementScreen.Cancel, "lg").then((confirmed) => {
      if (confirmed) {
        if (checked) {
          this.fuseEndDateStr = /* @__PURE__ */ new Date();
          const modalRef = this.modalService.open(this.fuseInactiveCalender, {
            windowClass: "calenderCls",
            centered: true,
            size: "sm",
            backdrop: true
          });
          modalRef.componentInstance.allowOutSideClick = false;
        } else {
          this.fuseUpdate(checked);
        }
      } else {
        val.setAttribute("class", currStatus);
      }
    }).catch(() => {
      val.setAttribute("class", currStatus);
    });
  }
  updaeFuseEndDateStr(ev) {
    this.fuseEndDateStr = ev;
  }
  fuseUpdate(checked) {
    this.fuseElem.IsActive = !checked;
    this.fuseElem.ModifiedGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.fuseElem.userGuid = this.dataService.appData.authDetails["UserGuid"];
    this.fuseElem.EndDateStr = (0, import_moment2.default)(this.fuseEndDateStr).format("MM-DD-YYYY");
    this.fuseService.addUpdateFuse(this.fuseElem).subscribe({
      next: () => {
        if (checked) {
          this.closeFuseToggleModal();
          this.showMsg(`${this.labelService.dsFuseManagementScreen.TheDevice}&nbsp;<b>${this.fuseElem.FuseSerialNo}</b>&nbsp;${this.labelService.dsFuseManagementScreen.HasBeenAssignedToEnd}&nbsp;<b>
            ${(0, import_moment2.default)(this.fuseEndDateStr).format(localStorage.DateTimeFormat || "YYYY-MM-DD")}</b>`, this.labelService.dsFuseManagementScreen.Close);
        }
        this.getFuseList();
      },
      error: () => {
        this.showMsg(this.labelService.dsFuseManagementScreen.Error);
      }
    });
  }
  showMsg(msg, btnOk = "", btnCancel = "") {
    btnOk = btnOk || this.labelService.dsFuseManagementScreen.OK;
    btnCancel = btnCancel || this.labelService.dsFuseManagementScreen.Cancel;
    this.confirmationDialogService.confirm("", msg, btnOk, btnCancel, "sm", true, false);
  }
  createFormGroup(dataItem) {
    return this.fb.group({
      Id: dataItem.Id,
      FuseSerialNo: [
        dataItem.FuseSerialNo,
        Validators.compose([
          Validators.required,
          Validators.maxLength(50),
          Validators.pattern("[a-zA-Z0-9]+$")
        ])
      ],
      FusePin: [
        dataItem.FusePin,
        Validators.compose([
          Validators.required,
          Validators.maxLength(20),
          Validators.pattern("[a-zA-Z0-9-]+$")
        ])
      ],
      CreatedGuid: this.headerService.loginUserGuid,
      ModifiedGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      // this.headerService.selectedBusinessId,
      IsDeleted: dataItem.IsDeleted
    });
  }
  createFormGroupref(dataItem) {
    return this.fb.group({
      clinicId: [
        dataItem.clinicId,
        Validators.compose([
          Validators.required,
          Validators.maxLength(20),
          Validators.pattern("[0-9]+$")
        ])
      ],
      name_1: [
        dataItem.name_1,
        Validators.compose([Validators.required, Validators.maxLength(20)])
      ],
      address_1: [
        dataItem.address_1,
        Validators.compose([Validators.required, Validators.maxLength(20)])
      ],
      zip: [
        dataItem.zip,
        Validators.compose([Validators.required, Validators.maxLength(10)])
      ]
    });
  }
  openModal() {
    this.modalService.open(this.editModal, this.NgbModalOptions);
  }
  closeFuseToggleModal() {
    this.modalService.dismissAll();
  }
  addlistAccountpopup() {
    this.updateDeside = false;
    this.LISpopupTitle = this.labelService.dsFuseManagementScreen.AddAccount;
    this.Lisfirstdetails = true;
    this.cancelbutton = true;
    this.nextbutton = true;
    this.okbutton = false;
    this.clinicLinked = false;
    this.refLabform.reset();
    this.filterName = "";
    const ngbModalOptions = {
      backdrop: "static",
      keyboard: false
    };
    this.NgbModalOptions = ngbModalOptions;
    this.modalService.open(this.editModal, ngbModalOptions);
  }
  getClinicData() {
    if (this.refLabform.get("clinicId").value != null) {
      this.fuseService.getClinicDetails(this.refLabform.get("clinicId").value, this.businessGUID).subscribe((data) => {
        this.reflabDetails = data.ResponseData;
        this.status = data.StatusCode;
        if (data.StatusCode == "200") {
          this.refLabform = this.createFormGroupref(this.reflabDetails);
          this.LisgetDetails = true;
          this.Lisfirstdetails = false;
          this.confirmbutton = true;
          this.nextbutton = false;
          this.deleteAccount = false;
        }
      }, (error) => {
        if (error.error.StatusCode == "400" || error.error.DisplayMessage == "Record not found") {
          this.cancelbutton = false;
          this.nextbutton = false;
          this.doesnotExist = true;
          this.deleteAccount = false;
          this.okbutton = true;
        }
      });
    }
  }
  closePopupall() {
    if (!this.nextbutton) {
      this.reflabDetails = this.prevRefLabDetails;
      this.filterName = this.reflabDetails.clinic_id;
    }
    this.modalService.dismissAll();
    this.refLabform.reset();
    this.LisgetDetails = false;
    this.confirmbutton = false;
    this.LisgetDetails = false;
    this.deleteAccount = false;
    this.updateAccount = false;
    this.Lisfirstdetails = false;
    this.nextbutton = false;
  }
  postClinicdetails() {
    this.truevalue = "true";
    this.isfalse = "false";
    if (this.reflabDetails.is_zdx_clinic == this.truevalue) {
      this.linkerror = true;
    } else if (this.reflabDetails.is_active == this.isfalse) {
      this.supporterror = true;
    } else {
      if (this.reflabDetails.is_zdx_clinic == this.isfalse && this.reflabDetails.is_active == this.truevalue) {
        const LinkClinic = {
          BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
          // this.headerService.selectedBusinessId,
          reflab_clinic_id: this.reflabDetails.clinic_id,
          is_zdx_clinic: true
        };
        this.fuseService.AddClinic(LinkClinic).subscribe((data) => {
          if (data.StatusCode == " 409") {
            this.linkerror = true;
          } else {
            this.getFuseList();
            this.clinicLinked = true;
            this.addLisButton = false;
            this.editLisbutton = true;
            this.dataService.appData.authDetails["IsLinkedRefLabClinic"] = true;
            this.dataService.appData.authDetails["IsReflabActive"] = true;
            this.dataService.data.next(this.dataService.appData);
          }
        }, (error) => {
          if (error.error.StatusCode == "302" || error.error.DisplayMessage == "Record already exist!") {
            this.linkerror = true;
          }
        });
      }
    }
    this.cancelbutton = false;
    this.confirmbutton = false;
    this.okbutton = true;
  }
  okbuttonchg() {
    if (this.linkerror == true) {
      this.reflabDetails = this.prevRefLabDetails;
      this.filterName = this.reflabDetails ? this.reflabDetails.clinic_id : "";
    }
    this.linkerror = false;
    this.clinicLinked = false;
    this.okbutton = false;
    this.LisgetDetails = false;
    this.cancelbutton = false;
    this.doesnotExist = false;
    this.nextbutton = false;
    this.supporterror = false;
    this.modalService.dismissAll();
    if (this.delectedmsg) {
      this.editLisbutton = false;
      this.addLisButton = true;
      this.delectedmsg = false;
    }
    if (this.updateDeside) {
      this.editLisbutton = false;
      this.addLisButton = true;
    }
  }
  editListaccount() {
    this.modalService.open(this.editModal, this.NgbModalOptions);
    this.LISpopupTitle = this.labelService.dsFuseManagementScreen.EditAccount;
    if (this.reflabDetails == null) {
      this.fuseService.getClinicDetails(this.refID, this.businessGUID).subscribe((data) => {
        this.reflabDetails = data.ResponseData;
        this.refLabform = this.createFormGroupref(this.reflabDetails);
        this.prevRefLabDetails = this.reflabDetails;
      });
    }
    this.LisgetDetails = true;
    this.okbutton = false;
    this.cancelbutton = true;
    this.deleteAccount = true;
    this.updateAccount = true;
    this.clinicLinked = false;
    this.isconfirm = false;
    this.confirmbutton = false;
    this.delectedmsg = false;
    this.Lisfirstdetails = false;
  }
  deleteAccountdetails() {
    if (this.filterName == this.reflabDetails.clinic_id || this.filterName == void 0) {
      this.deleteAccount = false;
      this.updateAccount = false;
      this.nextbutton = false;
      this.isconfirm = true;
    }
  }
  deleteConfirm() {
    const obj = {
      Id: this.reflabDetails.clinic_id
    };
    this.fuseService.DeleteClinic(obj).subscribe((data) => {
      if (data.StatusCode == "200") {
        this.dataService.appData.authDetails["IsLinkedRefLabClinic"] = false;
        this.dataService.appData.authDetails["IsReflabActive"] = false;
        this.dataService.appData.authDetails["RefLabClinicId"] = "";
        this.dataService.data.next(this.dataService.appData);
        this.getFuseList();
        this.filterName = "";
        this.cancelbutton = false;
        this.isconfirm = false;
        this.delectedmsg = true;
        this.okbutton = true;
        this.addLisButton = true;
      }
    });
  }
  updateClinicdetails() {
    this.LISpopupTitle = this.labelService.dsFuseManagementScreen.updatepopupTitle;
    this.filterName = this.reflabDetails.clinic_id;
    this.updateDeside = true;
    this.updateAccount = false;
    this.deleteAccount = true;
    this.LisgetDetails = false;
    this.addLisButton = false;
    this.editLisbutton = true;
    this.Lisfirstdetails = true;
    this.nextbutton = true;
  }
  // Clinic logo File upload
  getBusinessLog() {
    this.fuseService.getBusinessLogo(this.businessGUID).subscribe((data) => {
      if (data.StatusCode == "200") {
        this.isEdit = data.ResponseData["LogoImage"] !== null ? true : false;
        this.imageBase64 = data.ResponseData.LogoImage;
        this.displayLogoName = data.ResponseData.LogoName;
        this.displayLogo = this.sanitizer.bypassSecurityTrustResourceUrl(this.imageBase64);
      } else {
        this.isEdit = false;
      }
    }, (err) => {
      if (err.error.StatusCode == 500)
        this.isEdit = false;
    });
  }
  openLogoModal(str) {
    if (str == "addlogo") {
      this.modalService.open(this.addlogoModal, this.NgbModalOptions);
    } else if (str == "viewlogo") {
      this.modalService.open(this.viewlogoModal, this.NgbModalOptions);
    } else if (str == "editlogo") {
      this.modalService.open(this.editlogoModal, this.NgbModalOptions);
    } else if (str == "deletelogo") {
      this.modalService.open(this.deletelogoModal, this.NgbModalOptions);
    }
  }
  readFile(file) {
    if (file.length > 0) {
      const files = file[0];
      if (files.size > 2097152) {
        this.fileError = true;
        this.errorMsg = this.labelService.dsFuseManagementScreen.FileSizeErrorMsg;
        return false;
      }
      if (!this.acceptExtension.includes(files.type)) {
        this.fileError = true;
        this.errorMsg = this.labelService.dsFuseManagementScreen.FileErrorMsg;
        return false;
      }
      const fileReader = new FileReader();
      fileReader.onloadend = () => {
        this.imageBase64 = fileReader.result.toString();
      };
      fileReader.readAsDataURL(files);
      this.fileError = false;
      this.fileName = files.name;
    }
  }
  uploadLogo() {
    const imgUpload = {
      UserGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.businessGUID,
      LogoImage: this.imageBase64,
      LogoName: this.fileName,
      IsDeleted: false
    };
    this.fuseService.addOrUpdateClinicLogo(imgUpload).subscribe({
      next: (data) => {
        if (data.StatusCode == "200") {
          this.modaldismiss();
          this.confirmationDialogService.confirmWithImgs("", this.labelService.dsFuseManagementScreen.FileSuccessMsg, "OK", "sm", true, true, false);
          this.getBusinessLog();
        } else {
          this.fileError = true;
          this.errorMsg = this.labelService.dsFuseManagementScreen.FileUnSuccessMsg;
        }
      },
      error: () => {
        this.fileError = true;
        this.errorMsg = this.labelService.dsFuseManagementScreen.FileUnSuccessMsg;
      }
    });
  }
  fileRemove() {
    this.fileName = "";
    this.fileError = false;
    this.errorMsg = "";
  }
  modaldismiss() {
    this.fileName = "";
    this.fileError = false;
    this.errorMsg = "";
    this.modalService.dismissAll();
  }
  DeleteLogo() {
    const imgUpload = {
      UserGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.businessGUID,
      LogoImage: this.imageBase64,
      LogoName: this.displayLogoName,
      IsDeleted: true
    };
    this.fuseService.addOrUpdateClinicLogo(imgUpload).subscribe((data) => {
      if (data.StatusCode == "200") {
        this.getBusinessLog();
        this.modalService.dismissAll();
      }
    });
  }
  toggleFlagGenerator(elem) {
    if (elem.IsAssinged && !elem.IsActive) {
      return false;
    }
    const dups = this.businessDetails.FuseDetails.filter((x) => x.FuseSerialNo === elem.FuseSerialNo);
    dups.sort((a, b) => {
      return Number(new Date(b.EndDate)) - Number(new Date(a.EndDate));
    });
    const active = dups.find((x) => x.IsActive);
    if (active && active.IsActive && active["FuseGuid"] != elem.FuseGuid) {
      return false;
    }
    if (!elem.EndDate || dups.length < 2 || dups[0]["FuseGuid"] == elem.FuseGuid) {
      return true;
    }
    return false;
  }
  static {
    this.\u0275fac = function FuseListComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _FuseListComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(FuseService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(DomSanitizer), \u0275\u0275directiveInject(Title));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FuseListComponent, selectors: [["app-fuse-list"]], viewQuery: function FuseListComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c09, 5);
        \u0275\u0275viewQuery(_c18, 5);
        \u0275\u0275viewQuery(_c25, 5);
        \u0275\u0275viewQuery(_c34, 5);
        \u0275\u0275viewQuery(_c42, 5);
        \u0275\u0275viewQuery(_c52, 5);
        \u0275\u0275viewQuery(_c62, 7);
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(MatSort, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.editModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.addlogoModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.viewlogoModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.editlogoModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.deletelogoModal = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.fuseInactiveCalender = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
      }
    }, decls: 205, vars: 73, consts: [["mep", "matExpansionPanel"], ["formGroupDirective", "ngForm"], ["mep1", "matExpansionPanel"], ["drawer", ""], ["mep3", "matExpansionPanel"], ["editModal", ""], ["addLogModal", ""], ["ViewLogModal", ""], ["editLogModal", ""], ["deleteLogo", ""], ["fuseInactiveCalender", ""], ["mep2", "matExpansionPanel"], [1, "wrapper"], ["id", "content", 1, "fuselist"], [1, "ques-icon", "text-right"], [1, "title-container"], ["data-testid", "clnc-msmt-title", 1, "page-title"], ["src", "../../../assets/img/help-icon.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qicon", 3, "click", "matTooltip"], [1, "portal-outer"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1"], ["disabled", "true", "expanded", "true"], [1, "panel-header-text"], ["src", "../../../../assets/img/edit@3x.png", "alt", "img", "width", "22px", "class", "pl-2", 3, "click", 4, "ngIf"], [1, "heading", "Hbtn", "headingone", "mb-0", "text-right"], [3, "ngClass"], ["src", "../../../assets/img/updropdwn.png", "alt", "img", 1, "updropdwn", 3, "click"], [1, "row", "col-lg-12", 3, "hidden"], [1, "row", "col-12"], [4, "ngIf"], ["class", "pl-1 textup", 4, "ngIf"], [1, "row", "col-12", "mt-2"], ["class", "pl-1", 4, "ngIf"], [1, "profile-edit", "editpart", 3, "hidden"], ["novalidate", "", 1, "w-100", "profile_form", 3, "submit", "formGroup", "ngClass"], [1, "row", "mr-0", "ml-0", "mb-0", "mb-md-3", "mb-lg-0"], [1, "col-md-6", "col-xl-4", "mb-3", "pr-3", "pl-0"], [1, "row", "m-0"], [1, "full-w-div", "col-sm-6", "p-0"], [1, "full-w-div", "col-sm-6", "p-0", "mt-0", "profile-field"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "formControlName", "BusinessName", "maxlength", "255", 3, "placeholder"], [1, "full-w-div", "col-sm-6", "p-0", "pr-2"], ["type", "text", "matInput", "", "formControlName", "ZoetisAccountNumber", "maxlength", "100", 3, "placeholder"], [1, "col-md-6", "col-xl-4", "titleab", "mb-3", "pr-3", "pl-0", 3, "hidden"], ["appearance", "outline", "floatLabel", "always", 1, "W-100"], [1, "m-0", 3, "hidden"], [3, "hidden"], ["type", "tel", "id", "businessPhone", "matInput", "", "formControlName", "BusinessPhoneNo", "maxlength", "15", 3, "keyup"], ["type", "text", "matInput", "", "formControlName", "ContactEmail", 3, "placeholder"], ["type", "text", "matInput", "", "formControlName", "AddressLine1", "maxlength", "255", 3, "placeholder"], [1, "full-w-div", "col-sm-6", "p-0", "mt-0", "profile-field", "pr-2"], ["type", "text", "matInput", "", "formControlName", "AddressLine2", "maxlength", "255", 3, "placeholder"], ["class", "col-md-6 col-xl-4 mb-3 pr-3 pl-0", 4, "ngIf"], [1, "col-md-6", "col-xl-4", "titleab", "mb-3", "pr-3", "pl-0"], ["type", "text", "matInput", "", "formControlName", "ZipCode", "maxlength", "10", 3, "placeholder"], [1, "col-md-6", "col-xl-4", "mb-3", "pr-3", "pl-0", "view-mode", "country"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4", "w-100"], ["type", "button", "mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", 3, "click"], ["type", "submit", "mat-button", "", 1, "addfuse"], [1, "col-sm-12", "pt-3", "pl-1", "pr-1"], [1, "heading", "headingone", "text-right", "increases"], ["type", "button", "mat-button", "", "class", "addfuse addfuse1 btncheck", 3, "click", 4, "ngIf"], ["class", "col-sm-12 pt-3 pl-1 pr-1", 4, "ngIf"], [1, "col-sm-12", "mt-3", "pl-1", "pr-1"], [1, "example-container"], ["mode", "side", "position", "end", 1, "example-sidenav", "ml-4"], ["id", "fuse-side", 1, "rounded-0", "p-0"], ["autocomplete", "off", 1, "d-flex", "align-items-between", "justify-content-between", "fuse-container", "flex-column", 3, "formGroup"], [1, "w-100"], [1, "cardheader", "d-flex", "justify-content-between", "p-4"], [1, "heading"], ["src", "../../../../assets/img/cancel-button@2x.png", "alt", "img", 1, "closefuse", 3, "click"], [1, "p-4"], [1, "text-center", "mb-2", "errormsg", 2, "color", "red"], [1, "form-label-group", "mt-2"], ["appearance", "outline", 1, "w-100"], ["type", "text", "matInput", "", "formControlName", "FuseSerialNo", "maxlength", "50", "required", "", 3, "placeholder"], [1, "form-label-group", "mb-2"], ["type", "text", "matInput", "", "formControlName", "FusePin", "maxlength", "20", "required", "", 3, "placeholder"], [1, "d-flex", "justify-content-center", "mb-4"], ["mat-button", "", 1, "addfuse", 3, "click"], ["disabled", "true"], [1, "heading", "headingone", "headingtwo", "text-right"], [1, "heading", "Hbtn", "mb-0", "text-right", "ml-4"], ["class", "text-right", 4, "ngIf"], [1, "fuse-outer", "fuse-part", "pt-4"], ["mat-table", "", "summary", "", "matSort", "", 3, "dataSource"], ["matColumnDef", "FuseSerialNo"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "StartDateStr"], ["matColumnDef", "EndDateStr"], ["matColumnDef", " "], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", "id", "status-toggle", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", "norecord", 4, "ngIf"], ["_intl.itemsPerPageLabel", "", "showFirstLastButtons", "", 1, "mat-paginator-sticky", 3, "pageSize", "hidePageSize"], ["class", "col-sm-12 mt-3 pl-1 pr-1", 4, "ngIf"], ["backdrop", "static"], ["src", "../../../../assets/img/edit@3x.png", "alt", "img", "width", "22px", 1, "pl-2", 3, "click"], [1, "pl-1", "textup"], [1, "pl-1"], ["type", "tell", "id", "BPhone", "matInput", "", "readonly", "", 3, "value"], ["type", "text", "formControlName", "City", "matInput", "", "autocomplete", "off", "maxlength", "50", 3, "placeholder"], [1, "col-md-6", "col-xl-4", "titleab", "mb-3", "pr-3", "pl-0", "drop_view"], [1, "full-w-div", "col-sm-6", "p-0", "mt-0", "profile-field", "fusemat"], ["formControlName", "StateId", "autocomplete", "off"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["type", "button", "mat-button", "", 1, "addfuse", "addfuse1", "btncheck", 3, "click"], [1, "logo_container"], ["src", "../../../../assets/img/imgfile_icon.svg", "alt", "imgfile_icon", 1, "pr-2"], [1, "text-center"], [1, "text-center", "pt-4", "clinicBtn"], ["type", "button", 3, "click"], [1, "heading", "headingone", "text-right", "headingone", "increases"], [1, "row", "col-lg-12", "justify-content-between"], [1, "mb-0", "px-3"], [1, "span_font", "pr-3"], [1, "mb-0", "text-right", "ml-4"], ["type", "button", "mat-button", "", 1, "addfuse", "addfuse1", 3, "click", "disabled"], ["type", "button", "mat-button", "", 1, "addfuse", "addfuse1", "editadd", 3, "click", "disabled"], [1, "text-right"], ["type", "button", "mat-button", "", 1, "addfuse", "addfuse1", "addcon", 3, "click"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], [1, "textTtl", "d-none"], ["mat-header-cell", ""], ["mat-cell", "", "id", "status-toggle"], ["type", "button", "class", "btn btn-toggle", "data-toggle", "button", "aria-pressed", "false", "autocomplete", "off", 3, "active", "click", 4, "ngIf"], ["type", "button", "data-toggle", "button", "aria-pressed", "false", "autocomplete", "off", 1, "btn", "btn-toggle", 3, "click"], [1, "handle"], ["mat-header-row", ""], ["mat-row", ""], [1, "norecord"], [1, "modal-header", "text-center"], ["id", "modal-basic-title", 1, "modal-title", "w-100"], [1, "modal-body", "px-5", "pt-3"], [3, "formGroup"], [1, "form-group"], ["class", "d-flex justify-content-between fusepart mb-3", 4, "ngIf"], ["class", "msg", 4, "ngIf"], [1, "modal-footer", "row", "mt-1", "justify-content-center", "updateBtn"], ["type", "button", "class", "cancel-btn mr-1", "mat-raised-button", "", "color", "primary", 3, "click", 4, "ngIf"], ["type", "button", "class", "save-change mr-1", "mat-raised-button", "", "color", "accent", 3, "click", 4, "ngIf"], ["for", "dateOfBirth"], [1, "input-group"], ["matInput", "", "formControlName", "clinicId", "placeholder", "Enter SAP ID/LIS ID", "maxlength", "20", 1, "form-control", 3, "ngModelChange", "ngModel"], [1, "d-flex", "justify-content-between", "fusepart", "mb-3"], [1, "d-flex", "flex-column", "fuse-block"], [1, "fuse-label1"], [1, "fuse-text"], [1, "msg"], ["type", "button", "mat-raised-button", "", "color", "primary", 1, "cancel-btn", "mr-1", 3, "click"], ["type", "button", "mat-raised-button", "", "color", "accent", 1, "save-change", "mr-1", 3, "click"], [1, "d-flex", "log-head"], [1, "float-left", "w-100", "mt-2", "ml-2"], ["type", "button", 1, "float-right", "mt-3", "mr-2", 3, "click"], ["src", "../../../../assets/img/x-icon.svg", "alt", "x-icon"], [1, "modal-body", "px-3", "pt-3"], ["class", "errorcon", 4, "ngIf"], ["appDnd", "", 1, "d-flex", "justify-content-center", "align-items-center", "dumimg", "mt-4", 3, "fileDropped", "ngClass"], ["class", "row filepart", 4, "ngIf"], [1, "modal-footer", "row", "mt-2", "justify-content-center", "modalupdate", 3, "ngClass"], ["type", "button", 1, "", 3, "click", "disabled"], [1, "errorcon"], [1, "errorcard"], ["src", "../../../../assets/img/Alert_icon.svg", "alt", "Alert_icon"], ["src", "../../../../assets/img/Cross_Icon.svg", "alt", "Cross_Icon", 3, "click"], ["type", "file", "title", " ", "id", "inputFile", 3, "change", "accept"], [1, "row", "contpart"], [1, "col-2", "mr-4"], ["src", "../../../../assets/img/File-Icon.svg", "alt", "file"], [1, "col-9", "text-left"], [1, "row", "filepart"], ["src", "../../../../assets/img/imgfile_icon.svg", "alt", "imgfile_icon"], [1, "px-4"], ["src", "../../../../assets/img/x-icon.svg", "alt", "x-icon", 1, "pl-4", 3, "click"], [1, "float-left", "w-100", "mt-3", "ml-2"], [1, "modal-body", "text-center", "px-5", "pt-3", "frlog"], ["alt", "preview", 1, "justify-content-center", "mt-3", "checkImg", 3, "src"], ["type", "button", 1, "btndel", 3, "click"], [1, "modal-body", "text-center", "px-5", "pt-3"], ["type", "button", 1, "replaceBtn", 3, "click"], [1, "d-flex", "log-head", "justify-content-end"], [1, "modal-body", "text-center", "px-5", "pt-3", "d-flex", "justify-content-center", "align-items-center"], [1, "ptext"], ["type", "button", 1, "pr-3", "replaceBtn", "btnadd", 3, "click"], [1, "d-flex"], [1, "float-left", "w-100", "mt-4", "ml-4"], [1, "modal-body", "text-center", "pl-3", "pr-3", "mt-0", "pt-0"], [1, "p-0", "m-0", "mb-3"], ["mat-raised-button", "", 1, "addfuse", 2, "padding", "7px 20px !important"], [1, "border", "border-default", "rounded-lg", "p-0", "m-0", 2, "border", "1px solid #b5b5b5 !important"], [3, "selectedChange", "minDate", "maxDate", "selected"], [1, "modal-footer", "row", "justify-content-center"], ["type", "button", "mat-raised-button", "", "color", "warn", 1, "cncl-btn", 3, "click"], ["type", "button", "mat-raised-button", "", 1, "btn", "btn-sm", "addfuse", "ml-2", 3, "click"]], template: function FuseListComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 12);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 13)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 14)(6, "section", 15)(7, "span", 16);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "img", 17);
        \u0275\u0275listener("click", function FuseListComponent_Template_img_click_9_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(10, "div", 18)(11, "div", 19)(12, "div", 20)(13, "mat-expansion-panel", 21, 0)(15, "mat-expansion-panel-header")(16, "p", 22);
        \u0275\u0275text(17);
        \u0275\u0275template(18, FuseListComponent_img_18_Template, 1, 0, "img", 23);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(19, "div", 24)(20, "span", 25)(21, "img", 26);
        \u0275\u0275listener("click", function FuseListComponent_Template_img_click_21_listener() {
          \u0275\u0275restoreView(_r1);
          const mep_r4 = \u0275\u0275reference(14);
          return \u0275\u0275resetView(mep_r4.expanded = !mep_r4.expanded);
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(22, "mat-card")(23, "div", 27)(24, "div", 28);
        \u0275\u0275template(25, FuseListComponent_span_25_Template, 2, 1, "span", 29)(26, FuseListComponent_span_26_Template, 2, 1, "span", 30);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(27, "div", 31);
        \u0275\u0275template(28, FuseListComponent_span_28_Template, 3, 2, "span", 29)(29, FuseListComponent_span_29_Template, 3, 2, "span", 32)(30, FuseListComponent_span_30_Template, 3, 2, "span", 32)(31, FuseListComponent_span_31_Template, 3, 2, "span", 32)(32, FuseListComponent_span_32_Template, 3, 2, "span", 32)(33, FuseListComponent_span_33_Template, 2, 1, "span", 32);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(34, "div", 31);
        \u0275\u0275template(35, FuseListComponent_span_35_Template, 2, 1, "span", 29)(36, FuseListComponent_span_36_Template, 2, 1, "span", 32);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(37, "div", 33)(38, "form", 34, 1);
        \u0275\u0275listener("submit", function FuseListComponent_Template_form_submit_38_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.updateUserProfile());
        });
        \u0275\u0275elementStart(40, "div", 35)(41, "div", 36)(42, "div", 37)(43, "div", 38)(44, "label");
        \u0275\u0275text(45);
        \u0275\u0275elementStart(46, "sup");
        \u0275\u0275text(47, " *");
        \u0275\u0275elementEnd();
        \u0275\u0275text(48, " :");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(49, "div", 39)(50, "mat-form-field", 40);
        \u0275\u0275element(51, "input", 41);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(52, "div", 36)(53, "div", 37)(54, "div", 42)(55, "label");
        \u0275\u0275text(56);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(57, "div", 39)(58, "mat-form-field", 40);
        \u0275\u0275element(59, "input", 43);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(60, "div", 44)(61, "div", 37)(62, "div", 38)(63, "label");
        \u0275\u0275text(64);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(65, "div", 39)(66, "mat-form-field", 45);
        \u0275\u0275element(67, "p", 46);
        \u0275\u0275elementStart(68, "div", 47)(69, "input", 48);
        \u0275\u0275listener("keyup", function FuseListComponent_Template_input_keyup_69_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.validateBusinessPhoneNo());
        });
        \u0275\u0275elementEnd()()()()()()();
        \u0275\u0275elementStart(70, "div", 35)(71, "div", 36)(72, "div", 37)(73, "div", 38)(74, "label");
        \u0275\u0275text(75);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(76, "div", 39)(77, "mat-form-field", 40);
        \u0275\u0275element(78, "input", 49);
        \u0275\u0275elementEnd();
        \u0275\u0275template(79, FuseListComponent_mat_error_79_Template, 2, 1, "mat-error", 29);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(80, "div", 36)(81, "div", 37)(82, "div", 38)(83, "label");
        \u0275\u0275text(84);
        \u0275\u0275elementStart(85, "sup");
        \u0275\u0275text(86, " *");
        \u0275\u0275elementEnd();
        \u0275\u0275text(87, " :");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(88, "div", 39)(89, "mat-form-field", 40);
        \u0275\u0275element(90, "input", 50);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(91, "div", 36)(92, "div", 37)(93, "div", 38)(94, "label");
        \u0275\u0275text(95);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(96, "div", 51)(97, "mat-form-field", 40);
        \u0275\u0275element(98, "input", 52);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(99, "div", 35);
        \u0275\u0275template(100, FuseListComponent_div_100_Template, 11, 2, "div", 53)(101, FuseListComponent_ng_container_101_Template, 12, 3, "ng-container", 29);
        \u0275\u0275elementStart(102, "div", 54)(103, "div", 37)(104, "div", 38)(105, "label");
        \u0275\u0275text(106);
        \u0275\u0275elementStart(107, "sup");
        \u0275\u0275text(108, " *");
        \u0275\u0275elementEnd();
        \u0275\u0275text(109, " :");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(110, "div", 51)(111, "mat-form-field", 40);
        \u0275\u0275element(112, "input", 55);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(113, "div", 56)(114, "div", 37)(115, "div", 38)(116, "label");
        \u0275\u0275text(117);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(118, "div", 39);
        \u0275\u0275text(119);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(120, "div", 57)(121, "button", 58);
        \u0275\u0275listener("click", function FuseListComponent_Template_button_click_121_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.cancelEditProfile());
        });
        \u0275\u0275text(122);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(123, "button", 59);
        \u0275\u0275text(124);
        \u0275\u0275elementEnd()()()()()()();
        \u0275\u0275elementStart(125, "div", 60)(126, "mat-expansion-panel", 21, 2)(128, "mat-expansion-panel-header")(129, "p", 22);
        \u0275\u0275text(130);
        \u0275\u0275template(131, FuseListComponent_img_131_Template, 1, 0, "img", 23);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(132, "div", 61)(133, "span", 25)(134, "img", 26);
        \u0275\u0275listener("click", function FuseListComponent_Template_img_click_134_listener() {
          \u0275\u0275restoreView(_r1);
          const mep1_r7 = \u0275\u0275reference(127);
          return \u0275\u0275resetView(mep1_r7.expanded = !mep1_r7.expanded);
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(135, "span");
        \u0275\u0275template(136, FuseListComponent_button_136_Template, 2, 1, "button", 62);
        \u0275\u0275elementEnd();
        \u0275\u0275template(137, FuseListComponent_ng_container_137_Template, 8, 2, "ng-container", 29);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(138, FuseListComponent_div_138_Template, 19, 8, "div", 63);
        \u0275\u0275elementStart(139, "div", 64)(140, "mat-drawer-container", 65)(141, "mat-drawer", 66, 3)(143, "mat-card", 67)(144, "form", 68, 1)(146, "div", 69)(147, "div", 70)(148, "span", 71);
        \u0275\u0275text(149);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(150, "span")(151, "img", 72);
        \u0275\u0275listener("click", function FuseListComponent_Template_img_click_151_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r14 = \u0275\u0275reference(142);
          return \u0275\u0275resetView(drawer_r14.close());
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(152, "div", 73)(153, "div", 74);
        \u0275\u0275text(154);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(155, "div", 75)(156, "mat-form-field", 76);
        \u0275\u0275element(157, "input", 77);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(158, "div", 78)(159, "mat-form-field", 76);
        \u0275\u0275element(160, "input", 79);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(161, "div", 80)(162, "button", 81);
        \u0275\u0275listener("click", function FuseListComponent_Template_button_click_162_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r14 = \u0275\u0275reference(142);
          return \u0275\u0275resetView(ctx.addUpdateFuse(drawer_r14));
        });
        \u0275\u0275text(163);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(164, "mat-expansion-panel", 82, 4)(166, "mat-expansion-panel-header")(167, "p", 22);
        \u0275\u0275text(168);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(169, "div", 83)(170, "span", 25)(171, "img", 26);
        \u0275\u0275listener("click", function FuseListComponent_Template_img_click_171_listener() {
          \u0275\u0275restoreView(_r1);
          const mep3_r15 = \u0275\u0275reference(165);
          return \u0275\u0275resetView(mep3_r15.expanded = !mep3_r15.expanded);
        });
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(172, "div", 84);
        \u0275\u0275template(173, FuseListComponent_span_173_Template, 3, 1, "span", 85);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(174, "div", 86)(175, "table", 87);
        \u0275\u0275elementContainerStart(176, 88);
        \u0275\u0275template(177, FuseListComponent_th_177_Template, 2, 1, "th", 89)(178, FuseListComponent_td_178_Template, 4, 2, "td", 90);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(179, 91);
        \u0275\u0275template(180, FuseListComponent_th_180_Template, 2, 1, "th", 89)(181, FuseListComponent_td_181_Template, 4, 2, "td", 90);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(182, 92);
        \u0275\u0275template(183, FuseListComponent_th_183_Template, 2, 1, "th", 89)(184, FuseListComponent_td_184_Template, 4, 2, "td", 90);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(185, 93);
        \u0275\u0275template(186, FuseListComponent_th_186_Template, 2, 1, "th", 94)(187, FuseListComponent_td_187_Template, 4, 2, "td", 95);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(188, FuseListComponent_tr_188_Template, 1, 0, "tr", 96)(189, FuseListComponent_tr_189_Template, 1, 0, "tr", 97);
        \u0275\u0275elementEnd();
        \u0275\u0275template(190, FuseListComponent_tbody_190_Template, 4, 1, "tbody", 98);
        \u0275\u0275element(191, "mat-paginator", 99);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275template(192, FuseListComponent_div_192_Template, 2, 0, "div", 100);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(193, FuseListComponent_ng_template_193_Template, 23, 18, "ng-template", 101, 5, \u0275\u0275templateRefExtractor)(195, FuseListComponent_ng_template_195_Template, 13, 8, "ng-template", 101, 6, \u0275\u0275templateRefExtractor)(197, FuseListComponent_ng_template_197_Template, 10, 3, "ng-template", 101, 7, \u0275\u0275templateRefExtractor)(199, FuseListComponent_ng_template_199_Template, 12, 4, "ng-template", 101, 8, \u0275\u0275templateRefExtractor)(201, FuseListComponent_ng_template_201_Template, 11, 3, "ng-template", 101, 9, \u0275\u0275templateRefExtractor)(203, FuseListComponent_ng_template_203_Template, 17, 8, "ng-template", 101, 10, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const mep_r4 = \u0275\u0275reference(14);
        const mep1_r7 = \u0275\u0275reference(127);
        const drawer_r14 = \u0275\u0275reference(142);
        const mep3_r15 = \u0275\u0275reference(165);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.dsFuseManagementScreen.ClinicManagement);
        \u0275\u0275advance();
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.BusinessDetails, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isProfileEditable);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(65, _c72, mep_r4.expanded == true));
        \u0275\u0275advance(3);
        \u0275\u0275property("hidden", ctx.isProfileEditable);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.dsUserPreference.BusinessName);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.ZoetisAccountNumber);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.dsUserPreference.AddressLine1);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.AddressLine2);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.City && ctx.changeStateTxt);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.State && ctx.hideState);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.ZipCode);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.CountryId);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.dsUserPreference.BusinessPhoneNo);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserPreference.ContactEmail);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", !ctx.isProfileEditable);
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.profileForm)("ngClass", \u0275\u0275pureFunction1(67, _c8, !ctx.isProfileEditable));
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.BusinessName);
        \u0275\u0275advance(6);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserProfileScreen.EnterBusinessName);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.ZoetisAccountNo, " :");
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserProfileScreen.EnterZoetisNumber);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", !ctx.isUserTypeBusiness);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.BusinessPhoneNo, " :");
        \u0275\u0275advance(3);
        \u0275\u0275property("hidden", ctx.isProfileEditable && ctx.dsUserProfile.BusinessPhoneNo);
        \u0275\u0275advance();
        \u0275\u0275property("hidden", !(ctx.dsUserProfile.BusinessPhoneNo || ctx.isProfileEditable));
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.ContactEmail, " :");
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserProfileScreen.EnterEmail);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.profileForm.get("ContactEmail").hasError("pattern"));
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.AddressLine1);
        \u0275\u0275advance(6);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserProfileScreen.EnterAddressLine1);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.AddressLine2, " :");
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.isProfileEditable ? ctx.labelService.dsUserProfileScreen.EnterAddressLine2 : "");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.changeStateTxt && ctx.hideCity);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.hideState);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.ZipCode);
        \u0275\u0275advance(6);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserProfileScreen.EnterZipCode);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.Country, " :");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.getCountryName(ctx.dsUserPreference.CountryId), " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserProfileScreen.Cancel, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserProfileScreen.Save, " ");
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsFuseManagementScreen.ClinicLogo, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isEdit);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(69, _c72, mep1_r7.expanded == true));
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !ctx.isEdit);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isEdit);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.refLabService.insideUSCAuser);
        \u0275\u0275advance(6);
        \u0275\u0275property("formGroup", ctx.addFuseForm);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsFuseManagementScreen.AddFuse);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.msg, " ");
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsFuseManagementScreen.EnterFuseSerialNo);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.labelService.dsFuseManagementScreen.EnterPin);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsFuseManagementScreen.Add, " ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsFuseManagementScreen.FuseManagement);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(71, _c72, mep3_r15.expanded == true));
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !drawer_r14.opened);
        \u0275\u0275advance(2);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(13);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource === null || ctx.dataSource.data.length === 0);
        \u0275\u0275advance();
        \u0275\u0275property("pageSize", 10)("hidePageSize", true);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isClinicAdmin);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyError, MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatLegacyCard, MatLegacySelect, MatLegacyOption, MatCalendar, MatExpansionPanel, MatExpansionPanelHeader, MatDrawer, MatDrawerContainer, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyPaginator, MatLegacyTooltip, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, FormGroupDirective, FormControlName, DndDirective, PimsManagementComponent], styles: ['\n\n.mat-card[_ngcontent-%COMP%] {\n  border-radius: 10px;\n  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.1);\n  height: 100%;\n}\n.headingone[_ngcontent-%COMP%] {\n  height: 26px;\n  margin-left: -23px !important;\n}\n.headingone[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 22px;\n}\n.headingtwo[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 22px;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.fuse-label[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 13px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.fuse-text[_ngcontent-%COMP%] {\n  font-family: "gothamlight", sans-serif;\n  font-weight: bold;\n  color: #000;\n  font-size: 13px;\n  opacity: 0.5;\n}\n.example-container[_ngcontent-%COMP%] {\n  width: 100%;\n  background-color: transparent;\n}\n.example-sidenav-content[_ngcontent-%COMP%] {\n  background: #fff;\n  height: 100%;\n  border-radius: 10px 10px 0 0 !important;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 10px;\n}\n.mat-drawer.mat-drawer-end[_ngcontent-%COMP%] {\n  width: 290px;\n  background: transparent;\n  border: none;\n  padding-top: 0;\n  padding-right: 0;\n  padding-bottom: 0;\n}\n#fuse-side[_ngcontent-%COMP%] {\n  box-shadow: none;\n  background: transparent;\n  height: 100%;\n}\n#fuse-side[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.addfuse[_ngcontent-%COMP%] {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.addfuse1[_ngcontent-%COMP%]:disabled {\n  background-color: #ff944c !important;\n}\n.addfuseDiff[_ngcontent-%COMP%] {\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n  position: absolute;\n  right: 20px;\n  top: 15px;\n}\n.cardheader[_ngcontent-%COMP%] {\n  background: #fff;\n}\n.mat-drawer-content[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  height: calc(100vh - 290px);\n}\n.fuse-container[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.addfuse1[_ngcontent-%COMP%] {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 250px;\n  width: 250px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.fusmang[_ngcontent-%COMP%] {\n  border-radius: 10px 10px 0 0 !important;\n  padding: 0;\n}\n  .portal-outer {\n  height: calc(100vh - 200px);\n}\n.fuse-outer[_ngcontent-%COMP%] {\n  height: calc(100vh - 485px);\n  overflow: auto;\n  padding-top: 0 !important;\n  margin-top: 25px;\n}\n.pad[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.save-change[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  min-width: 125px;\n}\n.cancel-btn[_ngcontent-%COMP%] {\n  background-color: #9e9e9e;\n  min-width: 125px;\n}\n.fuse-label1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.msg[_ngcontent-%COMP%] {\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.save-change.del_btn[_ngcontent-%COMP%] {\n  background-color: #1072ce !important;\n}\n.fuse-block[_ngcontent-%COMP%] {\n  width: 25%;\n  margin-top: 25px;\n}\n.fuse-text[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.xct[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  font-size: 13px;\n  color: #000;\n  font-weight: 700;\n}\n.xct[_ngcontent-%COMP%]   .span_font[_ngcontent-%COMP%] {\n  font-size: 13px;\n  color: #000;\n  opacity: 0.5;\n}\n.fuselist[_ngcontent-%COMP%] {\n  padding: 20px 58px 20px 20px !important;\n  height: calc(100vh - 250px);\n  overflow-y: auto;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  .textup[_ngcontent-%COMP%] {\n    padding-top: 2px;\n  }\n  .mat-form-field[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .fuse-block[_ngcontent-%COMP%] {\n    margin-top: 8px;\n  }\n    .mat-drawer-inner-container {\n    height: 97% !important;\n    overflow: hidden !important;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    margin-bottom: 45px;\n  }\n  .addfuseDiff[_ngcontent-%COMP%] {\n    right: 35%;\n    bottom: 15px;\n    top: initial;\n  }\n  .editadd[_ngcontent-%COMP%] {\n    right: 2% !important;\n    bottom: 15px;\n    top: initial !important;\n  }\n  p.panel-header-text[_ngcontent-%COMP%] {\n    width: 100% !important;\n    margin-top: 5px;\n  }\n  .addcon[_ngcontent-%COMP%] {\n    top: 10px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background: #fff;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none !important;\n    margin-left: 25%;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    border-bottom: none !important;\n    padding-left: 0;\n    text-align: center !important;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: 1px solid #ccc;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 7px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    -webkit-box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n    -moz-box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n    box-shadow: 0px 0px 16px -1px rgba(217, 217, 217, 1);\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n    .fuse-outer.fuse-part table thead {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    word-break: break-all;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .pad[_ngcontent-%COMP%] {\n    padding-bottom: 0px;\n    flex-direction: row !important;\n  }\n  .pad[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%] {\n    width: 35%;\n    text-align: left !important;\n  }\n  .pad[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 65%;\n  }\n  .fusepart[_ngcontent-%COMP%] {\n    flex-wrap: wrap;\n  }\n  .fusepart[_ngcontent-%COMP%]   .fuse-block[_ngcontent-%COMP%] {\n    flex-direction: row !important;\n    justify-content: space-between;\n  }\n  .cancel-btn[_ngcontent-%COMP%] {\n    min-width: 0;\n    padding: 10px 20px;\n    line-height: 14px !important;\n    margin-bottom: 15px;\n  }\n  .modal-footer[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n  }\n  .save-change[_ngcontent-%COMP%] {\n    min-width: 0;\n    padding: 10px 3px;\n    line-height: 14px !important;\n    margin-bottom: 15px;\n  }\n  #status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n    margin: 0 4.5rem;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:before {\n    left: -4.5rem;\n  }\n  .addfuse[_ngcontent-%COMP%] {\n    padding: 10px 16px !important;\n    height: auto !important;\n    line-height: 14px !important;\n  }\n  .updateBtn[_ngcontent-%COMP%]   .save-change[_ngcontent-%COMP%] {\n    padding: 6px 12px !important;\n  }\n  .fuselist[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .portal-outer[_ngcontent-%COMP%] {\n    padding: 0 20px;\n  }\n  .title-container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 100%;\n    display: block;\n    border-radius: 0;\n    border-top: 2px solid #ccc;\n    border-bottom: 2px solid #ccc;\n    font-size: 17px;\n  }\n  .heading.Hbtn[_ngcontent-%COMP%] {\n    margin-left: 0 !important;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0 0 20px;\n  }\n  .fuse-outer[_ngcontent-%COMP%] {\n    overflow: auto !important;\n    height: calc(100vh - 350px);\n    padding: 10px 4px;\n  }\n    .modal-dialog {\n    padding: 0 10px;\n  }\n  .logo_container[_ngcontent-%COMP%], \n   .edit-logo[_ngcontent-%COMP%] {\n    width: 100% !important;\n    height: 200px !important;\n  }\n  .log-head[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n  }\n  .frlog[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    margin-top: 0 !important;\n    width: 100%;\n  }\n  .contpart[_ngcontent-%COMP%] {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 12px 5px;\n  }\n  .contpart[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2) {\n    text-align: center !important;\n  }\n  .errorcon[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .errorcard[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n  }\n  .errorcard[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .filepart[_ngcontent-%COMP%] {\n    height: 160px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .dumimg[_ngcontent-%COMP%] {\n    width: 100% !important;\n    height: auto !important;\n  }\n  .fuselist[_ngcontent-%COMP%]   .ques-icon[_ngcontent-%COMP%]   .qicon[_ngcontent-%COMP%] {\n    bottom: 18px;\n  }\n}\n@media screen and (max-width: 374px) {\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 43% !important;\n    font-size: 12px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 10px;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 440px) {\n  table.mat-table[_ngcontent-%COMP%] {\n    min-width: 295px;\n  }\n  .fuse-outer[_ngcontent-%COMP%] {\n    overflow: auto !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .fuse-block[_ngcontent-%COMP%] {\n    width: 46%;\n    margin-top: 15px;\n  }\n}\np.panel-header-text[_ngcontent-%COMP%] {\n  font-weight: bold;\n  border-bottom: 2px solid #0000005c;\n  width: 100%;\n  padding-bottom: 6px;\n}\n.textBoxToText[_ngcontent-%COMP%] {\n  border: none;\n  display: inline;\n  font-family: inherit;\n  font-size: inherit;\n  padding: none;\n  width: auto;\n}\n  .mat-form-field-appearance-outline .mat-form-field-flex {\n  padding: 0 0.5em 0 0.4em !important;\n}\n  .mat-form-field-appearance-outline .mat-form-field-infix {\n  padding: 2px 0px 8px 0 !important;\n}\n#inputFile[_ngcontent-%COMP%] {\n  opacity: 0;\n  z-index: 2;\n  width: 100%;\n  position: absolute;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.container[_ngcontent-%COMP%] {\n  width: 450px;\n  height: 160px;\n  text-align: center;\n  border: dashed 2px #03a9f4 !important;\n  border-radius: 10px;\n  background: #fafcfe !important;\n  position: relative;\n  margin: 0 auto;\n}\n.logo_container[_ngcontent-%COMP%] {\n  width: 350px;\n  height: 150px;\n  text-align: center;\n  border: 2px solid #0000005c;\n  position: relative;\n  margin: 0 auto;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px;\n}\n.clinicBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  height: 34px;\n  padding: 0px 30px;\n  border-radius: 6px;\n  border: 1px solid #ff6400;\n}\n.updateBtn.modalupdate[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0 35px;\n  border: 2px solid #4c4a4a;\n  background: transparent;\n  color: #000;\n  font-weight: 700;\n}\n.enUpdateBtn.modalupdate[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0 35px;\n  border: 1px solid #ff6400 !important;\n  background: #ff6400 !important;\n  color: #fff !important;\n  font-weight: 700 !important;\n}\n.log-head[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  font-weight: 700;\n  padding: 15px 15px 0 15px;\n}\n.replaceBtn[_ngcontent-%COMP%] {\n  background: #ff6400 !important;\n  color: #fff !important;\n  border: 1px solid #ff6400 !important;\n}\n.edit-logo[_ngcontent-%COMP%] {\n  border: dashed 2px #03a9f4 !important;\n  border-radius: 10px;\n}\n.errorcon[_ngcontent-%COMP%] {\n  width: 450px;\n  margin: 0 auto;\n}\n.errorcard[_ngcontent-%COMP%] {\n  background: #fcf4f2;\n  border: 1px solid #f9c9bf !important;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-left: 7px solid #bf2e23 !important;\n}\n.errorcard[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  color: #bf2e23;\n  padding-left: 15px;\n  font-weight: 600;\n}\n.error-logo[_ngcontent-%COMP%] {\n  width: 450px;\n  height: 160px;\n  text-align: center;\n  border: dashed 2px #bf2e23 !important;\n  border-radius: 10px;\n  background: #fcf4f2 !important;\n  position: relative;\n  margin: 0 auto;\n}\n.ptext[_ngcontent-%COMP%] {\n  font-weight: 600;\n  font-size: 16px;\n}\n.btnadd[_ngcontent-%COMP%] {\n  width: 100px;\n}\n.btndel[_ngcontent-%COMP%] {\n  width: 100px;\n  background: transparent;\n}\n.checkImg[_ngcontent-%COMP%] {\n  width: 225px !important;\n  height: 225px !important;\n}\n  .fusemat .mat-select-arrow-wrapper {\n  right: 0;\n}\n.profile-edit.editpart[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n  width: 95%;\n  word-break: break-word;\n}\n.ques-icon[_ngcontent-%COMP%] {\n  position: relative;\n}\n.ques-icon[_ngcontent-%COMP%]   .qicon[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 0;\n  right: 12px;\n  cursor: pointer;\n}\n  .calenderCls .modal-content {\n  min-width: 50% !important;\n  max-width: 70% !important;\n}\n  .mat-calendar-body-cell-content {\n  border: none !important;\n  border-radius: 5px !important;\n}\n  .mat-calendar-body-today.mat-calendar-body-selected {\n  background: #ff6400;\n}\n  .mat-calendar-body-cell-content.mat-focus-indicator.mat-calendar-body-selected {\n  background: #ff6400;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: right;\n  padding-right: 0;\n  justify-content: flex-end;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-left: 35px;\n}\n.toggle-accordion-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: none !important;\n}\n.updropdwn[_ngcontent-%COMP%] {\n  transform: rotate(-180deg) !important;\n}\n  .mat-expansion-panel-header {\n  color: rgba(0, 0, 0, 0.87) !important;\n}\n.btncheck[_ngcontent-%COMP%] {\n  right: -37%;\n}\n.increases[_ngcontent-%COMP%] {\n  height: 28px !important;\n}\n/*# sourceMappingURL=fuse-list.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FuseListComponent, { className: "FuseListComponent", filePath: "src\\app\\components\\fuse-managements\\fuse-list\\fuse-list.component.ts", lineNumber: 51 });
})();

// src/app/components/settings/settings.component.ts
var SettingsComponent = class _SettingsComponent {
  constructor() {
    this.panelOpenState = false;
  }
  static {
    this.\u0275fac = function SettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SettingsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SettingsComponent, selectors: [["app-settings"]], decls: 174, vars: 0, consts: [[1, "wrapper"], ["id", "content"], [1, "outer"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["id", "profile"], [1, "d-flex", "flex-wrap", "view-mode"], [1, "col"], ["appearance", "outline", "floatLabel", "always"], ["value", "All"], ["type", "text", "matInput", "", "value", "Manoj Raghav"], ["type", "text", "matInput", ""], [1, "d-flex", "mt-4", "justify-content-center", "mt-4"], ["mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn"], ["mat-raised-button", "", "color", "warn"], [1, "d-flex"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input"], ["for", "", 1, "mb-0"], [1, "col", "d-flex"], ["role", "alert", 1, "alert", "alert-dark", "alert-dismissible", "fade", "show"], ["src", "../../../assets/img/cancel-button@2x.png", "alt", "cancel-button", "data-dismiss", "alert", "aria-label", "Close"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input", "pl-5"], ["id", "status-toggle"], ["type", "button", "data-toggle", "button", "aria-pressed", "false", "autocomplete", "off", 1, "btn", "btn-toggle"], [1, "handle"]], template: function SettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "div", 4)(8, "div")(9, "mat-accordion")(10, "mat-expansion-panel", 5)(11, "mat-expansion-panel-header")(12, "mat-panel-title");
        \u0275\u0275text(13, " Profile ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "div", 6)(15, "div", 7)(16, "label");
        \u0275\u0275text(17, "Title :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "mat-form-field", 8)(19, "mat-select")(20, "mat-option", 9);
        \u0275\u0275text(21, "MR");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(22, "mat-option");
        \u0275\u0275text(23, " MISS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "mat-option");
        \u0275\u0275text(25, " adasd ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(26, "mat-option");
        \u0275\u0275text(27, " adasd ");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(28, "div", 7)(29, "label");
        \u0275\u0275text(30, "First Name :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "mat-form-field", 8);
        \u0275\u0275element(32, "input", 10);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(33, "div", 7)(34, "label");
        \u0275\u0275text(35, "Last Name :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "mat-form-field", 8);
        \u0275\u0275element(37, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(38, "div", 7)(39, "label");
        \u0275\u0275text(40, "Suffix:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(41, "mat-form-field", 8)(42, "mat-select")(43, "mat-option", 9);
        \u0275\u0275text(44, "MR");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(45, "mat-option");
        \u0275\u0275text(46, " MISS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(47, "mat-option");
        \u0275\u0275text(48, " adasd ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(49, "mat-option");
        \u0275\u0275text(50, " adasd ");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(51, "div", 7)(52, "label");
        \u0275\u0275text(53, "Email :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(54, "mat-form-field", 8);
        \u0275\u0275element(55, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(56, "div", 7)(57, "label");
        \u0275\u0275text(58, "Phone No. :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(59, "mat-form-field", 8);
        \u0275\u0275element(60, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(61, "div", 7)(62, "label");
        \u0275\u0275text(63, "Country :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(64, "mat-form-field", 8)(65, "mat-select")(66, "mat-option", 9);
        \u0275\u0275text(67, "MR");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(68, "mat-option");
        \u0275\u0275text(69, " MISS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(70, "mat-option");
        \u0275\u0275text(71, " adasd ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(72, "mat-option");
        \u0275\u0275text(73, " adasd ");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(74, "div", 7)(75, "label");
        \u0275\u0275text(76, "Business Name:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(77, "mat-form-field", 8);
        \u0275\u0275element(78, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(79, "div", 7)(80, "label");
        \u0275\u0275text(81, "Address Line 1 :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(82, "mat-form-field", 8);
        \u0275\u0275element(83, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(84, "div", 7)(85, "label");
        \u0275\u0275text(86, "Address Line 2 :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(87, "mat-form-field", 8);
        \u0275\u0275element(88, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(89, "div", 7)(90, "label");
        \u0275\u0275text(91, "City :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(92, "mat-form-field", 8);
        \u0275\u0275element(93, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(94, "div", 7)(95, "label");
        \u0275\u0275text(96, "State :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(97, "mat-form-field", 8)(98, "mat-select")(99, "mat-option", 9);
        \u0275\u0275text(100, "MR");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(101, "mat-option");
        \u0275\u0275text(102, " MISS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(103, "mat-option");
        \u0275\u0275text(104, " adasd ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(105, "mat-option");
        \u0275\u0275text(106, " adasd ");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(107, "div", 7)(108, "label");
        \u0275\u0275text(109, "Zip Code :");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(110, "mat-form-field", 8);
        \u0275\u0275element(111, "input", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(112, "div", 7);
        \u0275\u0275text(113, " \xA0 ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(114, "div", 7);
        \u0275\u0275text(115, " \xA0 ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(116, "div", 12)(117, "button", 13);
        \u0275\u0275text(118, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(119, "button", 14);
        \u0275\u0275text(120, "Save");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(121, "mat-expansion-panel")(122, "mat-expansion-panel-header")(123, "mat-panel-title");
        \u0275\u0275text(124, " Security ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(125, "div", 15)(126, "div", 7)(127, "div", 16)(128, "label", 17);
        \u0275\u0275text(129, "Reset Password");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(130, "mat-form-field", 8);
        \u0275\u0275element(131, "input", 11);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(132, "button", 14);
        \u0275\u0275text(133, "Send");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(134, "div", 18);
        \u0275\u0275text(135, " \xA0 ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(136, "div", 15)(137, "div", 7)(138, "div", 19);
        \u0275\u0275text(139, " You should check in on some of those fields below. ");
        \u0275\u0275element(140, "img", 20);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(141, "mat-expansion-panel")(142, "mat-expansion-panel-header")(143, "mat-panel-title");
        \u0275\u0275text(144, " Preferences ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(145, "div", 15)(146, "div", 7)(147, "div", 16)(148, "label", 17);
        \u0275\u0275text(149, "Language");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(150, "mat-form-field", 8)(151, "mat-select")(152, "mat-option", 9);
        \u0275\u0275text(153, "MR");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(154, "mat-option");
        \u0275\u0275text(155, " MISS");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(156, "mat-option");
        \u0275\u0275text(157, " adasd ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(158, "mat-option");
        \u0275\u0275text(159, " adasd ");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(160, "button", 14);
        \u0275\u0275text(161, "Send");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(162, "div", 18)(163, "div", 21)(164, "label", 17);
        \u0275\u0275text(165, "Notifications:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(166, "div", 22)(167, "button", 23);
        \u0275\u0275element(168, "div", 24);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(169, "div", 12)(170, "button", 13);
        \u0275\u0275text(171, "Cancel");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(172, "button", 14);
        \u0275\u0275text(173, "Save");
        \u0275\u0275elementEnd()()()()()()()()()();
      }
    }, dependencies: [MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, HeaderComponent, SideMenuComponent], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-bottom: 0;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  min-width: 116px;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: "off" !important;\n  left: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: "On" !important;\n  right: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n  margin: 0 1.5rem !important;\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 65% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n/*# sourceMappingURL=settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SettingsComponent, { className: "SettingsComponent", filePath: "src\\app\\components\\settings\\settings.component.ts", lineNumber: 8 });
})();

// src/app/components/user-managements/user-support/user-support.component.ts
var _c010 = ["formGroupDirective"];
var UserSupportComponent = class _UserSupportComponent {
  constructor(labelService, formBuilder, userService, headerService, confirmationDialogService) {
    this.labelService = labelService;
    this.formBuilder = formBuilder;
    this.userService = userService;
    this.headerService = headerService;
    this.confirmationDialogService = confirmationDialogService;
    this.dsUserSupprtInfo = new UserDetails();
    this.helpLineNumber = "";
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindUserSupportLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindUserSupportLabel();
    });
  }
  ngOnInit() {
    this.dsUserSupprtInfo = new UserDetails();
    this.supportForm = this.createFormGroup(new UserDetails());
    this.getUserSupportDetails();
  }
  getUserSupportDetails() {
    this.userService.getUserSettingDetails(this.headerService.loginUserGuid, localStorage.businessGuid).subscribe({ next: (data) => {
      this.dsUserSupprtInfo = data.ResponseData;
      this.helpLineNumber = data.ResponseData.HelpLineNumber;
      this.supportForm = this.createFormGroup(this.dsUserSupprtInfo);
    }, error: () => {
      this.dsUserSupprtInfo = null;
    } });
  }
  reset() {
    this.dsUserSupprtInfo.ProblemDesc = null;
    this.formGroupDirective.resetForm();
    this.supportForm = this.createFormGroup(this.dsUserSupprtInfo);
  }
  clearProblemDesc() {
    this.supportForm.get("ProblemDesc").setValidators([Validators.maxLength(500)]);
    this.supportForm.controls["ProblemDesc"].setValue(null);
  }
  onFocusProblemDesc() {
    this.supportForm.get("ProblemDesc").setValidators([Validators.required, Validators.maxLength(500)]);
  }
  onFocusOutProblemDesc() {
    if (this.supportForm.controls["ProblemDesc"].value == null || this.supportForm.controls["ProblemDesc"].value == "")
      this.supportForm.get("ProblemDesc").setErrors({ required: true });
  }
  submitUserSupport() {
    if (this.supportForm.controls["ProblemDesc"].value != null && this.supportForm.controls["ProblemDesc"].value != "") {
      if (this.supportForm.status == "VALID") {
        this.dsUserSupprtInfo.ProblemDesc = this.supportForm.controls["ProblemDesc"].value;
        this.dsUserSupprtInfo["LanguageId"] = this.labelService.selectedLanguage;
        this.userService.submitUserSupport(this.dsUserSupprtInfo).subscribe({ next: () => {
          this.reset();
          this.showMsg(this.labelService.dsUserSupportScreen.SubmittedSuccessfully);
        }, error: () => {
          this.showMsg(this.labelService.dsUserSupportScreen.Error);
        } });
      }
    } else {
      this.supportForm.get("ProblemDesc").setErrors({ required: true });
    }
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserSupportScreen.OK, this.labelService.dsUserSupportScreen.Cancel, "sm", true, false);
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "Name": dataItem.FirstName + " " + dataItem.LastName,
      "Email": dataItem.Email,
      "ProblemDesc": [dataItem.ProblemDesc, Validators.compose([Validators.required, Validators.maxLength(500)])]
    });
  }
  static {
    this.\u0275fac = function UserSupportComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _UserSupportComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(ConfirmationDialogService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UserSupportComponent, selectors: [["app-user-support"]], viewQuery: function UserSupportComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c010, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, decls: 51, vars: 11, consts: [["formGroupDirective", "ngForm"], [1, "wrapper"], ["id", "content"], [1, "outer"], ["id", "support", 1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["multi", ""], ["expanded", "", "hideToggle", "true", "disabled", ""], ["data-testid", "cu-title"], [1, "d-flex", "mt-2", "prdct-desc", "col-sm-12"], [1, "col", "p-0", "pl-1"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input", "c-input"], ["for", "", 1, "mb-0", "s-label"], ["autocomplete", "off", 3, "formGroup"], [1, "d-flex", "col-sm-12"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input", "email-block"], ["for", "", 1, "mb-0"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "formControlName", "Name", "readonly", ""], [1, "col", "p-0"], ["for", "", 1, "mb-0", "text-center"], ["type", "text", "matInput", "", "formControlName", "Email", "readonly", ""], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input"], ["matInput", "", "formControlName", "ProblemDesc", "required", "", "maxlength", "500", 3, "focus", "focusout", "placeholder"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4", "col-sm-12"], ["mat-raised-button", "", "color", "warn", "routerLink", "/dashboard", 1, "mr-2", "cncl-btn"], ["mat-raised-button", "", "color", "warn", 3, "click"]], template: function UserSupportComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "div", 4)(7, "div", 5)(8, "div")(9, "mat-accordion", 6)(10, "mat-expansion-panel", 7)(11, "mat-expansion-panel-header")(12, "mat-panel-title", 8);
        \u0275\u0275text(13);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "div", 9)(15, "div", 10)(16, "div", 11)(17, "label", 12);
        \u0275\u0275text(18);
        \u0275\u0275elementEnd();
        \u0275\u0275text(19);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(20, "mat-expansion-panel", 7)(21, "mat-expansion-panel-header")(22, "mat-panel-title");
        \u0275\u0275text(23);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(24, "form", 13, 0)(26, "div", 14)(27, "div", 10)(28, "div", 15)(29, "label", 16);
        \u0275\u0275text(30);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "mat-form-field", 17);
        \u0275\u0275element(32, "input", 18);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(33, "div", 19)(34, "div", 15)(35, "label", 20);
        \u0275\u0275text(36);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(37, "mat-form-field", 17);
        \u0275\u0275element(38, "input", 21);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(39, "div", 9)(40, "div", 10)(41, "div", 22)(42, "label", 16);
        \u0275\u0275text(43);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(44, "mat-form-field", 17)(45, "textarea", 23);
        \u0275\u0275listener("focus", function UserSupportComponent_Template_textarea_focus_45_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFocusProblemDesc());
        })("focusout", function UserSupportComponent_Template_textarea_focusout_45_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFocusOutProblemDesc());
        });
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(46, "div", 24)(47, "button", 25);
        \u0275\u0275text(48);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(49, "button", 26);
        \u0275\u0275listener("click", function UserSupportComponent_Template_button_click_49_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.submitUserSupport());
        });
        \u0275\u0275text(50);
        \u0275\u0275elementEnd()()()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(13);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserSupportScreen.CallUs, " ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.HelplineNo);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" \xA0 ", ctx.helpLineNumber, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserSupportScreen.ContactUs, " ");
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.supportForm);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.Name);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.Email);
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.ProblemDescription);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsUserSupportScreen.EnterProblemDescription);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.Cancel);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserSupportScreen.Submit);
      }
    }, dependencies: [RouterLink, MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, FormGroupDirective, FormControlName], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-bottom: 0;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  min-width: 164px;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: "off" !important;\n  left: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: "On" !important;\n  right: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n  margin: 0 1.5rem !important;\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n  height: 90px;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 92% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-end[_ngcontent-%COMP%], \n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-start[_ngcontent-%COMP%] {\n  border: none !important;\n  min-width: 5px;\n  background: #fff !important;\n}\n.email-block[_ngcontent-%COMP%] {\n  z-index: 999999;\n}\n.c-input[_ngcontent-%COMP%] {\n  color: #0072ce;\n  font-family: "gothambook", sans-serif;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 16px;\n}\n.s-label[_ngcontent-%COMP%] {\n  min-width: 104px !important;\n}\n/*# sourceMappingURL=user-support.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UserSupportComponent, { className: "UserSupportComponent", filePath: "src\\app\\components\\user-managements\\user-support\\user-support.component.ts", lineNumber: 13 });
})();

// src/app/components/help/help.component.ts
var HelpComponent = class _HelpComponent {
  constructor(commonService, dataService, labelService, title, activatedRoute, router, modalService) {
    this.commonService = commonService;
    this.dataService = dataService;
    this.labelService = labelService;
    this.title = title;
    this.activatedRoute = activatedRoute;
    this.router = router;
    this.modalService = modalService;
    this.dsFAQs = [];
    this.panelOpenState = false;
    this.title.setTitle("ZoetisDx Help");
    this.apiUrl = ("https:" == document.location.protocol ? "https://" : "http://") + location.host + "/#/enduserlicenseagreement";
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindHelpLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindHelpLabel();
    });
  }
  ngOnInit() {
    if (localStorage.getItem("alert-popup") == "true") {
      this.modalService.open(AlertMessageComponent, {
        centered: true,
        backdrop: "static",
        scrollable: false
      });
    }
    this.commonService.getFAQs(this.labelService.selectedLanguage, this.labelService.userCountryId).subscribe((data) => {
      this.dsFAQs = data.ResponseData;
    });
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  bindQAnsPanel() {
    let strHTML = "";
    this.dsFAQs[0].AnswerDetails.forEach((element) => {
      strHTML += "<mat-expansion-panel expanded >";
      strHTML += " <mat-expansion-panel-header ><mat-panel-title>";
      strHTML += this.dsFAQs[0].Faq;
      strHTML += " </mat-panel-title></mat-expansion-panel-header>";
      strHTML += " <div class='d-flex mt-2 prdct-desc col-sm-12'><div class='col p-0 pl-1'><div class='d-flex align-items-center nobtm-pad s-input c-input'>";
      strHTML += element.Answer;
      strHTML += " </div></div></div>";
      strHTML += " </mat-expansion-panel>";
    });
    $("mat-accordion").empty();
    $("mat-accordion").append(strHTML);
  }
  static {
    this.\u0275fac = function HelpComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _HelpComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(NgbModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _HelpComponent, selectors: [["app-help"]], decls: 8, vars: 0, consts: [[1, "wrapper"], ["id", "content", 1, "help_part"], [1, "outer"], ["id", "help", 1, "row"]], template: function HelpComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3);
        \u0275\u0275element(7, "app-faq");
        \u0275\u0275elementEnd()()()();
      }
    }, dependencies: [HeaderComponent, SideMenuComponent], styles: ['\n\n.help[_ngcontent-%COMP%] {\n  height: calc(100vh - 16px);\n  overflow: auto;\n  padding: 12px;\n  background: transparent;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 14px;\n}\n.mat-accordion[_ngcontent-%COMP%]   .mat-expansion-panel[_ngcontent-%COMP%]:not(.mat-expanded), \n.mat-accordion[_ngcontent-%COMP%]   .mat-expansion-panel[_ngcontent-%COMP%]:not(.mat-expansion-panel-spacing) {\n  border-radius: 10px !important;\n}\n.mat-accordion[_ngcontent-%COMP%]   .mat-expansion-panel[_ngcontent-%COMP%] {\n  border-radius: 10px !important;\n}\n.faq-heading[_ngcontent-%COMP%] {\n  background: #fff;\n  border-radius: 10px 10px 0 0;\n  padding: 10px;\n  font-weight: bold;\n  font-size: 22px;\n  font-family: "GothamNarrowBold", sans-serif;\n  padding-left: 23px;\n}\n.help[_ngcontent-%COMP%]   .mat-accordion[_ngcontent-%COMP%]   .mat-expansion-panel[_ngcontent-%COMP%]:first-child {\n  border-radius: 0 0 10px 10px !important;\n}\nb[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.help_part[_ngcontent-%COMP%] {\n  padding: 20px 35px 20px 20px !important;\n}\n@media screen and (max-width: 767px) {\n  .help_part[_ngcontent-%COMP%] {\n    padding: 20px 20px 20px 20px !important;\n  }\n}\n/*# sourceMappingURL=help.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(HelpComponent, { className: "HelpComponent", filePath: "src\\app\\components\\help\\help.component.ts", lineNumber: 15 });
})();

// src/app/components/end-user-license-agreement/end-user-license-agreement.component.ts
function EndUserLicenseAgreementComponent_mat_option_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 14);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const language_r1 = ctx.$implicit;
    \u0275\u0275property("value", language_r1.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", language_r1.Name, " ");
  }
}
function EndUserLicenseAgreementComponent_div_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 15);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("innerHTML", ctx_r1.agreementText, \u0275\u0275sanitizeHtml);
  }
}
function EndUserLicenseAgreementComponent_div_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 16)(1, "p");
    \u0275\u0275text(2, "Data Not Found");
    \u0275\u0275elementEnd()();
  }
}
var EndUserLicenseAgreementComponent = class _EndUserLicenseAgreementComponent {
  constructor(commonService, labelService, activatedRoute, router, confirmationDialogService) {
    this.commonService = commonService;
    this.labelService = labelService;
    this.activatedRoute = activatedRoute;
    this.router = router;
    this.confirmationDialogService = confirmationDialogService;
    this.dsEndUserLicenseAgreement = [];
    this.agreementText = "";
    this.panelOpenState = false;
    this.userCountryId = localStorage.userCountryId != void 0 ? Number(localStorage.userCountryId) : EnmCountry.UnitedStates;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindEndUserLicenseAgreementLabel();
    }
    this.getLanguage();
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindEndUserLicenseAgreementLabel();
    });
  }
  getLanguage() {
    this.commonService.getLanguageDetails().subscribe((data) => {
      this.languageList = data.ResponseData;
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  onChangeLanguage(e) {
    this.slectedLangId = e.value;
    this.router.navigate(["/enduserlicenseagreement/" + this.slectedLangId]);
    this.getULA(this.slectedLangId);
  }
  getULA(langId) {
    this.commonService.getEndUserLicenseAgreement(langId, this.userCountryId).subscribe({ next: (data) => {
      this.dsEndUserLicenseAgreement = data.ResponseData;
      this.agreementText = data.ResponseData.length > 0 && data.ResponseData[0] && data.ResponseData[0].AgreementText ? data.ResponseData[0].AgreementText : "";
    }, error: () => {
      this.confirmationDialogService.confirm("Alert", this.labelService.dsFuseManagementScreen.AddRefLabAccountRespErrorMessage, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
    } });
  }
  ngOnInit() {
    this.activatedRoute.params.subscribe((params) => {
      this.slectedLangId = Number(params["languageId"]);
      const countryId = params["countryId"];
      if (countryId) {
        this.userCountryId = Number(countryId);
      }
      this.getULA(this.slectedLangId);
    });
  }
  static {
    this.\u0275fac = function EndUserLicenseAgreementComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _EndUserLicenseAgreementComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ConfirmationDialogService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _EndUserLicenseAgreementComponent, selectors: [["app-end-user-license-agreement"]], decls: 14, vars: 4, consts: [[1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-100"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4", "eula-part"], [1, "card-body"], [1, "log-part", 2, "text-align", "right"], ["appearance", "outline", "floatLabel", "always"], ["autocomplete", "off", 3, "valueChange", "selectionChange", "value"], [3, "value", 4, "ngFor", "ngForOf"], [1, "text-center", "mb-2", "l-part"], ["routerLink", "/login", "src", "../../../assets/img/logo-login@2x.png", "alt", "img"], [3, "innerHTML", 4, "ngIf"], ["style", "min-height: 250px; text-align: center; margin-top: 15%", 4, "ngIf"], [3, "value"], [3, "innerHTML"], [2, "min-height", "250px", "text-align", "center", "margin-top", "15%"]], template: function EndUserLicenseAgreementComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6)(7, "mat-form-field", 7)(8, "mat-select", 8);
        \u0275\u0275twoWayListener("valueChange", function EndUserLicenseAgreementComponent_Template_mat_select_valueChange_8_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.slectedLangId, $event) || (ctx.slectedLangId = $event);
          return $event;
        });
        \u0275\u0275listener("selectionChange", function EndUserLicenseAgreementComponent_Template_mat_select_selectionChange_8_listener($event) {
          return ctx.onChangeLanguage($event);
        });
        \u0275\u0275template(9, EndUserLicenseAgreementComponent_mat_option_9_Template, 2, 2, "mat-option", 9);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(10, "div", 10);
        \u0275\u0275element(11, "img", 11);
        \u0275\u0275elementEnd();
        \u0275\u0275template(12, EndUserLicenseAgreementComponent_div_12_Template, 1, 1, "div", 12)(13, EndUserLicenseAgreementComponent_div_13_Template, 3, 0, "div", 13);
        \u0275\u0275elementEnd()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(8);
        \u0275\u0275twoWayProperty("value", ctx.slectedLangId);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.languageList);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.agreementText);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.agreementText === "");
      }
    }, dependencies: [NgForOf, NgIf, RouterLink, MatLegacyFormField, MatLegacySelect, MatLegacyOption], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: auto;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n  padding: 50px 8px !important;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.select-lang[_ngcontent-%COMP%] {\n  float: right;\n  width: 200px;\n  margin-top: 16px;\n  margin-right: 21px;\n}\na[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-weight: 500;\n}\n.signup[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #407ec9;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  margin-top: 16px;\n  font-size: 14px;\n}\n.btn1[_ngcontent-%COMP%] {\n  color: #000;\n  background-color: #fff;\n  margin: 0 10px 0 0;\n  border: solid 0.4px #979797 !important;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n.green[_ngcontent-%COMP%] {\n  color: green;\n}\n.sublist[_ngcontent-%COMP%] {\n  margin-left: 34px;\n}\n.sublist[_ngcontent-%COMP%]    > span[_ngcontent-%COMP%] {\n  min-width: 33px;\n}\n.term-wrapper[_ngcontent-%COMP%] {\n  height: 500px;\n  overflow-y: scroll;\n  padding: 0 14px;\n}\n.heading-term[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sublist2[_ngcontent-%COMP%] {\n  margin-left: 82px;\n}\nb[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n@media screen and (max-width: 767px) {\n  .card.card-signin.eula-part[_ngcontent-%COMP%] {\n    padding: 20px 8px 50px 8px !important;\n    background: #ffffff !important;\n    border-radius: 1px !important;\n    padding-top: 0 !important;\n    margin-top: 0 !important;\n    margin-bottom: 0 !important;\n  }\n  .log-part[_ngcontent-%COMP%] {\n    margin-bottom: 1rem;\n  }\n  .l-part[_ngcontent-%COMP%] {\n    padding-bottom: 1rem;\n  }\n  .langPart[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\n    font-size: 17px;\n    font-weight: 600;\n  }\n}\n/*# sourceMappingURL=end-user-license-agreement.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(EndUserLicenseAgreementComponent, { className: "EndUserLicenseAgreementComponent", filePath: "src\\app\\components\\end-user-license-agreement\\end-user-license-agreement.component.ts", lineNumber: 12 });
})();

// src/app/components/rotor-credits/rotor-credit/rotor-credit.component.ts
var _c011 = (a0) => ({ "mat-form-field-invalid": a0 });
function RotorCreditComponent_mat_error_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-error", 45);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsRotorManagementScreen.DateProvided30DaysagoError);
  }
}
function RotorCreditComponent_mat_option_74_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 46);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const Species_r3 = ctx.$implicit;
    \u0275\u0275property("value", Species_r3.SpeciesId);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", Species_r3.SpeciesName, " ");
  }
}
function RotorCreditComponent_mat_option_81_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 46);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const sampleType_r4 = ctx.$implicit;
    \u0275\u0275property("value", sampleType_r4.SampleTypeId);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", sampleType_r4.SampleTypeName, " ");
  }
}
function RotorCreditComponent_mat_option_88_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 46);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const profileList_r5 = ctx.$implicit;
    \u0275\u0275property("value", profileList_r5.ProfileId);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", profileList_r5.ProfileName, " ");
  }
}
var RotorCreditComponent = class _RotorCreditComponent {
  constructor(fb, labelService, headerService, datePipe, router, commonService, modalService, confirmationDialogService, data) {
    this.fb = fb;
    this.labelService = labelService;
    this.headerService = headerService;
    this.datePipe = datePipe;
    this.router = router;
    this.commonService = commonService;
    this.modalService = modalService;
    this.confirmationDialogService = confirmationDialogService;
    this.data = data;
    this.specieslist = [];
    this.SampleType = [];
    this.profileNameList = [];
    this.maxDate = /* @__PURE__ */ new Date();
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientListLabel();
    }
  }
  ngOnInit() {
    this.rotorForm = this.createFormGroup(new CreditModel());
    this.getDropdownData();
    this.data.msgRoot.subscribe((data) => {
      this.data = data;
      this.imageData = data;
    });
    this.getRororImagesData();
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindRotorManagementLabel();
    });
  }
  createFormGroup(dataItem) {
    return this.fb.group({
      UserGuid: this.headerService.loginUserGuid,
      ZoetisAccountNumber: [dataItem.ZoetisAccountNumber, Validators.maxLength(50)],
      DateOfIssue: [dataItem.DateOfIssue, Validators.required],
      MessageOnScreen: [dataItem.MessageOnScreen, Validators.maxLength(500)],
      Code: [dataItem.Code, Validators.maxLength(50)],
      InstrumentSerialNumber: [dataItem.InstrumentSerialNumber, Validators.maxLength(50)],
      LotNumber: [dataItem.LotNumber, Validators.maxLength(50)],
      PatientSpecies: [dataItem.PatientSpecies, Validators.required],
      SampleType: [dataItem.SampleType, Validators.required],
      ProfileName: [dataItem.ProfileName, Validators.required],
      Notes: [dataItem.Notes, Validators.maxLength(500)]
    });
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsRotorManagementScreen.OkLabel, this.labelService.dsUserManagementScreen.Cancel, "sm", true, false);
  }
  rotorCreditRequest() {
    const formatDate = this.datePipe.transform(this.rotorForm.get("DateOfIssue").value, "yyyy-MM-dd");
    const reqObj = {
      UserId: this.headerService.loginUserGuid,
      ZoetisAccountNumber: this.rotorForm.get("ZoetisAccountNumber").value,
      DateOfIssue: formatDate,
      MessageOnScreen: this.rotorForm.get("MessageOnScreen").value,
      Code: this.rotorForm.get("Code").value,
      InstrumentSerialNumber: this.rotorForm.get("InstrumentSerialNumber").value,
      LotNumber: this.rotorForm.get("LotNumber").value,
      PatientSpecies: this.rotorForm.get("PatientSpecies").value,
      SampleType: this.rotorForm.get("SampleType").value,
      ProfileName: this.rotorForm.get("ProfileName").value,
      RotorCancellationReport: this.imageData,
      Notes: this.rotorForm.get("Notes").value
    };
    if (this.rotorForm.status == "VALID" && this.dateError && this.rotorForm != null && this.rotorForm != void 0) {
      this.commonService.addCreditDetails(reqObj).subscribe(() => {
        this.getDropdownData();
        this.modalService.dismissAll();
        this.router.navigate(["/rotor-firstScreen"]);
        this.dateError = false;
        this.confirmationDialogService.confirm("Alert", this.labelService.dsRotorManagementScreen.DataSubmittedsuccessfully, this.labelService.dsRotorManagementScreen.OkLabel, "Cancel", "sm", true, false);
      });
    } else if (this.rotorForm.status == "INVALID") {
      this.showMsg(this.labelService.dsRotorManagementScreen.PleaseEnterMandatoryFields);
    } else if (this.dateError) {
      this.showMsg(this.labelService.dsRotorManagementScreen.DateProvided30DaysagoError);
      this.dateError = true;
    } else {
      this.showMsg(this.labelService.dsRotorManagementScreen.PleaseEnterMandatoryFields);
      this.rotorForm.enable();
      this.dateError = true;
    }
  }
  getRororImagesData() {
    this.commonService.getRotorImages(this.labelService.selectedLanguage).subscribe((data) => {
      this.img = data.ResponseData[0].RImage;
    });
  }
  getDropdownData() {
    this.commonService.getrotorDetails().subscribe((data) => {
      this.specieslist = data.ResponseData.RotorSpeciesList;
      this.SampleType = data.ResponseData.RotorSampleTypeList;
      this.profileNameList = data.ResponseData.RotorProfileNameList;
    });
  }
  checkDate(val) {
    const selectedDate = new Date(val);
    const today = /* @__PURE__ */ new Date();
    const targetDate = /* @__PURE__ */ new Date();
    targetDate.setDate(today.getDate() - 31);
    targetDate.setHours(0);
    targetDate.setMinutes(0);
    targetDate.setSeconds(0);
    if (targetDate < selectedDate) {
      this.dateError = false;
    } else if (val != void 0 && val != null) {
      this.dateError = true;
      this.showMsg(this.labelService.dsRotorManagementScreen.DateProvided30DaysagoError);
    } else if (val === void 0) {
      this.dateError = true;
    }
  }
  static {
    this.\u0275fac = function RotorCreditComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _RotorCreditComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(DatePipe), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RotorCreditComponent, selectors: [["app-rotor-credit"]], features: [\u0275\u0275ProvidersFeature([DatePipe])], decls: 111, vars: 42, consts: [["startDate", ""], [1, "wrapper"], ["id", "content"], [1, "outer"], ["id", "rotor", 1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], [1, "roto-outer"], ["multi", ""], ["expanded", "", "hideToggle", "true", "disabled", ""], ["data-testid", "rc-title"], [1, "step-2"], [1, "text", "col-sm-12"], [1, "d-flex", "justify-content-center", "pt-4", "pb-4", "col-sm-12"], ["alt", "img", 3, "src"], [1, "col-sm-12", "text"], [1, "col-sm-12", "text", 2, "color", "red"], ["autocomplete", "off", 3, "formGroup"], [1, "d-flex", "col-sm-12"], [1, "col", "p-0", "pl-1"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input", "email-block"], ["for", "", 1, "mb-0"], ["appearance", "outline", "floatLabel", "always"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "ZoetisAccountNumber", "maxlength", "20", 3, "placeholder"], [1, "d-flex", "align-items-center", "nobtm-pad", "s-input", "email-block", "issuedate"], ["appearance", "outline", "floatLabel", "always", 3, "ngClass"], ["matInput", "", "disabled", "", "readonly", "", "formControlName", "DateOfIssue", "required", "", 3, "ngModelChange", "matDatepicker", "placeholder", "max"], ["matSuffix", "", 3, "for"], ["disabled", "false"], ["style", "padding-left: 64%;", 4, "ngIf"], [1, "d-flex", "col-sm-12", "mt-3"], [1, "d-flex", "align-items-top", "nobtm-pad", "s-input", "email-block"], ["matInput", "", "maxlength", "500", "formControlName", "MessageOnScreen", 3, "placeholder"], ["type", "text", "matInput", "", "autocomplete", "off", "formControlName", "Code", "maxlength", "50", "required", "", 3, "placeholder"], ["type", "text", "matInput", "", "formControlName", "InstrumentSerialNumber", "maxlength", "50", "required", "", 3, "placeholder"], ["type", "text", "matInput", "", "formControlName", "LotNumber", "maxlength", "50", "required", "", 3, "placeholder"], ["formControlName", "PatientSpecies", "required", "", 3, "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], ["formControlName", "SampleType", 3, "placeholder"], ["formControlName", "ProfileName", "required", "", 3, "placeholder"], ["matInput", "", "maxlength", "500", "formControlName", "Notes", 3, "placeholder"], [1, "para", "col-sm-12", "mt-5"], [1, "para", "col-sm-12"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4", "col-sm-12"], ["mat-raised-button", "", "color", "warn", "routerLink", "/rotor-firstScreen", 1, "mr-3", "cncl-btn"], ["mat-raised-button", "", "color", "warn", 3, "click"], [2, "padding-left", "64%"], [3, "value"]], template: function RotorCreditComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "div", 4)(7, "div", 5)(8, "div", 6)(9, "mat-accordion", 7)(10, "mat-expansion-panel", 8)(11, "mat-expansion-panel-header")(12, "mat-panel-title", 9);
        \u0275\u0275text(13);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "div", 10)(15, "p", 11);
        \u0275\u0275text(16);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(17, "div", 12);
        \u0275\u0275element(18, "img", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(19, "p", 14);
        \u0275\u0275text(20);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(21, "p", 15);
        \u0275\u0275text(22);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(23, "form", 16)(24, "div", 17)(25, "div", 18)(26, "div", 19)(27, "label", 20);
        \u0275\u0275text(28);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(29, "mat-form-field", 21);
        \u0275\u0275element(30, "input", 22);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(31, "div", 18)(32, "div", 23)(33, "label", 20);
        \u0275\u0275text(34);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(35, "mat-form-field", 24)(36, "input", 25);
        \u0275\u0275listener("ngModelChange", function RotorCreditComponent_Template_input_ngModelChange_36_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.checkDate($event));
        });
        \u0275\u0275elementEnd();
        \u0275\u0275element(37, "mat-datepicker-toggle", 26)(38, "mat-datepicker", 27, 0);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275template(40, RotorCreditComponent_mat_error_40_Template, 2, 1, "mat-error", 28);
        \u0275\u0275elementStart(41, "div", 29)(42, "div", 18)(43, "div", 30)(44, "label", 20);
        \u0275\u0275text(45);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(46, "mat-form-field", 21);
        \u0275\u0275element(47, "textarea", 31);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(48, "div", 29)(49, "div", 18)(50, "div", 19)(51, "label", 20);
        \u0275\u0275text(52);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(53, "mat-form-field", 21);
        \u0275\u0275element(54, "input", 32);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(55, "div", 18)(56, "div", 19)(57, "label", 20);
        \u0275\u0275text(58);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(59, "mat-form-field", 21);
        \u0275\u0275element(60, "input", 33);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(61, "div", 18)(62, "div", 19)(63, "label", 20);
        \u0275\u0275text(64);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(65, "mat-form-field", 21);
        \u0275\u0275element(66, "input", 34);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(67, "div", 29)(68, "div", 18)(69, "div", 19)(70, "label", 20);
        \u0275\u0275text(71);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(72, "mat-form-field", 21)(73, "mat-select", 35);
        \u0275\u0275template(74, RotorCreditComponent_mat_option_74_Template, 2, 2, "mat-option", 36);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(75, "div", 18)(76, "div", 19)(77, "label", 20);
        \u0275\u0275text(78);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(79, "mat-form-field", 21)(80, "mat-select", 37);
        \u0275\u0275template(81, RotorCreditComponent_mat_option_81_Template, 2, 2, "mat-option", 36);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(82, "div", 18)(83, "div", 19)(84, "label", 20);
        \u0275\u0275text(85);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(86, "mat-form-field", 21)(87, "mat-select", 38);
        \u0275\u0275template(88, RotorCreditComponent_mat_option_88_Template, 2, 2, "mat-option", 36);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(89, "div", 29)(90, "div", 18)(91, "div", 30)(92, "label", 20);
        \u0275\u0275text(93);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(94, "mat-form-field", 21);
        \u0275\u0275element(95, "textarea", 39);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(96, "div", 40)(97, "h5");
        \u0275\u0275text(98);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(99, "p");
        \u0275\u0275text(100);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(101, "div", 41)(102, "h5");
        \u0275\u0275text(103);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(104, "p");
        \u0275\u0275text(105);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(106, "div", 42)(107, "button", 43);
        \u0275\u0275text(108);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(109, "button", 44);
        \u0275\u0275listener("click", function RotorCreditComponent_Template_button_click_109_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.rotorCreditRequest());
        });
        \u0275\u0275text(110);
        \u0275\u0275elementEnd()()()()()()()()()()()();
      }
      if (rf & 2) {
        const startDate_r6 = \u0275\u0275reference(39);
        \u0275\u0275advance(13);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.RotorCreditRequestForm);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Step2FillouttheFormbelow);
        \u0275\u0275advance(2);
        \u0275\u0275property("src", ctx.img, \u0275\u0275sanitizeUrl);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.rcrDisclaimer);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsRotorManagementScreen.requiredField, " ");
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.rotorForm);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.ZoetisAccountNumber);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.AccNumPrefill);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.DateOfIssue);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(40, _c011, ctx.dateError));
        \u0275\u0275advance();
        \u0275\u0275property("matDatepicker", startDate_r6)("placeholder", ctx.labelService.dsRotorManagementScreen.DatePrefill)("max", ctx.maxDate);
        \u0275\u0275advance();
        \u0275\u0275property("for", startDate_r6);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.dateError);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.MessageonScreen);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.MessageScreenPrefill);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Code);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.CodePrefill);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.InstrumentSerialNumber);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.InstrumentSerialNumberPrefill);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.LotNumber);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.LotNumberPrefill);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.PatientSpecies);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.PatientSpeciesPrefill);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.specieslist);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.SampleType);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.SelectSamplePrefill);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.SampleType);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.ProfileName);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.SelectProfilePrefill);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.profileNameList);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Notes);
        \u0275\u0275advance(2);
        \u0275\u0275property("placeholder", ctx.labelService.dsRotorManagementScreen.NotePrefill);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.eligibilityCredit);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.eligibilityCreditDesc);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.additionalSupport);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.additionalSupportDesc);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Cancel);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Submit);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, RouterLink, MatLegacyError, MatLegacyFormField, MatLegacySuffix, MatLegacyInput, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatDatepicker, MatDatepickerInput, MatDatepickerToggle, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MaxLengthValidator, FormGroupDirective, FormControlName], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  min-width: 128px;\n  width: 44px;\n  white-space: normal;\n  word-break: break-word;\n  margin-right: 10px;\n  line-height: 14px;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: "off" !important;\n  left: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: "On" !important;\n  right: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n  margin: 0 1.5rem !important;\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n  height: 90px;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 92% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-end[_ngcontent-%COMP%], \n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-start[_ngcontent-%COMP%] {\n  border: none !important;\n  min-width: 5px;\n  background: #fff !important;\n}\n.email-block[_ngcontent-%COMP%] {\n  z-index: 999999;\n}\n.c-input[_ngcontent-%COMP%] {\n  color: #0072ce;\n  font-family: "gothambook", sans-serif;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 16px;\n}\n.s-label[_ngcontent-%COMP%] {\n  min-width: 104px !important;\n}\n.uploadimg[_ngcontent-%COMP%] {\n  position: absolute;\n  right: -5px;\n  top: 0;\n  cursor: pointer;\n}\n.text[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n  color: #818181;\n}\n.roto-outer[_ngcontent-%COMP%] {\n  height: calc(100vh - 114px);\n  overflow: auto;\n}\n.para[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif !important;\n  color: #818181;\n  font-size: 13px;\n}\n.para[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #000;\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.mat-datepicker-toggle-default-icon[_ngcontent-%COMP%] {\n  color: #979797 !important;\n}\n.text.rotor-list[_ngcontent-%COMP%] {\n  font-size: 14px;\n}\n.text.rotor-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  margin-bottom: 30px;\n  list-style-type: none;\n}\n.rotor-btn[_ngcontent-%COMP%] {\n  width: 200px;\n  height: 21.5px;\n  color: #3e3e3e;\n  border-radius: 3px;\n  border: solid 0.4px #e09a1e;\n  background-color: #f5d148 !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 15px;\n  pointer-events: none;\n}\n.text.head[_ngcontent-%COMP%] {\n  font-size: 17px;\n}\n/*# sourceMappingURL=rotor-credit.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RotorCreditComponent, { className: "RotorCreditComponent", filePath: "src\\app\\components\\rotor-credits\\rotor-credit\\rotor-credit.component.ts", lineNumber: 19 });
})();

// src/app/components/rotor-credits/rotor-credit-first-screen/rotor-credit-first-screen.component.ts
var _c012 = ["fileInput"];
var _c19 = (a0) => ({ "mat-form-field-invalid": a0 });
var _c26 = () => ({ standalone: true });
function RotorCreditFirstScreenComponent_mat_error_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-error", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsRotorManagementScreen.UploadrotorCancellationError);
  }
}
function RotorCreditFirstScreenComponent_mat_error_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-error", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsRotorManagementScreen.FileLimitError);
  }
}
function RotorCreditFirstScreenComponent_mat_error_55_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-error", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsRotorManagementScreen.allowedTypesError);
  }
}
var RotorCreditFirstScreenComponent = class _RotorCreditFirstScreenComponent {
  constructor(labelService, fb, router, confirmationDialogService, data) {
    this.labelService = labelService;
    this.fb = fb;
    this.router = router;
    this.confirmationDialogService = confirmationDialogService;
    this.data = data;
    this.fileAttr = "";
    this.uploadError = false;
    this.fileLimitError = false;
    this.allowedTypesError = false;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindRotorManagementLabel();
    }
  }
  ngOnInit() {
    this.rotorFirstForm = this.createFormGroup(new CreditFirstModel());
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData.RotorCreditScreen;
      this.labelService.bindRotorManagementLabel();
    });
  }
  createFormGroup(dataItem) {
    return this.fb.group({
      uploadReport: [dataItem.uploadReport, Validators.required]
    });
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsRotorManagementScreen.OkLabel, this.labelService.dsUserManagementScreen.Cancel, "sm", true, false);
  }
  rotorFirstScreenRequest() {
    if (this.rotorFirstForm.status == "VALID") {
      this.router.navigateByUrl("/rotor");
    } else {
      if (this.rotorFirstForm.status == "INVALID") {
        this.showMsg(this.labelService.dsRotorManagementScreen.UploadrotorCancellationError);
      }
    }
  }
  uploadFileEvt(fileInput) {
    this.imageError = null;
    if (fileInput.target.files && fileInput.target.files[0]) {
      this.fileAttr = "";
      this.fileData = fileInput.target.files[0].type;
      Array.from(fileInput.target.files).forEach((file) => {
        if (fileInput.target.files[0].size < 5e6) {
          if (this.fileData == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || this.fileData == "application/pdf" || this.fileData == "application/msword" || this.fileData == "application/vnd.openxmlformats-officedocument.wordprocessingml.document" || this.fileData == "image/jpeg" || this.fileData == "image/jpg" || this.fileData == "image/png" || this.fileData == "image/bmp") {
            this.fileAttr += file.name + "";
            this.allowedTypesError = false;
            this.fileLimitError = false;
          } else {
            this.fileLimitError = false;
            this.allowedTypesError = true;
            this.rotorFirstForm.controls["uploadReport"].setErrors({ "incorrect": true });
          }
        } else {
          if (fileInput.target.files[0].size > 5e6) {
            this.allowedTypesError = false;
            this.fileLimitError = true;
            this.rotorFirstForm.controls["uploadReport"].setErrors({ "incorrect": true });
          }
        }
      });
      const reader = new FileReader();
      reader.onload = (e) => {
        const image = new Image();
        image.src = e.target.result;
        this.data.msgRoot.next(e.target.result);
      };
      reader.readAsDataURL(fileInput.target.files[0]);
    } else {
      this.fileAttr = "";
    }
  }
  static {
    this.\u0275fac = function RotorCreditFirstScreenComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _RotorCreditFirstScreenComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RotorCreditFirstScreenComponent, selectors: [["app-rotor-credit-first-screen"]], viewQuery: function RotorCreditFirstScreenComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c012, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.fileInput = _t.first);
      }
    }, decls: 61, vars: 24, consts: [["fileInput", ""], [1, "wrapper"], ["id", "content"], [1, "outer"], ["id", "rotor1", 1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], [1, "roto-outer"], ["multi", ""], ["expanded", "", "hideToggle", "true", "disabled", ""], [1, "cursor-rem"], ["data-testid", "rcf-title"], [1, "step-1", "mb-5", "col-sm-12"], [1, "text", "head"], [1, "text"], [1, "text", "rotor-list"], ["src", "../../../assets/img/folder.png", "alt", "folder", 1, "ml-4"], ["color", "warn", 1, "ml-4", "rotor-btn"], [1, "d-flex"], [1, "d-flex", "flex-column"], ["color", "warn", 1, "ml-4", "rotor-btn", "mt-4", "mb-4"], ["autocomplete", "off", 3, "formGroup"], ["appearance", "outline", 1, "form-fieldCust", 3, "ngClass"], ["matInput", "", "readonly", "", "name", "name", "color", "warn", "required", "", 3, "ngModelChange", "ngModel", "ngModelOptions", "placeholder"], ["matSuffix", ""], ["src", "../../../../assets/img/export@2x.png", "alt", "export", 1, "rotor_img"], ["type", "file", "id", "uploadFile", "formControlName", "uploadReport", "name", "uploadFile", "accept", ".jpg,.jpeg,.png,image/bmp,.pdf,.doc,.docx", "color", "warn", "required", "", 3, "change"], ["class", "dateErrorAdj", 4, "ngIf"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4", "col-sm-12"], ["mat-raised-button", "", "color", "warn", "routerLink", "/dashboard", 1, "mr-3", "cncl-btn"], ["mat-raised-button", "", "color", "warn", 3, "click"], [1, "dateErrorAdj"]], template: function RotorCreditFirstScreenComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 3)(6, "div", 4)(7, "div", 5)(8, "div", 6)(9, "mat-accordion", 7)(10, "mat-expansion-panel", 8)(11, "mat-expansion-panel-header", 9)(12, "mat-panel-title", 10);
        \u0275\u0275text(13);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "div", 11)(15, "p", 12);
        \u0275\u0275text(16);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(17, "p", 13);
        \u0275\u0275text(18);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(19, "ul", 14)(20, "li");
        \u0275\u0275text(21);
        \u0275\u0275element(22, "img", 15);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(23, "li");
        \u0275\u0275text(24);
        \u0275\u0275elementStart(25, "button", 16);
        \u0275\u0275text(26);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(27, "li", 17)(28, "span");
        \u0275\u0275text(29);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(30, "span", 18)(31, "button", 16);
        \u0275\u0275text(32);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(33, "button", 19);
        \u0275\u0275text(34);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(35, "button", 16);
        \u0275\u0275text(36);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(37, "li")(38, "div");
        \u0275\u0275text(39);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(40, "form", 20)(41, "mat-form-field", 21)(42, "div")(43, "mat-toolbar")(44, "input", 22, 0);
        \u0275\u0275twoWayListener("ngModelChange", function RotorCreditFirstScreenComponent_Template_input_ngModelChange_44_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.fileAttr, $event) || (ctx.fileAttr = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(46, "mat-icon", 23);
        \u0275\u0275element(47, "img", 24);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(48, "input", 25, 0);
        \u0275\u0275listener("change", function RotorCreditFirstScreenComponent_Template_input_change_48_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.uploadFileEvt($event));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(50, "div");
        \u0275\u0275template(51, RotorCreditFirstScreenComponent_mat_error_51_Template, 2, 1, "mat-error", 26);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(52, "div");
        \u0275\u0275template(53, RotorCreditFirstScreenComponent_mat_error_53_Template, 2, 1, "mat-error", 26);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(54, "div");
        \u0275\u0275template(55, RotorCreditFirstScreenComponent_mat_error_55_Template, 2, 1, "mat-error", 26);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(56, "div", 27)(57, "button", 28);
        \u0275\u0275text(58);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(59, "button", 29);
        \u0275\u0275listener("click", function RotorCreditFirstScreenComponent_Template_button_click_59_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.rotorFirstScreenRequest());
        });
        \u0275\u0275text(60);
        \u0275\u0275elementEnd()()()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(13);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.RotorCreditRequestForm);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsRotorManagementScreen.RequestingRotorCreditEasy, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.FindYourErrorReport);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.HomeScreenSelect);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsRotorManagementScreen.Select, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Search);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.VS2errorreports);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.PatientControlID);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Date);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Patients);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Errorreportanduploadhere);
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.rotorFirstForm);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(21, _c19, ctx.uploadError));
        \u0275\u0275advance(3);
        \u0275\u0275twoWayProperty("ngModel", ctx.fileAttr);
        \u0275\u0275property("ngModelOptions", \u0275\u0275pureFunction0(23, _c26))("placeholder", ctx.labelService.dsRotorManagementScreen.UploadRotorCancellationReportLabel);
        \u0275\u0275advance(7);
        \u0275\u0275property("ngIf", ctx.uploadError);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.fileLimitError);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.allowedTypesError);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Cancel);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsRotorManagementScreen.Next);
      }
    }, dependencies: [NgClass, NgIf, RouterLink, MatLegacyError, MatLegacyFormField, MatLegacySuffix, MatLegacyInput, MatLegacyButton, MatIcon, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, MatToolbar, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, NgModel, FormGroupDirective, FormControlName], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  min-width: 124px;\n  width: 44px;\n  white-space: normal;\n  word-break: break-word;\n  margin-right: 10px;\n  line-height: 14px;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: "off" !important;\n  left: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: "On" !important;\n  right: -3.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n  margin: 0 1.5rem !important;\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n  height: 90px;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 92% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-end[_ngcontent-%COMP%], \n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-start[_ngcontent-%COMP%] {\n  border: none !important;\n  min-width: 5px;\n  background: #fff !important;\n}\n.email-block[_ngcontent-%COMP%] {\n  z-index: 999999;\n}\n.c-input[_ngcontent-%COMP%] {\n  color: #0072ce;\n  font-family: "gothambook", sans-serif;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 16px;\n}\n.s-label[_ngcontent-%COMP%] {\n  min-width: 104px !important;\n}\n.uploadimg[_ngcontent-%COMP%] {\n  position: absolute;\n  right: -5px;\n  top: 0;\n  cursor: pointer;\n}\n.text[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n  color: #818181;\n}\n.roto-outer[_ngcontent-%COMP%] {\n  height: calc(100vh - 114px);\n  overflow: auto;\n}\n.para[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif !important;\n  color: #818181;\n  font-size: 13px;\n}\n.para[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #000;\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.mat-datepicker-toggle-default-icon[_ngcontent-%COMP%] {\n  color: #979797 !important;\n}\n.text.rotor-list[_ngcontent-%COMP%] {\n  font-size: 14px;\n  margin-bottom: -1.8rem !important;\n}\n.text.rotor-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  margin-bottom: 30px;\n  list-style-type: none;\n}\n.rotor-btn[_ngcontent-%COMP%] {\n  width: 200px;\n  height: 21.5px;\n  color: #818181;\n  border-radius: 3px;\n  border: solid 0.4px #e09a1e;\n  background-color: #f5d148 !important;\n}\n.text.head[_ngcontent-%COMP%] {\n  font-size: 17px;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  margin: 40px 0;\n  width: 500px !important;\n}\n.mat-toolbar-single-row[_ngcontent-%COMP%] {\n  height: auto !important;\n  background: transparent;\n}\n.mat-toolbar-single-row[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  width: 200px;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n#uploadFile[_ngcontent-%COMP%] {\n  top: 0px;\n  left: 0px;\n  width: 41.2rem !important;\n  z-index: 9;\n  opacity: 0;\n  height: 100%;\n  cursor: pointer;\n  position: absolute;\n}\n.rotor_img[_ngcontent-%COMP%] {\n  margin-top: -15px;\n  right: -15px;\n  position: relative;\n}\n.form-fieldCust[_ngcontent-%COMP%] {\n  width: 41.2rem !important;\n}\n.dateErrorAdj[_ngcontent-%COMP%] {\n  margin-top: -3%;\n  margin-left: 4%;\n}\n.cursor-rem[_ngcontent-%COMP%], \n.rotor-btn[_ngcontent-%COMP%] {\n  cursor: default !important;\n}\n/*# sourceMappingURL=rotor-credit-first-screen.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RotorCreditFirstScreenComponent, { className: "RotorCreditFirstScreenComponent", filePath: "src\\app\\components\\rotor-credits\\rotor-credit-first-screen\\rotor-credit-first-screen.component.ts", lineNumber: 13 });
})();

// src/app/components/patient-managements/merge-patient/merge-patient.component.ts
var _c013 = ["mergeDialog"];
var _c110 = ["mergeSuccessDialog"];
var _c27 = () => ["SelectPatient", "PrimaryPatient", "MergePatient"];
var _c35 = () => ["PrimaryPatient", "MergePatient"];
function MergePatientComponent_h6_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h6", 35)(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.StepOneHeading);
  }
}
function MergePatientComponent_h6_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h6", 35)(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate4("", ctx_r1.labelService.dsMergePatientScreen.YouHaveSelected, " ", ctx_r1.primaryPatient == null ? null : ctx_r1.primaryPatient.PatientId, " ", ctx_r1.labelService.dsMergePatientScreen.AsPrimaryPatient, ". ", ctx_r1.labelService.dsMergePatientScreen.StepThreeMessage, "");
  }
}
function MergePatientComponent_div_9_button_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 43);
    \u0275\u0275listener("click", function MergePatientComponent_div_9_button_6_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.clearSearch());
    });
    \u0275\u0275elementStart(1, "mat-icon");
    \u0275\u0275text(2, "close");
    \u0275\u0275elementEnd()();
  }
}
function MergePatientComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 36)(1, "div", 37)(2, "mat-form-field", 38)(3, "input", 39);
    \u0275\u0275twoWayListener("ngModelChange", function MergePatientComponent_div_9_Template_input_ngModelChange_3_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.searchText, $event) || (ctx_r1.searchText = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function MergePatientComponent_div_9_Template_input_ngModelChange_3_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.userQuestionUpdate.next($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 40);
    \u0275\u0275element(5, "img", 41);
    \u0275\u0275elementEnd();
    \u0275\u0275template(6, MergePatientComponent_div_9_button_6_Template, 3, 0, "button", 42);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.searchText);
    \u0275\u0275property("placeholder", ctx_r1.labelService.dsHeaderScreen.SearchPatientNameID);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r1.searchText);
  }
}
function MergePatientComponent_h6_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h6", 44)(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.SelectPatientMerge);
  }
}
function MergePatientComponent_th_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 45);
    \u0275\u0275text(1, " \xA0 ");
    \u0275\u0275elementEnd();
  }
}
function MergePatientComponent_td_35_mat_checkbox_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-checkbox", 50);
    \u0275\u0275listener("click", function MergePatientComponent_td_35_mat_checkbox_1_Template_mat_checkbox_click_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      return \u0275\u0275resetView($event.stopPropagation());
    })("change", function MergePatientComponent_td_35_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const row_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView($event ? ctx_r1.selectedPatients.toggle(row_r6) : null);
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("checked", ctx_r1.isSelected(row_r6));
  }
}
function MergePatientComponent_td_35_mat_radio_group_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-radio-group", 51);
    \u0275\u0275twoWayListener("ngModelChange", function MergePatientComponent_td_35_mat_radio_group_2_Template_mat_radio_group_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r1.primaryPatient, $event) || (ctx_r1.primaryPatient = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementStart(1, "mat-radio-button", 52);
    \u0275\u0275listener("click", function MergePatientComponent_td_35_mat_radio_group_2_Template_mat_radio_button_click_1_listener($event) {
      \u0275\u0275restoreView(_r7);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const row_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.primaryPatient);
    \u0275\u0275advance();
    \u0275\u0275property("value", row_r6);
  }
}
function MergePatientComponent_td_35_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "input", 53)(2, "label", 54);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275property("checked", true);
  }
}
function MergePatientComponent_td_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46);
    \u0275\u0275template(1, MergePatientComponent_td_35_mat_checkbox_1_Template, 1, 1, "mat-checkbox", 47)(2, MergePatientComponent_td_35_mat_radio_group_2_Template, 2, 2, "mat-radio-group", 48)(3, MergePatientComponent_td_35_div_3_Template, 3, 1, "div", 49);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.viewSection === "SelectPatient");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.viewSection === "PrimaryPatient");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.viewSection === "MergePatient" && row_r6.ZDXPatientId === ctx_r1.primaryPatient.ZDXPatientId);
  }
}
function MergePatientComponent_th_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.PatientID, "");
  }
}
function MergePatientComponent_td_38_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r8.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.PatientID);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r8.PatientId, " ");
  }
}
function MergePatientComponent_th_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.PatientName, "");
  }
}
function MergePatientComponent_td_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r9.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.PatientName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r9.PatientName, " ");
  }
}
function MergePatientComponent_th_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.OwnerName, "");
  }
}
function MergePatientComponent_td_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r10.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.OwnerName);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r10.OwnerName, " ");
  }
}
function MergePatientComponent_th_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Species, "");
  }
}
function MergePatientComponent_td_47_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r11.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Species);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r11.SpeciesName || element_r11.Species, " ");
  }
}
function MergePatientComponent_th_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Breed, " ");
  }
}
function MergePatientComponent_td_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r12.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Breed);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r12.BreedName || element_r12.Breed, " ");
  }
}
function MergePatientComponent_th_52_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Sex, " ");
  }
}
function MergePatientComponent_td_53_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r13.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Sex);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r13.GenderName || element_r13.Gender, " ");
  }
}
function MergePatientComponent_th_55_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 55);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Age, " ");
  }
}
function MergePatientComponent_td_56_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 46)(1, "span", 56);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMap(ctx_r1.getTxtClass(element_r14.ZDXPatientId));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Age);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r14.Dob || element_r14.Age, " ");
  }
}
function MergePatientComponent_tr_57_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 57);
  }
}
function MergePatientComponent_tr_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 58);
  }
}
function MergePatientComponent_tbody_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 59)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Norecordsfound);
  }
}
function MergePatientComponent_ng_template_60_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 60)(1, "div", 61);
    \u0275\u0275element(2, "h4", 62);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 63)(4, "div", 64);
    \u0275\u0275element(5, "img", 65);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 66)(7, "strong");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(9, "div", 67)(10, "button", 68);
    \u0275\u0275listener("click", function MergePatientComponent_ng_template_60_Template_button_click_10_listener() {
      \u0275\u0275restoreView(_r15);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dialog.closeAll());
    });
    \u0275\u0275text(11);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "button", 69);
    \u0275\u0275listener("click", function MergePatientComponent_ng_template_60_Template_button_click_12_listener() {
      \u0275\u0275restoreView(_r15);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.doMerge());
    });
    \u0275\u0275text(13);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(8);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsMergePatientScreen.ActionNotReversable, ".");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Cancel);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.MergePatient.replace("nts", "nt"));
  }
}
function MergePatientComponent_ng_template_62_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 60)(1, "div", 61);
    \u0275\u0275element(2, "h4", 62);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 63)(4, "div", 64);
    \u0275\u0275element(5, "img", 70);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "div", 71)(7, "strong");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(9, "div", 67)(10, "button", 72);
    \u0275\u0275listener("click", function MergePatientComponent_ng_template_62_Template_button_click_10_listener() {
      \u0275\u0275restoreView(_r16);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dialog.getDialogById(ctx_r1.mergeSuccessDialogId).close());
    });
    \u0275\u0275text(11);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(8);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsMergePatientScreen.PatientMergeSuccess, ".");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsDashboardScreen.Ok);
  }
}
function MergePatientComponent_button_65_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 73);
    \u0275\u0275listener("click", function MergePatientComponent_button_65_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r17);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.dialogRef.close());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Cancel);
  }
}
function MergePatientComponent_button_66_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 73);
    \u0275\u0275listener("click", function MergePatientComponent_button_66_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r18);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.selectSection("SelectPatient"));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Back);
  }
}
function MergePatientComponent_button_67_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 73);
    \u0275\u0275listener("click", function MergePatientComponent_button_67_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r19);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.selectSection("PrimaryPatient"));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Back);
  }
}
function MergePatientComponent_button_68_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 74);
    \u0275\u0275listener("click", function MergePatientComponent_button_68_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r20);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.selectSection("PrimaryPatient"));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Continue);
  }
}
function MergePatientComponent_button_69_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 74);
    \u0275\u0275listener("click", function MergePatientComponent_button_69_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r21);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.selectSection("MergePatient"));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.Confirm);
  }
}
function MergePatientComponent_button_70_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 74);
    \u0275\u0275listener("click", function MergePatientComponent_button_70_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r22);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.mergePatient());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsMergePatientScreen.MergePatient.replace("nts", "nt"));
  }
}
var MergePatientComponent = class _MergePatientComponent {
  constructor(dialogRef, commonService, headerService, router, patientService, labelService, sidefilterService, confirmationDialogService, dataService, title, dialog, refLabService) {
    this.dialogRef = dialogRef;
    this.commonService = commonService;
    this.headerService = headerService;
    this.router = router;
    this.patientService = patientService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.dialog = dialog;
    this.refLabService = refLabService;
    this.displayedColumns = ["select", "PatientId", "PatientName", "OwnerName", "SpeciesName", "BreedName", "GenderName", "Dob"];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.followPatientList = [];
    this.start = 0;
    this.limit = 15;
    this.end = this.limit + this.start;
    this.selectedRowIndex = null;
    this.viewSection = "SelectPatient";
    this.selectedPatients = new SelectionModel(true, []);
    this.primaryPatient = null;
    this.mergeDialogId = null;
    this.mergeSuccessDialogId = null;
    this.userQuestionUpdate = new Subject();
    this.searchText = "";
    this.cloneResults = null;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindMergePatientLabel();
    }
    this.businessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.PageNo = 1;
    this.sidefilterService.filter.PageSize = 60;
    this.userQuestionUpdate.pipe(debounceTime(500), distinctUntilChanged()).subscribe((value) => {
      this.sidefilterService.filter.SearchText = value;
      this.sidefilterService.filter.PageNo = 1;
      this.dataSource = new MatLegacyTableDataSource([]);
      this.getPatientList(this.sidefilterService.filter);
    });
  }
  ngOnInit() {
    this.getPatientList(this.sidefilterService.filter);
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindMergePatientLabel();
    });
  }
  clearSearch() {
    this.searchText = "";
    this.userQuestionUpdate.next(this.searchText);
  }
  selectSection(section) {
    if (this.selectedPatients.selected.length < 2) {
      this.showMsg(this.labelService.dsMergePatientScreen.SelectAtleastTwoPatient + ".");
      return false;
    } else if ((this.viewSection == "PrimaryPatient" || this.viewSection == "SelectPatient") && !this.primaryPatient && section == "MergePatient") {
      this.showMsg(this.labelService.dsMergePatientScreen.PleaseSelectPrimary + ".");
      return false;
    }
    if (section == "SelectPatient") {
      if (this.cloneResults) {
        this.dataSource = this.cloneResults;
        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
        this.dataSource.sort = this.sort;
      }
    }
    if (this.viewSection == "SelectPatient") {
      this.cloneResults = this.dataSource;
      this.dataSource = new MatLegacyTableDataSource(this.selectedPatients.selected);
      this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
      this.dataSource.sort = this.sort;
      this.primaryPatient = null;
    }
    this.viewSection = section;
  }
  showMsg(msg) {
    if (msg == void 0 || msg == null || msg == "")
      msg = this.labelService.dsPatientInfoScreen.CanceledTest;
    this.confirmationDialogService.confirm("", msg, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.router.navigateByUrl("/patient/info");
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  getSearchVal(val) {
    if (val && val.trim().length) {
      const params = {
        BusinessGuid: localStorage.businessGuid,
        Filter: val
      };
      this.refLabService.PatientOwnerDDLList(params).subscribe((data) => {
        this.dataSource = new MatLegacyTableDataSource(data.ResponseData.PatientOwner);
        this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
        this.dataSource.sort = this.sort;
      });
    } else {
      this.getPatientList(this.sidefilterService.filter);
    }
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      this.isLoadMore = true;
      this.sidefilterService.filter.PageNo++;
      this.sidefilterService.filter.PageSize = 60;
      this.getPatientList(this.sidefilterService.filter);
    }
  }
  getPatientList(event) {
    event.UserGuid = this.headerService.loginUserGuid;
    event.LanguageId = this.labelService.selectedLanguage;
    event.IsBackOfficeUser = this.isBackOfficeUser;
    if (event.IsApplyFilter) {
      this.sidefilterService.filter.PageNo = event.PageNo;
    }
    if (event.PageNo == 1) {
      this.originData = [];
    }
    this.commonService.getPatientList(event).subscribe({ next: (data) => {
      if (this.viewSection == "SelectPatient") {
        if (event.PageNo == 1) {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.originData = data.ResponseData.PatientList;
          } else {
            this.originData = [];
          }
        } else {
          if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
            this.originData = this.originData.concat(data.ResponseData.PatientList);
          }
        }
        if (data.ResponseData.PatientList != null && this.originData.length < 60) {
          event.PageNo += 1;
          this.sidefilterService.filter.PageNo = event.PageNo;
          this.getPatientList(this.sidefilterService.filter);
        }
        if (this.originData.length > 0) {
          if (this.originData.length > 0 && this.isLoadMore) {
            this.isLoadMore = false;
          } else {
          }
          this.dataSource = new MatLegacyTableDataSource(this.originData);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
        } else {
          this.dataSource.data = [];
        }
      }
    }, error: () => {
      this.dataSource.data = [];
    } });
  }
  isSelected(row) {
    return this.selectedPatients.selected.find((v) => v.ZDXPatientId == row.ZDXPatientId);
  }
  onDataSort() {
  }
  // public scrolltoTop(topVal) {
  //   /** const scrollabe = document.getElementById('patient-list-scrollabe');
  //    * scrollabe.scrollTop = topVal;
  //    */
  // }
  navigateToInfoPage(element) {
    this.patientService.showPataientInfo(element, this.sidefilterService.filter, this.sidefilterService.filter.PageNo, null, null);
  }
  mergePatient() {
    const dialog = this.dialog.open(this.mergeDialog, {
      width: "300px"
    });
    this.mergeDialogId = dialog.id;
  }
  doMerge() {
    const req = {
      primaryPatientId: this.primaryPatient.ZDXPatientId,
      childPatientIds: [],
      BusinessGuid: this.businessGuid,
      UserGuid: this.dataService.appData.authDetails["UserGuid"]
    };
    this.selectedPatients.selected.forEach((v) => {
      if (v.ZDXPatientId != req.primaryPatientId) {
        req.childPatientIds.push(v.ZDXPatientId);
      }
    });
    this.patientService.mergePatient(req).subscribe({ next: () => {
      this.dialog.getDialogById(this.mergeDialogId).close();
      const dialog = this.dialog.open(this.mergeSuccessDialog, {
        width: "300px"
      });
      this.mergeSuccessDialogId = dialog.id;
      dialog.afterClosed().subscribe(() => {
        this.dialogRef.close(this.primaryPatient);
      });
    }, error: () => {
      this.showMsg(this.labelService.dsMergePatientScreen.OppsiMergePatient);
    } });
  }
  getTxtClass(PatientId) {
    return this.viewSection == "MergePatient" && PatientId == this.primaryPatient.ZDXPatientId ? "font-weight-bold" : "";
  }
  static {
    this.\u0275fac = function MergePatientComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MergePatientComponent)(\u0275\u0275directiveInject(MatLegacyDialogRef), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(MatLegacyDialog), \u0275\u0275directiveInject(RefLabService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MergePatientComponent, selectors: [["app-merge-patient"]], viewQuery: function MergePatientComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(_c013, 7);
        \u0275\u0275viewQuery(_c110, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.mergeDialog = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.mergeSuccessDialog = _t.first);
      }
    }, decls: 71, vars: 30, consts: [["mergeDialog", ""], ["mergeSuccessDialog", ""], ["mat-dialog-title", ""], ["role", "toolbar", 1, "task-header"], ["data-testid", "mp-title", 1, "dialogttl"], ["mat-dialog-content", ""], [1, "row", "rowpart"], ["class", "txtpart", 4, "ngIf"], ["class", "input-group", "id", "adv-search", 4, "ngIf"], [1, "col-4", "number-tab"], [1, "md-stepper-horizontal", "orange", "pb-4"], [1, "md-step-circle", 3, "click"], [1, "md-step-bar-left"], [1, "md-step-bar-right"], ["class", "labelpart", 4, "ngIf"], ["id", "patient-list-scrollabe", 1, "example-container", "pt-0", 3, "scroll"], ["mat-table", "", "matSort", "", "summary", "", 1, "patient-table", 3, "matSortChange", "dataSource"], ["matColumnDef", "select"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "PatientId"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "class", 4, "matCellDef"], ["matColumnDef", "PatientName"], ["matColumnDef", "OwnerName"], ["matColumnDef", "SpeciesName"], ["matColumnDef", "BreedName"], ["matColumnDef", "GenderName"], ["matColumnDef", "Dob"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", " norecord", 4, "ngIf"], ["mat-dialog-actions", "", 1, "d-flex", "justify-content-center", "align-items-center"], ["class", "cncl-btn", "mat-button", "", 3, "click", 4, "ngIf"], ["class", "refbtn", "mat-button", "", "cdkFocusInitial", "", 3, "click", 4, "ngIf"], [1, "txtpart"], ["id", "adv-search", 1, "input-group"], [1, "d-flex", "w-100"], ["appearance", "outline", "floatLabel", "always", 1, "w-100"], ["matInput", "", "type", "text", 3, "ngModelChange", "ngModel", "placeholder"], ["matPrefix", ""], ["src", "../../../../assets/img/search-icon.png", "alt", ""], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "click"], [1, "labelpart"], ["mat-header-cell", ""], ["mat-cell", ""], [3, "checked", "click", "change", 4, "ngIf"], [3, "ngModel", "ngModelChange", 4, "ngIf"], [4, "ngIf"], [3, "click", "change", "checked"], [3, "ngModelChange", "ngModel"], ["name", "primaryPatient", 3, "click", "value"], ["id", "radio-1", "name", "radio-group", "type", "radio", "disabled", "", 1, "radio-custom", 3, "checked"], ["for", "radio-1", 1, "radio-custom-label"], ["mat-header-cell", "", "mat-sort-header", ""], [1, "textTtl", "d-none"], ["mat-header-row", ""], ["mat-row", ""], [1, "norecord"], [1, "modal-content"], [1, "modal-header", "mgp"], [1, "modal-title"], [1, "modal-body", "text-center", "confirm-modal", "cpart", "confirmpart"], [1, "warning-icon", "text-center"], ["src", "./assets/img/warning.png", "alt", "", 2, "height", "60px"], [1, "msg", 2, "color", "#ed1f1f"], [1, "modal-footer", "justify-content-center"], ["mat-button", "", 1, "cncl-btn", "mr-2", 3, "click"], ["mat-button", "", "cdkFocusInitial", "", 1, "refbtn", "ml-2", 3, "click"], ["src", "./assets/img/success.png", "alt", "", 2, "height", "60px"], [1, "msg", 2, "color", "#32a94f"], ["type", "button", 1, "btn", "save-change", 3, "click"], ["mat-button", "", 1, "cncl-btn", 3, "click"], ["mat-button", "", "cdkFocusInitial", "", 1, "refbtn", 3, "click"]], template: function MergePatientComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "h4", 2)(1, "mat-toolbar", 3)(2, "span", 4);
        \u0275\u0275text(3);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(4, "div", 5)(5, "div", 6)(6, "div");
        \u0275\u0275template(7, MergePatientComponent_h6_7_Template, 3, 1, "h6", 7)(8, MergePatientComponent_h6_8_Template, 3, 4, "h6", 7)(9, MergePatientComponent_div_9_Template, 7, 3, "div", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "div", 9)(11, "div", 10)(12, "div")(13, "div", 11);
        \u0275\u0275listener("click", function MergePatientComponent_Template_div_click_13_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.selectSection("SelectPatient"));
        });
        \u0275\u0275elementStart(14, "span");
        \u0275\u0275text(15, "1");
        \u0275\u0275elementEnd()();
        \u0275\u0275element(16, "div", 12)(17, "div", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "div")(19, "div", 11);
        \u0275\u0275listener("click", function MergePatientComponent_Template_div_click_19_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.selectSection("PrimaryPatient"));
        });
        \u0275\u0275elementStart(20, "span");
        \u0275\u0275text(21, "2");
        \u0275\u0275elementEnd()();
        \u0275\u0275element(22, "div", 12)(23, "div", 13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "div")(25, "div", 11);
        \u0275\u0275listener("click", function MergePatientComponent_Template_div_click_25_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.selectSection("MergePatient"));
        });
        \u0275\u0275elementStart(26, "span");
        \u0275\u0275text(27, "3");
        \u0275\u0275elementEnd()();
        \u0275\u0275element(28, "div", 12)(29, "div", 13);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275template(30, MergePatientComponent_h6_30_Template, 3, 1, "h6", 14);
        \u0275\u0275elementStart(31, "div", 15);
        \u0275\u0275listener("scroll", function MergePatientComponent_Template_div_scroll_31_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onTableScroll($event));
        });
        \u0275\u0275elementStart(32, "table", 16);
        \u0275\u0275listener("matSortChange", function MergePatientComponent_Template_table_matSortChange_32_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onDataSort());
        });
        \u0275\u0275elementContainerStart(33, 17);
        \u0275\u0275template(34, MergePatientComponent_th_34_Template, 2, 0, "th", 18)(35, MergePatientComponent_td_35_Template, 4, 3, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(36, 20);
        \u0275\u0275template(37, MergePatientComponent_th_37_Template, 2, 1, "th", 21)(38, MergePatientComponent_td_38_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(39, 23);
        \u0275\u0275template(40, MergePatientComponent_th_40_Template, 2, 1, "th", 21)(41, MergePatientComponent_td_41_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(42, 24);
        \u0275\u0275template(43, MergePatientComponent_th_43_Template, 2, 1, "th", 21)(44, MergePatientComponent_td_44_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(45, 25);
        \u0275\u0275template(46, MergePatientComponent_th_46_Template, 2, 1, "th", 21)(47, MergePatientComponent_td_47_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(48, 26);
        \u0275\u0275template(49, MergePatientComponent_th_49_Template, 2, 1, "th", 21)(50, MergePatientComponent_td_50_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(51, 27);
        \u0275\u0275template(52, MergePatientComponent_th_52_Template, 2, 1, "th", 21)(53, MergePatientComponent_td_53_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(54, 28);
        \u0275\u0275template(55, MergePatientComponent_th_55_Template, 2, 1, "th", 21)(56, MergePatientComponent_td_56_Template, 4, 4, "td", 22);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(57, MergePatientComponent_tr_57_Template, 1, 0, "tr", 29)(58, MergePatientComponent_tr_58_Template, 1, 0, "tr", 30);
        \u0275\u0275elementEnd();
        \u0275\u0275template(59, MergePatientComponent_tbody_59_Template, 4, 1, "tbody", 31);
        \u0275\u0275elementEnd();
        \u0275\u0275template(60, MergePatientComponent_ng_template_60_Template, 14, 3, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(62, MergePatientComponent_ng_template_62_Template, 12, 2, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(64, "div", 32);
        \u0275\u0275template(65, MergePatientComponent_button_65_Template, 2, 1, "button", 33)(66, MergePatientComponent_button_66_Template, 2, 1, "button", 33)(67, MergePatientComponent_button_67_Template, 2, 1, "button", 33)(68, MergePatientComponent_button_68_Template, 2, 1, "button", 34)(69, MergePatientComponent_button_69_Template, 2, 1, "button", 34)(70, MergePatientComponent_button_70_Template, 2, 1, "button", 34);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsMergePatientScreen.MergePatient.replace("nts", "nt"), " ");
        \u0275\u0275advance(3);
        \u0275\u0275classMapInterpolate1("", ctx.viewSection === "SelectPatient" ? "col-8" : "col-8", " nopad");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "PrimaryPatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "MergePatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "SelectPatient");
        \u0275\u0275advance(3);
        \u0275\u0275classMapInterpolate1("md-step ", \u0275\u0275pureFunction0(28, _c27).indexOf(ctx.viewSection) !== -1 ? "active" : "", "");
        \u0275\u0275advance(6);
        \u0275\u0275classMapInterpolate1("md-step ", \u0275\u0275pureFunction0(29, _c35).indexOf(ctx.viewSection) !== -1 ? "active" : "", "");
        \u0275\u0275advance(6);
        \u0275\u0275classMapInterpolate1("md-step ", ctx.viewSection === "MergePatient" ? "active" : "", "");
        \u0275\u0275advance(6);
        \u0275\u0275property("ngIf", ctx.viewSection === "SelectPatient");
        \u0275\u0275advance(2);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(25);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource.data.length === 0);
        \u0275\u0275advance(6);
        \u0275\u0275property("ngIf", ctx.viewSection === "SelectPatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "PrimaryPatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "MergePatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "SelectPatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "PrimaryPatient");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.viewSection === "MergePatient");
      }
    }, dependencies: [NgIf, MatLegacyFormField, MatLegacyPrefix, MatLegacySuffix, MatLegacyInput, MatLegacyButton, MatIcon, MatLegacyCheckbox, MatLegacyRadioGroup, MatLegacyRadioButton, MatToolbar, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, MatLegacyDialogTitle, MatLegacyDialogContent, MatLegacyDialogActions, DefaultValueAccessor, NgControlStatus, NgModel], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.patient-table[_ngcontent-%COMP%] {\n  width: 99%;\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: 400px;\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 8%;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 106px !important;\n  word-break: break-all !important;\n}\n.mat-row[_ngcontent-%COMP%]:hover {\n  background-color: whitesmoke !important;\n}\ntd.mat-cell[_ngcontent-%COMP%] {\n  cursor: default !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ED8B00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n}\n.m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  .radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n    line-height: 1.5;\n  }\n  .number-tab[_ngcontent-%COMP%] {\n    margin-bottom: 15px;\n  }\n    .mat-dialog-container {\n    background: #f0eff4;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    position: absolute;\n    right: -120px;\n    top: -3px;\n    z-index: 9999;\n  }\n    .cdk-overlay-pane {\n    min-width: initial !important;\n    max-width: 96vw !important;\n    width: 100% !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n    .modal-dialog {\n    padding: 0 15px;\n  }\n  .title-card[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 0;\n    font-size: 17px;\n  }\n  .m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    display: block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n    position: relative;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .mat-table[_ngcontent-%COMP%], \n   .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n    padding-left: 20% !important;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 23%;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]::before {\n    display: none;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 0 !important;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 335px);\n    padding: 0px 6px 0 6px !important;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type {\n    font-family: "gothambook", sans-serif !important;\n  }\n  .rowpart[_ngcontent-%COMP%] {\n    flex-direction: column-reverse;\n  }\n  .rowpart[_ngcontent-%COMP%]   .number-tab[_ngcontent-%COMP%] {\n    min-width: 100%;\n  }\n  .rowpart[_ngcontent-%COMP%]   .md-stepper-horizontal[_ngcontent-%COMP%] {\n    background: transparent;\n    padding-bottom: 0 !important;\n  }\n  .nopad[_ngcontent-%COMP%] {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .labelpart[_ngcontent-%COMP%], \n   .txtpart[_ngcontent-%COMP%] {\n    padding-top: 20px;\n  }\n}\n@media screen and (min-width: 768px) and (max-width:1024px) {\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n  .mat-dialog-title {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n  .mat-toolbar {\n  background-color: #1072ce;\n  color: #fff;\n  text-align: center;\n  justify-content: center;\n  align-items: flex-end;\n}\n  .mat-dialog-container {\n  padding: 0 !important;\n  overflow: hidden;\n}\n  .mat-dialog-content {\n  margin: 24px;\n  overflow: hidden;\n  padding: 0px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%] {\n  display: table;\n  width: 100%;\n  margin: 0 auto;\n  background-color: #FFFFFF;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%] {\n  display: table-cell;\n  position: relative;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:active {\n  border-radius: 15% / 75%;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child:active {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child:active {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:hover {\n  cursor: pointer;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child   .md-step-bar-right[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  width: 30px;\n  height: 30px;\n  margin: 0 auto;\n  background-color: #fff;\n  border-radius: 50%;\n  text-align: center;\n  line-height: 30px;\n  font-size: 13px;\n  font-weight: 600;\n  color: rgb(44, 41, 41);\n  border: 1px solid #ccc;\n}\n.md-stepper-horizontal.green[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #00AE4D;\n}\n.md-stepper-horizontal.orange[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #1072ce;\n  color: #fff;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: rgb(33, 150, 243);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f00c";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  -moz-transform: scaleX(-1);\n  -o-transform: scaleX(-1);\n  -webkit-transform: scaleX(-1);\n  transform: scaleX(-1);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f040";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  margin-top: 16px;\n  font-size: 16px;\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  text-align: center;\n  color: rgba(0, 0, 0, .26);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: rgba(0, 0, 0, .87);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.done[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.editable[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, .54);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 14px;\n  height: 1px;\n  border-top: 1px solid #DDDDDD;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  right: 0;\n  left: 50%;\n  margin-left: 20px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%] {\n  left: 0;\n  right: 50%;\n  margin-right: 20px;\n}\nbutton.refbtn[_ngcontent-%COMP%] {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 15px;\n}\n  .mat-dialog-actions {\n  justify-content: center;\n  margin-bottom: 30px;\n}\n  .mat-form-field-appearance-outline .mat-form-field-wrapper {\n  margin: 0 !important;\n}\n  .example-container {\n  margin: 0 !important;\n  padding: 0 !important;\n}\n  .mat-form-field-wrapper {\n  padding-bottom: 0 !important;\n}\n.checkbox-custom[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%] {\n  opacity: 0;\n  position: absolute;\n}\n.checkbox-custom[_ngcontent-%COMP%]    + .checkbox-custom-label[_ngcontent-%COMP%]:before, \n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "";\n  background: #fff;\n  display: inline-block;\n  vertical-align: middle;\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  text-align: center;\n}\n.checkbox-custom[_ngcontent-%COMP%]:checked    + .checkbox-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\f00c";\n  font-family: "FontAwesome", sans-serif;\n  background: rebeccapurple;\n  color: #fff;\n}\n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  border-radius: 50%;\n}\n.radio-custom[_ngcontent-%COMP%]:checked    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\2713";\n  color: #fff;\n  background: green;\n}\n.checkbox-custom[_ngcontent-%COMP%]:focus    + .checkbox-custom-label[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%]:focus    + .radio-custom-label[_ngcontent-%COMP%] {\n  outline: 1px solid #ddd;\n}\n  .modal-header.mgp {\n  background: none !important;\n  border: none !important;\n}\n  .modal-content {\n  border: none;\n  -webkit-box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n  -moz-box-shadow: -2px 3px 15px 0px rgba(0, 0, 0, 0.5);\n  box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n}\n  .confirm-modal {\n  max-height: 500px;\n  overflow: hidden;\n}\n  .cdk-overlay-pane {\n  min-width: 400px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 0 !important;\n  width: 50px !important;\n}\n  .modal {\n  z-index: 10010 !important;\n}\n  .modal-backdrop {\n  z-index: 10000 !important;\n}\n/*# sourceMappingURL=merge-patient.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MergePatientComponent, { className: "MergePatientComponent", filePath: "src\\app\\components\\patient-managements\\merge-patient\\merge-patient.component.ts", lineNumber: 20 });
})();

// src/app/components/patient-managements/patient-info-tests/patient-info-tests.component.ts
var _c014 = (a0, a1, a2) => ({ completed: a0, cancelled: a1, pending: a2 });
var _c111 = (a0) => ({ "font-weight": a0 });
function PatientInfoTestsComponent_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.Parent.labelService.dsSideFilterScreen.Status, " ");
  }
}
function PatientInfoTestsComponent_td_4_ng_container_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 20);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_4_ng_container_1_span_1_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const element_r3 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.markAs(element_r3, "READ", element_r3));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275propertyInterpolate("title", ctx_r0.Parent.labelService.dsAnaysisResultsScreen.MarkAsViewed);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.Parent.labelService.dsAnaysisResultsScreen.new, " ");
  }
}
function PatientInfoTestsComponent_td_4_ng_container_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 21);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_4_ng_container_1_span_2_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const element_r3 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.markAs(element_r3, "UNREAD", element_r3));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275propertyInterpolate("title", ctx_r0.Parent.labelService.dsAnaysisResultsScreen.MarkAsNew);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.Parent.labelService.dsAnaysisResultsScreen.Viewed, " ");
  }
}
function PatientInfoTestsComponent_td_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, PatientInfoTestsComponent_td_4_ng_container_1_span_1_Template, 2, 2, "span", 18)(2, PatientInfoTestsComponent_td_4_ng_container_1_span_2_Template, 2, 2, "span", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const element_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.ViewedFlag === false);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.ViewedFlag === true);
  }
}
function PatientInfoTestsComponent_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 17);
    \u0275\u0275template(1, PatientInfoTestsComponent_td_4_ng_container_1_Template, 3, 2, "ng-container", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(2, _c014, element_r3.AnalysisStatusId === 1, element_r3.AnalysisStatusId === 2, element_r3.AnalysisStatusId === 3));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.AnalysisStatusId === 1);
  }
}
function PatientInfoTestsComponent_ng_container_5_th_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 25)(1, "mat-checkbox", 26);
    \u0275\u0275listener("change", function PatientInfoTestsComponent_ng_container_5_th_1_div_2_Template_mat_checkbox_change_1_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.Parent.selectAll($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275property("checked", ctx_r0.Parent.IsAllSelected);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.All);
  }
}
function PatientInfoTestsComponent_ng_container_5_th_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275template(2, PatientInfoTestsComponent_ng_container_5_th_1_div_2_Template, 4, 2, "div", 24);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.Parent.labelService.dsAnaysisResultsScreen.Select, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", false);
  }
}
function PatientInfoTestsComponent_ng_container_5_td_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 27)(1, "mat-checkbox", 28);
    \u0275\u0275listener("change", function PatientInfoTestsComponent_ng_container_5_td_2_Template_mat_checkbox_change_1_listener($event) {
      const element_r7 = \u0275\u0275restoreView(_r6).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.Parent.selectSingleCheckbox($event, element_r7));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("disabled", element_r7.AnalysisStatusName !== "Completed")("checked", element_r7.IsReadyForPrint);
  }
}
function PatientInfoTestsComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0, 22);
    \u0275\u0275template(1, PatientInfoTestsComponent_ng_container_5_th_1_Template, 3, 2, "th", 3)(2, PatientInfoTestsComponent_ng_container_5_td_2_Template, 2, 2, "td", 23);
    \u0275\u0275elementContainerEnd();
  }
}
function PatientInfoTestsComponent_th_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.DateAndTime);
  }
}
function PatientInfoTestsComponent_ng_container_8_td_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 30);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_ng_container_8_td_1_Template_td_click_0_listener() {
      const ctx_r8 = \u0275\u0275restoreView(_r8);
      const element_r10 = ctx_r8.$implicit;
      const i_r11 = ctx_r8.index;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r11, element_r10));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 32);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(4, _c014, element_r10.AnalysisStatusId === 1, element_r10.AnalysisStatusId === 2, element_r10.AnalysisStatusId === 3));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.DateAndTime);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(8, _c111, element_r10.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r10.DateReceivedStr, "");
  }
}
function PatientInfoTestsComponent_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, PatientInfoTestsComponent_ng_container_8_td_1_Template, 5, 10, "td", 29);
    \u0275\u0275elementContainerEnd();
  }
}
function PatientInfoTestsComponent_ng_container_9_td_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 33);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_ng_container_9_td_1_Template_td_click_0_listener() {
      const ctx_r12 = \u0275\u0275restoreView(_r12);
      const element_r14 = ctx_r12.$implicit;
      const i_r15 = ctx_r12.index;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r15, element_r14));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 32);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.DateAndTime);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(3, _c111, element_r14.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r14.DateReceivedStr, "");
  }
}
function PatientInfoTestsComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, PatientInfoTestsComponent_ng_container_9_td_1_Template, 5, 5, "td", 9);
    \u0275\u0275elementContainerEnd();
  }
}
function PatientInfoTestsComponent_th_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.DVMName);
  }
}
function PatientInfoTestsComponent_td_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 33);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_12_Template_td_click_0_listener() {
      const ctx_r16 = \u0275\u0275restoreView(_r16);
      const element_r18 = ctx_r16.$implicit;
      const i_r19 = ctx_r16.index;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r19, element_r18));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 34);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r18 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.DVMName);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(3, _c111, element_r18.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r18.PhysicianName);
  }
}
function PatientInfoTestsComponent_th_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.Parent.labelService.dsPatientInfoScreen.AnalysisSource, " ");
  }
}
function PatientInfoTestsComponent_td_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r20 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 33);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_15_Template_td_click_0_listener() {
      const ctx_r20 = \u0275\u0275restoreView(_r20);
      const element_r22 = ctx_r20.$implicit;
      const i_r23 = ctx_r20.index;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r23, element_r22));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 34);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r22 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.AnalysisSource);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(3, _c111, element_r22.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r22.AnalyzerDisplayName);
  }
}
function PatientInfoTestsComponent_th_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.AnalysisType);
  }
}
function PatientInfoTestsComponent_td_18_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r26 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("float-left statusCode ", ctx_r0.Parent.commonService.ACPStatusCodeShow(element_r26.StatusCode), "");
    \u0275\u0275propertyInterpolate("title", ctx_r0.Parent.labelService.dsAnaysisResultsScreen[element_r26.StatusName]);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.Parent.commonService.ACPStatusCodeShow(element_r26.StatusCode));
  }
}
function PatientInfoTestsComponent_td_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r24 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 33);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_18_Template_td_click_0_listener() {
      const ctx_r24 = \u0275\u0275restoreView(_r24);
      const element_r26 = ctx_r24.$implicit;
      const i_r27 = ctx_r24.index;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r27, element_r26));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 35);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, PatientInfoTestsComponent_td_18_div_5_Template, 2, 5, "div", 36);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r26 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService.dsPatientInfoScreen.AnalysisType);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(4, _c111, element_r26.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", element_r26.AnalysisTypeName, " \xA0 ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r26.SourceType === "ReferenceLab" && ctx_r0.Parent.commonService.ACPText(element_r26));
  }
}
function PatientInfoTestsComponent_th_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 16);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.Parent.labelService == null ? null : ctx_r0.Parent.labelService.dsPatientInfoScreen.AccessionID);
  }
}
function PatientInfoTestsComponent_td_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 33);
    \u0275\u0275listener("click", function PatientInfoTestsComponent_td_21_Template_td_click_0_listener() {
      const ctx_r28 = \u0275\u0275restoreView(_r28);
      const element_r30 = ctx_r28.$implicit;
      const i_r31 = ctx_r28.index;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.Parent.onRowClick(i_r31, element_r30));
    });
    \u0275\u0275elementStart(1, "span", 31);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 34);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r30 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.Parent == null ? null : ctx_r0.Parent.labelService.dsPatientInfoScreen.AccessionID);
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(3, _c111, element_r30.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r30.AccessionNumber);
  }
}
function PatientInfoTestsComponent_tr_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 38);
  }
}
function PatientInfoTestsComponent_tr_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 39);
  }
  if (rf & 2) {
    const row_r32 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(1, _c014, row_r32.AnalysisStatusId === 1, row_r32.AnalysisStatusId === 2, row_r32.AnalysisStatusId === 3));
  }
}
function PatientInfoTestsComponent_tbody_24_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.Parent == null ? null : ctx_r0.Parent.labelService.dsPatientInfoScreen.Norecordsfound, ".");
  }
}
function PatientInfoTestsComponent_tbody_24_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.Parent == null ? null : ctx_r0.Parent.labelService.dsPatientInfoScreen.NorecordsfoundByFilter, ".");
  }
}
function PatientInfoTestsComponent_tbody_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 40)(1, "tr");
    \u0275\u0275template(2, PatientInfoTestsComponent_tbody_24_div_2_Template, 2, 1, "div", 7)(3, PatientInfoTestsComponent_tbody_24_div_3_Template, 2, 1, "div", 7);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", (ctx_r0.Parent == null ? null : ctx_r0.Parent.sidefilterService == null ? null : ctx_r0.Parent.sidefilterService.filter == null ? null : ctx_r0.Parent.sidefilterService.filter.IsApplyFilter) == false);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.Parent == null ? null : ctx_r0.Parent.sidefilterService == null ? null : ctx_r0.Parent.sidefilterService.filter == null ? null : ctx_r0.Parent.sidefilterService.filter.IsApplyFilter) == true);
  }
}
var PatientInfoTestsComponent = class _PatientInfoTestsComponent {
  constructor() {
    this.IsApplyFilter = false;
  }
  // constructor(){}
  ngOnChanges(changes) {
    console.log(changes);
    this.IsApplyFilter = changes.Parent.currentValue.sidefilterService.filter.IsApplyFilter;
  }
  static {
    this.\u0275fac = function PatientInfoTestsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PatientInfoTestsComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PatientInfoTestsComponent, selectors: [["app-patient-info-tests"]], inputs: { Parent: "Parent" }, features: [\u0275\u0275NgOnChangesFeature], decls: 25, vars: 9, consts: [["id", "patientinfoTbl-scrollabe", 1, "example-container", "pt-0", "patientInfo", 3, "scroll", "ngClass"], ["mat-table", "", "matSort", "", "summary", "", 1, "patient-table", "patientinfo", 3, "dataSource"], ["matColumnDef", "ViewedFlag"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "ngClass", 4, "matCellDef"], ["matColumnDef", " ", 4, "ngIf"], ["matColumnDef", "DateReceivedStr"], [4, "ngIf"], ["matColumnDef", "physician_name"], ["mat-cell", "", 3, "click", 4, "matCellDef"], ["matColumnDef", "AnalysisSourceName"], ["matColumnDef", "AnalysisTypeName"], ["matColumnDef", "AccessionId"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 3, "ngClass", 4, "matRowDef", "matRowDefColumns"], ["class", " norecord", 4, "ngIf"], ["mat-header-cell", ""], ["mat-cell", "", 3, "ngClass"], ["class", "float-left new-status-border mr-2", 3, "title", "click", 4, "ngIf"], ["class", "float-left viewed-status-border mr-2", 3, "title", "click", 4, "ngIf"], [1, "float-left", "new-status-border", "mr-2", 3, "click", "title"], [1, "float-left", "viewed-status-border", "mr-2", 3, "click", "title"], ["matColumnDef", " "], ["mat-cell", "", 4, "matCellDef"], ["class", "d-flex align-items-center chk-list", 4, "ngIf"], [1, "d-flex", "align-items-center", "chk-list"], [1, "example-margin", 3, "change", "checked"], ["mat-cell", ""], [1, "example-margin", "patientcheck", "clickable", 3, "change", "disabled", "checked"], ["mat-cell", "", 3, "ngClass", "click", 4, "matCellDef"], ["mat-cell", "", 3, "click", "ngClass"], [1, "textTtl", "d-none"], [1, "pdate", 3, "ngStyle"], ["mat-cell", "", 3, "click"], [3, "ngStyle"], [2, "display", "block", "float", "left", 3, "ngStyle"], ["style", "cursor: pointer; float: left !important;", 3, "title", "class", 4, "ngIf"], [2, "cursor", "pointer", "float", "left !important", 3, "title"], ["mat-header-row", ""], ["mat-row", "", 3, "ngClass"], [1, "norecord"]], template: function PatientInfoTestsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275listener("scroll", function PatientInfoTestsComponent_Template_div_scroll_0_listener($event) {
          return ctx.Parent.onTableScroll($event);
        });
        \u0275\u0275elementStart(1, "table", 1);
        \u0275\u0275elementContainerStart(2, 2);
        \u0275\u0275template(3, PatientInfoTestsComponent_th_3_Template, 2, 1, "th", 3)(4, PatientInfoTestsComponent_td_4_Template, 2, 6, "td", 4);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(5, PatientInfoTestsComponent_ng_container_5_Template, 3, 0, "ng-container", 5);
        \u0275\u0275elementContainerStart(6, 6);
        \u0275\u0275template(7, PatientInfoTestsComponent_th_7_Template, 2, 1, "th", 3)(8, PatientInfoTestsComponent_ng_container_8_Template, 2, 0, "ng-container", 7)(9, PatientInfoTestsComponent_ng_container_9_Template, 2, 0, "ng-container", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(10, 8);
        \u0275\u0275template(11, PatientInfoTestsComponent_th_11_Template, 2, 1, "th", 3)(12, PatientInfoTestsComponent_td_12_Template, 5, 5, "td", 9);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(13, 10);
        \u0275\u0275template(14, PatientInfoTestsComponent_th_14_Template, 2, 1, "th", 3)(15, PatientInfoTestsComponent_td_15_Template, 5, 5, "td", 9);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(16, 11);
        \u0275\u0275template(17, PatientInfoTestsComponent_th_17_Template, 2, 1, "th", 3)(18, PatientInfoTestsComponent_td_18_Template, 6, 6, "td", 9);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(19, 12);
        \u0275\u0275template(20, PatientInfoTestsComponent_th_20_Template, 2, 1, "th", 3)(21, PatientInfoTestsComponent_td_21_Template, 5, 5, "td", 9);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(22, PatientInfoTestsComponent_tr_22_Template, 1, 0, "tr", 13)(23, PatientInfoTestsComponent_tr_23_Template, 1, 5, "tr", 14);
        \u0275\u0275elementEnd();
        \u0275\u0275template(24, PatientInfoTestsComponent_tbody_24_Template, 4, 2, "tbody", 15);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275property("ngClass", !(ctx.Parent == null ? null : ctx.Parent.isConsultantUser) ? "" : "egpart");
        \u0275\u0275advance();
        \u0275\u0275property("dataSource", ctx.Parent == null ? null : ctx.Parent.dataSource);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !(ctx.Parent == null ? null : ctx.Parent.isConsultantUser));
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.Parent == null ? null : ctx.Parent.isConsultantUser);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !(ctx.Parent == null ? null : ctx.Parent.isConsultantUser));
        \u0275\u0275advance(13);
        \u0275\u0275property("matHeaderRowDef", ctx.Parent == null ? null : ctx.Parent.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.Parent == null ? null : ctx.Parent.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.Parent == null ? null : ctx.Parent.dataSource) === null || (ctx.Parent == null ? null : ctx.Parent.dataSource.data.length) === 0);
      }
    }, dependencies: [NgClass, NgIf, NgStyle, MatLegacyCheckbox, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container.egpart[_ngcontent-%COMP%] {\n  height: calc(100vh - 360px) !important;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: calc(100vh - 560px);\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c !important;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696 !important;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red !important;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n  margin-top: -11px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n  padding-left: 30px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ed8b00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  width: 77px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\n.patientInfo[_ngcontent-%COMP%]   table.mat-table[_ngcontent-%COMP%] {\n  border-collapse: separate !important;\n  border-spacing: 0 12px !important;\n  margin-top: -12px !important;\n}\n.patientInfo[_ngcontent-%COMP%]   table.mat-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntr.mat-footer-row[_ngcontent-%COMP%], \ntr.mat-row[_ngcontent-%COMP%] {\n  height: 60px;\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: center;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-right: 30px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  border-bottom-left-radius: 8px !important;\n  border-top-left-radius: 8px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  background: #fff !important;\n  padding-right: 23px !important;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.head1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.pdate[_ngcontent-%COMP%] {\n  width: 75px;\n  display: block;\n  word-break: break-word;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 36px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n.mat-icon[_ngcontent-%COMP%] {\n  color: #fff !important;\n}\n@media screen and (max-width: 1199px) and (min-width: 992px) {\n  .col1[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .follow_patient[_ngcontent-%COMP%]   .slide-toggle[_ngcontent-%COMP%] {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (max-width: 991px) {\n  .col1[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .col1[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 50%;\n    flex: 0 0 50%;\n    display: block;\n  }\n  .follow_patient[_ngcontent-%COMP%]   .slide-toggle[_ngcontent-%COMP%] {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \n   .patient-table[_ngcontent-%COMP%]   th.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n    max-width: 136px !important;\n  }\n}\n.filterp[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 36px;\n  margin: 8px 0px 8px 8px;\n}\n.mobile-header[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.selectOne[_ngcontent-%COMP%] {\n  width: 85%;\n}\n.selectTwo[_ngcontent-%COMP%] {\n  width: 15%;\n}\n.left-block[_ngcontent-%COMP%] {\n  width: calc(97vw - 356px);\n  right: 300px;\n}\n.right-filter[_ngcontent-%COMP%] {\n  right: 44px;\n}\n  .dashboard-wrapper .mat-drawer-content {\n  overflow: inherit;\n}\n@media screen and (max-width: 767px) {\n  .svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n  .filtericon[_ngcontent-%COMP%] {\n    padding-right: 5px;\n  }\n  .qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: initial;\n  }\n    .dashboard-wrapper .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    right: 0;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    width: inherit !important;\n    right: 0 !important;\n  }\n    .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .labeltxt[_ngcontent-%COMP%] {\n    padding-left: 5px !important;\n    text-align: left !important;\n  }\n  table.mat-table[_ngcontent-%COMP%]   tr.mat-header-row[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n    box-shadow: none !important;\n  }\n  .selectOne[_ngcontent-%COMP%] {\n    width: 70%;\n  }\n  .selectTwo.toprow[_ngcontent-%COMP%] {\n    width: 30%;\n    box-shadow: none !important;\n    border: none;\n    background: none;\n  }\n  .d-md-none[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .m-cont[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .mobile-header[_ngcontent-%COMP%] {\n    display: block !important;\n    background: #ffffff;\n    padding: 10px 0 10px 10px;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    padding-right: 3px !important;\n  }\n  .m-title[_ngcontent-%COMP%] {\n    font-weight: 600;\n    font-size: 16px;\n  }\n  .m-back[_ngcontent-%COMP%] {\n    padding-right: 10%;\n  }\n  table.mat-table[_ngcontent-%COMP%] {\n    margin-top: -12px !important;\n  }\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  .mat-row[_ngcontent-%COMP%]:nth-child(even) {\n    background: #fff;\n  }\n  .patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n   .patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    padding-bottom: 18px;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 16px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n    word-break: break-all;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    padding: 0 12px 0 0;\n    height: inherit;\n    overflow: inherit;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px !important;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none !important;\n    padding-left: 0px !important;\n  }\n  .patientinfo[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  .patientinfo[_ngcontent-%COMP%]   .patientcheck[_ngcontent-%COMP%] {\n    position: absolute;\n    right: 12px;\n    top: 25px;\n    z-index: 99;\n  }\n  .patientinfo[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    height: 0;\n    padding-top: 0;\n  }\n  .headtitle[_ngcontent-%COMP%]:before {\n    display: none;\n  }\n  .conpart[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  .conpart[_ngcontent-%COMP%]:before {\n    content: "";\n    height: 2px;\n    width: 93%;\n    position: absolute;\n    left: 13px;\n    bottom: 12px;\n    background: #b7bab7;\n  }\n  .head1.headtitle[_ngcontent-%COMP%] {\n    padding-top: 8px;\n  }\n}\n@media screen and (max-width: 346px) {\n  .select-max-w[_ngcontent-%COMP%] {\n    flex: 0 0 70%;\n    max-width: 70%;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 390px) {\n  .btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    padding: 0px 13px 0px 8px !important;\n    margin-left: 10px !important;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1180px) {\n  .right-filter[_ngcontent-%COMP%] {\n    top: 75px;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .sidefilter[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%] {\n    padding-left: 20%;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n    .left-block {\n    width: inherit !important;\n    right: 0 !important;\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    top: 55px;\n  }\n  .filterp[_ngcontent-%COMP%] {\n    display: block !important;\n    text-align: right;\n    margin-right: 10px;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n    height: calc(100vh - 300px);\n  }\n  .svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1300px) {\n    .left-block {\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 300px);\n  }\n}\n.hello[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.btnpoint[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n.btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\n  padding: 0px 10px;\n  color: #0072ce;\n  font-weight: bold;\n  border: 2px solid #0072ce;\n  background: transparent;\n}\n.btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0px 35px 0px 22px;\n  color: #959393;\n  font-weight: bold;\n  border: 2px solid #dcd8d8;\n  background: #f6f6f6;\n}\n.refbtn[_ngcontent-%COMP%] {\n  margin-top: 20px;\n}\n.head1.headtitle[_ngcontent-%COMP%] {\n  font-size: 15px !important;\n  position: relative;\n  height: 28px;\n}\n.labeltxt[_ngcontent-%COMP%] {\n  padding-left: 12%;\n}\n.refbtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 20px;\n}\n.tablecont.mat-card[_ngcontent-%COMP%] {\n  border-top-right-radius: 10px !important;\n  margin: 0 7px !important;\n}\n.headtitle[_ngcontent-%COMP%]:before {\n  content: "";\n  height: 0.8px;\n  width: 95%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background: #9ea29e;\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n.editBtn[_ngcontent-%COMP%] {\n  background: #f4f4f4 !important;\n  border: solid 0.4px #979797 !important;\n}\n/*# sourceMappingURL=patient-info-tests.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PatientInfoTestsComponent, { className: "PatientInfoTestsComponent", filePath: "src\\app\\components\\patient-managements\\patient-info-tests\\patient-info-tests.component.ts", lineNumber: 7 });
})();

// src/app/shared/pdf-modal/pdf-modal.component.ts
function PdfModalComponent_pdf_viewer_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "pdf-viewer", 10);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("src", ctx_r0.pdfBase64)("render-text", true)("show-all", true)("autoresize", true)("show-borders", false);
  }
}
var PdfModalComponent = class _PdfModalComponent {
  constructor(sanitizer, activeModal, labelService) {
    this.sanitizer = sanitizer;
    this.activeModal = activeModal;
    this.labelService = labelService;
    this.pdfBase64 = null;
    this.pdfSrc = null;
    this.label = this.labelService.dsHomePageScreen;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.getHomePageScreenLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      console.log(data);
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.getHomePageScreenLabel();
    });
  }
  ngOnInit() {
  }
  close() {
    this.activeModal.close();
  }
  downloadPdfFromBase64(fileName = "document.pdf") {
    if (!this.pdfBase64) {
      throw new Error("Missing base64 data for PDF download");
    }
    const link = document.createElement("a");
    const href = this.pdfBase64;
    const sanitizedFilename = fileName.replace(/[^\w\s\.-]/g, "");
    link.href = href;
    link.download = sanitizedFilename;
    link.dispatchEvent(new MouseEvent("click", { bubbles: true }));
  }
  static {
    this.\u0275fac = function PdfModalComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PdfModalComponent)(\u0275\u0275directiveInject(DomSanitizer), \u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(LabelService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PdfModalComponent, selectors: [["app-pdf-modal"]], inputs: { pdfBase64: "pdfBase64" }, decls: 14, vars: 3, consts: [[1, "modal-header"], [1, "modal-title"], ["type", "button", "aria-label", "Close", 1, "close", 3, "click"], ["aria-hidden", "true"], [1, "pull-right", "dwnBtn", 3, "click"], [2, "cursor", "default"], ["src", "../../../../assets/img/download.png", "alt", ""], [2, "vertical-align", "middle"], [1, "modal-body"], ["style", "width: 100% !important;max-width: 100% !important; height: 500px; margin-top: 10px;", 3, "src", "render-text", "show-all", "autoresize", "show-borders", 4, "ngIf"], [2, "width", "100% !important", "max-width", "100% !important", "height", "500px", "margin-top", "10px", 3, "src", "render-text", "show-all", "autoresize", "show-borders"]], template: function PdfModalComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "h4", 1);
        \u0275\u0275text(2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "button", 2);
        \u0275\u0275listener("click", function PdfModalComponent_Template_button_click_3_listener() {
          return ctx.close();
        });
        \u0275\u0275elementStart(4, "span", 3);
        \u0275\u0275text(5, "\xD7");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(6, "button", 4);
        \u0275\u0275listener("click", function PdfModalComponent_Template_button_click_6_listener() {
          return ctx.downloadPdfFromBase64();
        });
        \u0275\u0275elementStart(7, "span", 5);
        \u0275\u0275element(8, "img", 6);
        \u0275\u0275elementStart(9, "a", 7);
        \u0275\u0275text(10);
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(11, "br");
        \u0275\u0275elementStart(12, "div", 8);
        \u0275\u0275template(13, PdfModalComponent_pdf_viewer_13_Template, 1, 5, "pdf-viewer", 9);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.label.Report);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.label.Download);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.pdfBase64);
      }
    }, dependencies: [NgIf, PdfViewerComponent], styles: ["\n\n  .ng2-pdf-viewer-container {\n  overflow-x: hidden !important;\n}\n.dwnBtn[_ngcontent-%COMP%] {\n  margin-right: 20px !important;\n  font-size: 16px !important;\n  color: #007bff;\n  background-color: #fff;\n  border: none !important;\n}\n.dwnBtn[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 22px;\n}\n/*# sourceMappingURL=pdf-modal.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PdfModalComponent, { className: "PdfModalComponent", filePath: "src\\app\\shared\\pdf-modal\\pdf-modal.component.ts", lineNumber: 37 });
})();

// src/app/components/patient-managements/consultation-list/consultation-details/consultation-details.component.ts
var _c015 = (a0) => ({ "color": a0 });
function ConsultationDetailsComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "titlecase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2(" ", \u0275\u0275pipeBind1(2, 2, ctx_r1.labelService.dsPatientInfoScreen.ConsultationAppWith), " ", ctx_r1.data.Consultant_Fname || ctx_r1.data.Consultant_Lname ? ctx_r1.data.Consultant_Fname + " " + ctx_r1.data.Consultant_Lname : "NA", " ");
  }
}
function ConsultationDetailsComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.EmailConsultation, " ");
  }
}
function ConsultationDetailsComponent_p_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10)(1, "span", 39);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(2, _c015, ctx_r1.data.StatusID == 1 ? "orange" : ""));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Pending, " ");
  }
}
function ConsultationDetailsComponent_p_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10)(1, "span", 39);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(2, _c015, ctx_r1.data.StatusID == 2 ? "green" : ""));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Completed, " ");
  }
}
function ConsultationDetailsComponent_p_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10)(1, "span", 39);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(2, _c015, ctx_r1.data.StatusID == 3 ? "red" : ""));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Canceled, " ");
  }
}
function ConsultationDetailsComponent_p_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.NA, " ");
  }
}
function ConsultationDetailsComponent_span_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 40);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "span", 41);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" \xA0\xA0", ctx_r1.labelService.dsPatientInfoScreen.JoinZoom, "");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" (", ctx_r1.data.IsAudioCall ? ctx_r1.labelService.dsPatientInfoScreen.Audio : ctx_r1.labelService.dsPatientInfoScreen.Video, ") ");
  }
}
function ConsultationDetailsComponent_p_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "a", 42);
    \u0275\u0275text(2);
    \u0275\u0275elementStart(3, "span", 43);
    \u0275\u0275element(4, "img", 44);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("target", ctx_r1.data.StatusID == 1 ? "_blank" : "")("href", ctx_r1.data.StatusID == 1 ? "https://zoom.us/j/91012021686?pwd=YK6DCINBQGbpWOV40goDlwnFdBFVo0.1" : "javascript:void(0)", \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService == null ? null : ctx_r1.labelService.dsHomePageScreen.JoinMeeting, " ");
  }
}
function ConsultationDetailsComponent_p_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 40);
    \u0275\u0275element(1, "img", 45);
    \u0275\u0275elementStart(2, "span", 46);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.EmailResp, " ");
  }
}
function ConsultationDetailsComponent_p_45_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 9);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.ZoomDetail, " ");
  }
}
function ConsultationDetailsComponent_p_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275element(4, "br");
    \u0275\u0275text(5);
    \u0275\u0275elementStart(6, "span");
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.ID, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.data.ZoomId);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Passcode, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.data.ZoomPasscode);
  }
}
function ConsultationDetailsComponent_p_47_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 9);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.Consultant, " ");
  }
}
function ConsultationDetailsComponent_p_48_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 10)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.data.Consultant_Fname || ctx_r1.data.Consultant_Lname ? ctx_r1.data.Consultant_Fname + " " + ctx_r1.data.Consultant_Lname : "NA");
  }
}
function ConsultationDetailsComponent_div_105_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 47)(1, "p", 9);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.ClinicalQuestion == null ? null : ctx_r1.labelService.dsPatientInfoScreen.ClinicalQuestion.replace("Clinical Question (s)", "Clinical Question(s)"), " ");
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1.formatTxt(ctx_r1.data.TopicOfDisscussion), \u0275\u0275sanitizeHtml);
  }
}
function ConsultationDetailsComponent_div_106_p_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 49)(1, "a", 50);
    \u0275\u0275element(2, "img", 51);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const attachment_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("download", attachment_r3.AttachmentFileName);
    \u0275\u0275propertyInterpolate("href", attachment_r3.ImageBase64, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", attachment_r3.AttachmentFileName, "");
  }
}
function ConsultationDetailsComponent_div_106_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 32)(1, "div", 15)(2, "p", 9);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, ConsultationDetailsComponent_div_106_p_4_Template, 4, 3, "p", 48);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.AttachedDoc, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.data.ApptDocAttachment);
  }
}
var ConsultationDetailsComponent = class _ConsultationDetailsComponent {
  constructor(modalRef, data, dataService, commonService, labelService) {
    this.modalRef = modalRef;
    this.data = data;
    this.dataService = dataService;
    this.commonService = commonService;
    this.labelService = labelService;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindAnaysisResultsLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindAnaysisResultsLabel();
    });
  }
  ngOnInit() {
    this.getLabelDetails();
    this.consultantName = this.data?.Consultant_Fname || this.data?.Consultant_Lname ? this.data?.Consultant_Fname + " " + this.data?.Consultant_Lname : "NA";
  }
  getconsultationAppointmentReportView(appointment_id) {
    const payload = {
      BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      AppointmentId: appointment_id
    };
    return this.commonService.ConsultationAppointmentReportView(payload);
  }
  closeModal() {
    this.modalRef.close();
  }
  formatTxt(str) {
    if (str)
      return str.replace(/\n/g, "<br>");
  }
  static {
    this.\u0275fac = function ConsultationDetailsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultationDetailsComponent)(\u0275\u0275directiveInject(MatLegacyDialogRef), \u0275\u0275directiveInject(MAT_LEGACY_DIALOG_DATA), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultationDetailsComponent, selectors: [["app-consultation-details"]], decls: 110, vars: 46, consts: [["elseBlock", ""], ["mat-dialog-title", "", 1, "title-containers"], ["role", "toolbar", 1, "task-header"], ["data-testid", "mp-title", 1, "dialogttl"], [4, "ngIf", "ngIfElse"], ["type", "button", "aria-label", "Close", 1, "close", "body-close", 3, "click"], ["aria-hidden", "true"], [1, "sched-top", "row", "py-2", "mt-2", "mx-3", "pl-0"], [1, "col-sm-4", "col-md-4", "innerPart"], [1, "col-form-label_heading"], [1, "edit_grp_txt2"], ["class", "edit_grp_txt2", 4, "ngIf"], ["mat-dialog-content", "", 1, "fixed-modal", "modal-part", "mx-3"], [1, "container-fluid", "ng-star-inserted", "mat-container"], [1, "row"], [1, "col-12"], [1, "col-12", "col-lg-4", "col-xl-4"], [1, "col-form-label_heading", "ng-star-inserted"], [1, "col-12", "col-lg-4", "col-xl-4", "zoomTxt"], ["class", "edit_grp_txt2 ng-star-inserted", 4, "ngIf"], [4, "ngIf"], [1, "col-12", "col-lg-4", "col-xl-4", "ng-star-inserted"], ["class", "col-form-label_heading", 4, "ngIf"], [1, "doctor-detail", "d-flex", "justify-content-between", "mt-2"], [1, "doct-inner"], [1, "d-flex", "justify-content-start", "align-items-center"], [1, "col-form-label_heading", "pt-0"], [1, "d-flex", "justify-content-start", "align-items-center", "doc-border", "w-100"], [1, "doctor-detail", "my-3"], [1, "doct-inner-part"], [1, "d-flex", "justify-content-start", "align-items-center", "w-50"], [1, "d-flex", "justify-content-start", "align-items-center", "w-50", "pl-2"], [1, "row", "mt-2"], [1, "col-12", "mb-3"], [1, "edit_grp_txt2", 3, "innerHTML"], ["class", "col-12 mb-2", 4, "ngIf"], ["class", "row mt-2", 4, "ngIf"], ["align", "center"], ["type", "button", 1, "btn", "save-change", "SaveBtn", 3, "click"], [3, "ngStyle"], [1, "edit_grp_txt2", "ng-star-inserted"], [1, "ng-star-inserted"], [1, "zoompart", 3, "target", "href"], [1, "ml-2"], ["src", "../../../../assets/img/vicon.svg", "alt", "", "width", "19px"], ["src", "../../../../../assets/img/zcs/email_res.png", "alt", "", 1, "float-left"], [1, "edit_grp_txt3", "ml-2"], [1, "col-12", "mb-2"], ["class", "mt-2 file_circle", 4, "ngFor", "ngForOf"], [1, "mt-2", "file_circle"], ["target", "_blank", 3, "download", "href"], ["src", "../../../../assets/img/zcs/pdf.png", "alt", ""]], template: function ConsultationDetailsComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "h4", 1)(1, "mat-toolbar", 2)(2, "span", 3);
        \u0275\u0275template(3, ConsultationDetailsComponent_span_3_Template, 3, 4, "span", 4)(4, ConsultationDetailsComponent_ng_template_4_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(6, "button", 5);
        \u0275\u0275listener("click", function ConsultationDetailsComponent_Template_button_click_6_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.closeModal());
        });
        \u0275\u0275elementStart(7, "span", 6);
        \u0275\u0275text(8, "\xD7");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(9, "div", 7)(10, "div", 8)(11, "p", 9);
        \u0275\u0275text(12);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(13, "p", 10);
        \u0275\u0275text(14);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(15, "div", 8)(16, "p", 9);
        \u0275\u0275text(17);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(18, "p", 10);
        \u0275\u0275text(19);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(20, "div", 8)(21, "p", 9);
        \u0275\u0275text(22, "Status:");
        \u0275\u0275elementEnd();
        \u0275\u0275template(23, ConsultationDetailsComponent_p_23_Template, 3, 4, "p", 11)(24, ConsultationDetailsComponent_p_24_Template, 3, 4, "p", 11)(25, ConsultationDetailsComponent_p_25_Template, 3, 4, "p", 11)(26, ConsultationDetailsComponent_p_26_Template, 2, 1, "p", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(27, "div", 12)(28, "div", 13)(29, "div", 14)(30, "div", 15)(31, "div", 14)(32, "div", 16)(33, "p", 17);
        \u0275\u0275text(34);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(35, "p", 10);
        \u0275\u0275text(36);
        \u0275\u0275pipe(37, "localDate");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(38, "div", 18)(39, "p", 9);
        \u0275\u0275text(40);
        \u0275\u0275template(41, ConsultationDetailsComponent_span_41_Template, 4, 2, "span", 19);
        \u0275\u0275elementEnd();
        \u0275\u0275template(42, ConsultationDetailsComponent_p_42_Template, 5, 3, "p", 20)(43, ConsultationDetailsComponent_p_43_Template, 4, 1, "p", 19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(44, "div", 21);
        \u0275\u0275template(45, ConsultationDetailsComponent_p_45_Template, 2, 1, "p", 22)(46, ConsultationDetailsComponent_p_46_Template, 8, 4, "p", 11)(47, ConsultationDetailsComponent_p_47_Template, 2, 1, "p", 22)(48, ConsultationDetailsComponent_p_48_Template, 3, 1, "p", 11);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(49, "div", 23)(50, "div", 24)(51, "div", 25)(52, "p", 26);
        \u0275\u0275text(53, "Doctor:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(54, "p", 10);
        \u0275\u0275text(55);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(56, "div", 27)(57, "p", 10);
        \u0275\u0275text(58);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(59, "p", 10);
        \u0275\u0275text(60);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(61, "div", 24)(62, "div", 25)(63, "p", 26);
        \u0275\u0275text(64, "Clinic:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(65, "p", 10);
        \u0275\u0275text(66);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(67, "div", 27)(68, "p", 10);
        \u0275\u0275text(69);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(70, "p", 10);
        \u0275\u0275text(71);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(72, "p", 10);
        \u0275\u0275text(73);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(74, "p", 10);
        \u0275\u0275text(75);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(76, "div", 28)(77, "div", 29)(78, "div", 25)(79, "div", 30)(80, "p", 26);
        \u0275\u0275text(81);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(82, "p", 10);
        \u0275\u0275text(83);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(84, "div", 31)(85, "p", 26);
        \u0275\u0275text(86, "Owner:");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(87, "p", 10);
        \u0275\u0275text(88);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(89, "div", 27)(90, "p", 10);
        \u0275\u0275text(91);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(92, "p", 10);
        \u0275\u0275text(93);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(94, "p", 10);
        \u0275\u0275text(95);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(96, "p", 10);
        \u0275\u0275text(97);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(98, "p", 10);
        \u0275\u0275text(99);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(100, "div", 32)(101, "div", 33)(102, "p", 9);
        \u0275\u0275text(103);
        \u0275\u0275elementEnd();
        \u0275\u0275element(104, "p", 34);
        \u0275\u0275elementEnd();
        \u0275\u0275template(105, ConsultationDetailsComponent_div_105_Template, 4, 2, "div", 35);
        \u0275\u0275elementEnd();
        \u0275\u0275template(106, ConsultationDetailsComponent_div_106_Template, 5, 2, "div", 36);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(107, "mat-dialog-actions", 37)(108, "button", 38);
        \u0275\u0275listener("click", function ConsultationDetailsComponent_Template_button_click_108_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.closeModal());
        });
        \u0275\u0275text(109);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        const elseBlock_r4 = \u0275\u0275reference(5);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.data.IsVideoCall || ctx.data.IsAudioCall)("ngIfElse", elseBlock_r4);
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Specialty, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.Speciality ? ctx.data.Speciality : "NA");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.PreferredLanguage, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.Langauge ? ctx.data.Langauge : "NA");
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", ctx.data.StatusID == 1);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.StatusID == 2);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.StatusID == 3);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.data.StatusID);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1(" ", !(ctx.data.IsVideoCall || ctx.data.IsAudioCall) ? ctx.labelService.dsPatientInfoScreen.DateRequested : ctx.labelService.dsPatientInfoScreen.AppointmentTIme, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind2(37, 43, ctx.data.ConvertedDateTimeWithTimeZone, "dt"), " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Mode, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.IsVideoCall || ctx.data.IsAudioCall);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.data.IsVideoCall || ctx.data.IsAudioCall) && ctx.data.StatusID == 1);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !(ctx.data.IsVideoCall || ctx.data.IsAudioCall));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.data.IsVideoCall || ctx.data.IsAudioCall);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.IsVideoCall || ctx.data.IsAudioCall);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !(ctx.data.IsVideoCall || ctx.data.IsAudioCall));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !(ctx.data.IsVideoCall || ctx.data.IsAudioCall));
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate1("", ctx.data.DoctorName, " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.data.DoctorEmail, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.DoctorPhoneNo);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate1(" ", ctx.data.ClinicName, "");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.data.ClinicCountry, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.data.ClinicState, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.data.ClinicCity, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.data.ClinicZipCode);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Patient, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate2("", ctx.data.PatientName, " - ", ctx.data.PatientId, "");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.data.OwnerName);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.data.Species, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.data.BreedName, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.data.PatientSex, ", ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1("", ctx.data.PatientAge, ",");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate2("", ctx.data.PatientWeight, " ", ctx.data.WeightUnit, "");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.CaseSummary, " ");
        \u0275\u0275advance();
        \u0275\u0275property("innerHTML", ctx.formatTxt(ctx.data.AdditionalComments), \u0275\u0275sanitizeHtml);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.TopicOfDisscussion);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.data.ApptDocAttachment.length);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Close, " ");
      }
    }, dependencies: [NgForOf, NgIf, NgStyle, MatToolbar, MatLegacyDialogTitle, MatLegacyDialogContent, MatLegacyDialogActions, TitleCasePipe, LocalDatePipe], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.patient-table[_ngcontent-%COMP%] {\n  width: 99%;\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: 400px;\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 8%;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 106px !important;\n  word-break: break-all !important;\n}\n.mat-row[_ngcontent-%COMP%]:hover {\n  background-color: whitesmoke !important;\n}\ntd.mat-cell[_ngcontent-%COMP%] {\n  cursor: default !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ed8b00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media screen and (min-width: 768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n}\n.m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  .radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n    line-height: 1.5;\n  }\n  .number-tab[_ngcontent-%COMP%] {\n    margin-bottom: 15px;\n  }\n    .mat-dialog-container {\n    background: #f0eff4;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    position: absolute;\n    right: -120px;\n    top: -3px;\n    z-index: 9999;\n  }\n    .cdk-overlay-pane {\n    min-width: initial !important;\n    max-width: 96vw !important;\n    width: 100% !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n    .modal-dialog {\n    padding: 0 15px;\n  }\n  .title-card[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 0;\n    font-size: 17px;\n  }\n  .m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    display: block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n    position: relative;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .mat-table[_ngcontent-%COMP%], \n   .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n    padding-left: 20% !important;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 23%;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]::before {\n    display: none;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 0 !important;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 335px);\n    padding: 0px 6px 0 6px !important;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type {\n    font-family: "gothambook", sans-serif !important;\n  }\n  .rowpart[_ngcontent-%COMP%] {\n    flex-direction: column-reverse;\n  }\n  .rowpart[_ngcontent-%COMP%]   .number-tab[_ngcontent-%COMP%] {\n    min-width: 100%;\n  }\n  .rowpart[_ngcontent-%COMP%]   .md-stepper-horizontal[_ngcontent-%COMP%] {\n    background: transparent;\n    padding-bottom: 0 !important;\n  }\n  .nopad[_ngcontent-%COMP%] {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .labelpart[_ngcontent-%COMP%], \n   .txtpart[_ngcontent-%COMP%] {\n    padding-top: 20px;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n  .mat-dialog-title {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n  .mat-toolbar {\n  background-color: #1072ce;\n  color: #fff;\n  text-align: center;\n  justify-content: center;\n  position: relative;\n}\n  .mat-dialog-container {\n  padding: 0 !important;\n  overflow: hidden;\n}\n  .mat-dialog-content {\n  margin: 24px;\n  padding: 0px;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%] {\n  display: table;\n  width: 100%;\n  margin: 0 auto;\n  background-color: #ffffff;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%] {\n  display: table-cell;\n  position: relative;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:active {\n  border-radius: 15% / 75%;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child:active {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child:active {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:hover {\n  cursor: pointer;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child   .md-step-bar-right[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  width: 30px;\n  height: 30px;\n  margin: 0 auto;\n  background-color: #fff;\n  border-radius: 50%;\n  text-align: center;\n  line-height: 30px;\n  font-size: 13px;\n  font-weight: 600;\n  color: rgb(44, 41, 41);\n  border: 1px solid #ccc;\n}\n.md-stepper-horizontal.green[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #00ae4d;\n}\n.md-stepper-horizontal.orange[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #1072ce;\n  color: #fff;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: rgb(33, 150, 243);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f00c";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  -moz-transform: scaleX(-1);\n  -o-transform: scaleX(-1);\n  -webkit-transform: scaleX(-1);\n  transform: scaleX(-1);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f040";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  margin-top: 16px;\n  font-size: 16px;\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  text-align: center;\n  color: rgba(0, 0, 0, 0.26);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: rgba(0, 0, 0, 0.87);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.done[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.editable[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, 0.54);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 14px;\n  height: 1px;\n  border-top: 1px solid #dddddd;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  right: 0;\n  left: 50%;\n  margin-left: 20px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%] {\n  left: 0;\n  right: 50%;\n  margin-right: 20px;\n}\nbutton.refbtn[_ngcontent-%COMP%] {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 15px;\n}\n  .mat-dialog-actions {\n  justify-content: center;\n  margin-bottom: 0;\n}\n  .mat-form-field-appearance-outline .mat-form-field-wrapper {\n  margin: 0 !important;\n}\n  .example-container {\n  margin: 0 !important;\n  padding: 0 !important;\n}\n  .mat-form-field-wrapper {\n  padding-bottom: 0 !important;\n}\n.checkbox-custom[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%] {\n  opacity: 0;\n  position: absolute;\n}\n.checkbox-custom[_ngcontent-%COMP%]    + .checkbox-custom-label[_ngcontent-%COMP%]:before, \n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "";\n  background: #fff;\n  display: inline-block;\n  vertical-align: middle;\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  text-align: center;\n}\n.checkbox-custom[_ngcontent-%COMP%]:checked    + .checkbox-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\f00c";\n  font-family: "FontAwesome", sans-serif;\n  background: rebeccapurple;\n  color: #fff;\n}\n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  border-radius: 50%;\n}\n.radio-custom[_ngcontent-%COMP%]:checked    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\2713";\n  color: #fff;\n  background: green;\n}\n.checkbox-custom[_ngcontent-%COMP%]:focus    + .checkbox-custom-label[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%]:focus    + .radio-custom-label[_ngcontent-%COMP%] {\n  outline: 1px solid #ddd;\n}\n  .modal-header.mgp {\n  background: none !important;\n  border: none !important;\n}\n  .modal-content {\n  border: none;\n  -webkit-box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n  -moz-box-shadow: -2px 3px 15px 0px rgba(0, 0, 0, 0.5);\n  box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n}\n  .confirm-modal {\n  max-height: 500px;\n  overflow: hidden;\n}\n  .cdk-overlay-pane {\n  min-width: 400px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 0 !important;\n  width: 50px !important;\n}\n  .modal {\n  z-index: 10010 !important;\n}\n  .modal-backdrop {\n  z-index: 10000 !important;\n}\np[_ngcontent-%COMP%] {\n  padding: 0;\n  margin: 0;\n}\n.container-fluid[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.col-form-label_heading[_ngcontent-%COMP%] {\n  font-family: GothamNarrowBook, sans-serif;\n}\n.close[_ngcontent-%COMP%] {\n  color: #fff !important;\n  position: absolute;\n  float: right;\n  right: 10px;\n  top: 10px;\n}\n.edit_grp_txt3[_ngcontent-%COMP%] {\n  font-size: 15px;\n  font-family: GothamNarrowBook, sans-serif;\n  padding-top: 0;\n  margin: 0;\n  color: #0072ce;\n  font-weight: 600;\n  vertical-align: sub;\n}\n.edit_grp_txt2[_ngcontent-%COMP%] {\n  font-weight: normal;\n}\n.sched-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 0;\n  background: #ffffff;\n  z-index: 10;\n  padding: 5px 13px;\n  border-bottom: 1px solid #dee2e6;\n}\n.fixed-modal[_ngcontent-%COMP%] {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n}\n.fixed-modal[_ngcontent-%COMP%]   .mat-container[_ngcontent-%COMP%] {\n  max-height: calc(75vh - 100px);\n  overflow-y: auto;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n.SaveBtn[_ngcontent-%COMP%] {\n  line-height: 1.5px;\n}\n.fixed-modal.modal-part[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n  border-bottom: 1px solid #dee2e6;\n}\n.innerPart[_ngcontent-%COMP%] {\n  display: flex;\n}\n.innerPart[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  font-weight: bold;\n  padding-right: 6px;\n}\n.innerPart[_ngcontent-%COMP%]:last-child   p[_ngcontent-%COMP%]:last-child {\n  color: #8bc34a;\n}\n.zoompart[_ngcontent-%COMP%] {\n  border: 2px solid #035771;\n  color: #035771;\n  background: transparent;\n  max-width: 210px;\n  display: flex;\n  justify-content: space-evenly;\n  margin-top: 5px;\n  cursor: pointer;\n  font-weight: 700;\n  text-align: center;\n  border-radius: 8px;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n  padding: 3px 0;\n}\n.doct-inner[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%], \n.doct-inner-part[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #585858;\n  font-family: GothamNarrowBook, sans-serif;\n  padding-top: 0;\n  margin: 0;\n  word-break: break-all;\n  line-height: 2;\n  font-weight: 500;\n}\n.doctor-detail[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%] {\n  padding-left: 5px;\n}\n.doc-border[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  padding: 3px 8px;\n  border-radius: 4px;\n}\n.doct-inner[_ngcontent-%COMP%] {\n  width: 49%;\n}\n.prev[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.title-container[_ngcontent-%COMP%]   .mat-toolbar-row[_ngcontent-%COMP%], \n.mat-toolbar-single-row[_ngcontent-%COMP%] {\n  height: inherit;\n  background-color: #0d79d1;\n  color: #fff;\n  padding: 7px;\n  font-size: 17px;\n}\n.title-containers[_ngcontent-%COMP%] {\n  position: relative;\n}\n.title-containers[_ngcontent-%COMP%]   .close[_ngcontent-%COMP%] {\n  right: 15px;\n  top: 17px;\n}\n.modal-part[_ngcontent-%COMP%]   .col-form-label_heading[_ngcontent-%COMP%] {\n  font-size: 14px;\n  color: #3e3e3e;\n  font-family: GothamNarrowBold, sans-serif;\n  margin: 0;\n}\n.innerPart[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%] {\n  font-size: 14px;\n  color: #5a5a5a;\n  font-family: GothamNarrowBook, sans-serif;\n  padding-top: 0;\n  margin: 0;\n  word-break: break-word;\n  text-wrap-mode: wrap;\n}\n.modal-part[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%] {\n  font-size: 14px;\n  color: #5a5a5a !important;\n  font-family: GothamNarrowBook, sans-serif;\n  padding-top: 0;\n  margin: 0;\n  word-break: break-word;\n  text-wrap-mode: wrap;\n}\n.innerPart[_ngcontent-%COMP%]   .col-form-label_heading[_ngcontent-%COMP%] {\n  font-size: 14px;\n  color: #3e3e3e;\n  font-family: GothamNarrowBold, sans-serif;\n  margin: 0;\n}\n.modal-part[_ngcontent-%COMP%]   .doc-border[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  padding: 4px 8px;\n  border-radius: 4px;\n  background: #eeeeeeb8;\n}\n@media screen and (max-width: 767px) {\n  .doct-inner[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .doctor-detail[_ngcontent-%COMP%] {\n    flex-wrap: wrap;\n  }\n  .doctor-detail[_ngcontent-%COMP%]   .edit_grp_txt2[_ngcontent-%COMP%] {\n    line-height: 1.2;\n  }\n  .fixed-modal[_ngcontent-%COMP%]   .mat-container[_ngcontent-%COMP%] {\n    background: #fff;\n  }\n  .mat-dialog-actions[_ngcontent-%COMP%] {\n    background: #fff;\n  }\n  .title-container[_ngcontent-%COMP%]   .mat-toolbar-row[_ngcontent-%COMP%], \n   .mat-toolbar-single-row[_ngcontent-%COMP%] {\n    font-size: 13px;\n    justify-content: start;\n  }\n}\n/*# sourceMappingURL=consultation-details.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultationDetailsComponent, { className: "ConsultationDetailsComponent", filePath: "src\\app\\components\\patient-managements\\consultation-list\\consultation-details\\consultation-details.component.ts", lineNumber: 10 });
})();

// src/app/components/patient-managements/consultation-list/consultation-list.component.ts
var _c016 = () => ["expandedDetail"];
var _c112 = (a0, a1, a2) => ({ pending: a0, completed: a1, cancelled: a2 });
function ConsultationListComponent_th_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 20);
  }
}
function ConsultationListComponent_td_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "td", 21);
  }
  if (rf & 2) {
    const element_r1 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(1, _c112, element_r1.StatusID === 1, element_r1.StatusID === 2, element_r1.StatusID === 3));
  }
}
function ConsultationListComponent_th_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Date);
  }
}
function ConsultationListComponent_td_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22)(1, "p", 23);
    \u0275\u0275text(2);
    \u0275\u0275pipe(3, "localDate");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(3, 1, element_r3.DataTimeArr), " ");
  }
}
function ConsultationListComponent_th_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.consultantSpecialty);
  }
}
function ConsultationListComponent_td_11_p_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 23);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("(", element_r4.Speciality, ")");
  }
}
function ConsultationListComponent_td_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22)(1, "p", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, ConsultationListComponent_td_11_p_3_Template, 2, 1, "p", 24);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate2("", element_r4.Consultant_Fname, " ", element_r4.Consultant_Lname, "");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.Speciality);
  }
}
function ConsultationListComponent_th_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Mode);
  }
}
function ConsultationListComponent_td_14_img_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 28);
  }
}
function ConsultationListComponent_td_14_img_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 29);
  }
}
function ConsultationListComponent_td_14_img_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 30);
  }
}
function ConsultationListComponent_td_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22)(1, "span");
    \u0275\u0275template(2, ConsultationListComponent_td_14_img_2_Template, 1, 0, "img", 25)(3, ConsultationListComponent_td_14_img_3_Template, 1, 0, "img", 26)(4, ConsultationListComponent_td_14_img_4_Template, 1, 0, "img", 27);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r5.IsVideoCall);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.IsAudioCall);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !element_r5.IsAudioCall && !element_r5.IsVideoCall);
  }
}
function ConsultationListComponent_th_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.ConsultCommAndReport);
  }
}
function ConsultationListComponent_td_17_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "a", 33);
    \u0275\u0275element(2, "img", 34);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const attachment_r6 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("download", attachment_r6.AttachmentFileName);
    \u0275\u0275propertyInterpolate("href", attachment_r6.ImageBase64, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", attachment_r6.AttachmentFileName, "");
  }
}
function ConsultationListComponent_td_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31);
    \u0275\u0275template(1, ConsultationListComponent_td_17_p_1_Template, 4, 3, "p", 32);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", element_r7.ApptDocAttachment);
  }
}
function ConsultationListComponent_th_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Report);
  }
}
function ConsultationListComponent_td_20_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 36);
    \u0275\u0275listener("click", function ConsultationListComponent_td_20_span_1_Template_span_click_0_listener() {
      \u0275\u0275restoreView(_r8);
      const element_r9 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.openReport(element_r9));
    });
    \u0275\u0275element(1, "i", 37);
    \u0275\u0275elementEnd();
  }
}
function ConsultationListComponent_td_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, ConsultationListComponent_td_20_span_1_Template, 2, 0, "span", 35);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r9.StatusID === 2 && element_r9.ApptDocAttachment.length);
  }
}
function ConsultationListComponent_th_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Action);
  }
}
function ConsultationListComponent_td_23_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 22)(1, "img", 38);
    \u0275\u0275listener("click", function ConsultationListComponent_td_23_Template_img_click_1_listener() {
      const element_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.viewDetails(element_r11));
    });
    \u0275\u0275elementEnd()();
  }
}
function ConsultationListComponent_td_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 39)(1, "b");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 40);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275attribute("colspan", ctx_r1.displayedColumns.length);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.ClinicalQuestion);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1.formatTxt(element_r12.TopicOfDisscussion), \u0275\u0275sanitizeHtml);
  }
}
function ConsultationListComponent_tr_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 41);
  }
}
function ConsultationListComponent_tr_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 42);
  }
}
function ConsultationListComponent_tr_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 43);
  }
  if (rf & 2) {
    const row_r13 = ctx.$implicit;
    \u0275\u0275property("hidden", !row_r13.TopicOfDisscussion);
  }
}
function ConsultationListComponent_tbody_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 44)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.Parent.labelService.dsPatientInfoScreen.Norecordsfound);
  }
}
var ConsultationListComponent = class _ConsultationListComponent {
  constructor(dialog, commonService, dataService, modalService, labelService, patientService) {
    this.dialog = dialog;
    this.commonService = commonService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.labelService = labelService;
    this.patientService = patientService;
    this.consultations = [];
    this.dataSource = new MatLegacyTableDataSource();
    this.displayedColumns = [
      " ",
      "ConvertedDateTimeWithTimeZone",
      "DoctorName",
      "Mode",
      "ReportAttachment",
      "Report",
      "Action"
    ];
  }
  ngOnInit() {
    this.getLabelDetails();
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindAnaysisResultsLabel();
    });
  }
  ngOnChanges(changes) {
    if (changes && changes.consultations) {
      this.consultations.map((x) => x.DataTimeArr = x.ConvertedDateTimeWithTimeZone?.split("(")[0].trim());
      console.log(this.consultations);
      this.dataSource = new MatLegacyTableDataSource(this.consultations);
    }
  }
  viewDetails(elem) {
    elem.consultationCount = this.consultations.length;
    this.dialog.open(ConsultationDetailsComponent, {
      width: "50%",
      data: elem,
      disableClose: true
    });
  }
  openReport(elem) {
    this.getconsultationAppointmentReportView(elem.BookedAppointmentID).subscribe({
      next: (res) => {
        console.log(res);
        this.openPdfModal(res?.ResponseData?.ImageBase64);
      },
      error: (error) => {
        console.log(error);
      }
    });
  }
  openPdfModal(base64String) {
    const modalRef = this.modalService.open(PdfModalComponent, {
      size: "lg",
      windowClass: "my-class"
    });
    modalRef.componentInstance.pdfBase64 = base64String;
  }
  getconsultationAppointmentReportView(appointment_id) {
    const payload = {
      BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      AppointmentId: appointment_id,
      ZDXPatientId: this.patientService.patientDetails?.ZDXPatientId
    };
    return this.commonService.ConsultationAppointmentReportView(payload);
  }
  formatTxt(str) {
    if (str)
      return str.replace(/\n/g, "<br>");
  }
  static {
    this.\u0275fac = function ConsultationListComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultationListComponent)(\u0275\u0275directiveInject(MatLegacyDialog), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultationListComponent, selectors: [["app-consultation-list"]], inputs: { Parent: "Parent", consultations: "consultations" }, features: [\u0275\u0275NgOnChangesFeature], decls: 30, vars: 7, consts: [[1, "w-100"], ["id", "patientinfoTbl-scrollabe", 1, "example-container", "pt-0", "w-100"], ["mat-table", "", "matSort", "", "summary", "", "multiTemplateDataRows", "", 1, "patient-table", "w-100", 3, "dataSource"], ["matColumnDef", " "], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "ngClass", 4, "matCellDef"], ["matColumnDef", "ConvertedDateTimeWithTimeZone"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "DoctorName"], ["matColumnDef", "Mode"], ["matColumnDef", "ReportAttachment"], ["mat-cell", "", "class", "p-2", 4, "matCellDef"], ["matColumnDef", "Report"], ["matColumnDef", "Action"], ["matColumnDef", "expandedDetail", 1, "expanded-detail"], ["mat-cell", "", "td", "", "class", "expanded-detail", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "style", "cursor: pointer;", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", "class", "example-detail-row", 3, "hidden", 4, "matRowDef", "matRowDefColumns"], ["class", " norecord", 4, "ngIf"], ["mat-header-cell", ""], ["mat-cell", "", 3, "ngClass"], ["mat-cell", ""], [1, "p-0", "m-0"], ["class", "p-0 m-0", 4, "ngIf"], ["src", "../../../../assets/img/zcs/video.png", "alt", "", 4, "ngIf"], ["src", "../../../../assets/img/zcs/mic.png", "alt", "", 4, "ngIf"], ["src", "../../../../assets/img/zcs/mail.png", "alt", "", 4, "ngIf"], ["src", "../../../../assets/img/zcs/video.png", "alt", ""], ["src", "../../../../assets/img/zcs/mic.png", "alt", ""], ["src", "../../../../assets/img/zcs/mail.png", "alt", ""], ["mat-cell", "", 1, "p-2"], [4, "ngFor", "ngForOf"], ["target", "_blank", 3, "download", "href"], ["src", "../../../../assets/img/zcs/pdf.png", "alt", ""], ["class", "pointer", 3, "click", 4, "ngIf"], [1, "pointer", 3, "click"], [1, "fa", "fa-file-o", "fileIcon"], ["src", "../../../../assets/img/zcs/eye_icon.png", "alt", "", 1, "pointer", 3, "click"], ["mat-cell", "", "td", "", 1, "expanded-detail"], [3, "innerHTML"], ["mat-header-row", ""], ["mat-row", "", 2, "cursor", "pointer"], ["mat-row", "", 1, "example-detail-row", 3, "hidden"], [1, "norecord"]], template: function ConsultationListComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "table", 2);
        \u0275\u0275elementContainerStart(3, 3);
        \u0275\u0275template(4, ConsultationListComponent_th_4_Template, 1, 0, "th", 4)(5, ConsultationListComponent_td_5_Template, 1, 5, "td", 5);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(6, 6);
        \u0275\u0275template(7, ConsultationListComponent_th_7_Template, 2, 1, "th", 4)(8, ConsultationListComponent_td_8_Template, 4, 3, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(9, 8);
        \u0275\u0275template(10, ConsultationListComponent_th_10_Template, 2, 1, "th", 4)(11, ConsultationListComponent_td_11_Template, 4, 3, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(12, 9);
        \u0275\u0275template(13, ConsultationListComponent_th_13_Template, 2, 1, "th", 4)(14, ConsultationListComponent_td_14_Template, 5, 3, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(15, 10);
        \u0275\u0275template(16, ConsultationListComponent_th_16_Template, 2, 1, "th", 4)(17, ConsultationListComponent_td_17_Template, 2, 1, "td", 11);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(18, 12);
        \u0275\u0275template(19, ConsultationListComponent_th_19_Template, 2, 1, "th", 4)(20, ConsultationListComponent_td_20_Template, 2, 1, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(21, 13);
        \u0275\u0275template(22, ConsultationListComponent_th_22_Template, 2, 1, "th", 4)(23, ConsultationListComponent_td_23_Template, 2, 0, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(24, 14);
        \u0275\u0275template(25, ConsultationListComponent_td_25_Template, 4, 3, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(26, ConsultationListComponent_tr_26_Template, 1, 0, "tr", 16)(27, ConsultationListComponent_tr_27_Template, 1, 0, "tr", 17)(28, ConsultationListComponent_tr_28_Template, 1, 1, "tr", 18);
        \u0275\u0275elementEnd();
        \u0275\u0275template(29, ConsultationListComponent_tbody_29_Template, 4, 1, "tbody", 19);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(24);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", \u0275\u0275pureFunction0(6, _c016));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource === null || ctx.dataSource.data.length === 0);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, LocalDatePipe], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container.egpart[_ngcontent-%COMP%] {\n  height: calc(100vh - 360px) !important;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: calc(100vh - 525px);\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c !important;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #ed8b00 !important;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red !important;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n  margin-top: -11px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n  padding-left: 30px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ed8b00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  width: 77px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntable.mat-table[_ngcontent-%COMP%] {\n  border-collapse: separate !important;\n  border-spacing: 0 12px !important;\n  margin-top: -12px !important;\n}\ntable.mat-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntr.mat-footer-row[_ngcontent-%COMP%], \ntr.mat-row[_ngcontent-%COMP%] {\n  height: 60px;\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: center;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-right: 30px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  border-bottom-left-radius: 8px !important;\n  border-top-left-radius: 8px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  background: #fff !important;\n  padding-right: 23px !important;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.head1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.pdate[_ngcontent-%COMP%] {\n  width: 75px;\n  display: block;\n  word-break: break-word;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 36px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n.mat-icon[_ngcontent-%COMP%] {\n  color: #fff !important;\n}\n@media screen and (max-width: 1199px) and (min-width: 992px) {\n  .col1[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .follow_patient[_ngcontent-%COMP%]   .slide-toggle[_ngcontent-%COMP%] {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (max-width: 991px) {\n  .col1[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .col1[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    width: 50%;\n    flex: 0 0 50%;\n    display: block;\n  }\n  .follow_patient[_ngcontent-%COMP%]   .slide-toggle[_ngcontent-%COMP%] {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \n   .patient-table[_ngcontent-%COMP%]   th.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n    max-width: 136px !important;\n  }\n}\n.filterp[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 36px;\n  margin: 8px 0px 8px 8px;\n}\n.mobile-header[_ngcontent-%COMP%] {\n  display: none !important;\n}\n.selectOne[_ngcontent-%COMP%] {\n  width: 85%;\n}\n.selectTwo[_ngcontent-%COMP%] {\n  width: 15%;\n}\n.left-block[_ngcontent-%COMP%] {\n  width: calc(97vw - 356px);\n  right: 300px;\n}\n.right-filter[_ngcontent-%COMP%] {\n  right: 44px;\n}\n  .dashboard-wrapper .mat-drawer-content {\n  overflow: inherit;\n}\n@media screen and (max-width: 767px) {\n  .svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n  .filtericon[_ngcontent-%COMP%] {\n    padding-right: 5px;\n  }\n  .qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: initial;\n  }\n    .dashboard-wrapper .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    right: 0;\n  }\n  .left-block[_ngcontent-%COMP%] {\n    width: inherit !important;\n    right: 0 !important;\n  }\n    .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .labeltxt[_ngcontent-%COMP%] {\n    padding-left: 5px !important;\n    text-align: left !important;\n  }\n  table.mat-table[_ngcontent-%COMP%]   tr.mat-header-row[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n    box-shadow: none !important;\n  }\n  .selectOne[_ngcontent-%COMP%] {\n    width: 70%;\n  }\n  .selectTwo.toprow[_ngcontent-%COMP%] {\n    width: 30%;\n    box-shadow: none !important;\n    border: none;\n    background: none;\n  }\n  .d-md-none[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .m-cont[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .mobile-header[_ngcontent-%COMP%] {\n    display: block !important;\n    background: #ffffff;\n    padding: 10px 0 10px 10px;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    padding-right: 3px !important;\n  }\n  .m-title[_ngcontent-%COMP%] {\n    font-weight: 600;\n    font-size: 16px;\n  }\n  .m-back[_ngcontent-%COMP%] {\n    padding-right: 10%;\n  }\n  table.mat-table[_ngcontent-%COMP%] {\n    margin-top: -12px !important;\n  }\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  .mat-row[_ngcontent-%COMP%]:nth-child(even) {\n    background: #fff;\n  }\n  .patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n   .patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    padding-bottom: 18px;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 16px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n    word-break: break-all;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    padding: 0 12px 0 0;\n    height: inherit;\n    overflow: inherit;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px !important;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none !important;\n    padding-left: 0px !important;\n  }\n  .patientinfo[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  .patientinfo[_ngcontent-%COMP%]   .patientcheck[_ngcontent-%COMP%] {\n    position: absolute;\n    right: 12px;\n    top: 25px;\n    z-index: 99;\n  }\n  .patientinfo[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    height: 0;\n    padding-top: 0;\n  }\n  .headtitle[_ngcontent-%COMP%]:before {\n    display: none;\n  }\n  .conpart[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  .conpart[_ngcontent-%COMP%]:before {\n    content: "";\n    height: 2px;\n    width: 93%;\n    position: absolute;\n    left: 13px;\n    bottom: 12px;\n    background: #b7bab7;\n  }\n  .head1.headtitle[_ngcontent-%COMP%] {\n    padding-top: 8px;\n  }\n}\n@media screen and (max-width: 346px) {\n  .select-max-w[_ngcontent-%COMP%] {\n    flex: 0 0 70%;\n    max-width: 70%;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 390px) {\n  .btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    padding: 0px 13px 0px 8px !important;\n    margin-left: 10px !important;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1180px) {\n  .right-filter[_ngcontent-%COMP%] {\n    top: 75px;\n  }\n  .resp.clse[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .sidefilter[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%] {\n    padding-left: 20%;\n  }\n  .qpart.qicon[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    text-align: right;\n  }\n    .left-block {\n    width: inherit !important;\n    right: 0 !important;\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .right-filter[_ngcontent-%COMP%] {\n    top: 55px;\n  }\n  .filterp[_ngcontent-%COMP%] {\n    display: block !important;\n    text-align: right;\n    margin-right: 10px;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n    height: calc(100vh - 300px);\n  }\n  .svimg[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1300px) {\n    .left-block {\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 300px);\n  }\n}\n.hello[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.btnpoint[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n.btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\n  padding: 0px 10px;\n  color: #0072ce;\n  font-weight: bold;\n  border: 2px solid #0072ce;\n  background: transparent;\n}\n.btnpoint[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  padding: 0px 35px 0px 22px;\n  color: #959393;\n  font-weight: bold;\n  border: 2px solid #dcd8d8;\n  background: #f6f6f6;\n}\n.refbtn[_ngcontent-%COMP%] {\n  margin-top: 20px;\n}\n.head1.headtitle[_ngcontent-%COMP%] {\n  font-size: 15px !important;\n  position: relative;\n  height: 28px;\n}\n.labeltxt[_ngcontent-%COMP%] {\n  padding-left: 12%;\n}\n.refbtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 20px;\n}\n.tablecont.mat-card[_ngcontent-%COMP%] {\n  border-top-right-radius: 10px !important;\n  margin: 0 7px !important;\n}\n.headtitle[_ngcontent-%COMP%]:before {\n  content: "";\n  height: 0.8px;\n  width: 95%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background: #9ea29e;\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n.editBtn[_ngcontent-%COMP%] {\n  background: #f4f4f4 !important;\n  border: solid 0.4px #979797 !important;\n}\n.fileIcon[_ngcontent-%COMP%] {\n  color: #0876cf;\n  font-weight: bold;\n}\n  .mat-column-ReportAttachment {\n  word-wrap: break-word !important;\n  white-space: unset !important;\n  flex: 0 0 20% !important;\n  width: 20% !important;\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  word-break: break-word;\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto;\n}\n/*# sourceMappingURL=consultation-list.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultationListComponent, { className: "ConsultationListComponent", filePath: "src\\app\\components\\patient-managements\\consultation-list\\consultation-list.component.ts", lineNumber: 24 });
})();

// src/app/components/patient-managements/patient-info/patient-info.component.ts
function PatientInfoComponent_ng_container_35_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "button", 55);
    \u0275\u0275listener("click", function PatientInfoComponent_ng_container_35_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.initiateMergePatient());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "button", 56);
    \u0275\u0275element(4, "img", 57);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPatientInfoScreen.MergePatients);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPatientInfoScreen.Edit);
  }
}
function PatientInfoComponent_div_85_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 58)(1, "button", 55);
    \u0275\u0275listener("click", function PatientInfoComponent_div_85_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.navToOrderPage());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsPatientInfoScreen.CreateANewReferenceLabOrder);
  }
}
function PatientInfoComponent_span_93_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("(", ctx_r3.consultations.length, ")");
  }
}
function PatientInfoComponent_div_97_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 59)(1, "p", 60)(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("", ctx_r3.labelService.dsPatientInfoScreen.MsgToCheckResults, " ");
  }
}
function PatientInfoComponent_ng_container_100_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 65)(1, "img", 66);
    \u0275\u0275listener("click", function PatientInfoComponent_ng_container_100_span_1_Template_img_click_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.goToConsultation($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r3.labelService.dsAnaysisResultsScreen.ConsultationRequest);
  }
}
function PatientInfoComponent_ng_container_100_img_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 67);
  }
}
function PatientInfoComponent_ng_container_100_img_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 68);
    \u0275\u0275listener("click", function PatientInfoComponent_ng_container_100_img_5_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.downloadAnalysisResults());
    });
    \u0275\u0275elementEnd();
  }
}
function PatientInfoComponent_ng_container_100_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, PatientInfoComponent_ng_container_100_span_1_Template, 2, 1, "span", 61);
    \u0275\u0275elementStart(2, "span", 62);
    \u0275\u0275template(3, PatientInfoComponent_ng_container_100_img_3_Template, 1, 0, "img", 63);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 62);
    \u0275\u0275template(5, PatientInfoComponent_ng_container_100_img_5_Template, 1, 0, "img", 64);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r3.isBackOfficeUser);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r3.labelService.dsAnaysisResultsScreen.Print);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r3.showPrintIcon && !ctx_r3.consultSec);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r3.labelService.dsAnaysisResultsScreen.Print);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.showPrintIcon && !ctx_r3.consultSec);
  }
}
function PatientInfoComponent_div_101_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 27)(1, "span", 17)(2, "button", 18);
    \u0275\u0275listener("click", function PatientInfoComponent_div_101_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r8);
      \u0275\u0275nextContext();
      const drawer_r2 = \u0275\u0275reference(7);
      return \u0275\u0275resetView(drawer_r2.toggle());
    });
    \u0275\u0275element(3, "img", 28);
    \u0275\u0275elementStart(4, "em", 29);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsSideFilterScreen.FILTERS);
  }
}
function PatientInfoComponent_span_103_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "span", 69);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4);
    \u0275\u0275elementStart(5, "span", 69);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPatientInfoScreen.ShowingResultDated, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.commonService.getMomentFromatedDate(ctx_r3.FromDateLabel), " ");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.labelService.dsPatientInfoScreen.To, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.commonService.getMomentFromatedDate(ctx_r3.ToDateLabel), " ");
  }
}
function PatientInfoComponent_span_104_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 70)(1, "span", 17)(2, "button", 18);
    \u0275\u0275listener("click", function PatientInfoComponent_span_104_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r9);
      \u0275\u0275nextContext();
      const drawer_r2 = \u0275\u0275reference(7);
      return \u0275\u0275resetView(drawer_r2.toggle());
    });
    \u0275\u0275element(3, "img", 28);
    \u0275\u0275elementStart(4, "em", 29);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.labelService.dsSideFilterScreen.FILTERS);
  }
}
function PatientInfoComponent_app_patient_info_tests_107_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-patient-info-tests", 71);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("Parent", ctx_r3);
  }
}
function PatientInfoComponent_app_consultation_list_108_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-consultation-list", 72);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("Parent", ctx_r3)("consultations", ctx_r3.consultations);
  }
}
function PatientInfoComponent_div_109_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 73)(1, "app-sidefilter", 5);
    \u0275\u0275listener("outFilterBy", function PatientInfoComponent_div_109_Template_app_sidefilter_outFilterBy_1_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.getPatientInfo());
    });
    \u0275\u0275elementEnd()();
  }
}
var PatientInfoComponent = class _PatientInfoComponent {
  constructor(commonService, patientService, router, route, labelService, headerService, sidefilterService, confirmationDialogService, dataService, title, EncrDecr, dialog, refLabService, refLabGuard, spinner) {
    this.commonService = commonService;
    this.patientService = patientService;
    this.router = router;
    this.route = route;
    this.labelService = labelService;
    this.headerService = headerService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.EncrDecr = EncrDecr;
    this.dialog = dialog;
    this.refLabService = refLabService;
    this.refLabGuard = refLabGuard;
    this.spinner = spinner;
    this.filterData = [];
    this.start = 0;
    this.limit = 100;
    this.counter = 0;
    this.end = this.limit + this.start;
    this.displayedColumns = ["ViewedFlag", "DateReceivedStr", "physician_name", "AnalysisSourceName", "AnalysisTypeName", "AccessionId", " "];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.IsAllSelected = false;
    this.showPrintIcon = false;
    this.canceledAnalysisStatusId = EnmAnalysisStatus.Canceled;
    this.patient = {};
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.consultSec = false;
    this.consultations = [];
    this.sidefilterService.filter = new SideFilter();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.businessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.pataientId = this.route.snapshot.paramMap.get("pataientId");
    if (this.isConsultantUser) {
      this.displayedColumns = ["ViewedFlag", "DateReceivedStr", "physician_name", "AnalysisSourceName", "AnalysisTypeName", "AccessionId"];
    }
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindAnaysisResultsLabel();
    }
    this.patientInfo = new PatientInfo();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.PatientId = this.pataientId ? this.pataientId : this.patientService.patientDetails?.PatientId;
    this.sidefilterService.filter.LanguageId = this.labelService.selectedLanguage;
    this.sidefilterService.filter.IsApplyFilter = true;
    this.FromDateLabel = new Date(this.commonService.twoYearBeforeFromToday);
    this.ToDateLabel = this.commonService.today;
  }
  ngOnInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.dsPatientInfoScreen.PatientInfo}`);
    if (!this.dataService.appData.authDetails["IsLinkedRefLabClinic"])
      this.sidefilterService.filter["AnalysisSourceId"] = 1;
    this.refLabGuard.canActivate(null, null, false);
    const countryId = this.dataService.appData.authDetails["BackOfficeFlag"] && this.bckBusinessInfo && this.bckBusinessInfo["BCountryId"] ? this.bckBusinessInfo["BCountryId"] : localStorage.getItem("userCountryId");
    this.refLabService.insideUSCAuser = [31, 40].indexOf(parseInt(countryId)) === -1 ? false : true;
    this.route.queryParams.subscribe((params) => {
      params.pi && params.zpi ? this.getPatientInfo(params.pi, params.zpi) : this.getPatientInfo();
    });
    this.closeFilterRegister();
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "Patient-Information");
    let timezoneId = this.dataService.appData.authDetails["TimeZoneId"];
    this.commonService.ConsultationAppointmentDetailView({
      BusinessGuid: this.businessGuid,
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      PatientId: this.pataientId || this.patientService.patientDetails?.PatientId,
      TimezoneId: timezoneId,
      ZDXPatientId: this.patientService.patientDetails?.ZDXPatientId
    }).subscribe((resp) => {
      this.consultations = resp.ResponseData?.ReportView || [];
    });
  }
  getPatientOwnerInfo() {
    const params = {
      BusinessGuid: localStorage.businessGuid,
      Filter: this.pataientId ? this.pataientId : this.patientService.patientDetails.PatientId
    };
    this.refLabService.PatientOwnerDDLList(params).subscribe((data) => {
      this.patient = data.ResponseData.PatientOwner.find((x) => x.PatientId == this.patientService.patientDetails.PatientId);
    });
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientInfoLabel();
      this.labelService.bindAnaysisResultsLabel();
    });
  }
  scrolltoTop(topVal) {
    const scrollabe = document.getElementById("patientinfoTbl-scrollabe");
    scrollabe.scrollTop = topVal;
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      this.isLoadMore = true;
      this.sidefilterService.filter.PageNo++;
      this.sidefilterService.filter.PageSize = 60;
      this.getPatientInfo();
    }
  }
  navToOrderPage() {
    if (!this.refLabGuard.IsLinkedRefLabClinic) {
      const msg = this.labelService.dsSideMenuScreen.ConsultationRestrictionPopupMsg;
      this.confirmationDialogService.confirm("Alert", msg, "Ok", "Cancel", "sm", true, false);
      return false;
    }
    this.router.navigate(["/refLab/createOrder"], { queryParams: { id: this.patientInfo.PatientId } });
  }
  getPatientInfo(pi, zpi) {
    this.FromDateLabel = this.sidefilterService.FromDate;
    this.ToDateLabel = this.sidefilterService.ToDate;
    this.sidefilterService.filter["IsPatientInfo"] = true;
    this.sidefilterService.filter.IsApplyFilter = true;
    this.sidefilterService.filter.IsExactFilter = true;
    this.sidefilterService.filter.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    this.sidefilterService.filter.PatientId = pi || this.patientService.patientDetails.PatientId;
    this.sidefilterService.filter.ZDXPatientInfoId = zpi || this.patientService.patientDetails.ZDXPatientId;
    if (this.sidefilterService.filter.PageNo == 1) {
      this.counter = 0;
      this.originData = [];
    }
    this.dataService.pageState.PatientInfo.requestParams = this.sidefilterService.filter;
    this.dataService.appState.updatedFilterRequest = this.sidefilterService.filter;
    this.dataService.page.next(this.dataService.pageState);
    const params = Object.assign({}, this.sidefilterService.filter);
    if (params.FromDate) {
      params.FromDate = params.FromDate != null ? this.commonService.getMomentFromDateTime(params.FromDate) : null;
    }
    if (params.ToDate) {
      params.ToDate = params.ToDate != null ? this.commonService.getMomentToDateTime(params.ToDate) : null;
    }
    this.patientService.getPatientInfo(params).subscribe({
      next: (data) => {
        if (this.sidefilterService.filter.PageNo == 1) {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = data.ResponseData.DashboardPatientList[0].Details;
            this.patientInfo = data.ResponseData.DashboardPatientList[0];
          } else {
            this.originData = [];
            this.dataSource = new MatLegacyTableDataSource(this.originData);
          }
        } else {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = this.originData.concat(data.ResponseData.DashboardPatientList[0].Details);
          }
        }
        if (data.ResponseData.DashboardPatientList && data.ResponseData.DashboardPatientList.length > 0) {
          this.patientInfo = data.ResponseData.DashboardPatientList[0];
          this.patient = data.ResponseData.DashboardPatientList[0];
          this.originData = this.originData.map((item, index) => {
            if (item.PhysicianName && item.PhysicianName.trim() == "None") {
              item.PhysicianName = this.labelService.dsAnaysisResultsScreen.none;
            }
            if (item.DAPAnalyzerType == "vetscan-ltf") {
              item.AnalyzerDisplayName = item.AnalyzerDisplayName + "+";
            }
            return item;
          });
          if (this.originData.length > 0 && this.isLoadMore) {
            this.isLoadMore = false;
          } else {
            this.scrolltoTop(null);
          }
          this.createAlysisTypeList(this.originData);
          this.dataService.pageState.PatientInfo.resultsList = this.originData;
          this.dataService.page.next(this.dataService.pageState);
          this.dataSource = new MatLegacyTableDataSource(this.originData);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
          this.bindDVMDDL();
        }
      },
      error: () => {
        this.originData = [];
        this.dataSource.data = [];
        this.sidefilterService.filter.DVMName = "";
        this.sidefilterService.dsDVM = [];
      }
    });
  }
  createAlysisTypeList(tblData) {
    let tempArry = [];
    tblData.forEach((ele) => {
      if (!tempArry.find((item) => ele?.AnalysisTypeName == item.analysisTypeName)) {
        const obj = {
          sourceType: ele?.SourceType,
          analyzerDisplayName: ele?.AnalyzerDisplayName,
          analysisTypeName: ele?.AnalysisTypeName
        };
        tempArry.push(obj);
      }
    });
    this.dataService.appState.analysisTypeList = tempArry;
    this.dataService.state.next(this.dataService.appState);
  }
  bindDVMDDL() {
    this.sidefilterService.dsDVM = [];
    if (this.originData != null) {
      const arrDVM = [];
      let noDVMText = "";
      this.originData.forEach((subEle) => {
        if (subEle.PhysicianName && !arrDVM.includes(subEle.PhysicianName)) {
          if (subEle.PhysicianName == "None") {
            noDVMText = subEle.PhysicianName;
          } else {
            arrDVM.push(subEle.PhysicianName.trim());
            this.sidefilterService.dsDVM.push(subEle.PhysicianName.trim());
          }
        }
      });
      this.sidefilterService.dsDVM = this.commonService.arraySortByAscendingOrders(arrDVM);
      if (noDVMText) {
        this.sidefilterService.dsDVM.splice(0, 0, noDVMText);
      }
    }
  }
  selectAll(e) {
    this.IsAllSelected = e.checked;
    this.showPrintIcon = e.checked;
    this.dataSource.data.forEach((element) => {
      if (element.AnalysisStatusName == "Completed")
        element.IsReadyForPrint = e.checked;
    });
  }
  onDataSort(e) {
    this.dataService.pageState.PatientInfo.sortState = e;
    this.dataService.page.next(this.dataService.pageState);
    this.scrolltoTop(null);
  }
  onRowClick(rowIndex, ele) {
    if (ele.AnalysisStatusId == this.canceledAnalysisStatusId) {
      this.showMsg(ele.CancelComment);
    } else if (ele.AnalysisStatusId == EnmAnalysisStatus.Pending) {
      this.showMsg(this.labelService.dsPatientInfoScreen.pendingAlertMessage, true);
    } else {
      this.dataService.appState.selectedResult.element = this.patientService.patientDetails;
      this.dataService.appState.selectedResult.subElement = ele;
      this.dataService.state.next(this.dataService.appState);
      this.dataService.pageState.PatientInfo.selectedRow = rowIndex;
      this.dataService.pageState.PatientInfo.requestParams = this.sidefilterService.filter;
      this.dataService.pageState.PatientInfo.resultsList = this.originData;
      this.dataService.appState.selectedResult.element.Details = this.originData;
      this.dataService.page.next(this.dataService.pageState);
      this.markAs(ele, "READ");
      this.patientService.showPataientTestResult(this.patientService.patientDetails, ele, null, this.sidefilterService.filter, null, null);
    }
  }
  selectSingleCheckbox(e, selecteItem) {
    selecteItem.IsReadyForPrint = e.checked;
    if (e.checked) {
      this.showPrintIcon = true;
      const allSelected = this.dataSource.data.find((x) => !x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (allSelected == void 0)
        this.IsAllSelected = true;
      else
        this.IsAllSelected = false;
    } else {
      this.IsAllSelected = false;
      const checkboxSelected = this.dataSource.data.find((x) => x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (checkboxSelected == void 0)
        this.showPrintIcon = false;
    }
    this.countCheckbox(e, selecteItem);
  }
  countCheckbox(event, selectedItem) {
    if (event.checked === true) {
      this.counter++;
      if (this.counter > 5) {
        this.confirmationDialogService.confirm("", this.labelService.dsPatientInfoScreen.CheckBoxExceed, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false).then((confirmed) => {
          if (confirmed) {
            this.counter--;
            selectedItem.IsReadyForPrint = false;
          }
        });
      }
    }
    if (event.checked === false) {
      this.counter--;
    }
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.FromDate = null;
    this.sidefilterService.filter.ToDate = null;
    this.sidefilterService.filter.AnalysisStatusId = 0;
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.ToDate = null;
    this.sidefilterService.filter.AnalysisSourceId = this.dataService.appData.authDetails["IsLinkedRefLabClinic"] ? 0 : 1;
  }
  downloadAnalysisResults() {
    this.downloadMultipleAnalysisResult = new DownloadMultipleAnalysisResult();
    this.downloadMultipleAnalysisResult.PatientId = this.patientService.patientDetails.PatientId;
    this.downloadMultipleAnalysisResult.LanguageId = this.labelService.selectedLanguage;
    this.downloadMultipleAnalysisResult.BusinessGuid = this.businessGuid;
    this.downloadMultipleAnalysisResult.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.downloadMultipleAnalysisResult.Pageno = this.sidefilterService.filter.PageNo;
    this.downloadMultipleAnalysisResult.Pagesize = 60;
    this.downloadMultipleAnalysisResult.IsBackOfficeUser = this.isBackOfficeUser;
    this.downloadMultipleAnalysisResult.MultipleTestRequest = [];
    this.dataSource.data.forEach((ele) => {
      if (ele.IsReadyForPrint && ele.AnalysisStatusName == "Completed") {
        this.analysisDetails = new AnalysisDetails();
        this.analysisDetails.AnalysisTypeId = ele.AnalysisTypeId;
        this.analysisDetails.PresentDate = ele.DateReceivedStr;
        this.analysisDetails.TemplateId = ele.TemplateId;
        this.analysisDetails.AccessionId = ele.AccessionNumber;
        this.analysisDetails.PanelId = ele.PanelId;
        this.analysisDetails.SourceType = ele.SourceType;
        this.analysisDetails["PhysicianName"] = ele.PhysicianName;
        this.downloadMultipleAnalysisResult.MultipleTestRequest.push(this.analysisDetails);
      }
    });
    this.confirmationDialogService.confirm("Alert", this.labelService.dsPatientInfoScreen.DocumentCreatingMessage, this.labelService.dsPatientInfoScreen.Dismiss, "", "sm", true, false);
    this.patientService.downloadMultipleAnalysisResult(this.downloadMultipleAnalysisResult).subscribe({
      next: (res) => {
        const fileName = this.patientService.patientDetails.PatientName;
        this.savePdfFile(res, fileName);
      },
      error: () => {
        this.confirmationDialogService.dismiss();
        this.confirmationDialogService.confirm("Alert", this.labelService.dsPatientInfoScreen.ErrorOccur, "", this.labelService.dsPatientInfoScreen.Ok, "sm", false, true);
      }
    });
    setTimeout(() => {
      this.spinner.hide();
    }, 100);
  }
  savePdfFile(res, fileName) {
    this.commonService.pdfDownloading.next({
      data: res,
      fileName
    });
    return false;
  }
  onToggleFollowPatient(e) {
    if (this.headerService.notificationSettingId == EnmNotificationSetting.FollowPatients) {
      this.onOffFollowPatient(e.checked);
    } else {
      const msg = this.labelService.dsPatientInfoScreen.ConfirmMessage;
      this.confirmationDialogService.confirm("", msg, this.labelService.dsPatientInfoScreen.Updatepreferences, this.labelService.dsPatientInfoScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.dataService.appState.admin.profilePageSelectedAccordion = 1;
          this.dataService.state.next(this.dataService.appState);
          this.router.navigateByUrl("/user/account");
        } else {
          this.patientService.patientDetails.IsFollowedPatient = !this.patientService.patientDetails.IsFollowedPatient;
        }
      });
    }
  }
  onOffFollowPatient(toggleValue) {
    const params = {
      UserGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.businessGuid,
      PatientId: this.patientService.patientDetails.PatientId,
      FuseSerialNo: this.patientService.patientDetails.fuse_serial_number,
      IsActive: toggleValue
    };
    this.patientService.onOffFollowPatient(params).subscribe({
      next: () => {
        this.patientService.patientDetails.IsFollowedPatient = toggleValue;
        localStorage.setItem("patientDetails", JSON.stringify(this.patientService.patientDetails));
      },
      error: (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      }
    });
  }
  showMsg(cancelComment, force = false) {
    if (!force) {
      if (cancelComment && /user.cancelled/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage;
      } else if (cancelComment && /11 :/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage11;
      } else if (cancelComment && /X :/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessageX;
      } else {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTest;
      }
    }
    this.confirmationDialogService.confirm("", cancelComment, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
  }
  goToConsultation(e) {
    console.log(this.patientInfo);
    e.stopPropagation();
    this.dataService.appData.prevUrl = "dashboard";
    this.dataService.data.next(this.dataService.appData);
    const authDetails = this.dataService.appData.authDetails;
    const emailId = this.bckBusinessInfo ? this.bckBusinessInfo["EmailId"] : "";
    const doctorName = this.patientInfo.Details.length > 0 && this.patientInfo.Details[0].PhysicianName ? this.patientInfo.Details[0].PhysicianName : "";
    let urlStr = "email=" + authDetails["Email"] + "&bkoClinicEmail=" + emailId + "&token=" + JSON.parse(localStorage.authDetails).access_token + "&refresh_token=" + JSON.parse(localStorage.authDetails).refresh_token + "&deviceId=" + localStorage.UIGuid + "&BusinessGuid=" + JSON.parse(localStorage.authDetails).BusinessGuid + "&clinicname=" + authDetails["BusinessName"] + "&clinicphone=" + authDetails["BusinessPhoneNo"] + "&doctorname=" + doctorName + "&patientId=" + this.patientInfo.PatientId + "&patientName=" + this.patientInfo.PatientName + "&species=" + this.patientInfo.SpeciesName + "&breed=" + this.patientInfo.BreedName + "&ownerName=" + this.patientInfo.OwnerName + "&accessionId=&gender=" + this.patientInfo.Gender + "&age=" + this.patientInfo.Dob + "&ZDXPatientId=" + this.patientInfo.ZDXPatientId + "&OwnerFirstName=" + this.patientInfo.OwnerFirstName + "&OwnerLastName=" + this.patientInfo.OwnerLastName + "&FirstName=" + this.patientInfo.FirstName + "&LastName=" + this.patientInfo.LastName + "&BirthDate=" + this.patientInfo.BirthDate + "&timeZoneId=" + this.commonService.tzSelectMethod().timeZoneId + "&timeZoneName=" + this.commonService.tzSelectMethod().timeZoneName + "&Isbackoffice=" + JSON.parse(localStorage.authDetails).BackOfficeFlag + "&backUrl=" + location.href + "&isNewInternal=" + this.commonService.isnewUrlRedirection() + "&TimeFormatId=" + this.dataService.appData.authDetails["TimeFormatId"] + "&TimeZoneId=" + this.dataService.appData.authDetails["TimeZoneId"] + "&DateFormatId=" + this.dataService.appData.authDetails["DateFormatId"] + "&ZDxUrl=" + this.commonService.getZDxUrl();
    urlStr = this.EncrDecr.encrypt(urlStr);
    if (this.headerService.isNRP) {
      this.commonService.getRedirectionKey({ "ValueString": urlStr }).subscribe((res) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + res.ResponseData;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } else {
      this.commonService.getEncryptDetail({ toEncryptStr: urlStr }).subscribe((data) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + data.ResponseData.encryptedKey;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    }
  }
  closeFilterRegister() {
    this.commonService.closeFilterForPatient.subscribe((ev) => {
      if (ev) {
        this.drawer.close();
      }
    });
  }
  initiateMergePatient() {
    const dialog = this.dialog.open(MergePatientComponent, {
      width: "75%"
    });
    dialog.afterClosed().subscribe((data) => {
      if (data) {
        this.patientService.showPataientInfo(data, null, null, null, null);
        this.router.navigateByUrl("/patient", { skipLocationChange: true }).then(() => {
          this.router.navigateByUrl("patient/info");
        });
      }
    });
  }
  markAs(elem, as) {
    if (this.commonService.isInternalUsers()) {
      const req = {
        BusinessGuid: this.businessGuid,
        UserGuid: this.dataService.appData.authDetails["UserGuid"],
        ObjResultTagModel: [
          {
            Source: elem.SourceType,
            ResultIds: elem.RecID,
            Tag: as
          }
        ]
      };
      this.commonService.UpdateResultTag(req).subscribe({
        next: () => {
          elem.ViewedFlag = as == "READ";
          if (this.dataService.pageState.dashboard.resultsList && this.dataService.pageState.dashboard.resultsList.length) {
            const element = this.dataService.pageState.dashboard.resultsList.find((x) => x.ZDXPatientId == this.patient.ZDXPatientId);
            if (element) {
              const subElm = element.Details.find((y) => y.RecID == elem.RecID);
              subElm.ViewedFlag = as == "READ";
            }
          }
        }
      });
    }
  }
  goback() {
    if (this.isConsultantUser) {
      this.router.navigate(["/patient/lists"]);
    } else {
      this.commonService.goBackFromPatientInfo();
    }
  }
  static {
    this.\u0275fac = function PatientInfoComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PatientInfoComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(MatLegacyDialog), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(RefLabGuard), \u0275\u0275directiveInject(SpinnerVisibilityService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PatientInfoComponent, selectors: [["app-patient-info"]], viewQuery: function PatientInfoComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, decls: 111, vars: 45, consts: [["drawer", ""], [1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], ["hasBackdrop", "true", 1, "example-container1", "ptnprt"], ["mode", "over", "position", "end", 1, "example-sidenav", "sidefilter", "right-filter"], [3, "outFilterBy"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "title-container", "m-cont", "icon-cont"], ["href", "javascript:void(0)", "routerLinkActive", "router-link-active", 1, "back-btn", 3, "click"], ["data-testid", "pi-title", 1, "page-title"], ["src", "../../../assets/img/help-icon.svg", "matTooltipPosition", "below", "matTooltipClass", "below", "alt", "help-circle", 1, "iconquestion", 3, "click", "matTooltip"], [1, "mobile-header"], [1, "m-header", "d-flex", "justify-content-between", "align-items-center"], [1, "m-back"], ["href", "javascript:void(0)", 1, "back-btn", 3, "click"], [1, "m-title"], [1, "m-filter"], [1, "ipadfiler", "align-items-center", "pr-2"], ["type", "button", "mat-button", "", 1, "pr-0", 3, "click"], ["src", "../../../assets/img/filterIcon@2x.png", "alt", "", 1, "filtericon"], ["src", "../../../assets/img/help-circle.svg", "alt", "help-circle", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qpart", "qicon", 3, "click", "matTooltip"], [1, "custom-card", "newprt"], [1, "conpart", 2, "padding", "14px 28px"], [1, "row"], [1, "col", "head1", "headtitle"], [1, "d-flex", "justify-content-end", "btnpoint"], [4, "ngIf"], [1, "col-3", "col-md-4", "justify-content-end", "d-flex", "d-md-none", "pr-0"], ["src", "../../../assets/img/filterIcon@2x.png", "alt", "filterIcon"], [1, "filtertxt"], [1, "row", "m-0", "justify-content-start", "d-print-none"], [1, "col-md-6", "col-lg-3"], [1, "col1"], [1, "col", "pl-0", "head1"], [1, "col", "text-left"], [1, "col-md-6", "col-lg-3", "mt-3", "mt-md-0"], [1, "col-md-6", "col-lg-3", "mt-3", "mt-lg-0"], [1, "col-md-6", "col-lg-3", "mt-3"], ["class", "text-center refbtn", "style", "padding: 14px 0px;", 4, "ngIf"], [1, "col-12", "mb-2", "mt-3"], [3, "ngModelChange", "ngModel"], [1, "p-0", "tablecont"], [1, "mt-0"], [1, "row", "m-0", "align-items-center", "justify-content-end"], ["class", "selectOne pr-0 select-max-w py-4", 4, "ngIf"], [1, "selectTwo", "d-flex", "head1", "justify-content-end", "pt-2", "pl-3", "pr-3", "mb-2", "align-items-center", "toprow"], [1, "col", "justify-content-end", "d-flex", "consultancy-print", "pr-0", "align-items-center"], ["class", "col-3 col-md-4 justify-content-end d-flex d-md-none pr-0", 4, "ngIf"], [1, "pr-4", 2, "text-align", "right"], ["class", "d-flex filterp", 4, "ngIf"], [1, "p-0", "m-0", "cust-postion"], [3, "Parent", 4, "ngIf"], [3, "Parent", "consultations", 4, "ngIf"], ["class", "right-filter pl-0", 4, "ngIf"], ["id", "print-frame", "title", "", 2, "display", "none"], [3, "click"], ["type", "button", "routerLink", "/patient/info/edit", 1, "ml-4", "editBtn", "edit-btn"], ["alt", "edit", "src", "../../../../assets/img/edit-button@2x.png", 1, "rounded-0"], [1, "text-center", "refbtn", 2, "padding", "14px 0px"], [1, "selectOne", "pr-0", "select-max-w", "py-4"], [1, "mb-0", "mt-1", "text-center", "font-weight-bolder", "labeltxt"], [3, "ngbTooltip", 4, "ngIf"], [1, "svimg", 3, "ngbTooltip"], ["src", "./assets/img/print.svg", "alt", "", 4, "ngIf"], ["src", "./assets/img/print.svg", "alt", "", "class", "c-point", 3, "click", 4, "ngIf"], [3, "ngbTooltip"], ["src", "./assets/img/Consutlation.svg", "alt", "", 1, "c-point", 3, "click"], ["src", "./assets/img/print.svg", "alt", ""], ["src", "./assets/img/print.svg", "alt", "", 1, "c-point", 3, "click"], [2, "font-weight", "bold"], [1, "d-flex", "filterp"], [3, "Parent"], [3, "Parent", "consultations"], [1, "right-filter", "pl-0"]], template: function PatientInfoComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "mat-drawer-container", 3)(6, "mat-drawer", 4, 0)(8, "app-sidefilter", 5);
        \u0275\u0275listener("outFilterBy", function PatientInfoComponent_Template_app_sidefilter_outFilterBy_8_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientInfo());
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(9, "div", 6)(10, "div")(11, "section", 7)(12, "a", 8);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_a_click_12_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.goback());
        });
        \u0275\u0275text(13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "span", 9);
        \u0275\u0275text(15);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "img", 10);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_img_click_16_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 11)(18, "div", 12)(19, "div", 13)(20, "a", 14);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_a_click_20_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.goBack());
        });
        \u0275\u0275text(21);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(22, "div", 15);
        \u0275\u0275text(23);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "div", 16)(25, "span", 17)(26, "button", 18);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_button_click_26_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r2 = \u0275\u0275reference(7);
          return \u0275\u0275resetView(drawer_r2.toggle());
        });
        \u0275\u0275element(27, "img", 19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(28, "img", 20);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_img_click_28_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(29, "section", 21)(30, "div", 22)(31, "div", 23)(32, "span", 24);
        \u0275\u0275text(33);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(34, "div", 25);
        \u0275\u0275template(35, PatientInfoComponent_ng_container_35_Template, 6, 2, "ng-container", 26);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(36, "div", 27)(37, "span", 17)(38, "button", 18);
        \u0275\u0275listener("click", function PatientInfoComponent_Template_button_click_38_listener() {
          \u0275\u0275restoreView(_r1);
          const drawer_r2 = \u0275\u0275reference(7);
          return \u0275\u0275resetView(drawer_r2.toggle());
        });
        \u0275\u0275element(39, "img", 28);
        \u0275\u0275elementStart(40, "em", 29);
        \u0275\u0275text(41);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275elementStart(42, "div", 30)(43, "div", 31)(44, "div", 32)(45, "span", 33);
        \u0275\u0275text(46);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(47, "span", 34);
        \u0275\u0275text(48);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(49, "div", 35)(50, "div", 32)(51, "span", 33);
        \u0275\u0275text(52);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(53, "span", 34);
        \u0275\u0275text(54);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(55, "div", 36)(56, "div", 32)(57, "span", 33);
        \u0275\u0275text(58);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(59, "span", 34);
        \u0275\u0275text(60);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(61, "div", 36)(62, "div", 32)(63, "span", 33);
        \u0275\u0275text(64);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(65, "span", 34);
        \u0275\u0275text(66);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(67, "div", 37)(68, "div", 32)(69, "span", 33);
        \u0275\u0275text(70);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(71, "span", 34);
        \u0275\u0275text(72);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(73, "div", 37)(74, "div", 32)(75, "span", 33);
        \u0275\u0275text(76);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(77, "span", 34);
        \u0275\u0275text(78);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(79, "div", 37)(80, "div", 32)(81, "span", 33);
        \u0275\u0275text(82);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(83, "span", 34);
        \u0275\u0275text(84);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275template(85, PatientInfoComponent_div_85_Template, 3, 1, "div", 38);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(86, "div", 39)(87, "span")(88, "span");
        \u0275\u0275text(89);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(90, "mat-slide-toggle", 40);
        \u0275\u0275twoWayListener("ngModelChange", function PatientInfoComponent_Template_mat_slide_toggle_ngModelChange_90_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.consultSec, $event) || (ctx.consultSec = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(91, "span");
        \u0275\u0275text(92);
        \u0275\u0275template(93, PatientInfoComponent_span_93_Template, 2, 1, "span", 26);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(94, "mat-card", 41)(95, "div", 42)(96, "div", 43);
        \u0275\u0275template(97, PatientInfoComponent_div_97_Template, 4, 1, "div", 44);
        \u0275\u0275elementStart(98, "div", 45)(99, "div", 46);
        \u0275\u0275template(100, PatientInfoComponent_ng_container_100_Template, 6, 5, "ng-container", 26);
        \u0275\u0275elementEnd();
        \u0275\u0275template(101, PatientInfoComponent_div_101_Template, 6, 1, "div", 47);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(102, "p", 48);
        \u0275\u0275template(103, PatientInfoComponent_span_103_Template, 7, 4, "span", 26);
        \u0275\u0275elementEnd();
        \u0275\u0275template(104, PatientInfoComponent_span_104_Template, 6, 1, "span", 49);
        \u0275\u0275elementStart(105, "div", 50)(106, "div");
        \u0275\u0275template(107, PatientInfoComponent_app_patient_info_tests_107_Template, 1, 1, "app-patient-info-tests", 51)(108, PatientInfoComponent_app_consultation_list_108_Template, 1, 2, "app-consultation-list", 52);
        \u0275\u0275elementEnd()()()()();
        \u0275\u0275template(109, PatientInfoComponent_div_109_Template, 2, 0, "div", 53);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275element(110, "iframe", 54);
      }
      if (rf & 2) {
        \u0275\u0275advance(10);
        \u0275\u0275classMapInterpolate1("left-block ", ctx.consultSec ? "f-w-100" : "", "");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.Back);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.PatientInfo);
        \u0275\u0275advance();
        \u0275\u0275propertyInterpolate("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.Back);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.PatientInfo);
        \u0275\u0275advance(5);
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Patient, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.isConsultantUser);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate(ctx.labelService.dsSideFilterScreen.FILTERS);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.PatientID, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.PatientId, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.PatientName, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.PatientName, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.OwnerName, ":");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.OwnerName, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.Species, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.SpeciesName, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.Breed, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.BreedName, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.Age, ":");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.Dob, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsPatientInfoScreen.Sex, ":");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patient.Gender, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.refLabService.insideUSCAuser && !ctx.isConsultantUser);
        \u0275\u0275advance(3);
        \u0275\u0275classMapInterpolate1("section-text pr-2 ", !ctx.consultSec ? "text-dark" : "", "");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.PatientResults, " ");
        \u0275\u0275advance();
        \u0275\u0275twoWayProperty("ngModel", ctx.consultSec);
        \u0275\u0275advance();
        \u0275\u0275classMapInterpolate1("section-text pl-2 ", ctx.consultSec ? "text-dark" : "", "");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.Consults, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.consultations.length);
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", !ctx.isConsultantUser && !ctx.consultSec);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !ctx.isConsultantUser);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.consultSec);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.consultSec);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.consultSec);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", !ctx.consultSec);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.consultSec);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.consultSec);
      }
    }, dependencies: [NgIf, RouterLink, RouterLinkActive, NgbTooltip, MatLegacyButton, MatLegacyCard, MatDrawer, MatDrawerContainer, MatLegacySlideToggle, MatLegacyTooltip, HeaderComponent, SideMenuComponent, SidefilterComponent, NgControlStatus, NgModel, PatientInfoTestsComponent, ConsultationListComponent], styles: ['/* src/app/components/patient-managements/patient-info/patient-info.component.css */\n.g-btn {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n.mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\n.mat-expansion-panel:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card {\n  height: 100%;\n}\n.btn-secondary:not(:disabled):not(.disabled).active,\n.btn-secondary:not(:disabled):not(.disabled):active,\n.show > .btn-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary {\n  min-width: 124px;\n}\n.btn-group-toggle .btn-secondary {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container.egpart {\n  height: calc(100vh - 360px) !important;\n}\n.example-container {\n  height: calc(100vh - 450px);\n  padding: 12px;\n  overflow: auto;\n}\ntable {\n  width: 100%;\n}\n.select-outer {\n  float: right;\n}\n.color1 {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed {\n  border-left: 5px solid #0eab1c !important;\n}\n.pending {\n  border-left: 5px solid #969696 !important;\n}\n.cancelled {\n  border-left: 5px solid red !important;\n}\n.sort {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort .mat-form-field-appearance-outline .mat-form-field-infix {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort .mat-raised-button.mat-warn {\n  background-color: #fd6400;\n}\n.right-filter .mat-raised-button.mat-warn {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1 {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.imgouter {\n  width: 42px;\n  text-align: center;\n}\n.norecord {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n  margin-top: -11px;\n}\ntd.mat-cell:last-of-type,\ntd.mat-footer-cell:last-of-type,\nth.mat-header-cell:last-of-type {\n  padding-right: 12px;\n}\n.example-container tr td:last-child,\n.example-container tr th:last-child {\n  text-align: left;\n}\n.patientInfo table tr th:first-child {\n  border-radius: 5px 0 0 0px !important;\n  padding-left: 30px;\n}\ntable tr th:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1.ptnprt {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav {\n  padding: 20px;\n}\n.dashboard-wrapper {\n  padding-left: 0 !important;\n}\n.example-sidenav {\n  padding: 0;\n}\n.dashboard-wrapper {\n  padding-left: 0 !important;\n}\ni.filtertxt {\n  color: #ed8b00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary {\n    min-width: auto;\n  }\n  .toprow {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .example-sidenav {\n    padding: 0;\n  }\n  .mat-card {\n    border-radius: 10px !important;\n  }\n  .ipadfiler button {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n}\n.plist-date {\n  font-size: 11px;\n  width: 77px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntable tr td:last-child {\n  text-align: center;\n}\n.patientInfo table tr th:last-child {\n  padding-right: 30px !important;\n}\n.patient-table tr td:first-child {\n  border-bottom-left-radius: 8px !important;\n  border-top-left-radius: 8px !important;\n}\n.patient-table tr td {\n  background: #fff !important;\n  padding-top: 3px;\n  padding-right: 23px !important;\n}\n.col1 .col {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.head1 {\n  color: #000;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.heading {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.pdate {\n  width: 75px;\n  display: block;\n  word-break: break-word;\n}\n.c-point {\n  cursor: pointer;\n  width: 36px;\n}\n#print-btn {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n.mat-icon {\n  color: #fff !important;\n}\n@media screen and (max-width: 1199px) and (min-width: 992px) {\n  .col1 .col {\n    display: block;\n  }\n  .follow_patient .slide-toggle {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (max-width: 991px) {\n  .col1 {\n    display: flex;\n  }\n  .col1 .col span {\n    width: 50%;\n    flex: 0 0 50%;\n    display: block;\n  }\n  .follow_patient .slide-toggle {\n    margin: 0;\n    top: 0;\n  }\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n  .patient-table td.mat-cell:last-of-type,\n  .patient-table td.mat-footer-cell:last-of-type,\n  .patient-table th.mat-header-cell:last-of-type {\n    max-width: 136px !important;\n  }\n}\n.filterp {\n  display: none !important;\n}\n.svimg img {\n  width: 36px;\n  margin: 8px 0px 8px 8px;\n}\n.mobile-header {\n  display: none !important;\n}\n.selectOne {\n  width: 85%;\n}\n.selectTwo {\n  width: 15%;\n}\n.left-block {\n  width: calc(97vw - 445px);\n  right: 298px;\n}\n.right-filter {\n  right: 44px;\n}\n.dashboard-wrapper .mat-drawer-content {\n  overflow: inherit;\n}\n@media screen and (max-width: 767px) {\n  .svimg img {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n  .ipadfiler button {\n    text-align: right;\n  }\n  .filtericon {\n    padding-right: 5px;\n  }\n  .qicon {\n    display: none;\n  }\n  .qpart.qicon {\n    display: initial;\n  }\n  ::ng-deep .dashboard-wrapper .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .right-filter {\n    right: 0;\n  }\n  .left-block {\n    width: inherit !important;\n    right: 0 !important;\n  }\n  ::ng-deep .mat-drawer-content {\n    overflow: auto !important;\n  }\n  .labeltxt {\n    padding-left: 5px !important;\n    text-align: left !important;\n  }\n  table.mat-table tr.mat-header-row {\n    display: none;\n  }\n  .dashboard .mat-card {\n    background: transparent;\n    box-shadow: none !important;\n  }\n  .selectOne {\n    width: 70%;\n  }\n  .selectTwo.toprow {\n    width: 30%;\n    box-shadow: none !important;\n    border: none;\n    background: none;\n  }\n  .d-md-none {\n    display: none !important;\n  }\n  .m-cont {\n    display: none;\n  }\n  .mobile-header {\n    display: block !important;\n    background: #ffffff;\n    padding: 10px 0 10px 10px;\n  }\n  .ipadfiler {\n    padding-right: 3px !important;\n  }\n  .m-title {\n    font-weight: 600;\n    font-size: 16px;\n  }\n  .m-back {\n    padding-right: 10%;\n  }\n  table.mat-table {\n    margin-top: -12px !important;\n  }\n  table,\n  thead,\n  tbody,\n  th,\n  td,\n  tr {\n    display: inline-block;\n  }\n  table {\n    width: 100%;\n  }\n  thead tr {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr {\n    border: none;\n  }\n  td {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td span.textTtl {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  .mat-row:nth-child(even) {\n    background: #fff;\n  }\n  .patient-table tr th:nth-of-type(4),\n  .patient-table tr td:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n  table tr {\n    height: 100%;\n    margin-bottom: 25px;\n  }\n  table tr {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    padding-bottom: 18px;\n  }\n  .example-sidenav-content {\n    background: #ececef;\n  }\n  .mat-table {\n    background: transparent;\n  }\n  tr.mat-header-row {\n    height: 0 !important;\n  }\n  table tr th {\n    display: none;\n  }\n  .btn-toggle:after {\n    width: 5rem;\n  }\n  table tr td {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 16px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n    word-break: break-all;\n  }\n  .example-container tr td:last-child {\n    max-width: 100%;\n  }\n  .example-container {\n    padding: 0 12px 0 0;\n    height: inherit;\n    overflow: inherit;\n  }\n  .toprow {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px !important;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n  }\n  .example-container1 {\n    margin-top: 0;\n  }\n  .dashboard-wrapper {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord tr td {\n    width: 100% !important;\n    text-align: center;\n    border: none !important;\n    padding-left: 0px !important;\n  }\n  .patientinfo tr {\n    position: relative;\n  }\n  .patientinfo .patientcheck {\n    position: absolute;\n    right: 12px;\n    top: 25px;\n    z-index: 99;\n  }\n  .patientinfo tr td:first-child {\n    height: 0;\n    padding-top: 0;\n  }\n  .headtitle:before {\n    display: none;\n  }\n  .conpart {\n    position: relative;\n  }\n  .conpart:before {\n    content: "";\n    height: 2px;\n    width: 93%;\n    position: absolute;\n    left: 13px;\n    bottom: 12px;\n    background: #b7bab7;\n  }\n  .head1.headtitle {\n    padding-top: 8px;\n  }\n}\n@media screen and (max-width: 346px) {\n  .select-max-w {\n    flex: 0 0 70%;\n    max-width: 70%;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 390px) {\n  .btnpoint button {\n    padding: 0px 13px 0px 8px !important;\n    margin-left: 10px !important;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1180px) {\n  .right-filter {\n    top: 75px;\n  }\n  .resp.clse {\n    display: none !important;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .sidefilter .heading {\n    padding-left: 20%;\n  }\n  .qpart.qicon {\n    display: none;\n  }\n  .ipadfiler button {\n    text-align: right;\n  }\n  ::ng-deep .left-block {\n    width: inherit !important;\n    right: 0 !important;\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .right-filter {\n    top: 55px;\n  }\n  .filterp {\n    display: block !important;\n    text-align: right;\n    margin-right: 10px;\n  }\n  .example-container {\n    overflow: scroll;\n    height: calc(100vh - 300px);\n  }\n  .svimg img {\n    width: 36px;\n    margin: 8px 8px 8px 8px;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1300px) {\n  ::ng-deep .left-block {\n    max-height: 100%;\n    overflow-y: auto;\n  }\n  .example-container {\n    height: calc(100vh - 300px);\n  }\n}\n.hello {\n  border-left: 5px solid red;\n}\n.btnpoint {\n  margin-bottom: 10px;\n}\n.btnpoint button:first-child {\n  padding: 0px 10px;\n  color: #0072ce;\n  font-weight: bold;\n  border: 2px solid #0072ce;\n  background: transparent;\n}\n.btnpoint button {\n  padding: 0px 35px 0px 22px;\n  color: #959393;\n  font-weight: bold;\n  border: 2px solid #dcd8d8;\n  background: #f6f6f6;\n}\n.custom-card .refbtn {\n  margin-top: 20px;\n}\n.head1.headtitle {\n  font-size: 15px !important;\n  position: relative;\n  height: 28px;\n  padding-left: 0;\n}\n.labeltxt {\n  padding-left: 12%;\n}\n.refbtn button {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 20px;\n}\n.tablecont.mat-card {\n  border-top-right-radius: 10px !important;\n  margin: 0 7px !important;\n}\n.headtitle:before {\n  content: "";\n  height: 0.8px;\n  width: 95%;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background: #9ea29e;\n}\n.left-block {\n  height: auto !important;\n}\n.editBtn {\n  background: #f4f4f4 !important;\n  border: solid 0.4px #979797 !important;\n}\n.section-text {\n  vertical-align: top;\n  font-size: 13px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bolder;\n  color: #7c7c7c;\n}\n.f-w-100 {\n  width: calc(100vw - 200px) !important;\n  position: relative !important;\n  right: 0 !important;\n  left: 8px !important;\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb {\n  color: #fff !important;\n  background-color: #fff !important;\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-bar {\n  background-color: #0072ce !important;\n}\n.mat-slide-toggle-bar {\n  background-color: #f65c00 !important;\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb,\n.mat-slide-toggle-thumb {\n  color: #fff !important;\n  background-color: #fff !important;\n}\n.newprt {\n  height: 240px;\n}\n/*# sourceMappingURL=patient-info.component.css.map */\n'], encapsulation: 2 });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PatientInfoComponent, { className: "PatientInfoComponent", filePath: "src\\app\\components\\patient-managements\\patient-info\\patient-info.component.ts", lineNumber: 25 });
})();

// src/app/components/patient-managements/consult-patient-info/consult-patient-info.component.ts
var import_file_saver = __toESM(require_FileSaver_min());
var _c017 = (a0, a1, a2) => ({ completed: a0, cancelled: a1, pending: a2 });
function ConsultPatientInfoComponent_div_22_div_43_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41)(1, "div", 36)(2, "span", 37);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 38)(5, "mat-slide-toggle", 42);
    \u0275\u0275twoWayListener("ngModelChange", function ConsultPatientInfoComponent_div_22_div_43_Template_mat_slide_toggle_ngModelChange_5_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r1.patientInfo.IsFollowedPatient, $event) || (ctx_r1.patientInfo.IsFollowedPatient = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("change", function ConsultPatientInfoComponent_div_22_div_43_Template_mat_slide_toggle_change_5_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onToggleFollowPatient($event));
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.FollowPatient, " ");
    \u0275\u0275advance(2);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.patientInfo.IsFollowedPatient);
  }
}
function ConsultPatientInfoComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 34)(1, "div", 35)(2, "div", 36)(3, "span", 37);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "span", 38);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(7, "div", 35)(8, "div", 36)(9, "span", 37);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "span", 38);
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(13, "div", 35)(14, "div", 36)(15, "span", 37);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "span", 38);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(19, "div", 35)(20, "div", 36)(21, "span", 37);
    \u0275\u0275text(22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "span", 38);
    \u0275\u0275text(24);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(25, "div", 39)(26, "div", 36)(27, "span", 37);
    \u0275\u0275text(28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "span", 38);
    \u0275\u0275text(30);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(31, "div", 39)(32, "div", 36)(33, "span", 37);
    \u0275\u0275text(34);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "span", 38);
    \u0275\u0275text(36);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(37, "div", 39)(38, "div", 36)(39, "span", 37);
    \u0275\u0275text(40);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(41, "span", 38);
    \u0275\u0275text(42);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(43, ConsultPatientInfoComponent_div_22_div_43_Template, 6, 2, "div", 40);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.PatientID, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.PatientId ? ctx_r1.patientInfo.PatientId : "---", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.PatientName, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.PatientName ? ctx_r1.patientInfo.PatientName : "---", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.OwnerName, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.OwnerName ? ctx_r1.patientInfo.OwnerName : "---", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Species, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.SpeciesName ? ctx_r1.patientInfo.SpeciesName : "---", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Breed, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.BreedName ? ctx_r1.patientInfo.BreedName : "---", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Age, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.Dob ? ctx_r1.patientInfo.Dob : "N/A", " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Sex, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.patientInfo.Gender ? ctx_r1.patientInfo.Gender : "N/A", " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.isConsultantUser);
  }
}
function ConsultPatientInfoComponent_th_31_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 45)(1, "mat-checkbox", 46);
    \u0275\u0275listener("change", function ConsultPatientInfoComponent_th_31_div_1_Template_mat_checkbox_change_1_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.selectAll($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("checked", ctx_r1.IsAllSelected);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.All);
  }
}
function ConsultPatientInfoComponent_th_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275template(1, ConsultPatientInfoComponent_th_31_div_1_Template, 4, 2, "div", 44);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", false);
  }
}
function ConsultPatientInfoComponent_td_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "td", 47);
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(1, _c017, element_r4.AnalysisStatusId === 1, element_r4.AnalysisStatusId === 2, element_r4.AnalysisStatusId === 3));
  }
}
function ConsultPatientInfoComponent_th_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.DateAndTime);
  }
}
function ConsultPatientInfoComponent_td_35_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 48);
    \u0275\u0275listener("click", function ConsultPatientInfoComponent_td_35_Template_td_click_0_listener() {
      const ctx_r5 = \u0275\u0275restoreView(_r5);
      const element_r7 = ctx_r5.$implicit;
      const i_r8 = ctx_r5.index;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onRowClick(i_r8, element_r7));
    });
    \u0275\u0275elementStart(1, "span", 49);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r7.DateReceivedStr, "");
  }
}
function ConsultPatientInfoComponent_th_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.DVMName);
  }
}
function ConsultPatientInfoComponent_td_38_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 48);
    \u0275\u0275listener("click", function ConsultPatientInfoComponent_td_38_Template_td_click_0_listener() {
      const ctx_r9 = \u0275\u0275restoreView(_r9);
      const element_r11 = ctx_r9.$implicit;
      const i_r12 = ctx_r9.index;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onRowClick(i_r12, element_r11));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r11.PhysicianName, " ");
  }
}
function ConsultPatientInfoComponent_th_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.Analyzer);
  }
}
function ConsultPatientInfoComponent_td_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 48);
    \u0275\u0275listener("click", function ConsultPatientInfoComponent_td_41_Template_td_click_0_listener() {
      const ctx_r13 = \u0275\u0275restoreView(_r13);
      const element_r15 = ctx_r13.$implicit;
      const i_r16 = ctx_r13.index;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onRowClick(i_r16, element_r15));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r15 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r15.AnalyzerDisplayName, " ");
  }
}
function ConsultPatientInfoComponent_th_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.labelService.dsPatientInfoScreen.AnalysisType);
  }
}
function ConsultPatientInfoComponent_td_44_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 48);
    \u0275\u0275listener("click", function ConsultPatientInfoComponent_td_44_Template_td_click_0_listener() {
      const ctx_r17 = \u0275\u0275restoreView(_r17);
      const element_r19 = ctx_r17.$implicit;
      const i_r20 = ctx_r17.index;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onRowClick(i_r20, element_r19));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r19 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r19.AnalysisTypeName, " ");
  }
}
function ConsultPatientInfoComponent_th_46_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 43);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.labelService.dsPatientInfoScreen.AnalysisSource, " ");
  }
}
function ConsultPatientInfoComponent_td_47_img_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 53);
  }
}
function ConsultPatientInfoComponent_td_47_img_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 54);
  }
}
function ConsultPatientInfoComponent_td_47_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 48);
    \u0275\u0275listener("click", function ConsultPatientInfoComponent_td_47_Template_td_click_0_listener() {
      const ctx_r21 = \u0275\u0275restoreView(_r21);
      const element_r23 = ctx_r21.$implicit;
      const i_r24 = ctx_r21.index;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onRowClick(i_r24, element_r23));
    });
    \u0275\u0275elementStart(1, "span", 50);
    \u0275\u0275template(2, ConsultPatientInfoComponent_td_47_img_2_Template, 1, 0, "img", 51)(3, ConsultPatientInfoComponent_td_47_img_3_Template, 1, 0, "img", 52);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r23 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r23.AnalysisSourceId === 1);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r23.AnalysisSourceId === 2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r23.AnalysisSourceName, " ");
  }
}
function ConsultPatientInfoComponent_tr_48_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 55);
  }
}
function ConsultPatientInfoComponent_tr_49_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 56);
  }
}
function ConsultPatientInfoComponent_tbody_50_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 57)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1("", ctx_r1.labelService.dsPatientInfoScreen.Norecordsfound, ".");
  }
}
function ConsultPatientInfoComponent_div_51_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 58);
    \u0275\u0275element(1, "app-floating-consult-report");
    \u0275\u0275elementEnd();
  }
}
var ConsultPatientInfoComponent = class _ConsultPatientInfoComponent {
  constructor(commonService, patientService, router, route, labelService, headerService, sidefilterService, confirmationDialogService, dataService, title, EncrDecr) {
    this.commonService = commonService;
    this.patientService = patientService;
    this.router = router;
    this.route = route;
    this.labelService = labelService;
    this.headerService = headerService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.EncrDecr = EncrDecr;
    this.filterData = [];
    this.start = 0;
    this.limit = 100;
    this.counter = 0;
    this.end = this.limit + this.start;
    this.displayedColumns = [
      " ",
      "DateReceivedStr",
      "physician_name",
      "CategoryName",
      "AnalysisTypeName",
      "AnalysisSourceName"
    ];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.IsAllSelected = false;
    this.showPrintIcon = false;
    this.canceledAnalysisStatusId = EnmAnalysisStatus.Canceled;
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.title.setTitle("ZoetisDx Patient Info");
    this.sidefilterService.filter = new SideFilter();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.businessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.pataientId = this.route.snapshot.paramMap.get("pataientId");
    this.zdxPatientId = this.route.snapshot.paramMap.get("zdxPatientId");
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindPatientInfoLabel();
    }
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.PatientId = this.pataientId;
    if (this.zdxPatientId != "null")
      this.sidefilterService.filter.ZDXPatientInfoId = this.zdxPatientId;
    this.sidefilterService.filter.LanguageId = this.labelService.selectedLanguage;
    this.sidefilterService.filter.IsApplyFilter = true;
    console.log("gdg", typeof this.zdxPatientId);
  }
  ngOnInit() {
    this.getPatientInfo();
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindPatientInfoLabel();
    });
  }
  getPatientInfo() {
    this.sidefilterService.filter["IsPatientInfo"] = true;
    this.sidefilterService.filter.IsApplyFilter = true;
    this.sidefilterService.filter.IsExactFilter = true;
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.PatientId = this.pataientId;
    this.sidefilterService.filter.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    if (this.sidefilterService.filter.PageNo == 1) {
      this.counter = 0;
      this.originData = [];
    }
    this.patientService.getPatientInfo(this.sidefilterService.filter).pipe(switchMap((data) => {
      const zdxPatientId = data.ResponseData.DashboardPatientList[0].ZDXPatientId;
      this.sidefilterService.filter.ZDXPatientInfoId = zdxPatientId;
      return this.patientService.getPatientInfo(this.sidefilterService.filter);
    })).subscribe({
      next: (data) => {
        if (this.sidefilterService.filter.PageNo == 1) {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = data.ResponseData.DashboardPatientList[0].Details;
          } else {
            this.originData = [];
          }
        } else {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = this.originData.concat(data.ResponseData.DashboardPatientList[0].Details);
          }
        }
        if (this.originData.length > 0) {
          this.patientInfo = data.ResponseData.DashboardPatientList[0];
          this.originData = this.originData.map((item) => {
            if (item.PhysicianName && item.PhysicianName.trim() == "None") {
              item.PhysicianName = this.labelService.dsAnaysisResultsScreen.none;
            }
            return item;
          });
          this.dataService.appState.analysisTypeList = [];
          this.originData.forEach((ele) => {
            if (!this.dataService.appState.analysisTypeList.includes(ele.AnalysisTypeName)) {
              this.dataService.appState.analysisTypeList.push(ele.AnalysisTypeName);
            }
          });
          this.dataService.state.next(this.dataService.appState);
          this.dataSource = new MatLegacyTableDataSource(this.originData);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
          this.bindDVMDDL();
        } else {
          this.dataSource.data = [];
        }
      },
      error: () => {
        this.originData = [];
        this.dataSource.data = [];
        this.sidefilterService.filter.DVMName = "";
        this.sidefilterService.dsDVM = [];
      }
    });
  }
  bindDVMDDL() {
    this.sidefilterService.dsDVM = [];
    if (this.originData != null) {
      const arrDVM = [];
      let noDVMText = "";
      this.originData.forEach((subEle) => {
        if (subEle.PhysicianName && !arrDVM.includes(subEle.PhysicianName)) {
          if (subEle.PhysicianName == "None") {
            noDVMText = subEle.PhysicianName;
          } else {
            arrDVM.push(subEle.PhysicianName.trim());
            this.sidefilterService.dsDVM.push(subEle.PhysicianName.trim());
          }
        }
      });
      this.sidefilterService.dsDVM = this.commonService.arraySortByAscendingOrders(arrDVM);
      if (noDVMText) {
        this.sidefilterService.dsDVM.splice(0, 0, noDVMText);
      }
    }
  }
  selectAll(e) {
    this.IsAllSelected = e.checked;
    this.showPrintIcon = e.checked;
    this.dataSource.data.forEach((element) => {
      if (element.AnalysisStatusName == "Completed")
        element.IsReadyForPrint = e.checked;
    });
  }
  onDataSort(e) {
    this.dataService.pageState.PatientInfo.sortState = e;
    this.dataService.page.next(this.dataService.pageState);
  }
  onRowClick(rowIndex, ele) {
    if (ele.AnalysisStatusId == this.canceledAnalysisStatusId) {
      this.showMsg(ele.CancelComment);
    } else if (ele.AnalysisStatusId == EnmAnalysisStatus.Pending) {
      this.showMsg(this.labelService.dsPatientInfoScreen.pendingAlertMessage);
    } else {
      this.dataService.pageState.PatientInfo.selectedRow = rowIndex;
      this.dataService.pageState.PatientInfo.requestParams = this.sidefilterService.filter;
      this.dataService.pageState.PatientInfo.resultsList = this.originData;
      this.dataService.page.next(this.dataService.pageState);
      if (this.dataService && this.dataService.appState) {
        this.dataService.appState.selectedResult.element = this.patientInfo;
        this.dataService.appState.selectedResult.subElement = ele;
        this.dataService.state.next(this.dataService.appState);
      }
      this.patientService.showPataientTestResult(this.patientInfo, ele, null, this.sidefilterService.filter, null, null);
    }
  }
  selectSingleCheckbox(e, selecteItem) {
    selecteItem.IsReadyForPrint = e.checked;
    if (e.checked) {
      this.showPrintIcon = true;
      const allSelected = this.dataSource.data.find((x) => !x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (allSelected == void 0)
        this.IsAllSelected = true;
      else
        this.IsAllSelected = false;
    } else {
      this.IsAllSelected = false;
      const checkboxSelected = this.dataSource.data.find((x) => x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (checkboxSelected == void 0)
        this.showPrintIcon = false;
    }
    this.countCheckbox(e, selecteItem);
  }
  countCheckbox(event, selectedItem) {
    if (event.checked === true) {
      this.counter++;
      if (this.counter > 5) {
        this.confirmationDialogService.confirm("", this.labelService.dsPatientInfoScreen.CheckBoxExceed, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false).then((confirmed) => {
          if (confirmed) {
            this.counter--;
            selectedItem.IsReadyForPrint = false;
          }
        });
      }
    }
    if (event.checked === false) {
      this.counter--;
    }
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.FromDate = null;
    this.sidefilterService.filter.ToDate = null;
    this.sidefilterService.filter.AnalysisStatusId = 0;
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.ToDate = null;
  }
  downloadAnalysisResults() {
    this.downloadMultipleAnalysisResult = new DownloadMultipleAnalysisResult();
    this.downloadMultipleAnalysisResult.PatientId = this.patientInfo.Details.PatientId;
    this.downloadMultipleAnalysisResult.LanguageId = this.labelService.selectedLanguage;
    this.downloadMultipleAnalysisResult.BusinessGuid = this.businessGuid;
    this.downloadMultipleAnalysisResult.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.downloadMultipleAnalysisResult.Pageno = this.sidefilterService.filter.PageNo;
    this.downloadMultipleAnalysisResult.Pagesize = 60;
    this.downloadMultipleAnalysisResult.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    this.downloadMultipleAnalysisResult.MultipleTestRequest = [];
    this.dataSource.data.forEach((ele) => {
      if (ele.IsReadyForPrint && ele.AnalysisStatusName == "Completed") {
        this.analysisDetails = new AnalysisDetails();
        this.analysisDetails.AnalysisTypeId = ele.AnalysisTypeId;
        this.analysisDetails.AccessionId = ele.AccessionNumber;
        this.analysisDetails.PanelId = ele.PanelId;
        this.analysisDetails.SourceType = ele.SourceType;
        this.analysisDetails.PresentDate = ele.DateReceivedStr;
        this.analysisDetails.TemplateId = ele.TemplateId;
        this.downloadMultipleAnalysisResult.MultipleTestRequest.push(this.analysisDetails);
      }
    });
    this.patientService.downloadMultipleAnalysisResult(this.downloadMultipleAnalysisResult).subscribe((res) => {
      const fileName = this.patientInfo.Details.PatientName;
      this.savePdfFile(res, fileName);
    });
  }
  savePdfFile(res, fileName) {
    const blob = new Blob([res], { type: "application/pdf" });
    if (navigator.userAgent.indexOf("Safari") != -1) {
      const objectURL = URL.createObjectURL(blob);
      const iframe = document.querySelector("#print-frame");
      iframe.src = objectURL;
      setTimeout(function() {
        iframe.contentWindow.print();
      }, 1e3);
    } else {
      fileName = fileName + (/* @__PURE__ */ new Date()).toLocaleString().replace(",", "").split(" ").join("_") + ".pdf";
      if (window.navigator && window.navigator["msSaveOrOpenBlob"]) {
        window.navigator["msSaveOrOpenBlob"](blob, fileName);
      } else {
        (0, import_file_saver.saveAs)(res, fileName);
      }
    }
  }
  onToggleFollowPatient(e) {
    if (this.headerService.notificationSettingId == EnmNotificationSetting.FollowPatients) {
      this.onOffFollowPatient(e.checked);
    } else {
      const msg = this.labelService.dsPatientInfoScreen.ConfirmMessage;
      this.confirmationDialogService.confirm("", msg, this.labelService.dsPatientInfoScreen.Updatepreferences, this.labelService.dsPatientInfoScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.dataService.appState.admin.profilePageSelectedAccordion = 1;
          this.dataService.state.next(this.dataService.appState);
          this.router.navigateByUrl("/user/account");
        } else {
          this.patientInfo.Details.IsFollowedPatient = !this.patientInfo.Details.IsFollowedPatient;
        }
      });
    }
  }
  onOffFollowPatient(toggleValue) {
    const params = {
      UserGuid: this.headerService.loginUserGuid,
      BusinessGuid: this.businessGuid,
      PatientId: this.patientInfo.PatientId,
      FuseSerialNo: this.patientInfo.fuse_serial_number,
      IsActive: toggleValue
    };
    this.patientService.onOffFollowPatient(params).subscribe((res) => {
      console.log(res);
      this.patientInfo.patientDetails.IsFollowedPatient = toggleValue;
      localStorage.setItem("patientDetails", JSON.stringify(this.patientInfo.patientDetails));
    }, (err) => {
      console.log(JSON.stringify(err));
    });
  }
  showMsg(cancelComment) {
    if (cancelComment && /user.cancelled/.test(cancelComment)) {
      cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage;
    } else if (cancelComment && /11 :/.test(cancelComment)) {
      cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage11;
    } else if (cancelComment && /X :/.test(cancelComment)) {
      cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessageX;
    } else {
      cancelComment = cancelComment ? cancelComment : this.labelService.dsPatientInfoScreen.CanceledTest;
    }
    this.confirmationDialogService.confirm("", cancelComment, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
  }
  goToConsultation(e) {
    e.stopPropagation();
    this.dataService.appData.prevUrl = "dashboard";
    this.dataService.data.next(this.dataService.appData);
    const authDetails = this.dataService.appData.authDetails;
    const emailId = this.bckBusinessInfo ? this.bckBusinessInfo["EmailId"] : "";
    const doctorName = this.patientInfo.Details.length > 0 && this.patientInfo.Details[0].PhysicianName ? this.patientInfo.Details[0].PhysicianName : "";
    let urlStr = "email=" + authDetails["Email"] + "&bkoClinicEmail=" + emailId + "&token=" + JSON.parse(localStorage.authDetails).access_token + "&refresh_token=" + JSON.parse(localStorage.authDetails).refresh_token + "&deviceId=" + localStorage.UIGuid + "&BusinessGuid=" + JSON.parse(localStorage.authDetails).BusinessGuid + "&clinicname=" + authDetails["BusinessName"] + "&clinicphone=" + authDetails["BusinessPhoneNo"] + "&doctorname=" + doctorName + "&patientId=" + this.patientInfo.PatientId + "&patientName=" + this.patientInfo.PatientName + "&species=" + this.patientInfo.SpeciesName + "&breed=" + this.patientInfo.BreedName + "&ownerName=" + this.patientInfo.OwnerName + "&accessionId=&gender=" + this.patientInfo.Gender + "&age=" + this.patientInfo.Dob + "&Isbackoffice=" + JSON.parse(localStorage.authDetails).BackOfficeFlag + "&backUrl=" + location.href + "&isNewInternal=" + this.commonService.isnewUrlRedirection();
    urlStr = this.EncrDecr.encrypt(urlStr);
    if (this.headerService.isNRP) {
      this.commonService.getRedirectionKey({ ValueString: urlStr }).subscribe((data) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + data.ResponseData;
      }, (err) => {
        console.log(JSON.stringify(err));
      });
    } else {
      this.commonService.getEncryptDetail({ toEncryptStr: urlStr }).subscribe((res) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + res.ResponseData.encryptedKey;
      }, (err) => {
        console.log(JSON.stringify(err));
      });
    }
  }
  backToConsultant() {
    if (localStorage.locationBackFromInfo && localStorage.locationBackFromInfo == "1") {
      this.router.navigateByUrl("/patient/list");
      return;
    }
    const consultRedr = localStorage.getItem("rediretionDetails");
    const consultEmailWithRid = consultRedr.split("emailWithConsultantResourceGrpId=")[1] != void 0 ? consultRedr.split("emailWithConsultantResourceGrpId=")[1].split("&")[0] : null;
    const emailWithConsultant = consultRedr.split("emailWithConsultant=")[1] != void 0 ? consultRedr.split("emailWithConsultant=")[1].split("&")[0] : null;
    const urlStr = "email=" + JSON.parse(localStorage.authDetails).Email + "&token=" + JSON.parse(localStorage.authDetails).access_token + "&refresh_token=" + JSON.parse(localStorage.authDetails).refresh_token + "&deviceId=" + localStorage.UIGuid + "&emailWithConsultantResourceGrpId=" + consultEmailWithRid + "&emailWithConsultant=" + emailWithConsultant + "&isNewInternal=" + this.commonService.isnewUrlRedirection() + "&TimeFormatId=" + this.dataService.appData.authDetails["TimeFormatId"] + "&TimeZoneId=" + this.dataService.appData.authDetails["TimeZoneId"] + "&DateFormatId=" + this.dataService.appData.authDetails["DateFormatId"];
    const encryptedUrlStr = this.EncrDecr.encrypt(urlStr);
    const backUrl = this.dataService.appState.consultationBackUrl;
    this.commonService.getRedirectionKey({ ValueString: encryptedUrlStr }).subscribe((data) => {
      this.checkFlagAndRedirect(backUrl, data);
    }, (err) => {
      console.log(JSON.stringify(err));
    });
  }
  checkFlagAndRedirect(backUrl, data) {
    if (!this.commonService.isConsultReportRequestPending) {
      window.location.href = backUrl + "?ref=" + data.ResponseData;
    } else {
      window.setTimeout(() => {
        this.checkFlagAndRedirect(backUrl, data);
      }, 100);
    }
  }
  static {
    this.\u0275fac = function ConsultPatientInfoComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultPatientInfoComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(EncrDecrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultPatientInfoComponent, selectors: [["app-consult-patient-info"]], viewQuery: function ConsultPatientInfoComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
      }
    }, decls: 52, vars: 11, consts: [[1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], ["hasBackdrop", "true", 1, "example-container1"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "page-content", "resizepage"], [1, "p-0"], [1, "mt-0"], [1, "d-flex", "head1", "justify-content-between", "pl-3", "pr-3", "mb-3", "align-items-center", "toprow"], [1, "d-flex", "justify-content-between", "align-items-center"], [1, "backlink", 3, "click"], [1, "d-flex", "justify-content-start", "align-items-center", "w-75"], [1, "heading", "d-flex", "justify-content-between", "align-items-center", "w-100"], [1, "justify-content-between", "align-items-center", "text-left", "centerHead"], [1, "topHead"], [1, "patientHead", "w-100", "px-3"], ["class", "row col-sm-12 justify-content-start d-print-none", 4, "ngIf"], [1, "belowpart"], [1, "mb-0", "mt-4", "head1", "col-sm-12"], [1, "p-0", "pt-2", "cust-postion"], ["id", "patientinfoTbl-scrollabe", 1, "example-container", "pt-0"], ["mat-table", "", "matSort", "", "summary", "", 1, "patient-table", 3, "dataSource"], ["matColumnDef", " "], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "ngClass", 4, "matCellDef"], ["matColumnDef", "DateReceivedStr"], ["mat-cell", "", 3, "click", 4, "matCellDef"], ["matColumnDef", "physician_name"], ["matColumnDef", "CategoryName"], ["matColumnDef", "AnalysisTypeName"], ["matColumnDef", "AnalysisSourceName"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "style", "cursor: pointer;", 4, "matRowDef", "matRowDefColumns"], ["class", " norecord", 4, "ngIf"], ["style", "position: fixed;left: 50%; bottom: 30px;transform: translate(-50%, 0);", 4, "ngIf"], [1, "row", "col-sm-12", "justify-content-start", "d-print-none"], [1, "col-sm-3"], [1, "col1"], [1, "col", "pl-0", "head1"], [1, "col", "text-left"], [1, "col-sm-3", "mt-3", "d-flex", "align-items-center"], ["class", "col-sm-3 mt-3 d-flex align-items-center follow_patient", 4, "ngIf"], [1, "col-sm-3", "mt-3", "d-flex", "align-items-center", "follow_patient"], ["color", "primary", 1, "slide-toggle", 3, "ngModelChange", "change", "ngModel"], ["mat-header-cell", ""], ["class", "d-flex align-items-center chk-list", 4, "ngIf"], [1, "d-flex", "align-items-center", "chk-list"], [1, "example-margin", 3, "change", "checked"], ["mat-cell", "", 3, "ngClass"], ["mat-cell", "", 3, "click"], [1, "pdate"], [1, "cardimg"], ["src", "./assets/img/poc-icon@2x.png", "alt", "img", "class", "mr-2", "height", "16", 4, "ngIf"], ["src", "./assets/img/lab-icon@2x.png", "alt", "img", "class", "mr-2", "height", "16", 4, "ngIf"], ["src", "./assets/img/poc-icon@2x.png", "alt", "img", "height", "16", 1, "mr-2"], ["src", "./assets/img/lab-icon@2x.png", "alt", "img", "height", "16", 1, "mr-2"], ["mat-header-row", ""], ["mat-row", "", 2, "cursor", "pointer"], [1, "norecord"], [2, "position", "fixed", "left", "50%", "bottom", "30px", "transform", "translate(-50%, 0)"]], template: function ConsultPatientInfoComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "mat-drawer-container", 2)(6, "div", 3)(7, "div", 4)(8, "mat-card", 5)(9, "div", 6)(10, "div", 7)(11, "span", 8)(12, "a", 9);
        \u0275\u0275listener("click", function ConsultPatientInfoComponent_Template_a_click_12_listener() {
          return ctx.backToConsultant();
        });
        \u0275\u0275text(13);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "div", 10)(15, "h5", 11)(16, "span", 12);
        \u0275\u0275text(17);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(18, "div", 13)(19, "div", 14)(20, "p");
        \u0275\u0275text(21, "Patient");
        \u0275\u0275elementEnd()();
        \u0275\u0275template(22, ConsultPatientInfoComponent_div_22_Template, 44, 15, "div", 15);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(23, "div", 16)(24, "p", 17);
        \u0275\u0275text(25);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(26, "div", 18)(27, "div")(28, "div", 19)(29, "table", 20);
        \u0275\u0275elementContainerStart(30, 21);
        \u0275\u0275template(31, ConsultPatientInfoComponent_th_31_Template, 2, 1, "th", 22)(32, ConsultPatientInfoComponent_td_32_Template, 1, 5, "td", 23);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(33, 24);
        \u0275\u0275template(34, ConsultPatientInfoComponent_th_34_Template, 2, 1, "th", 22)(35, ConsultPatientInfoComponent_td_35_Template, 3, 1, "td", 25);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(36, 26);
        \u0275\u0275template(37, ConsultPatientInfoComponent_th_37_Template, 2, 1, "th", 22)(38, ConsultPatientInfoComponent_td_38_Template, 2, 1, "td", 25);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(39, 27);
        \u0275\u0275template(40, ConsultPatientInfoComponent_th_40_Template, 2, 1, "th", 22)(41, ConsultPatientInfoComponent_td_41_Template, 2, 1, "td", 25);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(42, 28);
        \u0275\u0275template(43, ConsultPatientInfoComponent_th_43_Template, 2, 1, "th", 22)(44, ConsultPatientInfoComponent_td_44_Template, 2, 1, "td", 25);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(45, 29);
        \u0275\u0275template(46, ConsultPatientInfoComponent_th_46_Template, 2, 1, "th", 22)(47, ConsultPatientInfoComponent_td_47_Template, 5, 3, "td", 25);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(48, ConsultPatientInfoComponent_tr_48_Template, 1, 0, "tr", 30)(49, ConsultPatientInfoComponent_tr_49_Template, 1, 0, "tr", 31);
        \u0275\u0275elementEnd();
        \u0275\u0275template(50, ConsultPatientInfoComponent_tbody_50_Template, 4, 1, "tbody", 32);
        \u0275\u0275elementEnd()()()()()()()()();
        \u0275\u0275template(51, ConsultPatientInfoComponent_div_51_Template, 2, 0, "div", 33);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(13);
        \u0275\u0275textInterpolate(ctx.labelService.dsPatientInfoScreen.Back);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsPatientInfoScreen.PatientInfo, " ");
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.patientInfo);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate2(" ", ctx.labelService.dsPatientInfoScreen.MsgToCheckResults, " ", ctx.counter, "/5 ");
        \u0275\u0275advance(4);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(19);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource === null || ctx.dataSource.data.length === 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.commonService == null ? null : ctx.commonService.consultationReport());
      }
    }, dependencies: [NgClass, NgIf, MatLegacyCheckbox, MatLegacyCard, MatDrawerContainer, MatLegacySlideToggle, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, HeaderComponent, SideMenuComponent, NgControlStatus, NgModel, FcrComponent], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: calc(100vh - 380px);\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 25% !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 200px;\n  width: 200px;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n  padding-left: 30px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 90px);\n  margin-top: 70px;\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  width: 77px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntable.mat-table[_ngcontent-%COMP%] {\n  border-collapse: separate !important;\n  border-spacing: 0 12px !important;\n  margin-top: -12px !important;\n}\ntable.mat-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntr.mat-footer-row[_ngcontent-%COMP%], \ntr.mat-row[_ngcontent-%COMP%] {\n  height: 60px;\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: center;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-right: 30px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  background: #fff !important;\n  border-radius: 8px !important;\n  font-size: 14px !important;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  font-size: 15px !important;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 15px !important;\n}\n.head1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 15px !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 18px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n  margin-left: 14%;\n}\n.pdate[_ngcontent-%COMP%] {\n  width: 75px;\n  display: block;\n  word-break: break-word;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n.mat-icon[_ngcontent-%COMP%] {\n  color: #fff !important;\n}\n.page-content[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.page-content[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  background: transparent !important;\n}\n.topHead[_ngcontent-%COMP%] {\n  background: #fff;\n  margin: 0 15px;\n  border-radius: 9px;\n  padding: 15px 0 15px 0;\n}\n.belowpart[_ngcontent-%COMP%] {\n  background: #fff;\n  margin: 0 15px;\n  border-radius: 9px;\n  padding: 0px 0 15px 0;\n}\n.belowpart[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  padding-top: 15px;\n}\n.centerHead[_ngcontent-%COMP%] {\n  font-family: gothambook, sans-serif;\n  background: #fff;\n  padding: 14px 115px;\n  border-radius: 25px;\n  font-size: 20px;\n  font-weight: 700;\n}\n.patientHead[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 20px;\n  border-bottom: 1px solid #ccc;\n  font-family: GothamNarrowBold, sans-serif;\n  padding-bottom: 5px;\n}\n/*# sourceMappingURL=consult-patient-info.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultPatientInfoComponent, { className: "ConsultPatientInfoComponent", filePath: "src\\app\\components\\patient-managements\\consult-patient-info\\consult-patient-info.component.ts", lineNumber: 19 });
})();

// src/app/components/login-regis-intermediate/login-regis-intermediate.component.ts
function LoginRegisIntermediateComponent_mat_option_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 17);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const country_r2 = ctx.$implicit;
    \u0275\u0275property("value", country_r2.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", country_r2.CountryName, "");
  }
}
var LoginRegisIntermediateComponent = class _LoginRegisIntermediateComponent {
  constructor(formBuilder, router, commonService, labelService, dataService) {
    this.formBuilder = formBuilder;
    this.router = router;
    this.commonService = commonService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.dsCountry = [];
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindLoginSignUpIntermediateLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindLoginSignUpIntermediateLabel();
    });
  }
  ngOnInit() {
    this.loginSignUpIntemediateForm = this.createFormGroup(new LoginSinUpIntermediate());
    this.commonService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, null).subscribe((data) => {
      this.dsCountry = data.ResponseData.CountryDetails;
      this.dataService.appState.CountryList = data.ResponseData.CountryDetails;
      this.dataService.state.next(this.dataService.appState);
    });
  }
  next() {
    if (this.loginSignUpIntemediateForm.status == "VALID") {
      localStorage.setItem("userCountryId", this.loginSignUpIntemediateForm.controls["CountryId"].value);
      this.labelService.userCountryId = this.loginSignUpIntemediateForm.controls["CountryId"].value;
      this.dataService.appData.masterData.userCountryId = this.loginSignUpIntemediateForm.controls["CountryId"].value;
      this.dataService.data.next(this.dataService.appData);
      this.router.navigateByUrl("/register");
    }
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "CountryId": [dataItem.CountryId, Validators.required]
    });
  }
  static {
    this.\u0275fac = function LoginRegisIntermediateComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _LoginRegisIntermediateComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _LoginRegisIntermediateComponent, selectors: [["app-login-regis-intermediate"]], decls: 19, vars: 5, consts: [["formGroupDirective", "ngForm"], [1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-75"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "login"], ["autocomplete", "off", 1, "form-signin", 3, "keyup.enter", "formGroup"], [1, "form-label-group", "mb-2", "mt-4"], ["appearance", "outline", 1, "w-100"], ["formControlName", "CountryId", "autocomplete", "off", "required", "", 3, "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], [1, "d-flex", "align-items-center", "justify-content-center"], ["mat-raised-button", "", "color", "warn", "routerLink", "/login", 1, "btn", "btn1", "btn-lg", "btn-primary", "btn-block", "mr-2"], ["mat-raised-button", "", "color", "warn", 1, "btn", "btn-lg", "btn-primary", "btn-block", 3, "click"], [3, "value"]], template: function LoginRegisIntermediateComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "div", 3)(3, "div", 4)(4, "div", 5)(5, "div", 6)(6, "div", 7);
        \u0275\u0275element(7, "img", 8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "form", 9, 0);
        \u0275\u0275listener("keyup.enter", function LoginRegisIntermediateComponent_Template_form_keyup_enter_8_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.next());
        });
        \u0275\u0275elementStart(10, "div", 10)(11, "mat-form-field", 11)(12, "mat-select", 12);
        \u0275\u0275template(13, LoginRegisIntermediateComponent_mat_option_13_Template, 2, 2, "mat-option", 13);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(14, "div", 14)(15, "button", 15);
        \u0275\u0275text(16);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(17, "button", 16);
        \u0275\u0275listener("click", function LoginRegisIntermediateComponent_Template_button_click_17_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.next());
        });
        \u0275\u0275text(18);
        \u0275\u0275elementEnd()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(8);
        \u0275\u0275property("formGroup", ctx.loginSignUpIntemediateForm);
        \u0275\u0275advance(4);
        \u0275\u0275property("placeholder", ctx.labelService.dsLoginSignUpIntermediateScreen.SelectCountry);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsCountry);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsLoginSignUpIntermediateScreen.ReturntoLogin);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsLoginSignUpIntermediateScreen.Next);
      }
    }, dependencies: [NgForOf, RouterLink, MatLegacyFormField, MatLegacyButton, MatLegacySelect, MatLegacyOption, \u0275NgNoValidate, NgControlStatus, NgControlStatusGroup, RequiredValidator, FormGroupDirective, FormControlName], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n  padding: 50px 8px !important;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  background-color: #fd6400;\n  box-shadow: none;\n  margin: 0;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 70%;\n}\n.select-lang[_ngcontent-%COMP%] {\n  float: right;\n  width: 200px;\n  margin-top: 16px;\n  margin-right: 21px;\n}\na[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-weight: 500;\n}\n.mb-2[_ngcontent-%COMP%] {\n  margin-bottom: 1.5rem !important;\n}\n.signup[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #407ec9;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  margin-top: 16px;\n  font-size: 14px;\n}\n.btn1[_ngcontent-%COMP%] {\n  color: #000;\n  background-color: #fff;\n  border: solid 0.4px #979797 !important;\n  margin: 0 10px 0 0;\n  word-break: break-word;\n  white-space: break-spaces;\n  line-height: 15px !important;\n  padding: 0 8px !important;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.red[_ngcontent-%COMP%] {\n  color: red;\n}\n.green[_ngcontent-%COMP%] {\n  color: green;\n}\n/*# sourceMappingURL=login-regis-intermediate.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(LoginRegisIntermediateComponent, { className: "LoginRegisIntermediateComponent", filePath: "src\\app\\components\\login-regis-intermediate\\login-regis-intermediate.component.ts", lineNumber: 12 });
})();

// src/app/components/user-managements/account-settings/account-settings.component.ts
var import_intl_tel_input2 = __toESM(require_intl_tel_input());

// src/app/components/user-managements/preferences/preferences.component.ts
var _c018 = ["formGroupDirective"];
var _c113 = (a0) => ({ "view-mode": a0 });
function PreferencesComponent_label_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 28);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.getLanguageName(ctx_r0.dsUserPreference.LanguageId));
  }
}
function PreferencesComponent_mat_form_field_11_mat_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const language_r3 = ctx.$implicit;
    \u0275\u0275property("value", language_r3.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", language_r3.Name, " ");
  }
}
function PreferencesComponent_mat_form_field_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-form-field", 29)(1, "mat-select", 30);
    \u0275\u0275twoWayListener("ngModelChange", function PreferencesComponent_mat_form_field_11_Template_mat_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r0.dsUserPreference.LanguageId, $event) || (ctx_r0.dsUserPreference.LanguageId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("selectionChange", function PreferencesComponent_mat_form_field_11_Template_mat_select_selectionChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.reloadDDL($event));
    });
    \u0275\u0275template(2, PreferencesComponent_mat_form_field_11_mat_option_2_Template, 2, 2, "mat-option", 31);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.dsUserPreference.LanguageId);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dsLanguage);
  }
}
function PreferencesComponent_label_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 33);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.dsUserPreference.TimeZoneNameWithUTCOffset, " ");
  }
}
function PreferencesComponent_mat_form_field_18_mat_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const timeZone_r5 = ctx.$implicit;
    \u0275\u0275property("value", timeZone_r5.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", timeZone_r5.TimeZoneNameWithUTCOffset, " ");
  }
}
function PreferencesComponent_mat_form_field_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-form-field", 29)(1, "mat-select", 34);
    \u0275\u0275listener("selectionChange", function PreferencesComponent_mat_form_field_18_Template_mat_select_selectionChange_1_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onChangeDateFormate());
    });
    \u0275\u0275twoWayListener("ngModelChange", function PreferencesComponent_mat_form_field_18_Template_mat_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r0.dsUserPreference.TimeZoneId, $event) || (ctx_r0.dsUserPreference.TimeZoneId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(2, PreferencesComponent_mat_form_field_18_mat_option_2_Template, 2, 2, "mat-option", 31);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.dsUserPreference.TimeZoneId);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.timeZoneList);
  }
}
function PreferencesComponent_label_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 35);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.dsUserPreference.DateFormatName, " ");
  }
}
function PreferencesComponent_mat_form_field_26_mat_option_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 32);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const dateFormate_r7 = ctx.$implicit;
    \u0275\u0275property("value", dateFormate_r7.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", dateFormate_r7.DateTimeFormat, " ");
  }
}
function PreferencesComponent_mat_form_field_26_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-form-field", 36)(1, "mat-select", 37);
    \u0275\u0275twoWayListener("ngModelChange", function PreferencesComponent_mat_form_field_26_Template_mat_select_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r0 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r0.dsUserPreference.DateFormatId, $event) || (ctx_r0.dsUserPreference.DateFormatId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(2, PreferencesComponent_mat_form_field_26_mat_option_2_Template, 2, 2, "mat-option", 31);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.dsUserPreference.DateFormatId);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.dateFormateList);
  }
}
function PreferencesComponent_span_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275text(1);
    \u0275\u0275pipe(2, "uppercase");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(2, 1, ctx_r0.dsUserPreference.TimeFormatName));
  }
}
function PreferencesComponent_mat_radio_group_31_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41)(1, "mat-radio-button", 42);
    \u0275\u0275listener("change", function PreferencesComponent_mat_radio_group_31_div_1_Template_mat_radio_button_change_1_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onChangeTimeFormate($event));
    });
    \u0275\u0275text(2);
    \u0275\u0275pipe(3, "uppercase");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const timeZone_r10 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("value", timeZone_r10.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(3, 2, timeZone_r10.DateTimeFormat), " ");
  }
}
function PreferencesComponent_mat_radio_group_31_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-radio-group", 39);
    \u0275\u0275twoWayListener("ngModelChange", function PreferencesComponent_mat_radio_group_31_Template_mat_radio_group_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r0 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r0.dsUserPreference.TimeFormatId, $event) || (ctx_r0.dsUserPreference.TimeFormatId = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(1, PreferencesComponent_mat_radio_group_31_div_1_Template, 4, 4, "div", 40);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.dsUserPreference.TimeFormatId);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.timeFormateList);
  }
}
function PreferencesComponent_span_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 38);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.getNotificationSettingName(ctx_r0.dsUserPreference.FollowPatient));
  }
}
function PreferencesComponent_mat_radio_group_38_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 45)(1, "mat-radio-button", 46);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const noti_r12 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("value", noti_r12.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", noti_r12.SettingsValue, " ");
  }
}
function PreferencesComponent_mat_radio_group_38_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-radio-group", 43);
    \u0275\u0275twoWayListener("ngModelChange", function PreferencesComponent_mat_radio_group_38_Template_mat_radio_group_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r11);
      const ctx_r0 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r0.dsUserPreference.FollowPatient, $event) || (ctx_r0.dsUserPreference.FollowPatient = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275template(1, PreferencesComponent_mat_radio_group_38_div_1_Template, 3, 2, "div", 44);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("ngModel", ctx_r0.dsUserPreference.FollowPatient);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.notificationSettingLIst);
  }
}
function PreferencesComponent_button_40_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 47);
    \u0275\u0275listener("click", function PreferencesComponent_button_40_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r13);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.editPreference());
    });
    \u0275\u0275element(1, "img", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.Edit, "");
  }
}
function PreferencesComponent_button_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 49);
    \u0275\u0275listener("click", function PreferencesComponent_button_41_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r14);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.cancelEditPreference());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsUserProfileScreen.Cancel);
  }
}
function PreferencesComponent_button_42_Template(rf, ctx) {
  if (rf & 1) {
    const _r15 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 50);
    \u0275\u0275listener("click", function PreferencesComponent_button_42_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r15);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.updateUserPreference());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsUserProfileScreen.Save);
  }
}
var PreferencesComponent = class _PreferencesComponent {
  constructor(userService, commonService, headerService, sidemenuService, formBuilder, confirmationDialogService, labelService, dataService) {
    this.userService = userService;
    this.commonService = commonService;
    this.headerService = headerService;
    this.sidemenuService = sidemenuService;
    this.formBuilder = formBuilder;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.panelOpenState = false;
    this.isProfileEditable = false;
    this.isPreferenceEditable = false;
    this.dsUserProfile = {};
    this.isUserTypeBusiness = false;
    this.resetReqMsg = "";
    this.profileEmail = "";
    this.securityEmail = "";
    this.dsState = [];
    this.timeZoneList = [];
    this.dateFormateList = [];
    this.timeFormateList = [];
    this.selectedTimeFormate = this.dataService.appState.date.is24Hours;
    this.userId = localStorage.authDetails ? JSON.parse(localStorage.authDetails).Id : void 0;
    this.UserGuid = localStorage.authDetails ? JSON.parse(localStorage.authDetails).UserGuid : void 0;
    this.userStatusId = 0;
    this.userTypeId = 0;
    this.isNumberValue = true;
    this.dsLanguage = [];
    this.IsLinkedRefLabClinic = this.dataService.appData.authDetails["IsLinkedRefLabClinic"];
    this.userTypeIdfor = this.dataService.appData.authDetails["UserTypeId"];
    this.selectedAccordion = this.dataService.appState.admin.profilePageSelectedAccordion;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails(false, false);
    } else {
      this.labelService.bindUserProfileLabel();
    }
  }
  onChangeDateFormate() {
    if (this.userService.originalUserProfileData.TimeZoneId != this.dsUserPreference["TimeZoneId"]) {
      const confmsg = this.labelService.dsUserProfileScreen.UserTimeZoneChangeConfirmationMsg;
      this.confirmationDialogService.confirm("", confmsg, this.labelService.dsUserProfileScreen.Confirm, this.labelService.dsUserProfileScreen.Cancel).then((confirmed) => {
        confirmed ? null : this.dsUserPreference["TimeZoneId"] = this.userService.originalUserProfileData.TimeZoneId;
      }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
    }
  }
  onChangeTimeFormate(e) {
    this.selectedTimeFormate = e.value;
  }
  getUserDDLDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.timeZoneList = data.ResponseData.TimeZonesList;
      this.userService.dsLanguage = data.ResponseData.LanguageDetails;
      this.dateFormateList = data.ResponseData.DateFormatList;
      this.dateFormateList.forEach((e) => {
        if (e["Id"] == this.dsUserPreference.DateFormatId) {
          localStorage.setItem("DateTimeFormat", e["ExactDateTime"].replace(/(?<!y)y(?!y)/g, "YY").toUpperCase());
        }
      });
      this.timeFormateList = data.ResponseData.TimeFormatList;
      this.userService.dsNotification = data.ResponseData.NotificationSettingsValue;
      this.notificationSettingLIst = data.ResponseData.NotificationSettingsValue.filter((item) => {
        if (this.dataService.appData.authDetails["UserTypeId"] == EnmUserType.Business || this.dataService.appData.authDetails["UserTypeId"] == EnmUserType.DVM) {
          return item;
        } else {
          return item.Id == 1 || item.Id == 3;
        }
      });
      this.getUserSetting();
    });
  }
  getUserTitleDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsTitle = data.ResponseData.TitleDetails;
    });
  }
  //guid updated
  getUserList() {
    this.commonService.getUserList(this.headerService.loginUserGuid, localStorage.businessGuid, this.userStatusId > 0 ? this.userStatusId : null, this.userTypeId > 0 ? this.userTypeId : null, this.labelService.selectedLanguage).subscribe((data) => {
      this.dsUserList = data.ResponseData;
    });
  }
  ngOnInit() {
    this.dsUserPreference = new UserDetails();
    this.profileForm = this.createFormGroup(new UserDetails());
    this.getUserDDLDetails(null);
    this.getUserList();
  }
  ngOnDestroy() {
  }
  getLabelDetails(isUpdateChild, showUpdateMsg = true, forceApiCall = false) {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage, forceApiCall).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.dataService.appData.labels = data.ResponseData;
      this.dataService.data.next(this.dataService.appData);
      this.labelService.bindUserProfileLabel();
      if (isUpdateChild) {
        this.labelService.bindSideMenuLabel();
        this.labelService.bindHeaderLabel();
        if (showUpdateMsg)
          this.showMsg(this.labelService.dsUserProfileScreen.UserPreferenceUpdatedSuccessfully);
      }
    });
  }
  getLanguageName(langId) {
    if (langId != void 0 && this.userService.dsLanguage.length)
      return this.userService.dsLanguage.find((x) => x.Id == langId).Name;
    else
      return null;
  }
  getNotificationSettingName(FollowPatientId) {
    if ((FollowPatientId != void 0 || FollowPatientId != null || FollowPatientId != 0) && this.userService.dsNotification.length && FollowPatientId != 3)
      return this.userService.dsNotification.find((x) => x.Id == FollowPatientId).SettingsValue;
    else
      return "";
  }
  getUserSetting() {
    this.userService.getUserSettingDetails(this.headerService.loginUserGuid, localStorage.businessGuid).subscribe({ next: (data) => {
      this.userService.originalUserProfileData = data.ResponseData;
      if (this.userService.originalUserProfileData.FollowPatient == void 0 || this.userService.originalUserProfileData.FollowPatient == null)
        this.userService.originalUserProfileData.FollowPatient = EnmNotificationSetting.AllClinicResults;
      this.getUserTitleDetails(this.userService.originalUserProfileData.PrefixTypeId);
      this.setDataSource();
    }, error: () => {
      this.userService.originalUserProfileData = null;
      this.dsUserProfile = null;
      this.dsUserPreference = null;
      this.profileEmail = "";
      this.securityEmail = "";
      this.isUserTypeBusiness = false;
    } });
  }
  setDataSource() {
    this.profileForm = this.createFormGroup(this.dsUserProfile);
    this.userService.originalUserProfileData["DateFormatName"] = this.dateFormateList.find((e) => e["Id"] == this.userService.originalUserProfileData["DateFormatId"]).DateTimeFormat;
    this.dsUserProfile = Object.assign({}, this.userService.originalUserProfileData);
    Object.assign(this.dsUserPreference, this.userService.originalUserProfileData);
    if (!this.dsUserPreference.TimeZoneId) {
      this.dsUserPreference.TimeZoneId = 11;
      this.updatePreferences(false);
      this.getUserSetting();
      return false;
    }
    this.dsUserPreference.TimeZoneNameWithUTCOffset = this.timeZoneList.find((x) => x.Id == this.dsUserPreference.TimeZoneId).TimeZoneNameWithUTCOffset;
    this.securityEmail = this.userService.originalUserProfileData.Email;
    this.profileEmail = this.userService.originalUserProfileData.Email;
    this.isNumberValue = this.dsUserProfile.PhoneNo ? true : false;
    if (this.dsUserProfile.UserTypeId == EnmUserType.Business) {
      this.isUserTypeBusiness = true;
      if (this.userService.dsCountry.length) {
        this.dsState = this.userService.dsCountry.find((x) => x.Id == this.dsUserProfile.CountryId).StateDetails;
        this.profileForm.controls["StateId"].setValue(this.dsUserProfile.StateId);
      }
    } else {
      this.isUserTypeBusiness = false;
    }
  }
  editPreference() {
    this.isPreferenceEditable = true;
  }
  cancelEditPreference() {
    this.isPreferenceEditable = false;
    this.dsUserPreference["LanguageId"] = this.userService.originalUserProfileData.LanguageId;
    this.dsUserPreference["IsNotification"] = this.userService.originalUserProfileData.IsNotification;
    this.dsUserPreference["FollowPatient"] = this.userService.originalUserProfileData.FollowPatient;
    this.dsUserPreference["TimeZoneNameWithUTCOffset"] = this.userService.originalUserProfileData.TimeZoneNameWithUTCOffset;
    this.dsUserPreference["DateFormatName"] = this.dateFormateList.find((e) => e["Id"] == this.userService.originalUserProfileData["DateFormatId"]).DateTimeFormat;
    this.dsUserPreference["TimeFormatName"] = this.userService.originalUserProfileData.TimeFormatName;
    this.dsUserPreference["TimeZoneId"] = this.userService.originalUserProfileData.TimeZoneId;
    this.dsUserPreference["DateFormatId"] = this.userService.originalUserProfileData.DateFormatId;
    this.dsUserPreference["TimeFormatId"] = this.userService.originalUserProfileData.TimeFormatId;
  }
  updateUserPreference() {
    this.dsUserPreference["DateFormatName"] = this.dateFormateList.find((e) => e["Id"] == this.dsUserPreference.DateFormatId).DateTimeFormat;
    if (this.userService.originalUserProfileData.LanguageId != this.dsUserPreference["LanguageId"] && this.userService.originalUserProfileData.FollowPatient == this.dsUserPreference["FollowPatient"]) {
      const selectedLangName = "'" + this.getLanguageName(this.dsUserPreference["LanguageId"]) + "'";
      const confMsg = this.labelService.dsUserProfileScreen.UserLanguageChangeConfirmationMsg.replace("@@", selectedLangName);
      this.confirmationDialogService.confirm("", confMsg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.updatePreferences();
        }
      }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
    } else if (this.userService.originalUserProfileData.LanguageId == this.dsUserPreference["LanguageId"] && this.userService.originalUserProfileData.FollowPatient != this.dsUserPreference["FollowPatient"] && this.dsUserPreference["FollowPatient"] == EnmNotificationSetting.FollowPatients) {
      this.confirmationDialogService.confirm("", this.labelService.dsUserProfileScreen.FollowPatientNotification, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.updatePreferences();
        }
      }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
    } else {
      this.updatePreferences();
    }
  }
  updatePreferences(showUpdateMsg = true) {
    this.userService.updateUserPreference(this.dsUserPreference).subscribe({ next: () => {
      this.dataService.appData.authDetails["LanguageId"] = this.dsUserPreference.LanguageId;
      this.dataService.data.next(this.dataService.appData);
      const selectedMarket = localStorage.userCountryId != void 0 ? parseInt(localStorage.userCountryId) : EnmCountry.UnitedStates;
      let langCode = "";
      this.labelService.selectedLanguage = this.dsUserPreference["LanguageId"];
      this.getLabelDetails(true, showUpdateMsg, true);
      const gigyaLanguage = this.dsLanguage.find((x) => x.Id == this.labelService.selectedLanguage).GigyaLanguageCode;
      if (gigyaLanguage != void 0 && gigyaLanguage != null && gigyaLanguage.length > 0) {
        langCode = gigyaLanguage.find((x) => x.GMarketID == selectedMarket) != void 0 ? gigyaLanguage.find((x) => x.GMarketID == selectedMarket).GigyaLangCode : this.dsLanguage.find((x) => x.Id == this.labelService.selectedLanguage).Code;
      } else {
        langCode = this.dsLanguage.find((x) => x.Id == this.labelService.selectedLanguage).Code;
      }
      localStorage.setItem("langCode", langCode);
      this.dataService.appData.masterData.langCode = langCode;
      this.dataService.data.next(this.dataService.appData);
      localStorage.setItem("languageId", this.labelService.selectedLanguage.toString());
      this.dataService.appData.masterData.languageId = this.labelService.selectedLanguage.toString();
      this.dataService.data.next(this.dataService.appData);
      this.dataService.appData.authDetails["DateFormatId"] = this.dsUserPreference.DateFormatId.toString();
      this.dateFormateList.forEach((e) => {
        if (e["Id"] == this.dsUserPreference.DateFormatId) {
          this.dsUserPreference["DateFormatName"] = e["DateTimeFormat"];
          localStorage.setItem("DateTimeFormat", e["ExactDateTime"].replace(/(?<!y)y(?!y)/g, "YY").toUpperCase());
        }
      });
      this.dataService.appData.authDetails["TimeZoneId"] = this.dsUserPreference["TimeZoneId"];
      this.dataService.appData.authDetails["TimeFormatId"] = this.selectedTimeFormate ? this.selectedTimeFormate : this.dsUserPreference.TimeFormatId;
      this.dataService.data.next(this.dataService.appData);
      localStorage.setItem("notificationSettingId", this.dsUserPreference["FollowPatient"].toString());
      this.headerService.notificationSettingId = this.dsUserPreference["FollowPatient"];
      this.getUserDDLDetails(this.dsUserPreference.PrefixTypeId);
      this.isPreferenceEditable = false;
      this.sidemenuService.getSideMenu(this.headerService.userTypeId, this.labelService.selectedLanguage, this.labelService.userCountryId, false);
      if ($("#widget")[0] != void 0)
        $("#widget")[0].remove();
      this.headerService.isProfileReload = true;
      this.headerService.isChangePwdReload = true;
      try {
        let enGenderList;
        let enSpeciesList;
        this.commonService.getFilterDDLDetails(1).subscribe((res) => {
          enGenderList = res.ResponseData["GenderList"];
          enSpeciesList = res.ResponseData["SpeciesList"];
        }, (err) => {
          console.log(JSON.stringify(err));
          this.commonService.showCommonToastrError();
        });
        const langId = this.dataService.appData.authDetails["LanguageId"];
        if (langId) {
          this.commonService.getFilterDDLDetails(langId).subscribe((res) => {
            res.ResponseData["enGenderList"] = enGenderList;
            res.ResponseData["enSpeciesList"] = enSpeciesList;
            this.dataService.appData.filterDropDownList = res.ResponseData;
            this.dataService.data.next(this.dataService.appData);
          }, (err) => {
            console.log(JSON.stringify(err));
            this.commonService.showCommonToastrError();
          });
        }
      } catch (err) {
        this.showMsg(this.labelService.dsUserProfileScreen.Error);
      }
    }, error: () => {
      this.showMsg(this.labelService.dsUserProfileScreen.Error);
    } });
  }
  resetUserSecurityRequest() {
    this.resetSignalRequest = new ResetSignalRequest();
    this.resetSignalRequest.Email = this.userService.originalUserProfileData.Email;
    this.resetSignalRequest.LanguageId = this.labelService.selectedLanguage;
    this.userService.resetSignalRequest(this.resetSignalRequest).subscribe({ next: () => {
      this.resetReqMsg = this.labelService.dsUserProfileScreen.ResetSignalRequset;
    }, error: () => {
      this.resetReqMsg = this.labelService.dsUserProfileScreen.Error;
    } });
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel, "sm", true, false).then((confirmed) => {
      if (confirmed) {
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "BusinessGuid": this.headerService.businessGuid,
      "CreatedGuid": this.headerService.businessGuid,
      "UserTypeId": dataItem.UserTypeId,
      "UserGuid": this.headerService.loginUserGuid,
      "UserRelationGuid": dataItem.UserRelationGuid,
      "CreatedAt": dataItem.CreatedAt,
      "StateId": dataItem.StateId
    });
  }
  static {
    this.\u0275fac = function PreferencesComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PreferencesComponent)(\u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PreferencesComponent, selectors: [["app-preferences"]], viewQuery: function PreferencesComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c018, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, inputs: { dsLanguage: "dsLanguage" }, decls: 43, vars: 32, consts: [[3, "expanded"], [1, "cursor-rem"], ["data-testid", "pr-title", 1, "text-center", "text-sm-left", "d-block"], [1, "preferences", "profileForm1"], [1, "d-flex", 3, "ngClass"], [1, "col", "pr-3", "pl-3", "prefinput"], [1, "edit-pref-display", "align-items-center", "nobtm-pad", "s-input"], ["for", "", 1, "mb-0", "noti_label"], ["for", "", "class", "mb-0 lang_label", 4, "ngIf"], ["class", "width-set", "appearance", "outline", "floatLabel", "always", 4, "ngIf"], [1, "d-flex", "mt-4", 3, "ngClass"], [1, "col", "pr-3", "pl-3"], [1, "edit-pref-display", "align-items-start", "nobtm-pad", "s-input"], ["for", "", "class", "mb-0 lang_label timeSet", 4, "ngIf"], [1, "dFormt", "nobtm-pad", "s-input"], [1, "edit-pref-display"], ["for", "", "class", "mb-0 lang_label lSet", 4, "ngIf"], ["class", "width-set formSet", "appearance", "outline", "floatLabel", "always", 4, "ngIf"], [1, "edit-pref-display", "mt-4", "hour-time-label-align"], ["for", "", 1, "mb-0", "noti_label", "timeZ"], ["class", "span_font", "for", "", 4, "ngIf"], ["class", "d-flex flex-row radio_btn hour-time-radio-d", 3, "ngModel", "ngModelChange", 4, "ngIf"], [1, "edit-pref-display", "align-items-center", "notify-label-align", "nobtm-pad", "s-input"], ["class", "d-flex flex-row radio_btn notify-radio-d", 3, "ngModel", "ngModelChange", 4, "ngIf"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4"], ["mat-raised-button", "", "class", "mr-2 cncl-btn edit-btn", "color", "warn", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "class", "mr-2 cncl-btn", "color", "warn", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "warn", 3, "click", 4, "ngIf"], ["for", "", 1, "mb-0", "lang_label"], ["appearance", "outline", "floatLabel", "always", 1, "width-set"], ["autocomplete", "off", 3, "ngModelChange", "selectionChange", "ngModel"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["for", "", 1, "mb-0", "lang_label", "timeSet"], ["autocomplete", "off", 3, "selectionChange", "ngModelChange", "ngModel"], ["for", "", 1, "mb-0", "lang_label", "lSet"], ["appearance", "outline", "floatLabel", "always", 1, "width-set", "formSet"], ["autocomplete", "off", 3, "ngModelChange", "ngModel"], ["for", "", 1, "span_font"], [1, "d-flex", "flex-row", "radio_btn", "hour-time-radio-d", 3, "ngModelChange", "ngModel"], ["class", "d-flex justify-content-between mb-0 mr-4 hour-time-margin", 4, "ngFor", "ngForOf"], [1, "d-flex", "justify-content-between", "mb-0", "mr-4", "hour-time-margin"], [1, "example-margin", 3, "change", "value"], [1, "d-flex", "flex-row", "radio_btn", "notify-radio-d", 3, "ngModelChange", "ngModel"], ["class", "d-flex justify-content-between mb-0 mr-4", 4, "ngFor", "ngForOf"], [1, "d-flex", "justify-content-between", "mb-0", "mr-4"], [1, "example-margin", "radio-margin", 3, "value"], ["mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", "edit-btn", 3, "click"], ["src", "../../../../assets/img/edit@3x.png", "alt", ""], ["mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", 3, "click"], ["mat-raised-button", "", "color", "warn", 3, "click"]], template: function PreferencesComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "mat-expansion-panel", 0)(1, "mat-expansion-panel-header", 1)(2, "mat-panel-title", 2);
        \u0275\u0275text(3);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(4, "div", 3)(5, "div", 4)(6, "div", 5)(7, "div", 6)(8, "label", 7);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd();
        \u0275\u0275template(10, PreferencesComponent_label_10_Template, 2, 1, "label", 8)(11, PreferencesComponent_mat_form_field_11_Template, 3, 2, "mat-form-field", 9);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(12, "div", 10)(13, "div", 11)(14, "div", 12)(15, "label", 7);
        \u0275\u0275text(16);
        \u0275\u0275elementEnd();
        \u0275\u0275template(17, PreferencesComponent_label_17_Template, 2, 1, "label", 13)(18, PreferencesComponent_mat_form_field_18_Template, 3, 2, "mat-form-field", 9);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(19, "div", 10)(20, "div", 11)(21, "div", 14)(22, "div", 15)(23, "label", 7);
        \u0275\u0275text(24);
        \u0275\u0275elementEnd();
        \u0275\u0275template(25, PreferencesComponent_label_25_Template, 2, 1, "label", 16)(26, PreferencesComponent_mat_form_field_26_Template, 3, 2, "mat-form-field", 17);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(27, "div", 18)(28, "label", 19);
        \u0275\u0275text(29);
        \u0275\u0275elementEnd();
        \u0275\u0275template(30, PreferencesComponent_span_30_Template, 3, 3, "span", 20)(31, PreferencesComponent_mat_radio_group_31_Template, 2, 2, "mat-radio-group", 21);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(32, "div", 10)(33, "div", 11)(34, "div", 22)(35, "label", 7);
        \u0275\u0275text(36);
        \u0275\u0275elementEnd();
        \u0275\u0275template(37, PreferencesComponent_span_37_Template, 2, 1, "span", 20)(38, PreferencesComponent_mat_radio_group_38_Template, 2, 2, "mat-radio-group", 23);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(39, "div", 24);
        \u0275\u0275template(40, PreferencesComponent_button_40_Template, 3, 1, "button", 25)(41, PreferencesComponent_button_41_Template, 2, 1, "button", 26)(42, PreferencesComponent_button_42_Template, 2, 1, "button", 27);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275property("expanded", ctx.selectedAccordion === 1);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.Preferences, " ");
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(24, _c113, !ctx.isPreferenceEditable));
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.Language, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(26, _c113, !ctx.isPreferenceEditable));
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.TimeZone, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(28, _c113, !ctx.isPreferenceEditable));
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.DateFormat, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.TimeFormat, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(30, _c113, !ctx.isPreferenceEditable));
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1("", ctx.labelService.dsUserProfileScreen.Notifications, " : ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable && ctx.dsUserPreference.FollowPatient);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isPreferenceEditable);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyFormField, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, MatLegacyRadioGroup, MatLegacyRadioButton, NgControlStatus, NgModel, UpperCasePipe], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-bottom: 0;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  max-width: 191px;\n  word-break: break-word;\n}\n.lang_label[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-off);\n  left: -6.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-on);\n  right: -4.9rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 65% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-end[_ngcontent-%COMP%], \n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-start[_ngcontent-%COMP%] {\n  border: none !important;\n  min-width: 5px;\n  background: #fff !important;\n}\n.email-block[_ngcontent-%COMP%] {\n  z-index: 999999;\n}\n.label_text[_ngcontent-%COMP%] {\n  word-break: break-all;\n  font-family: "gothambook", sans-serif;\n  padding: 0 10.5px;\n}\n.view-mode[_ngcontent-%COMP%]   .drop_view[_ngcontent-%COMP%] {\n  margin-top: -11px;\n}\n.profile_form[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  display: flex;\n  margin-bottom: 14px;\n  align-items: baseline;\n}\n.bus_detail[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, 0.87) !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 16px;\n}\n.span_font[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "gothambook", sans-serif !important;\n}\n.noti_label[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n.preferences[_ngcontent-%COMP%]   .noti_label[_ngcontent-%COMP%] {\n  width: 150px !important;\n}\n.width-set[_ngcontent-%COMP%] {\n  width: 421px !important;\n}\n.mat-expansion-panel-header-description[_ngcontent-%COMP%], \n.mat-expansion-panel-header-title[_ngcontent-%COMP%] {\n  font-size: 16px;\n}\n.s-input[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\n  margin-right: 0px !important;\n}\n.edit-pref-display[_ngcontent-%COMP%] {\n  display: flex;\n}\n.view-mode[_ngcontent-%COMP%]   .edit-pref-display[_ngcontent-%COMP%] {\n  display: flex;\n}\n@media screen and (max-width: 575px) {\n  .view-mode[_ngcontent-%COMP%]   .edit-pref-display[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .lang_label[_ngcontent-%COMP%] {\n    max-width: 100% !important;\n    width: 100%;\n  }\n  .edit-pref-display[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .span_font[_ngcontent-%COMP%] {\n    width: 100%;\n    display: block;\n  }\n  .preferences[_ngcontent-%COMP%]   .noti_label[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .width-set[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n}\n  .profileForm1 .mat-select-arrow-wrapper {\n  top: 4px !important;\n}\n@media screen and (max-width: 695px) and (min-width: 576px) {\n  .notify-radio-d[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .radio-margin[_ngcontent-%COMP%] {\n    margin-top: 5px;\n  }\n  .notify-label-align[_ngcontent-%COMP%] {\n    align-items: flex-start !important;\n  }\n}\n@media screen and (max-width: 623px) and (min-width: 576px) {\n  .width-set[_ngcontent-%COMP%] {\n    width: 374px !important;\n  }\n}\n@media screen and (max-width: 510px) {\n  .notify-radio-d[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .radio-margin[_ngcontent-%COMP%] {\n    margin-top: 5px;\n  }\n  .notify-label-align[_ngcontent-%COMP%] {\n    align-items: flex-start !important;\n  }\n}\n@media screen and (max-width: 510px) {\n  .hour-time-radio-d[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n  .hour-time-margin[_ngcontent-%COMP%] {\n    margin-top: 5px;\n  }\n  .hour-time-label-align[_ngcontent-%COMP%] {\n    align-items: flex-start !important;\n  }\n}\n/*# sourceMappingURL=preferences.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PreferencesComponent, { className: "PreferencesComponent", filePath: "src\\app\\components\\user-managements\\preferences\\preferences.component.ts", lineNumber: 14 });
})();

// src/app/components/user-managements/account-settings/account-settings.component.ts
var _c019 = ["formGroupDirective"];
var _c114 = (a0) => ({ "view-mode": a0 });
function AccountSettingsComponent_mat_expansion_panel_11_label_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 22);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.dsUserProfile.RefLabProviderId ? ctx_r0.dsUserProfile.RefLabProviderId : ctx_r0.labelService.dsUserProfileScreen.None);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_11_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 27);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const provider_r2 = ctx.$implicit;
    \u0275\u0275property("value", provider_r2.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", provider_r2.ProviderIdName, " ");
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-form-field", 23)(1, "mat-select", 24)(2, "mat-option", 25);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_11_mat_option_4_Template, 2, 2, "mat-option", 26);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r0.labelService.dsUserProfileScreen.None);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.None, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.providerData);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_label_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 22);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.dsUserProfile.InClinicProviderId ? ctx_r0.dsUserProfile.InClinicProviderId : ctx_r0.labelService.dsUserProfileScreen.None);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_17_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 27);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const clinic_r3 = ctx.$implicit;
    \u0275\u0275property("value", clinic_r3.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", clinic_r3.PhysicianIdName, " ");
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-form-field", 23)(1, "mat-select", 28)(2, "mat-option", 25);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_17_mat_option_4_Template, 2, 2, "mat-option", 26);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("placeholder", ctx_r0.labelService.dsUserProfileScreen.Select);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.None, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.inclinicdata);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_button_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 29);
    \u0275\u0275listener("click", function AccountSettingsComponent_mat_expansion_panel_11_button_19_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.editPreference());
    });
    \u0275\u0275element(1, "img", 30);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.Edit, "");
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_button_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 31);
    \u0275\u0275listener("click", function AccountSettingsComponent_mat_expansion_panel_11_button_20_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.cancelEditPreference());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsUserProfileScreen.Cancel);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_button_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 32);
    \u0275\u0275listener("click", function AccountSettingsComponent_mat_expansion_panel_11_button_21_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.PostDoctorMgtDetails());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsUserProfileScreen.Save);
  }
}
function AccountSettingsComponent_mat_expansion_panel_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-expansion-panel", 8)(1, "mat-expansion-panel-header")(2, "mat-panel-title", 9);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "form", 10)(5, "div", 11)(6, "div", 12)(7, "div", 13)(8, "label", 14);
    \u0275\u0275text(9);
    \u0275\u0275elementEnd();
    \u0275\u0275template(10, AccountSettingsComponent_mat_expansion_panel_11_label_10_Template, 2, 1, "label", 15)(11, AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_11_Template, 5, 3, "mat-form-field", 16);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(12, "div", 17)(13, "div", 13)(14, "label", 14);
    \u0275\u0275text(15);
    \u0275\u0275elementEnd();
    \u0275\u0275template(16, AccountSettingsComponent_mat_expansion_panel_11_label_16_Template, 2, 1, "label", 15)(17, AccountSettingsComponent_mat_expansion_panel_11_mat_form_field_17_Template, 5, 3, "mat-form-field", 16);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(18, "div", 18);
    \u0275\u0275template(19, AccountSettingsComponent_mat_expansion_panel_11_button_19_Template, 3, 1, "button", 19)(20, AccountSettingsComponent_mat_expansion_panel_11_button_20_Template, 2, 1, "button", 20)(21, AccountSettingsComponent_mat_expansion_panel_11_button_21_Template, 2, 1, "button", 21);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("expanded", ctx_r0.selectedAccordion === 2);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsUserProfileScreen.DoctorIDManagement);
    \u0275\u0275advance();
    \u0275\u0275property("formGroup", ctx_r0.profileForm);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(13, _c114, !ctx_r0.isPreferenceEditable));
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.RefLabProviderID ? ctx_r0.labelService.dsUserProfileScreen.RefLabProviderID : "N/A", " :");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.isPreferenceEditable);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.isPreferenceEditable);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsUserProfileScreen.InClinicProviderID, " : ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.isPreferenceEditable);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.isPreferenceEditable);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !ctx_r0.isPreferenceEditable);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.isPreferenceEditable);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.isPreferenceEditable);
  }
}
var AccountSettingsComponent = class _AccountSettingsComponent {
  constructor(userService, fuseService, headerService, sidemenuService, formBuilder, confirmationDialogService, labelService, dataService, commonService) {
    this.userService = userService;
    this.fuseService = fuseService;
    this.headerService = headerService;
    this.sidemenuService = sidemenuService;
    this.formBuilder = formBuilder;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.commonService = commonService;
    this.panelOpenState = false;
    this.isProfileEditable = false;
    this.isPreferenceEditable = false;
    this.dsUserProfile = {};
    this.isUserTypeBusiness = false;
    this.resetReqMsg = "";
    this.profileEmail = "";
    this.securityEmail = "";
    this.dsState = [];
    this.providerData = [];
    this.countryData = intlTelInputGlobals.getCountryData();
    this.dateFormateList = ["MM/DD/YY", "DD/MM/YY"];
    this.timeFormateList = [{ value: true, text: "On (23:59)" }, { value: false, text: "Off (11:59 AM/PM)" }];
    this.selectedTimeFormate = this.dataService.appState.date.is24Hours;
    this.dsLanguage = [];
    this.isNumberValue = true;
    this.selectedDateFormate = this.dataService.appState.date.selectedDateFormate;
    this.selectedAccordion = this.dataService.appState.admin.profilePageSelectedAccordion;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails(false, false);
    } else {
      this.labelService.bindUserProfileLabel();
    }
    this.selectedMarket = localStorage.userCountryId != void 0 ? parseInt(localStorage.userCountryId) : EnmCountry.UnitedStates;
  }
  onChangeDateFormate(e) {
    this.selectedDateFormate = e.value;
    this.dataService.appState.date.selectedDateFormate = e.value;
    this.dataService.state.next(this.dataService.appState);
  }
  onChangeTimeFormate(e) {
    this.selectedTimeFormate = e.value;
    this.dataService.appState.date.is24Hours = e.value;
    this.dataService.state.next(this.dataService.appState);
  }
  getUserDDLDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsCountry = data.ResponseData.CountryDetails;
      this.userService.dsTitle = data.ResponseData.TitleDetails;
      this.userService.dsSuffix = data.ResponseData.SuffixDetails;
      this.userService.dsLanguage = data.ResponseData.LanguageDetails;
      this.userService.dsNotification = data.ResponseData.NotificationSettingsValue;
      this.getUserSetting();
    });
  }
  getUserTitleDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsTitle = data.ResponseData.TitleDetails;
    });
  }
  ngOnInit() {
    this.dsUserPreference = new UserDetails();
    this.profileForm = this.createFormGroup(new UserDetails());
    this.getUserDDLDetails(null);
    this.GetProviderDetails();
    this.getUserSetting();
  }
  ngOnDestroy() {
  }
  ngAfterViewInit() {
    for (let i = 0; i < this.countryData.length; i++) {
      const country = this.countryData[i];
      country.name = "";
    }
    this.phoneInput = document.querySelector("#phone");
    const phoneInput = document.querySelector("#businessPhone");
    setTimeout(() => {
      this.iti = (0, import_intl_tel_input2.default)(this.phoneInput, {
        preferredCountries: ["us", "ca", "mx"],
        separateDialCode: true,
        utilsScript: "assets/intl-tel-input/js/utils.js"
      });
      this.businessPhoneITI = (0, import_intl_tel_input2.default)(phoneInput, {
        preferredCountries: ["us", "ca", "mx"],
        separateDialCode: true,
        utilsScript: "assets/intl-tel-input/js/utils.js"
      });
    }, 2500);
  }
  reIti() {
    const phoneNo = this.dsUserProfile.PhoneNo;
    const businessPhoneNo = this.dsUserProfile.BusinessPhoneNo;
    if (phoneNo)
      this.iti.setNumber(phoneNo);
    if (businessPhoneNo)
      this.businessPhoneITI.setNumber(businessPhoneNo);
  }
  onSelectCountryCode(e) {
    if (e.target.id == "businessPhone") {
      this.profileForm.controls["BusinessPhoneNo"].setValue("");
    } else {
      this.profileForm.controls["PhoneNo"].setValue("");
    }
  }
  validatePhoneNo() {
    this.profileForm.controls["PhoneNo"].setValue(this.profileForm.controls["PhoneNo"].value.replace(/[^0-9-+ ]*/g, ""));
    const PhoneNo = this.iti.getNumber().trim();
    if (PhoneNo) {
      if (this.iti.isValidNumber()) {
      } else {
        this.iti.getValidationError();
        this.profileForm.controls["PhoneNo"].setErrors({ "incorrect": true });
        this.profileForm.status["invalid"] = true;
      }
    }
  }
  validateBusinessPhoneNo() {
    this.profileForm.controls["BusinessPhoneNo"].setValue(this.profileForm.controls["BusinessPhoneNo"].value.replace(/[^0-9-+ ]*/g, ""));
    const BusinessPhoneNo = this.businessPhoneITI.getNumber().trim();
    if (BusinessPhoneNo) {
      if (this.businessPhoneITI.isValidNumber()) {
      } else {
        this.businessPhoneITI.getValidationError();
        this.profileForm.controls["BusinessPhoneNo"].setErrors({ "incorrect": true });
        this.profileForm.status["invalid"] = true;
      }
    }
  }
  getLabelDetails(isUpdateChild, forceApiCall) {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage, forceApiCall).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindUserProfileLabel();
      if (isUpdateChild) {
        this.labelService.bindSideMenuLabel();
        this.labelService.bindHeaderLabel();
        this.showMsg(this.labelService.dsUserProfileScreen.UserPreferenceUpdatedSuccessfully);
      }
    });
  }
  getLanguageName(langId) {
    if (langId != void 0 && this.userService.dsLanguage.length)
      return this.userService.dsLanguage.find((x) => x.Id == langId).Name;
    else
      return "";
  }
  getUserSetting() {
    this.userService.getUserSettingDetails(this.headerService.loginUserGuid, localStorage.businessGuid).subscribe((data) => {
      this.userService.originalUserProfileData = data.ResponseData;
      this.commonService.getLanguageDetails().subscribe((data2) => {
        this.dsLanguage = data2.ResponseData.filter((ele) => ele.GigyaLanguageCode.find((subEle) => subEle.GMarketID == this.selectedMarket));
        this.sortLanguage();
      });
      if (this.userService.originalUserProfileData.FollowPatient == void 0 || this.userService.originalUserProfileData.FollowPatient == null)
        this.userService.originalUserProfileData.FollowPatient = EnmNotificationSetting.AllClinicResults;
      this.getUserTitleDetails(this.userService.originalUserProfileData.PrefixTypeId);
      this.setDataSource();
    });
  }
  sortLanguage() {
    const selectedMarket = this.selectedMarket;
    if (this.dsLanguage.length > 1) {
      this.dsLanguage.forEach(function(ele) {
        const gigyaLan = ele.GigyaLanguageCode.find((subEle) => subEle.GMarketID == selectedMarket);
        if (gigyaLan != void 0) {
          ele.SeqNumber = gigyaLan.SeqNumber;
        }
      });
    }
    this.dsLanguage.sort((a, b) => a.SeqNumber - b.SeqNumber);
  }
  setDataSource() {
    this.profileForm = this.createFormGroup(this.dsUserProfile);
    this.dsUserProfile = Object.assign({}, this.userService.originalUserProfileData);
    Object.assign(this.dsUserPreference, this.userService.originalUserProfileData);
    this.securityEmail = this.userService.originalUserProfileData.Email;
    this.profileEmail = this.userService.originalUserProfileData.Email;
    this.isNumberValue = this.dsUserProfile.PhoneNo ? true : false;
    if (this.dsUserProfile.UserTypeId == EnmUserType.Business) {
      this.isUserTypeBusiness = true;
      if (this.userService.dsCountry.length) {
        this.dsState = this.userService.dsCountry.find((x) => x.Id == this.dsUserProfile.CountryId).StateDetails;
        this.profileForm.controls["StateId"].setValue(this.dsUserProfile.StateId);
      }
    } else {
      this.isUserTypeBusiness = false;
    }
    this.reIti();
  }
  onCountryChange() {
    this.dsState = this.userService.dsCountry.find((x) => x.Id == this.profileForm.controls["CountryId"].value).StateDetails;
  }
  updateOnOffNotification(val) {
    const checkHandle = val.getAttribute("class");
    if (checkHandle.includes("handle") === true) {
      val = val.parentElement;
    }
    const currStatus = val.getAttribute("class");
    const checked = currStatus.includes("active");
    const msg = checked ? this.labelService.dsUserProfileScreen.UserOffNotificationConfirmationMsg : this.labelService.dsUserProfileScreen.UserOnNotificationConfirmationMsg;
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.Yes, this.labelService.dsUserProfileScreen.No).then((confirmed) => {
      if (confirmed) {
        if (checked)
          this.dsUserPreference["IsNotification"] = false;
        else
          this.dsUserPreference["IsNotification"] = true;
      } else {
        val.setAttribute("class", currStatus);
      }
    }).catch(() => {
      val.setAttribute("class", currStatus);
      console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)");
    });
  }
  editProfile() {
    this.isProfileEditable = true;
    this.profileForm.patchValue(this.dsUserProfile);
  }
  cancelEditProfile() {
    this.isProfileEditable = false;
    this.profileForm.patchValue(this.dsUserProfile);
    this.iti.setNumber(this.dsUserProfile.PhoneNo);
    this.businessPhoneITI.setNumber(this.dsUserProfile.BusinessPhoneNo);
    this.reIti();
  }
  PostDoctorMgtDetails() {
    const providerDetails = {
      ReflabProviderId: this.profileForm.controls["RefLabProviderId"].value,
      ClinicProviderId: this.profileForm.controls["ClinicProviderId"].value,
      FirstName: "",
      LastName: "",
      BusinessGuid: localStorage.businessGuid,
      UserGuid: this.headerService.loginUserGuid
    };
    {
      this.commonService.postProviderDetails(providerDetails).subscribe((data) => {
        if (data.StatusCode == "302") {
          this.showMsg(this.labelService.dsUserProfileScreen.ContactClinicAdmin);
          this.isPreferenceEditable = false;
          this.getUserSetting();
        } else if (data.StatusCode == "200") {
          this.showMsg(this.labelService.dsUserProfileScreen.UserProfileUpdatedSuccessfully);
          this.isPreferenceEditable = false;
          this.getUserSetting();
        } else {
          this.showMsg("Record not found");
        }
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    }
  }
  GetProviderDetails() {
    this.commonService.GetProviderList(localStorage.businessGuid).subscribe((data) => {
      this.providerData = data.ResponseData.Provider;
      this.inclinicdata = data.ResponseData.Physician;
      if (data.ResponseData.Physician && data.ResponseData.Physician.length) {
        this.clinicFullname = data.ResponseData.Physician[0]["PhysicianIdName"];
      }
    });
  }
  editPreference() {
    this.isPreferenceEditable = true;
    this.dsUserPreference = this.userService.originalUserProfileData;
    this.profileForm = this.createFormGroup(this.dsUserProfile);
    this.profileForm.get("RefLabProviderId").patchValue(this.dsUserProfile.SelectedRefLabProviderId);
    this.profileForm.get("ClinicProviderId").patchValue(this.dsUserProfile.SelectedInClinicProviderId);
  }
  cancelEditPreference() {
    this.isPreferenceEditable = false;
    this.dsUserPreference["LanguageId"] = this.userService.originalUserProfileData.LanguageId;
    this.dsUserPreference["IsNotification"] = this.userService.originalUserProfileData.IsNotification;
    this.dsUserPreference["FollowPatient"] = this.userService.originalUserProfileData.FollowPatient;
  }
  updateUserPreference() {
    this.dsUserPreference.UserRelationGuid = this.headerService.loginUserGuid;
    if (this.userService.originalUserProfileData.LanguageId != this.dsUserPreference["LanguageId"] && this.userService.originalUserProfileData.FollowPatient == this.dsUserPreference["FollowPatient"]) {
      const selectedLangName = "'" + this.getLanguageName(this.dsUserPreference["LanguageId"]) + "'";
      const confMsg = this.labelService.dsUserProfileScreen.UserLanguageChangeConfirmationMsg.replace("@@", selectedLangName);
      this.confirmationDialogService.confirm("", confMsg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.updatePreferences();
        }
      }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
    } else if (this.userService.originalUserProfileData.LanguageId == this.dsUserPreference["LanguageId"] && this.userService.originalUserProfileData.FollowPatient != this.dsUserPreference["FollowPatient"] && this.dsUserPreference["FollowPatient"] == EnmNotificationSetting.FollowPatients) {
      this.confirmationDialogService.confirm("", this.labelService.dsUserProfileScreen.FollowPatientNotification, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel).then((confirmed) => {
        if (confirmed) {
          this.updatePreferences();
        }
      }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
    } else {
      this.updatePreferences();
    }
  }
  updatePreferences() {
    this.userService.updateUserPreference(this.dsUserPreference).subscribe({ next: () => {
      localStorage.setItem("languageId", this.dsUserPreference["LanguageId"].toString());
      this.dataService.appData.masterData.languageId = this.dsUserPreference["LanguageId"].toString();
      this.dataService.data.next(this.dataService.appData);
      localStorage.setItem("notificationSettingId", this.dsUserPreference["FollowPatient"].toString());
      this.headerService.notificationSettingId = this.dsUserPreference["FollowPatient"];
      this.labelService.selectedLanguage = this.dsUserPreference["LanguageId"];
      this.getLabelDetails(true, true);
      this.getUserDDLDetails(this.dsUserPreference.PrefixTypeId);
      this.isPreferenceEditable = false;
      this.sidemenuService.getSideMenu(this.headerService.userTypeId, this.labelService.selectedLanguage, this.labelService.userCountryId, false);
    }, error: () => {
      this.showMsg(this.labelService.dsUserProfileScreen.Error);
    } });
  }
  resetUserSecurityRequest() {
    this.resetSignalRequest = new ResetSignalRequest();
    this.resetSignalRequest.Email = this.userService.originalUserProfileData.Email;
    this.resetSignalRequest.LanguageId = this.labelService.selectedLanguage;
    this.userService.resetSignalRequest(this.resetSignalRequest).subscribe({ next: () => {
      this.resetReqMsg = this.labelService.dsUserProfileScreen.ResetSignalRequset;
    }, error: () => {
      this.resetReqMsg = this.labelService.dsUserProfileScreen.Error;
    } });
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel, "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.reIti();
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  validateNumber() {
    this.profileForm.controls["PhoneNo"].setValue(this.profileForm.controls["PhoneNo"].value.replace(/[^0-9-+ ]*/g, ""));
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      "Id": dataItem.Id,
      "PrefixTypeId": dataItem.PrefixTypeId,
      "RefLabProviderId": [dataItem.RefLabProviderId],
      "ClinicProviderId": [dataItem.ClinicProviderId],
      "UserRelationGuid": this.headerService.loginUserGuid,
      "BusinessGuid": this.headerService.businessGuid,
      "CreatedGuid": dataItem.CreatedGuid,
      "UserTypeId": dataItem.UserTypeId,
      "UserGuid": dataItem.UserGuid,
      "UserRelationId": dataItem.UserRelationId,
      "CreatedAt": dataItem.CreatedAt,
      "StateId": dataItem.StateId
    });
  }
  static {
    this.\u0275fac = function AccountSettingsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccountSettingsComponent)(\u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(FuseService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccountSettingsComponent, selectors: [["app-account-settings"]], viewQuery: function AccountSettingsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c019, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formGroupDirective = _t.first);
      }
    }, decls: 12, vars: 2, consts: [[1, "wrapper"], ["id", "content", 1, "account"], [1, "outer"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["id", "profile"], [3, "dsLanguage"], [3, "expanded", 4, "ngIf"], [3, "expanded"], [1, "text-center", "text-sm-left", "d-block"], [1, "profileForm1", 3, "formGroup"], [1, "row", "m-0", 3, "ngClass"], [1, "col-12", "mb-3"], [1, "edit-pref-display", "edit-align-items", "nobtm-pad", "s-input"], ["for", "", 1, "mb-0", "noti_label"], ["for", "", "class", "mb-0 lang_label", 4, "ngIf"], ["appearance", "outline", "floatLabel", "always", "class", "width-set", 4, "ngIf"], [1, "col-12"], [1, "d-flex", "mt-4", "justify-content-center", "mt-4"], ["mat-raised-button", "", "class", "mr-2 cncl-btn edit-btn", "color", "warn", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "class", "mr-2 cncl-btn", "color", "warn", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "warn", 3, "click", 4, "ngIf"], ["for", "", 1, "mb-0", "lang_label"], ["appearance", "outline", "floatLabel", "always", 1, "width-set"], ["autocomplete", "off", "formControlName", "RefLabProviderId", 3, "placeholder"], ["value", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["autocomplete", "off", "formControlName", "ClinicProviderId", 3, "placeholder"], ["mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", "edit-btn", 3, "click"], ["src", "../../../../assets/img/edit@3x.png", "alt", ""], ["mat-raised-button", "", "color", "warn", 1, "mr-2", "cncl-btn", 3, "click"], ["mat-raised-button", "", "color", "warn", 3, "click"]], template: function AccountSettingsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "div", 4)(8, "div", 5)(9, "mat-accordion");
        \u0275\u0275element(10, "app-preferences", 6);
        \u0275\u0275template(11, AccountSettingsComponent_mat_expansion_panel_11_Template, 22, 15, "mat-expansion-panel", 7);
        \u0275\u0275elementEnd()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(10);
        \u0275\u0275property("dsLanguage", ctx.dsLanguage);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dsUserProfile.UserTypeId === 1 || ctx.dsUserProfile.UserTypeId === 2 || ctx.dsUserProfile.UserTypeId === 35);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyFormField, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, HeaderComponent, SideMenuComponent, \u0275NgNoValidate, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName, PreferencesComponent], styles: ['\n\n.mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.edit-pref-display.s-input[_ngcontent-%COMP%]   .noti_label[_ngcontent-%COMP%]:first-child {\n  width: 230px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n  box-shadow:\n    0px 0px 7px -1px rgba(0, 0, 0, 0.08),\n    0 1px 1px 0 rgba(0, 0, 0, 0),\n    0 1px 3px 0 rgba(0, 0, 0, 0) !important;\n  border-radius: 10px !important;\n}\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-bottom: 0;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  width: 273px;\n  word-break: break-word;\n}\n.lang_label[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-off);\n  left: -6.5rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-on);\n  right: -4.9rem !important;\n}\n#status-toggle[_ngcontent-%COMP%]   .btn-toggle[_ngcontent-%COMP%] {\n}\ntextarea[_ngcontent-%COMP%] {\n  resize: none !important;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 65% !important;\n}\n.alert-dark[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-left: 115px;\n  margin-top: 16px;\n  color: #818181;\n  background-color: #f2f2f5;\n  border-color: #c6c8ca;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 17px;\n  border-radius: 8px;\n}\n.alert-dark[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.alert-dismissible[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-end[_ngcontent-%COMP%], \n#profile[_ngcontent-%COMP%]   .mat-expansion-panel-body[_ngcontent-%COMP%]   .view-mode[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline-start[_ngcontent-%COMP%] {\n  border: none !important;\n  min-width: 5px;\n  background: #fff !important;\n}\n.email-block[_ngcontent-%COMP%] {\n  z-index: 999999;\n}\n.label_text[_ngcontent-%COMP%] {\n  word-break: break-all;\n  font-family: "gothambook", sans-serif;\n  padding: 0 10.5px;\n}\n.view-mode[_ngcontent-%COMP%]   .drop_view[_ngcontent-%COMP%] {\n  margin-top: -11px;\n}\n.profile_form[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  display: flex;\n  margin-bottom: 14px;\n  align-items: baseline;\n}\n.bus_detail[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, 0.87) !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 16px;\n}\n.span_font[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "gothambook", sans-serif !important;\n}\n.noti_label[_ngcontent-%COMP%] {\n  padding-right: 10px;\n}\n.preferences[_ngcontent-%COMP%]   .noti_label[_ngcontent-%COMP%] {\n  width: 150px !important;\n}\n.width-set[_ngcontent-%COMP%] {\n  width: 421px !important;\n}\n.mat-expansion-panel-header-description[_ngcontent-%COMP%], \n.mat-expansion-panel-header-title[_ngcontent-%COMP%] {\n  font-size: 16px;\n}\n.s-input[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\n  margin-right: 0px !important;\n}\n.edit-pref-display[_ngcontent-%COMP%] {\n  display: flex;\n}\n.view-mode[_ngcontent-%COMP%]   .edit-pref-display[_ngcontent-%COMP%] {\n  display: flex;\n}\n.edit-align-items[_ngcontent-%COMP%] {\n  align-items: center;\n}\n@media screen and (max-width: 575px) {\n  .view-mode[_ngcontent-%COMP%]   .edit-pref-display[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .edit-pref-display[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .view-mode[_ngcontent-%COMP%]   .edit-align-items[_ngcontent-%COMP%] {\n    align-items: start;\n  }\n  .lang_label[_ngcontent-%COMP%] {\n    max-width: 100% !important;\n    width: 100%;\n  }\n  .span_font[_ngcontent-%COMP%] {\n    width: 100%;\n    display: block;\n  }\n  .preferences[_ngcontent-%COMP%]   .noti_label[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .width-set[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n}\n  .profileForm1 .mat-select-arrow-wrapper {\n  top: 4px !important;\n}\n@media screen and (max-width: 767px) {\n  .outer[_ngcontent-%COMP%] {\n    margin-top: 15px;\n    padding: 0 20px;\n  }\n  .account[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n}\n@media screen and (min-width: 576px) {\n  label[_ngcontent-%COMP%] {\n    width: 191px;\n  }\n}\n/*# sourceMappingURL=account-settings.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccountSettingsComponent, { className: "AccountSettingsComponent", filePath: "src\\app\\components\\user-managements\\account-settings\\account-settings.component.ts", lineNumber: 17 });
})();

// src/app/services/script-loader.service.ts
var ScriptLoaderService = class _ScriptLoaderService {
  constructor(document2) {
    this.document = document2;
  }
  /**
   * Append the JS tag to the Document Body.
   * @param renderer The Angular Renderer
   * @param src The path to the script
   * @returns the script element
   */
  loadJsScript(renderer, src) {
    const script = renderer.createElement("script");
    script.type = "text/javascript";
    script.src = src;
    script.src = src;
    renderer.appendChild(this.document.body, script);
    return script;
  }
  loadDynamicJsScript(id, src) {
    const node = document.createElement("script");
    node.src = src;
    node.type = "text/javascript";
    node.async = false;
    node.id = id;
    document.head.appendChild(node);
    return node;
  }
  static {
    this.\u0275fac = function ScriptLoaderService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ScriptLoaderService)(\u0275\u0275inject(DOCUMENT));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ScriptLoaderService, factory: _ScriptLoaderService.\u0275fac, providedIn: "root" });
  }
};

// src/app/components/gigya-login/gigya-login.component.ts
function GigyaLoginComponent_mat_option_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const market_r1 = ctx.$implicit;
    \u0275\u0275property("value", market_r1.ID);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", market_r1.Name, " ");
  }
}
function GigyaLoginComponent_mat_option_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const language_r2 = ctx.$implicit;
    \u0275\u0275property("value", language_r2.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", language_r2.Name, " ");
  }
}
var GigyaLoginComponent = class _GigyaLoginComponent extends Helper {
  constructor(iconRegistry, commonService, labelService, headerService, sidemenuService, dataService, confirmationDialogService, router, _renderer2, _document, title, renderer, scriptLoader, zone, sanitizer) {
    super();
    this.commonService = commonService;
    this.labelService = labelService;
    this.headerService = headerService;
    this.sidemenuService = sidemenuService;
    this.dataService = dataService;
    this.confirmationDialogService = confirmationDialogService;
    this.router = router;
    this._renderer2 = _renderer2;
    this._document = _document;
    this.title = title;
    this.renderer = renderer;
    this.scriptLoader = scriptLoader;
    this.zone = zone;
    this.sanitizer = sanitizer;
    this.dsGigyaMarket = [];
    this.originalDataLanguages = [];
    this.dsLanguage = [];
    this.showWidget = "market";
    this.screen = "";
    this.msg = "";
    this.betaUser = "Thank you for your participation in our ZoetisDx.com version 1.2 beta. We appreciate your participation and look forward to serving your diagnostics needs in the future. If you bookmarked or saved the beta.zoetisdx.com site, please remember to update your bookmark to point to ZoetisDx.com";
    this.apiKey = localStorage.APIKey != void 0 ? localStorage.APIKey : "";
    this.langCode = localStorage.langCode != void 0 ? localStorage.langCode : "";
    this.langCodeForScreenSet = this.langCode.split("-")[0].toLowerCase();
    this.showLoginFormLoader = true;
    this._$destroy = new Subject();
    this.isCacheValid = false;
    this.dataCenter = "us1.gigya.com";
    this.externalAssetsLoaded = false;
    this.market = localStorage.market && localStorage.market != "undefined" ? JSON.parse(localStorage.market) : {};
    this.gigyaScriptId = "gigyaLib";
    this.alreadyShownError = false;
    this.gigyaListenerAdded = false;
    this.loginParams = {
      screenSet: this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin",
      startScreen: "gigya-login-screen",
      lang: this.langCode,
      containerID: "loginContainer",
      onError: (ev) => {
        this.errorHandler(ev);
      },
      onBeforeSubmit: (ev) => {
        this.formCheck(ev);
      },
      onAfterSubmit: (ev) => {
        this.afterFormSubmit(ev);
      }
      //onBeforeScreenLoad: () => this.showLoginFormLoader = true,
      //onAfterScreenLoad: () => this.showLoginFormLoader = false,
    };
    this.businessProfileParams = {
      screenSet: this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin",
      // startScreen: "gigya-forgot-password-screen"
      startScreen: "gigya-profile-admin-update-screen",
      //startScreen: "gigya-profile-update-screen",
      lang: this.langCode,
      containerID: "loginContainer",
      onError: (ev) => {
        this.errorHandler(ev);
      },
      onBeforeSubmit: (ev) => {
        this.formCheck(ev);
      },
      //onSubmit: this.formSubmit,
      onAfterSubmit: (ev) => {
        this.afterFormSubmit(ev);
      }
    };
    this.standardProfileParams = {
      screenSet: this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin",
      startScreen: "gigya-profile-update-screen",
      lang: this.langCode,
      containerID: "loginContainer",
      onError: (ev) => {
        this.errorHandler(ev);
      },
      onBeforeSubmit: (ev) => {
        this.formCheck(ev);
      },
      //onSubmit: this.formSubmit,
      onAfterSubmit: (ev) => {
        this.afterFormSubmit(ev);
      }
    };
    this.logoutParams = {
      "UID": "A-Valid-User-UID"
    };
    if (!this.checkAssestUpdateFlag()) {
      this.doAssestUpdateOn();
    }
  }
  ngOnInit() {
    this.commonService.clearBkoSession();
    this.commonService.getUserDDLDetails(EnmLanguage.English, EnmCountry.UnitedStates, null).subscribe((res) => {
      this.dataService.appData.userDropDownList = res.ResponseData;
      this.dataService.data.next(this.dataService.appData);
      this.validateCacheData();
      this.title.setTitle("ZoetisDx");
      this.getLabelDetails(this.labelService.selectedLanguage);
      if (this.isCacheValid && localStorage.showLoginView == "true") {
        this.toggleScreen("login");
      } else {
        this.toggleScreen("market");
      }
      this.dataService.data.subscribe((data) => {
        this.helpObj = data.helpTopics.find((e) => e.HelpTopic == "Getting-Started");
      });
    });
  }
  initialMarketSelection() {
    if (localStorage.userCountryId) {
      this.selectedMarket = parseInt(localStorage.userCountryId);
      return;
    }
    let locale = navigator.language.toLowerCase().split("-");
    let Id = 0;
    if (locale.length > 1 && this.dataService.appData.userDropDownList.CountryDetails) {
      const country = this.dataService.appData.userDropDownList.CountryDetails.find((ele) => ele.CountryCode.toLowerCase() == locale[1]);
      if (country) {
        Id = country.Id;
      }
    } else if (locale.length == 1) {
      const language = this.dataService.appData.userDropDownList.LanguageDetails.filter((ele) => ele.Code.toLowerCase() == locale[0]);
      if (language.length != 0) {
        const hasKey = "HelpLangCode" in language[0];
        if (hasKey) {
          locale = language[0].HelpLangCode.toLowerCase().split("-");
          if (locale.length > 1) {
            const country = this.dataService.appData.userDropDownList.CountryDetails.filter((ele) => ele.CountryCode.toLowerCase() == locale[1]);
            if (country.length != 0) {
              Id = country[0].Id;
            }
          }
        }
      }
    }
    this.selectedMarket = Id != 0 ? Id : EnmCountry.UnitedStates;
  }
  validateCacheData() {
    if (localStorage.showLoginView == "true" && localStorage.getItem("market") == "undefined") {
      localStorage.removeItem("showLoginView");
      localStorage.removeItem("market");
      this.clearGigyaFootPrint(true);
    }
    const APIKey = localStorage.getItem("APIKey");
    const langCode = localStorage.getItem("langCode");
    const languageId = localStorage.getItem("languageId");
    const market = localStorage.getItem("market");
    if (APIKey && langCode && languageId && market) {
      this.isCacheValid = true;
      this.market = JSON.parse(market);
      this.selectedMarket = this.market.ID;
      this.labelService.selectedLanguage = Number(languageId);
      this.labelService.userCountryId = this.selectedMarket;
      this.langCode = langCode;
      this.apiKey = APIKey;
    } else {
      this.initialMarketSelection();
    }
  }
  extractApiKeyAndSave() {
    this.market = this.dsGigyaMarket.find((x) => x.ID == this.selectedMarket) != void 0 ? this.dsGigyaMarket.find((x) => x.ID == this.selectedMarket) : null;
    if (!this.market) {
      this.market = this.dsGigyaMarket[0];
      this.selectedMarket = this.market.ID;
    }
    this.apiKey = this.market.Key;
    this.dataCenter = this.market.DataCenter;
    localStorage.setItem("dataCenter", this.dataCenter);
    localStorage.setItem("APIKey", this.apiKey);
    localStorage.setItem("market", JSON.stringify(this.market));
    this.dataService.appData.masterData.APIKey = this.apiKey;
    this.dataService.data.next(this.dataService.appData);
  }
  getGigyaMarkets(reloadGigya = false, resetSelectedLanguage = false) {
    this.commonService.getGigyaMarketDetailsByLang(this.labelService.selectedLanguage).subscribe((data) => {
      this.dsGigyaMarket = data.ResponseData;
      this.dataService.appData.markets = this.dsGigyaMarket;
      this.dataService.data.next(this.dataService.appData);
      this.extractApiKeyAndSave();
      this.getLanguages(reloadGigya, resetSelectedLanguage);
    });
  }
  getLanguages(reloadGigya = false, resetSelectedLanguage = false) {
    this.commonService.getLanguageDetails().subscribe((data) => {
      this.originalDataLanguages = data.ResponseData;
      this.dataService.appData.languages = this.originalDataLanguages;
      this.dataService.data.next(this.dataService.appData);
      this.sortLanguage();
      this.setLanguage(resetSelectedLanguage);
      this.loadGigyaCdn(reloadGigya).onload = () => {
        this.loadGigyaWidget();
      };
    });
  }
  sortLanguage() {
    const selectedMarket = this.selectedMarket;
    this.dsLanguage = this.originalDataLanguages.filter((ele) => ele.GigyaLanguageCode.find((subEle) => subEle.GMarketID == this.selectedMarket));
    if (this.dsLanguage.length > 1) {
      this.dsLanguage.forEach(function(ele) {
        const gigyaLan = ele.GigyaLanguageCode.find((subEle) => subEle.GMarketID == selectedMarket);
        if (gigyaLan != void 0) {
          ele.SeqNumber = gigyaLan.SeqNumber;
        }
      });
    }
    this.dsLanguage.sort((a, b) => a.SeqNumber - b.SeqNumber);
  }
  setLanguage(resetSelectedLanguage = false) {
    let lang;
    if (resetSelectedLanguage || !this.labelService.selectedLanguage) {
      lang = this.dsLanguage[0];
      this.labelService.selectedLanguage = lang.Id;
    } else if (this.labelService.selectedLanguage) {
      const check1 = this.dsLanguage.find((x) => x.Id == this.labelService.selectedLanguage);
      const check2 = this.dsLanguage.find((x) => x.GigyaLanguageCode.find((y) => y.GMarketID == this.selectedMarket));
      lang = check1 || check2;
    } else {
      lang = this.dsLanguage.find((x) => x.GigyaLanguageCode.find((y) => y.GMarketID == this.selectedMarket));
    }
    this.langCode = lang.GigyaLanguageCode.find((subEle) => subEle.GMarketID == this.selectedMarket).GigyaLangCode;
    this.langCodeForScreenSet = this.langCode.split("-")[0].toLowerCase();
    this.labelService.selectedLanguage = lang.Id;
    this.getLabelDetails(this.labelService.selectedLanguage.toString());
    localStorage.setItem("langCode", this.langCode);
    this.dataService.appData.masterData.langCode = this.langCode;
    localStorage.setItem("languageId", this.labelService.selectedLanguage.toString());
    this.dataService.appData.masterData.languageId = this.labelService.selectedLanguage.toString();
    this.dataService.data.next(this.dataService.appData);
    this.doAssestUpdateOff();
  }
  onChangeGigayMarket() {
    this.doAssestUpdateOn();
    localStorage.setItem("userCountryId", this.selectedMarket.toString());
    this.dataService.appData.masterData.userCountryId = this.selectedMarket.toString();
    this.dataService.data.next(this.dataService.appData);
    this.dsLanguage = this.originalDataLanguages.filter((ele) => ele.GigyaLanguageCode.find((subEle) => subEle.GMarketID == this.selectedMarket));
    this.labelService.selectedLanguage = this.dsLanguage != void 0 ? this.dsLanguage[0].Id : EnmLanguage.English;
    this.router.navigateByUrl("/RefreshComponent", { skipLocationChange: true }).then(() => {
      this.router.navigate(["login"]);
      this.getGigyaMarkets(true, true);
    });
  }
  onChangeLanguage() {
    this.doAssestUpdateOn();
    this.router.navigateByUrl("/RefreshComponent", { skipLocationChange: true }).then(() => {
      this.router.navigate(["login"]);
      this.getGigyaMarkets(true);
    });
  }
  toggleScreen(screen, justSwitch = false) {
    this.showWidget = screen;
    if (this.showWidget == "login") {
      localStorage.setItem("showLoginView", "true");
      if (justSwitch) {
        this.loadGigyaWidget();
      } else {
        this.loadGigyaCdn().onload = () => {
          this.loadGigyaWidget();
        };
      }
    }
    if (this.showWidget == "market") {
      localStorage.setItem("showLoginView", "false");
      this.getGigyaMarkets(!!justSwitch);
    }
  }
  getLabelDetails(selectedLangId) {
    this.labelService.getLabelDetails(null, selectedLangId).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.dataService.appData.labels = data.ResponseData;
      this.dataService.data.next(this.dataService.appData);
      this.labelService.bindLoginLabel();
      this.labelService.bindSideMenuLabel();
      this.labelService.bindHeaderLabel();
      this.labelService.getHomePageScreenLabel();
    });
  }
  getGigyaCdnUrl() {
    return "https://cdns.gigya.com/js/gigya.js?apikey=" + this.apiKey + "&lang=" + this.langCode;
  }
  loadGigyaCdn(reload = false) {
    if (reload) {
      this.clearGigyaFootPrint();
    }
    const url = this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, this.sanitizer.bypassSecurityTrustResourceUrl(this.getGigyaCdnUrl()));
    return this.scriptLoader.loadDynamicJsScript(this.gigyaScriptId, url);
  }
  clearGigyaFootPrint(includingStorage = false) {
    const rmvScript = document.getElementById(this.gigyaScriptId);
    if (typeof gigya != "undefined") {
      gigya.resetAPIDomain();
      gigya.__initialized = false;
      this.gigyaListenerAdded = false;
    }
    if (rmvScript != null) {
      document.head.removeChild(rmvScript);
    }
    if (includingStorage) {
      localStorage.clear();
      sessionStorage.clear();
      this.doAssestUpdateOn();
    }
  }
  loadGigyaWidget() {
    if (typeof gigya !== "undefined") {
      if (localStorage.showDebugUI)
        gigya.showDebugUI();
      this.showLoginFormLoader = true;
      this.loginParams.lang = this.langCode;
      this.loginParams.screenSet = this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin", this.zone.run(() => {
        this.router.navigateByUrl("/RefreshComponent", { skipLocationChange: true }).then(() => {
          this.router.navigate(["login"]);
          gigya.accounts.showScreenSet(this.loginParams);
          if (!this.gigyaListenerAdded) {
            gigya.socialize.addEventHandlers({
              onLogin: (ev) => {
                this.onLogin(ev);
              }
            });
            this.gigyaListenerAdded = true;
          }
        });
      });
    }
  }
  onLogin(eventObj) {
    if (this.screen != "gigya-register-screen" && this.screen != "gigya-signup-screen" && this.screen != "") {
      this.getLogin(eventObj);
    }
  }
  getLogin(eventObj) {
    this.validateCacheData();
    const internlUser = localStorage["rememberedUser"];
    this.userAuth = new UserAuth();
    this.userAuth.User = eventObj.user.email;
    this.userAuth.GigyaUID = eventObj.user.UID;
    this.userAuth.LanguageId = this.labelService.selectedLanguage;
    localStorage.setItem("rememberedUser", internlUser);
    this.commonService.loginAuth(this.userAuth).subscribe((data) => {
      const dateTime = Date.now();
      localStorage.setItem("lastAction", dateTime.toString());
      localStorage.setItem("lastRefresh", dateTime.toString());
      const dateFormatList = this.dataService.appData.userDropDownList["DateFormatList"];
      if (dateFormatList && dateFormatList.length) {
        this.afterLoginSetup(dateFormatList, data);
      } else {
        this.commonService.getUserDDLDetails(EnmLanguage.English, EnmCountry.UnitedStates, null, true).subscribe((res) => {
          this.dataService.appData.userDropDownList = res.ResponseData;
          this.dataService.data.next(this.dataService.appData);
          const dateFormatList2 = this.dataService.appData.userDropDownList["DateFormatList"];
          this.afterLoginSetup(dateFormatList2, data);
        });
      }
    }, (error) => {
      if (error.error == "not_exist" || error.error == "invalid_grant") {
        this.confirmationDialogService.confirm("", this.labelService.dsLoginScreen.ContinueToCreateClinicAdmin, this.labelService.dsLoginScreen.Continue, this.labelService.dsLoginScreen.Cancel, "sm", true, true).then((confirmed) => {
          if (confirmed) {
            gigya.accounts.showScreenSet(this.standardProfileParams);
          }
        }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
      } else if (error.error == "terms_not_accepted") {
        gigya.accounts.showScreenSet(this.standardProfileParams);
      } else if (error.error == "not_verified") {
        this.msg = this.labelService.dsLoginScreen.Emailnotvalidated;
        this.showMsg(this.msg);
      } else if (error.error == "not_active") {
        this.msg = this.labelService.dsLoginScreen.UserNotActive;
        this.showMsg(this.msg);
      } else if (error.error == "beta end date has passed") {
        this.includeValues = this.betaUser + "\n";
        this.showMsg(this.includeValues);
        this.commonService.callMethodOfSecondComponent("signIn");
      } else {
        this.msg = this.labelService.dsLoginScreen.LoginFailed;
        this.showMsg(this.msg);
      }
    });
  }
  afterLoginSetup(dateFormatList, data) {
    dateFormatList.forEach((e) => {
      if (e["Id"] == data["DateFormatId"]) {
        localStorage.setItem("DateTimeFormat", e["ExactDateTime"].replace(/(?<!y)y(?!y)/g, "YY").toUpperCase());
      }
    });
    this.dataService.appData.authDetails = data;
    this.dataService.data.next(this.dataService.appData);
    this.headerService.setAuthSession(data);
    this.commonService.firebase.analytics().logEvent("login", { user_email: data.Email });
    this.commonService.isAlertModelDefaultOpen = true;
    if (data.TimeFormatId == void 0 || data.TimeFormatId == null || data.TimeZoneId == null || data.TimeZoneId == "") {
      this.defultTimezone = null;
      let timezoneId = null;
      let dateFormatId = null;
      let timeFormatId = null;
      if (this.dataService.appData.userDropDownList != void 0 && this.dataService.appData.userDropDownList != null) {
        const timezoneObj = this.dataService.appData.userDropDownList.TimeZonesList.find((x) => x.WebTimeZone != null && x.WebTimeZone.toLowerCase().indexOf(Intl.DateTimeFormat().resolvedOptions().timeZone.toLowerCase()) >= 0);
        if (timezoneObj != void 0)
          timezoneId = timezoneObj.Id;
        else
          timezoneId = EnmDefaultTimezone.EST;
      } else {
        timezoneId = EnmDefaultTimezone.EST;
      }
      dateFormatId = data.DateFormatId != void 0 && data.DateFormatId != null && data.DateFormatId != "null" && data.DateFormatId != "" ? parseInt(data.DateFormatId) : this.commonService.getDateFormatId(data.CountryId);
      dateFormatList.forEach((e) => {
        if (e["Id"] == dateFormatId) {
          localStorage.setItem("DateTimeFormat", e["ExactDateTime"].replace(/(?<!y)y(?!y)/g, "YY").toUpperCase());
        }
      });
      timeFormatId = data.TimeFormatId != void 0 && data.TimeFormatId != null && data.TimeFormatId != "null" && data.TimeFormatId != "" ? parseInt(data.TimeFormatId) : this.commonService.getTimeFormatId(data.CountryId);
      const timezonedetails = new TimeZone();
      timezonedetails.TimeZoneId = timezoneId;
      timezonedetails.DateFormatId = dateFormatId;
      timezonedetails.TimeFormatId = timeFormatId;
      timezonedetails.UserGuid = data.UserGuid;
      timezonedetails.BusinessGuid = data.BusinessGuid;
      debugger;
      this.commonService.addUpdateTimeZone(timezonedetails).subscribe({
        next: () => {
          data.DateFormatId = dateFormatId.toString();
          data.TimeFormatId = timeFormatId.toString();
          data.TimeZoneId = timezoneId.toString();
          this.dataService.appData.authDetails = data;
          this.dataService.data.next(this.dataService.appData);
          debugger;
          this.sidemenuService.getSideMenu(data.UserTypeId, this.labelService.selectedLanguage, this.labelService.userCountryId, true);
        },
        error: () => {
          this.router.navigateByUrl("/login");
        }
      });
    } else {
      this.sidemenuService.getSideMenu(data.UserTypeId, this.labelService.selectedLanguage, this.labelService.userCountryId, true);
    }
  }
  errorHandler(eventObj) {
    if (this.alreadyShownError)
      return;
    if (this.screen && this.screen != "gigya-login-screen") {
      this.showMsg(eventObj.errorMessage);
    } else if (this.showWidget == "login" && eventObj.errorCode == "500001") {
      if (window.location.hostname == "localhost") {
      } else {
        gigya.resetAPIDomain();
        this.loadGigyaWidget();
      }
    }
  }
  formCheck(eventObj) {
    this.screen = eventObj.screen;
    if (this.screen == "gigya-register-screen" || this.screen == "gigya-signup-screen" || this.screen == "gigya-profile-admin-update-screen" || this.screen == "gigya-profile-update-screen") {
      this.userDetails = new GigyaUserRegisInfo();
      if (eventObj.formData["profile.phones.number"] != void 0)
        this.userDetails.PhoneNo = eventObj.formData["profile.phones.number"];
      if (eventObj.formData["profile.address"] != void 0)
        this.userDetails.AddressLine1 = eventObj.formData["profile.address"];
      this.userDetails.CountryId = this.selectedMarket;
      this.userDetails.LanguageId = this.labelService.selectedLanguage;
    } else {
      this.userDetails = new GigyaUserRegisInfo();
    }
    let formid = "#gigya-register-form";
    if (eventObj.screen === "gigya-profile-update-screen" || eventObj.screen === "gigya-complete-registration-screen") {
      formid = "#gigya-profile-form";
    }
    if ($(formid + " .error-msg").is(":visible") == true || $(formid + " .terms-agree").hasClass("gigya-termsEula-error") == true) {
      return false;
    }
  }
  afterFormSubmit(eventObj) {
    this.screen = eventObj.screen;
    if (eventObj.screen == "gigya-register-screen" || this.screen == "gigya-signup-screen" || eventObj.screen == "gigya-complete-registration-screen") {
      this.addUpdateBusinessUser(eventObj, true);
      this.commonService.firebase.analytics().logEvent("signed_up", { user_email: eventObj.profile.email });
    }
    if (eventObj.screen == "gigya-profile-update-screen" || eventObj.screen == "gigya-profile-admin-update-screen") {
      this.addUpdateBusinessUser(eventObj, false);
    }
  }
  addUpdateBusinessUser(eventObj, isRegis) {
    this.userDetails.Title = eventObj.data.prefix;
    this.userDetails.FirstName = eventObj.profile.firstName;
    this.userDetails.LastName = eventObj.profile.lastName;
    this.userDetails.Suffix = eventObj.data.suffix;
    if (eventObj.data.sapCustomerId != void 0 || eventObj.data.accountId != void 0)
      this.userDetails.ZoetisAccountNumber = eventObj.data.sapCustomerId != void 0 ? eventObj.data.sapCustomerId : eventObj.data.accountId;
    if (eventObj.data.mdmAccountId != void 0) {
      this.userDetails.NarcId = eventObj.data.mdmAccountId;
    }
    this.userDetails.BusinessName = eventObj.data.businessName;
    this.userDetails.AddressLine2 = eventObj.data.address_2;
    this.userDetails.City = eventObj.profile.city;
    this.userDetails.State = this.selectedMarket == EnmCountry.Turkey ? eventObj.profile.city : eventObj.data.province;
    this.userDetails.ZipCode = eventObj.profile.zip;
    this.userDetails.GigyaUID = eventObj.response.UID;
    this.userDetails.Email = eventObj.profile.email;
    this.userDetails.UserTypeId = EnmUserType.Business;
    if (this.userDetails.GigyaUID != void 0) {
      this.commonService.addUpdateGigyaUser(this.userDetails).subscribe({
        next: () => {
          if (!isRegis) {
            this.confirmationDialogService.confirm("", this.labelService.dsLoginScreen.UserProfileUpdated, this.labelService.dsLoginScreen.OK, this.labelService.dsLoginScreen.Cancel, "sm", true, true).then((confirmed) => {
              if (confirmed) {
                this.loadGigyaWidget();
              }
            }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
          } else {
            this.headerService.userName = this.userDetails.FirstName;
            localStorage.setItem("userName", this.headerService.userName);
          }
        },
        error: () => {
          if (!isRegis)
            this.showRegisterMsg(this.labelService.dsLoginScreen.UserProfileUpdated + ".");
        }
      });
    }
  }
  addUpdateStandardUser(eventObj) {
    this.userDetails = new GigyaUserRegisInfo();
    this.userDetails.Title = eventObj.data.prefix;
    this.userDetails.FirstName = eventObj.profile.firstName;
    this.userDetails.LastName = eventObj.profile.lastName;
    this.userDetails.Suffix = eventObj.data.suffix;
    this.userDetails.GigyaUID = eventObj.response.UID;
    this.userDetails.Email = eventObj.profile.email;
    this.userDetails.UserTypeId = EnmUserType.DVM;
    if (this.userDetails.GigyaUID != void 0) {
      this.commonService.addUpdateGigyaUser(this.userDetails).subscribe({
        next: () => {
          this.showRegisterMsg(this.labelService.dsLoginScreen.UserProfileUpdated);
        },
        error: () => {
          this.showRegisterMsg(this.labelService.dsLoginScreen.UserProfileUpdated + ".");
        }
      });
    }
  }
  showRegisterMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsLoginScreen.OK, "", "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.loadGigyaWidget();
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  showMsg(msg, reload = false) {
    this.alreadyShownError = true;
    this.confirmationDialogService.confirm("", msg, this.labelService.dsLoginScreen.OK, this.labelService.dsLoginScreen.Cancel, "sm", true, false).then(() => {
      this.alreadyShownError = false;
      if (reload) {
        this.clearGigyaFootPrint(true);
        this.toggleScreen("market");
        window.location.reload();
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  installZdxApp() {
    if (navigator.userAgent.match(/Android/i)) {
      window.location.href = "https://play.app.goo.gl/?link=https://play.google.com/store/apps/details?id=com.zoetis.moose";
    } else if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
      window.location.href = "itms-apps://apps.apple.com/us/app/zoetisdx/id1545264353";
    }
  }
  ngOnDestroy() {
    this._$destroy.next(true);
  }
  static {
    this.\u0275fac = function GigyaLoginComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GigyaLoginComponent)(\u0275\u0275directiveInject(MatIconRegistry), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ScriptLoaderService), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(DomSanitizer));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GigyaLoginComponent, selectors: [["app-gigya-login"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 49, vars: 14, consts: [[1, "login-section"], [1, "rightlang", 3, "hidden"], ["src", "../../../../assets/img/ipadimg.png", "loading", "lazy", "alt", "backgroundImage"], [1, "signin-outer", "signincont", 3, "hidden"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "col-sm-7"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "login"], [1, "form-label-group"], [1, "d-flex", "align-items-center", "justify-content-center", "flex-column"], ["appearance", "outline", "floatLabel", "always", 1, "w-100"], ["autocomplete", "off", "id", "ddlMkt", 3, "ngModelChange", "selectionChange", "ngModel"], [3, "value", 4, "ngFor", "ngForOf"], ["autocomplete", "off", "id", "ddlLang", 3, "ngModelChange", "selectionChange", "ngModel"], ["id", "btnShowLogin", "mat-raised-button", "", "color", "warn", 1, "btn", "btn-lg", "btn-primary", "btn-block", "w-100", 3, "click"], [1, "card-signin", 3, "hidden"], [1, "glog", "text-right"], [2, "cursor", "pointer", "color", "blue", 3, "click"], [1, "head1", "mobgigya", 2, "margin-top", "15px", "margin-left", "12px", "position", "absolute", "width", "97%"], [1, "backlink", 3, "click", "matTooltip"], [1, "all-ban"], [1, "ban_section", "d-flex", "justify-content-between", "align-items-center"], [1, "ban_part1"], ["src", "../../../../assets/img/logo-header@2x.png", "alt", "img", 1, "logoicon1", "ml-0"], [1, "ban_part2"], [1, "ban_part3", 3, "click"], [1, "rightpart"], ["id", "loginContainer"], [3, "value"]], template: function GigyaLoginComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
        \u0275\u0275element(2, "img", 2);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6)(7, "div", 7)(8, "div", 8)(9, "div", 9);
        \u0275\u0275element(10, "img", 10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "div", 11)(12, "div", 12)(13, "mat-form-field", 13)(14, "mat-select", 14);
        \u0275\u0275twoWayListener("ngModelChange", function GigyaLoginComponent_Template_mat_select_ngModelChange_14_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectedMarket, $event) || (ctx.selectedMarket = $event);
          return $event;
        });
        \u0275\u0275listener("selectionChange", function GigyaLoginComponent_Template_mat_select_selectionChange_14_listener() {
          return ctx.onChangeGigayMarket();
        });
        \u0275\u0275template(15, GigyaLoginComponent_mat_option_15_Template, 2, 2, "mat-option", 15);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(16, "mat-form-field", 13)(17, "mat-select", 16);
        \u0275\u0275twoWayListener("ngModelChange", function GigyaLoginComponent_Template_mat_select_ngModelChange_17_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.labelService.selectedLanguage, $event) || (ctx.labelService.selectedLanguage = $event);
          return $event;
        });
        \u0275\u0275listener("selectionChange", function GigyaLoginComponent_Template_mat_select_selectionChange_17_listener() {
          return ctx.onChangeLanguage();
        });
        \u0275\u0275template(18, GigyaLoginComponent_mat_option_18_Template, 2, 2, "mat-option", 15);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(19, "button", 17);
        \u0275\u0275listener("click", function GigyaLoginComponent_Template_button_click_19_listener() {
          return ctx.toggleScreen("login", true);
        });
        \u0275\u0275text(20);
        \u0275\u0275elementEnd()()()()()()()()()();
        \u0275\u0275elementStart(21, "div", 18)(22, "div", 19)(23, "div");
        \u0275\u0275text(24);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(25, "div")(26, "a", 20);
        \u0275\u0275listener("click", function GigyaLoginComponent_Template_a_click_26_listener() {
          return ctx.toggleScreen("market", true);
        });
        \u0275\u0275text(27);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(28, "div", 21)(29, "span");
        \u0275\u0275text(30);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "a", 22);
        \u0275\u0275listener("click", function GigyaLoginComponent_Template_a_click_31_listener() {
          return ctx.commonService.onlineHelp(ctx.helpObj.PageID);
        });
        \u0275\u0275text(32);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(33, "div", 23)(34, "div", 24)(35, "div", 25);
        \u0275\u0275element(36, "img", 26);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(37, "div", 27)(38, "p");
        \u0275\u0275text(39, "Diagnostic results at your fingertips");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(40, "p");
        \u0275\u0275text(41, "Open in the ZoetisDx app");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(42, "div", 28);
        \u0275\u0275listener("click", function GigyaLoginComponent_Template_div_click_42_listener() {
          return ctx.installZdxApp();
        });
        \u0275\u0275elementStart(43, "p");
        \u0275\u0275text(44, "OPEN");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(45, "div", 0)(46, "div", 29);
        \u0275\u0275element(47, "img", 2);
        \u0275\u0275elementEnd();
        \u0275\u0275element(48, "div", 30);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("hidden", ctx.showWidget == "login");
        \u0275\u0275advance(2);
        \u0275\u0275property("hidden", ctx.showWidget == "login");
        \u0275\u0275advance(11);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectedMarket);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsGigyaMarket);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.labelService.selectedLanguage);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsLanguage);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsLoginScreen.Login, " ");
        \u0275\u0275advance();
        \u0275\u0275property("hidden", ctx.showWidget == "market");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate2(" ", ctx.labelService.dsLoginScreen.Country, ": ", ctx.market == null ? null : ctx.market.Name, " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.dsLoginScreen.ChangeCountry);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsLoginScreen.NewZdx, " ");
        \u0275\u0275advance();
        \u0275\u0275propertyInterpolate("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate(ctx.labelService.dsLoginScreen.GetMsg);
      }
    }, dependencies: [NgForOf, MatLegacyFormField, MatLegacyButton, MatLegacySelect, MatLegacyOption, MatLegacyTooltip, NgControlStatus, NgModel], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.lang[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 12px;\n  right: 16px;\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 12px;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #fff;\n  box-shadow: 3px 4px 16px 0px #ffffff33;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 30px !important;\n  height: 40px !important;\n  width: 85%;\n  margin-top: 23px;\n  background-color: #fd6400;\n  box-shadow: none;\n  font-weight: bold;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 80%;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 30% !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 12px;\n  font-weight: bold;\n}\n.icon[_ngcontent-%COMP%] {\n  position: relative;\n  top: -7px;\n  width: 11px;\n}\n.signin-outer[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\n  padding-bottom: 4px;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n.all-ban[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  .ban_part2[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n    font-size: 12px;\n  }\n  .ban_part3[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n  }\n  .all-ban[_ngcontent-%COMP%] {\n    display: block;\n    padding: 10px 0;\n    background: #fff;\n    margin-bottom: 3px;\n    position: absolute;\n    top: 60px;\n    width: 100%;\n  }\n  .ban_part1[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n    width: 85px;\n    padding-left: 8px;\n  }\n  .ban_part3[_ngcontent-%COMP%] {\n    background: #f65c00;\n    color: #fff;\n    font-weight: 600;\n    text-transform: uppercase;\n    padding: 3px 12px 2px 12px;\n    border-radius: 25px;\n    margin-right: 8px;\n    font-size: 11px;\n  }\n  .ban_part2[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n    font-weight: bold;\n  }\n  .ban_part2[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n    font-style: italic;\n  }\n    .gigya-composite-control.gigya-spacer, \n   .gigya-layout-row.with-divider[_ngcontent-%COMP%] {\n    display: block !important;\n  }\n    #loginContainer_content .gigya-screen {\n    margin-top: 122px;\n    padding-left: 30px !important;\n    padding-right: 30px !important;\n    position: absolute;\n    bottom: 0;\n    border-bottom-left-radius: 1px !important;\n    border-bottom-right-radius: 1px !important;\n    border: none !important;\n  }\n    .gigya-screen .gigya-composite-control-phone-number-input input.gigya-subscriber-phone-number-input {\n    width: 100% !important;\n  }\n    .clinic-field.phoneNumber, \n     .clinic-field.state_val.req-fields {\n    width: 100% !important;\n  }\n    .gigya-screen #gigya-register-form .submit-btn {\n    max-width: 102px !important;\n    margin-top: 0 !important;\n  }\n    .gigya-screen .gigya-composite-control.gigya-composite-control-password {\n    max-width: 100% !important;\n    width: 100% !important;\n  }\n  .glog[_ngcontent-%COMP%] {\n    width: 100% !important;\n    font-size: 12px;\n    margin-right: 0 !important;\n  }\n  .mobgigya[_ngcontent-%COMP%] {\n    display: flex;\n    flex-direction: column;\n    font-size: 12px;\n    margin-top: 10px !important;\n    width: 60% !important;\n  }\n  .mobgigya[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n    font-size: 12px;\n  }\n  .login-alert-box[_ngcontent-%COMP%] {\n    color: #ff6400;\n    width: 101% !important;\n    position: absolute;\n    top: initial !important;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: end !important;\n    margin-top: 55px;\n    right: -3px !important;\n  }\n  .newpart[_ngcontent-%COMP%] {\n    width: 415px;\n    background: #fff;\n    padding: 14px;\n    border-radius: 14px;\n    height: 130px;\n  }\n}\n@media screen and (max-width: 320px) {\n    #gigya-register-form .submit-btn {\n    max-width: 82px !important;\n    margin-top: 10px !important;\n  }\n    .gigya-screen .gigya-composite-control.gigya-composite-control-link.back-to-login {\n    padding: 0px 13px !important;\n  }\n}\n.announce_banner[_ngcontent-%COMP%] {\n  background: #fbe9e7ad;\n  width: 98%;\n  position: absolute;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  left: 0.9%;\n  top: 50px;\n}\n.announce_banner[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-child(1) {\n  width: 5%;\n  padding-bottom: 10px;\n}\n.announce_banner[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-size: 14px;\n  font-weight: 600;\n  margin-bottom: 0;\n  padding: 8px;\n}\n.glog[_ngcontent-%COMP%] {\n  margin: 10px;\n  position: absolute;\n  width: 25%;\n  right: 0;\n  padding-right: 15px;\n  font-weight: 600;\n}\n.login-section[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n}\n.rightpart[_ngcontent-%COMP%], \n.rightlang[_ngcontent-%COMP%] {\n  width: 50%;\n}\n.rightpart[_ngcontent-%COMP%]   img[_ngcontent-%COMP%], \n.rightlang[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  max-width: 100%;\n  height: 100vh;\n  width: 100% !important;\n}\n#loginContainer[_ngcontent-%COMP%], \n.signincont[_ngcontent-%COMP%] {\n  width: 50% !important;\n  background:\n    radial-gradient(\n      100% 96.84% at 0% 10.61%,\n      #6fb0c7 13.98%,\n      #035771 100%);\n}\n#loginContainer[_ngcontent-%COMP%] {\n  width: 50% !important;\n  background:\n    radial-gradient(\n      100% 96.84% at 0% 10.61%,\n      #6fb0c7 13.98%,\n      #035771 100%);\n}\n  #loginContainer_content {\n  background-image: none;\n}\n.head1.mobgigya[_ngcontent-%COMP%] {\n  left: 50%;\n  overflow: hidden;\n  width: 20% !important;\n  color: #fff !important;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n  z-index: 999999;\n}\n.glog[_ngcontent-%COMP%] {\n  color: #fff !important;\n  padding: 1.3rem;\n  z-index: 999999;\n}\n.backlink[_ngcontent-%COMP%] {\n  color: #fff !important;\n  text-transform: uppercase;\n}\n.glog[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2)   a[_ngcontent-%COMP%] {\n  color: #fff !important;\n  text-transform: uppercase;\n  text-decoration: underline;\n}\n  #gigya-forgot-password-screen .return-login input {\n  border-radius: 30px !important;\n}\n  .gigya-screen input[type=text], \n  .gigya-screen .gigya-composite-control.gigya-composite-control-password input {\n  border-radius: 12px !important;\n}\n  .gigya-screen-content div.gigya-screen.landscape {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n  height: calc(75vh) !important;\n  width: 60% !important;\n}\n.signin-outer[_ngcontent-%COMP%] {\n  width: 50%;\n}\n.card-signin[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 140px;\n  margin-bottom: 1rem;\n}\n.card-signin[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\n  margin-top: 15px;\n}\n.card-signin[_ngcontent-%COMP%]     .mat-form-field-appearance-outline .mat-form-field-outline {\n  border-radius: 6px;\n  border: 0.5px solid #58585854;\n}\n  #gigya-login-screen .login-btn input, \n  #gigya-forgot-password-screen .login-btn input {\n  border-radius: 30px !important;\n}\n  .gigya-screen .gigya-composite-control.gigya-composite-control-checkbox {\n  align-items: center !important;\n}\n  body {\n  overflow: hidden;\n}\n@media screen and (max-width: 767px) {\n  .rightpart[_ngcontent-%COMP%], \n   .rightlang[_ngcontent-%COMP%] {\n    display: none;\n  }\n  #loginContainer[_ngcontent-%COMP%], \n   .signin-outer[_ngcontent-%COMP%] {\n    width: 100% !important;\n    background: none !important;\n    background-image: url("./media/ipadimg.png") !important;\n    background-position: center !important;\n    background-size: cover !important;\n  }\n  .signincont[_ngcontent-%COMP%]   .col-sm-5[_ngcontent-%COMP%] {\n    padding: 0;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .signincont[_ngcontent-%COMP%]   .card-signin[_ngcontent-%COMP%] {\n    position: absolute;\n    background: #fff;\n    border-bottom-left-radius: 1px !important;\n    border-bottom-right-radius: 1px !important;\n    width: 100%;\n    left: 0;\n  }\n  .all-ban[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .head1.mobgigya[_ngcontent-%COMP%] {\n    left: 0;\n    overflow: hidden;\n    width: 36% !important;\n    color: #fff !important;\n    display: flex;\n    flex-direction: column;\n  }\n}\n  .gigya-register-form {\n  max-height: calc(100vh - 340px) !important;\n}\n.gigya-loader[_ngcontent-%COMP%] {\n  width: 50px;\n  aspect-ratio: 1;\n  border-radius: 50%;\n  background:\n    radial-gradient(\n      farthest-side,\n      #f65c00 94%,\n      #0000) top/8px 8px no-repeat,\n    conic-gradient(#0000 30%, #f65c00);\n  -webkit-mask:\n    radial-gradient(\n      farthest-side,\n      #0000 calc(100% - 8px),\n      #000 0);\n  animation: _ngcontent-%COMP%_l13 1s infinite linear;\n}\n@keyframes _ngcontent-%COMP%_l13 {\n  100% {\n    transform: rotate(1turn);\n  }\n}\n.loadercont[_ngcontent-%COMP%] {\n  width: 30%;\n  height: 20vh;\n  background: none;\n  position: absolute;\n  right: 10%;\n  top: 35%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n@media screen and (min-width: 767px) and (max-width: 1150px) {\n  .rightpart[_ngcontent-%COMP%] {\n    display: none;\n  }\n  #fullLoaderCont[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .head1.mobgigya[_ngcontent-%COMP%] {\n    left: 0;\n  }\n  #loginContainer[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .loadercont[_ngcontent-%COMP%] {\n    right: 35%;\n  }\n}\n@media screen and (min-width: 415px) and (max-width: 767px) {\n  #fullLoaderCont[_ngcontent-%COMP%] {\n    height: 100vh !important;\n  }\n    #loginContainer_content {\n    height: 100vh !important;\n  }\n  .loadercont[_ngcontent-%COMP%] {\n    right: 35%;\n  }\n}\n.login-alert-box[_ngcontent-%COMP%] {\n  color: #ff6400;\n  width: 50%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n.newpart[_ngcontent-%COMP%] {\n  width: 415px;\n  background: #fff;\n  padding: 14px;\n  border-radius: 14px;\n  margin-bottom: 415px;\n}\n.login-alert-box[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n  margin: 5px 0px;\n}\n.login-alert-box[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  margin: 0px 7px;\n}\n.login-alert-box[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #ff6400;\n  text-decoration: underline;\n}\n  .gigya-screen.portrait {\n  width: 415px !important;\n  font-size: 15px !important;\n  padding-left: 35px !important;\n  padding-right: 35px !important;\n  padding-top: 18px !important;\n  height: 415px;\n  margin-top: 120px !important;\n  z-index: 999;\n}\n  .gigya-screen .gigya-composite-control {\n  padding-bottom: 6px !important;\n}\n  .gigya-screen img {\n  width: 125px !important;\n}\n@media screen and (min-width: 1200px) and (max-width: 1499px) {\n    .gigya-screen.portrait {\n    width: 415px !important;\n    font-size: 15px !important;\n    padding-left: 35px !important;\n    padding-right: 35px !important;\n    padding-top: 14px !important;\n    height: 390px;\n    margin-top: 165px !important;\n  }\n    .gigya-screen .gigya-composite-control {\n    padding-bottom: 6px !important;\n  }\n    .gigya-screen img {\n    width: 125px !important;\n  }\n  .newpart[_ngcontent-%COMP%] {\n    margin-bottom: 320px;\n    padding: 10px 12px;\n  }\n  .newpart[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-size: 12px;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1149px) {\n  .login-alert-box[_ngcontent-%COMP%] {\n    color: #ff6400;\n    width: 100% !important;\n    position: absolute;\n    top: 0 !important;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .newpart[_ngcontent-%COMP%] {\n    width: 415px;\n    background: #fff;\n    padding: 14px;\n    border-radius: 14px;\n  }\n}\n  .gigya-screen .gigya-composite-control.gigya-composite-control-tfa-verification-widget .gigya-tfa-verification-widget-body .gigya-tfa-verification-method {\n  margin-top: 0 !important;\n}\n  .gigya-screen .gigya-composite-control.gigya-composite-control-tfa-verification-widget .gigya-resend-button {\n  margin: 0 0 0 0 !important;\n}\n  .gigya-screen .gigya-composite-control.gigya-composite-control-tfa-verification-widget .gigya-composite-control-checkbox, \n  .gigya-screen .gigya-composite-control.gigya-composite-control-tfa-verification-widget .gigya-composite-control-checkbox, \n  .gigya-screen .gigya-composite-control.gigya-composite-control-tfa-verification-widget .gigya-tfa-verification-widget-body .gigya-tfa-verification-method {\n  margin-top: 0 !important;\n}\n  .gigya-screen .gigya-composite-control.gigya-composite-control-textbox input, \n  .gigya-screen .gigya-composite-control.gigya-composite-control-password input {\n  margin-bottom: 8px !important;\n}\n  .gigya-screen .gigya-error-msg-active.gigya-form-error-msg {\n  padding: 5px !important;\n}\n/*# sourceMappingURL=gigya-login.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GigyaLoginComponent, { className: "GigyaLoginComponent", filePath: "src\\app\\components\\gigya-login\\gigya-login.component.ts", lineNumber: 23 });
})();

// src/app/components/user-managements/security/security.component.ts
function SecurityComponent_div_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 21);
    \u0275\u0275text(1);
    \u0275\u0275element(2, "img", 22);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.resetReqMsg, " ");
  }
}
var SecurityComponent = class _SecurityComponent {
  constructor(userService, headerService, sidemenuService, formBuilder, confirmationDialogService, labelService, dataService) {
    this.userService = userService;
    this.headerService = headerService;
    this.sidemenuService = sidemenuService;
    this.formBuilder = formBuilder;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.isUserTypeBusiness = false;
    this.resetReqMsg = "";
    this.securityEmail = "";
    this.dsState = [];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.businessGUID = this.isConsultantUser ? null : this.dataService.appData.authDetails["BusinessGuid"];
    this.selectedAccordion = this.dataService.appState.admin.profilePageSelectedAccordion;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails(false);
    } else {
      this.labelService.bindUserProfileLabel();
    }
  }
  getUserDDLDetails(prefixId) {
    this.userService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, prefixId).subscribe((data) => {
      this.userService.dsLanguage = data.ResponseData.LanguageDetails;
      this.userService.dsNotification = data.ResponseData.NotificationSettingsValue;
      this.getUserSetting();
    });
  }
  ngOnInit() {
    if (this.isConsultantUser) {
      this.securityEmail = this.dataService.appData.authDetails["Email"];
    } else {
      this.getUserDDLDetails(null);
    }
  }
  getLabelDetails(isUpdateChild) {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindUserProfileLabel();
      if (isUpdateChild) {
        this.labelService.bindSideMenuLabel();
        this.labelService.bindHeaderLabel();
        this.showMsg(this.labelService.dsUserProfileScreen.UserPreferenceUpdatedSuccessfully);
      }
    });
  }
  getLanguageName(langId) {
    if (langId != void 0 && this.userService.dsLanguage.length)
      return this.userService.dsLanguage.find((x) => x.Id == langId).Name;
    else
      return "";
  }
  getUserSetting() {
    this.userService.getUserSettingDetails(this.headerService.loginUserGuid, this.businessGUID).subscribe({ next: (data) => {
      this.userService.originalUserProfileData = data.ResponseData;
      this.securityEmail = this.userService.originalUserProfileData.Email;
    }, error: () => {
      this.securityEmail = "";
    } });
  }
  resetUserSecurityRequest() {
    this.resetSignalRequest = new ResetSignalRequest();
    this.resetSignalRequest.Email = this.isConsultantUser ? this.securityEmail : this.userService.originalUserProfileData.Email;
    this.resetSignalRequest.LanguageId = this.labelService.selectedLanguage;
    this.userService.resetSignalRequest(this.resetSignalRequest).subscribe({ next: (data) => {
      if (data.StatusCode == 200) {
        this.resetReqMsg = this.labelService.dsUserProfileScreen.ResetSignalRequset;
      } else {
        this.resetReqMsg = this.labelService.dsUserProfileScreen.Error;
      }
    }, error: () => {
      this.resetReqMsg = this.labelService.dsUserProfileScreen.Error;
    } });
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsUserProfileScreen.OK, this.labelService.dsUserProfileScreen.Cancel, "sm", true, false);
  }
  static {
    this.\u0275fac = function SecurityComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SecurityComponent)(\u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SecurityComponent, selectors: [["app-security"]], decls: 31, vars: 6, consts: [[1, "wrapper"], ["id", "content"], [1, "outer"], [1, "mobileText"], [1, "mb-0"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["id", "profile"], ["expanded", "", "hideToggle", "true", "disabled", ""], [1, "cursor-rem"], [1, "d-flex"], [1, "email-block", "col"], [1, "d-flex", "align-items-center", "flex-wrap", "nobtm-pad", "s-input"], ["for", "", 1, "mb-0", "mr-4"], ["appearance", "outline", "floatLabel", "always", 1, "passtext"], ["type", "text", "matInput", "", "readonly", "", 3, "ngModel"], ["mat-raised-button", "", "color", "warn", 3, "click"], [1, "col", "d-flex"], [1, "d-flex", "mt-3"], [1, "col"], ["class", "alert alert-dark alert-dismissible fade show", "role", "alert", 4, "ngIf"], ["role", "alert", 1, "alert", "alert-dark", "alert-dismissible", "fade", "show"], ["src", "../../../assets/img/cancel-button@2x.png", "alt", "", "data-dismiss", "alert", "aria-label", "Close"]], template: function SecurityComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "p", 4);
        \u0275\u0275text(8);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(9, "div", 5)(10, "div", 6)(11, "div", 7)(12, "mat-accordion")(13, "mat-expansion-panel", 8)(14, "mat-expansion-panel-header", 9)(15, "mat-panel-title");
        \u0275\u0275text(16);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(17, "div", 10)(18, "div", 11)(19, "div", 12)(20, "label", 13);
        \u0275\u0275text(21);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(22, "mat-form-field", 14);
        \u0275\u0275element(23, "input", 15);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "button", 16);
        \u0275\u0275listener("click", function SecurityComponent_Template_button_click_24_listener() {
          return ctx.resetUserSecurityRequest();
        });
        \u0275\u0275text(25);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(26, "div", 17);
        \u0275\u0275text(27, " \xA0 ");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(28, "div", 18)(29, "div", 19);
        \u0275\u0275template(30, SecurityComponent_div_30_Template, 3, 1, "div", 20);
        \u0275\u0275elementEnd()()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.Security);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1(" ", ctx.labelService.dsUserProfileScreen.Security, " ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.ChangePassword);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngModel", ctx.securityEmail);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.dsUserProfileScreen.Send);
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", ctx.resetReqMsg !== "");
      }
    }, dependencies: [NgIf, MatLegacyFormField, MatLegacyInput, MatLegacyButton, MatAccordion, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, HeaderComponent, SideMenuComponent, DefaultValueAccessor, NgControlStatus, NgModel], styles: ['\n\nlabel[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-bottom: 0;\n  color: #3e3e3e;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  min-width: 120px;\n  max-width: 120px;\n  word-break: break-word;\n}\n@media screen and (max-width: 767px) {\n  .nobtm-pad[_ngcontent-%COMP%]   .passtext[_ngcontent-%COMP%] {\n    margin-right: 0;\n    margin-top: 6px;\n    margin-bottom: 25px;\n  }\n  .nobtm-pad[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    margin: 0 auto;\n  }\n  .email-block.col[_ngcontent-%COMP%] {\n    min-width: 100%;\n  }\n  .mobileText[_ngcontent-%COMP%] {\n    display: block !important;\n    background: white;\n    text-align: center;\n    padding: 10px 0;\n    width: 115%;\n    position: relative;\n    left: -30px;\n    top: -15px;\n    border-top: 2px solid #d1d4d8;\n    border-bottom: 2px solid #d1d4d8;\n  }\n  .mobileText[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    font-weight: bold;\n  }\n  .email-block[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\n    padding-top: 25px;\n  }\n  .cursor-rem[_ngcontent-%COMP%] {\n    display: none;\n  }\n}\n.mobileText[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .email-block.col[_ngcontent-%COMP%] {\n    min-width: 100%;\n  }\n  .nobtm-pad[_ngcontent-%COMP%]   .passtext[_ngcontent-%COMP%] {\n    width: 50% !important;\n  }\n}\n@media screen and (min-width: 320px) and (max-width: 359px) {\n  .mobileText[_ngcontent-%COMP%] {\n    left: -22px;\n  }\n}\n/*# sourceMappingURL=security.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SecurityComponent, { className: "SecurityComponent", filePath: "src\\app\\components\\user-managements\\security\\security.component.ts", lineNumber: 12 });
})();

// src/app/components/gigya-managements/gigya-reset/gigya-reset.component.ts
var GigyaResetComponent = class _GigyaResetComponent {
  constructor(commonService, confirmationDialogService, router) {
    this.commonService = commonService;
    this.confirmationDialogService = confirmationDialogService;
    this.router = router;
    this.apiKey = "";
    this.langCode = "";
    this.langCodeForScreenSet = "";
    this.isProspect = false;
    if (this.router.url.indexOf("?apiKey=") != -1) {
      this.apiKey = this.router.url.trim().split("?apiKey=")[1] != void 0 ? this.router.url.trim().split("?apiKey=")[1].split("&")[0] : "";
      this.langCode = this.router.url.trim().split("&lang=")[1] != void 0 ? this.router.url.trim().split("&lang=")[1].split("&")[0] : "";
      this.isProspect = this.router.url.trim().split("&isprospect=")[1] != void 0 ? this.router.url.trim().split("&isprospect=")[1].split("&")[0].toString() == "true" : false;
      this.langCodeForScreenSet = this.langCode != "undefined" ? this.langCode.split("-")[0].toLowerCase() : "";
      const widgetScript = document.createElement("script");
      widgetScript.type = "text/javascript";
      widgetScript.id = "widget";
      widgetScript.src = "https://cdns.gigya.com/js/gigya.js?apikey=" + this.apiKey + "&lang=" + this.langCode;
      document.head.appendChild(widgetScript);
    } else {
      const widgetScript = document.createElement("script");
      widgetScript.type = "text/javascript";
      widgetScript.id = "widget";
      widgetScript.src = "https://cdns.gigya.com/js/gigya.js?apikey=" + this.apiKey + "&lang=" + this.langCode;
      document.head.appendChild(widgetScript);
    }
  }
  ngOnInit() {
    setTimeout(() => {
      $("a").click(this.loadWidget());
      $("a").hide();
    }, 1e3);
  }
  loadWidget() {
    if (typeof gigya !== "undefined") {
      const params = {
        screenSet: this.langCodeForScreenSet == "us" && this.isProspect == false ? "RegistrationLogin_US" : "RegistrationLogin",
        // startScreen: "gigya-register-screen", gigya-forgot-password-screen
        startScreen: "gigya-reset-password-screen",
        lang: this.langCode,
        containerID: "gigyaContainer",
        onError: this.errorHandler,
        onBeforeSubmit: this.formCheck,
        //onSubmit: this.formSubmit,
        onAfterSubmit: this.afterFormSubmit
        //onBeforeScreenLoad: this.beforeScreenLoad,
        // onAfterScreenLoad: this.afterScreenLoad,
      };
      gigya.accounts.showScreenSet(params);
    }
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  errorHandler(eventObj) {
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  formCheck(eventObj) {
  }
  afterFormSubmit(eventObj) {
    if (eventObj.screen == "gigya-profile-update-screen") {
      this.addUpdateUser(eventObj);
    }
  }
  addUpdateUser(eventObj) {
    this.userDetails = new GigyaUserRegisInfo();
    this.userDetails.Title = eventObj.data.prefix;
    this.userDetails.FirstName = eventObj.profile.firstName;
    this.userDetails.LastName = eventObj.profile.lastName;
    this.userDetails.Suffix = eventObj.data.suffix;
    this.userDetails.GigyaUID = eventObj.response.UID;
    this.userDetails.Email = eventObj.profile.email;
    this.userDetails.UserTypeId = EnmUserType.DVM;
    if (this.userDetails.GigyaUID != void 0) {
      this.commonService.addUpdateGigyaUser(this.userDetails).subscribe({
        next: () => {
          this.showRegisterMsg("User profile updated successfully.");
        },
        error: () => {
          this.showRegisterMsg("User profile updated successfully");
        }
      });
    }
  }
  showRegisterMsg(msg) {
    this.confirmationDialogService.confirm("", msg, "OK", "", "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.router.navigateByUrl("/login");
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  static {
    this.\u0275fac = function GigyaResetComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GigyaResetComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GigyaResetComponent, selectors: [["app-gigya-reset"]], decls: 2, vars: 0, consts: [["id", "gigyaContainer"], ["id", "clk", "hidden", "", 3, "click"]], template: function GigyaResetComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "div", 0);
        \u0275\u0275elementStart(1, "a", 1);
        \u0275\u0275listener("click", function GigyaResetComponent_Template_a_click_1_listener() {
          return ctx.loadWidget();
        });
        \u0275\u0275elementEnd();
      }
    } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GigyaResetComponent, { className: "GigyaResetComponent", filePath: "src\\app\\components\\gigya-managements\\gigya-reset\\gigya-reset.component.ts", lineNumber: 16 });
})();

// src/app/components/gigya-managements/gigya-user-profile/gigya-user-profile.component.ts
var thisObj;
var GigyaUserProfileComponent = class _GigyaUserProfileComponent {
  constructor(commonService, labelService, headerService, confirmationDialogService, scriptLoader, renderer) {
    this.commonService = commonService;
    this.labelService = labelService;
    this.headerService = headerService;
    this.confirmationDialogService = confirmationDialogService;
    this.scriptLoader = scriptLoader;
    this.renderer = renderer;
    this.apiKey = localStorage.APIKey != void 0 ? localStorage.APIKey : "";
    this.langCode = localStorage.langCode != void 0 ? localStorage.langCode : "";
    this.langCodeForScreenSet = localStorage.langCode != void 0 ? localStorage.langCode.split("-")[0].toLowerCase() : "";
    this.params = {
      screenSet: this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin",
      // startScreen: "gigya-forgot-password-screen"
      // startScreen: "gigya-profile-screen",
      startScreen: "gigya-profile-update-screen",
      containerID: "gigyaContainer",
      lang: this.langCode,
      onError: this.errorHandler,
      onBeforeSubmit: this.formCheck,
      //onSubmit: this.formSubmit,
      onAfterSubmit: this.afterFormSubmit
    };
    this.paramsClinicAdmin = {
      screenSet: "RegistrationLogin_US",
      // startScreen: "gigya-forgot-password-screen"
      //startScreen: "gigya-profile-update-screen",
      startScreen: "gigya-profile-admin-update-screen",
      containerID: "gigyaContainer",
      onError: this.errorHandler,
      onBeforeSubmit: this.formCheck,
      //onSubmit: this.formSubmit,
      onAfterSubmit: this.afterFormSubmit
    };
    thisObj = this;
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindLoginLabel();
    });
  }
  ngOnInit() {
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindLoginLabel();
    }
    const scriptElement = this.scriptLoader.loadJsScript(this.renderer, "https://cdns.gigya.com/js/gigya.js?apikey=" + this.apiKey + "&lang=" + this.langCode);
    scriptElement.onload = () => {
      this.loadWidget();
    };
    scriptElement.onerror = () => {
      console.log("Could not load the Google API Script!");
    };
  }
  loadWidget() {
    if (typeof gigya !== "undefined") {
      gigya.accounts.showScreenSet(this.params);
    }
  }
  errorHandler(eventObj) {
    if (thisObj.screen != "gigya-login-screen")
      thisObj.showMsg(eventObj.errorMessage);
  }
  formCheck(eventObj) {
    thisObj.screen = eventObj.screen;
    if (thisObj.screen == "gigya-profile-update-screen" || thisObj.screen == "gigya-profile-admin-update-screen") {
      thisObj.userDetails = new GigyaUserRegisInfo();
      if (eventObj.formData["profile.phones.number"] != void 0)
        thisObj.userDetails.PhoneNo = eventObj.formData["profile.phones.number"];
      if (eventObj.formData["profile.address"] != void 0)
        thisObj.userDetails.AddressLine1 = eventObj.formData["profile.address"];
      thisObj.userDetails.CountryId = thisObj.labelService.userCountryId;
      thisObj.userDetails.LanguageId = thisObj.labelService.selectedLanguage;
    } else {
      thisObj.userDetails = new GigyaUserRegisInfo();
    }
  }
  afterFormSubmit(eventObj) {
    if (eventObj.screen == "gigya-profile-update-screen" || eventObj.screen == "gigya-profile-admin-update-screen") {
      thisObj.addUpdateUser(eventObj);
    }
  }
  addUpdateUser(eventObj) {
    this.userDetails.Title = eventObj.data.prefix;
    this.userDetails.FirstName = eventObj.profile.firstName;
    this.userDetails.LastName = eventObj.profile.lastName;
    this.userDetails.Suffix = eventObj.data.suffix;
    this.userDetails.BusinessName = eventObj.data.businessName;
    this.userDetails.AddressLine2 = eventObj.data.address_2;
    this.userDetails.City = eventObj.profile.city;
    this.userDetails.State = eventObj.data.province;
    this.userDetails.ZipCode = eventObj.profile.zip;
    this.userDetails.GigyaUID = eventObj.response.UID;
    this.userDetails.Email = eventObj.profile.email;
    this.userDetails.UserTypeId = this.headerService.userTypeId;
    this.userDetails["userGuid"] = this.headerService.loginUserGuid;
    this.userDetails["businessGuid"] = this.headerService.selectedBusinessGuid;
    if (this.userDetails.GigyaUID != void 0) {
      this.commonService.addUpdateGigyaUser(this.userDetails).subscribe({
        next: () => {
          this.headerService.userName = this.userDetails.FirstName;
          localStorage.setItem("userName", this.headerService.userName);
          this.headerService.getBusinessListDetailsByUserId(this.headerService.selectedBusinessGuid);
          this.showRegisterMsg(this.labelService.dsLoginScreen.UserProfileUpdated);
        },
        error: () => {
          this.showRegisterMsg(this.labelService.dsLoginScreen.UserProfileUpdated + ".");
        }
      });
    }
  }
  showRegisterMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsLoginScreen.OK, "", "sm", true, false).then((confirmed) => {
      if (confirmed) {
      }
    }).catch(() => console.log("User dismissed the dialog (e.g., by using ESC, clicking the cross icon, or clicking outside the dialog)"));
  }
  static {
    this.\u0275fac = function GigyaUserProfileComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GigyaUserProfileComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(ScriptLoaderService), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GigyaUserProfileComponent, selectors: [["app-gigya-user-profile"]], decls: 12, vars: 0, consts: [[1, "wrapper"], ["id", "content", 1, "user-profile"], [1, "outer"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["expanded", "", "hideToggle", "true", "disabled", ""], ["id", "gigyaContainer", 1, "gigyaDiv"], ["id", "clk", "hidden", "", 3, "click"]], template: function GigyaUserProfileComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "div", 4)(8, "mat-accordion")(9, "mat-expansion-panel", 5);
        \u0275\u0275element(10, "div", 6);
        \u0275\u0275elementEnd()()()()()()();
        \u0275\u0275elementStart(11, "a", 7);
        \u0275\u0275listener("click", function GigyaUserProfileComponent_Template_a_click_11_listener() {
          return ctx.loadWidget();
        });
        \u0275\u0275elementEnd();
      }
    }, dependencies: [MatAccordion, MatExpansionPanel, HeaderComponent, SideMenuComponent], styles: ["\n\n.gigyaDiv[_ngcontent-%COMP%] {\n  height: calc(100vh - 125px);\n}\n@media screen and (max-width: 767px) {\n  .user-profile[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .outer[_ngcontent-%COMP%] {\n    margin-top: 15px;\n    padding: 0 20px;\n  }\n}\n/*# sourceMappingURL=gigya-user-profile.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GigyaUserProfileComponent, { className: "GigyaUserProfileComponent", filePath: "src\\app\\components\\gigya-managements\\gigya-user-profile\\gigya-user-profile.component.ts", lineNumber: 14 });
})();

// src/app/components/gigya-managements/gigya-change-password/gigya-change-password.component.ts
var thisObj2;
var GigyaChangePasswordComponent = class _GigyaChangePasswordComponent {
  constructor(headerService, scriptLoader, renderer) {
    this.headerService = headerService;
    this.scriptLoader = scriptLoader;
    this.renderer = renderer;
    this.apiKey = localStorage.APIKey != void 0 ? localStorage.APIKey : "";
    this.langCode = localStorage.langCode != void 0 ? localStorage.langCode : "US-EN";
    this.langCodeForScreenSet = localStorage.langCode != void 0 ? localStorage.langCode.split("-")[0].toLowerCase() : "";
    this.params = {
      screenSet: this.langCodeForScreenSet == "us" ? "RegistrationLogin_US" : "RegistrationLogin",
      lang: this.langCode,
      startScreen: "gigya-change-password",
      containerID: "gigyaContainer",
      onError: this.errorHandler
    };
    thisObj2 = this;
  }
  ngOnInit() {
    const scriptElement = this.scriptLoader.loadJsScript(this.renderer, "https://cdns.gigya.com/js/gigya.js?apikey=" + this.apiKey + "&lang=" + this.langCode.toLowerCase());
    scriptElement.onload = () => {
      this.loadWidget();
    };
    scriptElement.onerror = () => {
      console.log("Could not load the Google API Script!");
    };
  }
  loadWidget() {
    if (typeof gigya !== "undefined") {
      gigya.accounts.showScreenSet(this.params);
    }
  }
  errorHandler(eventObj) {
    thisObj2.showMsg(eventObj.errorMessage);
  }
  static {
    this.\u0275fac = function GigyaChangePasswordComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GigyaChangePasswordComponent)(\u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(ScriptLoaderService), \u0275\u0275directiveInject(Renderer2));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GigyaChangePasswordComponent, selectors: [["app-gigya-change-password"]], decls: 12, vars: 0, consts: [[1, "wrapper"], ["id", "content", 1, "changepass"], [1, "outer"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1", "pt-2"], ["expanded", "", "hideToggle", "true", "disabled", ""], ["id", "gigyaContainer"], ["id", "clk", "hidden", "", 3, "click"]], template: function GigyaChangePasswordComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 2)(6, "div", 3)(7, "div", 4)(8, "mat-accordion")(9, "mat-expansion-panel", 5);
        \u0275\u0275element(10, "div", 6);
        \u0275\u0275elementEnd()()()()()()();
        \u0275\u0275elementStart(11, "a", 7);
        \u0275\u0275listener("click", function GigyaChangePasswordComponent_Template_a_click_11_listener() {
          return ctx.loadWidget();
        });
        \u0275\u0275elementEnd();
      }
    }, dependencies: [MatAccordion, MatExpansionPanel, HeaderComponent, SideMenuComponent], styles: ["\n\n@media screen and (max-width: 767px) {\n  .changepass[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .outer[_ngcontent-%COMP%] {\n    margin-top: 15px;\n    padding: 0 20px;\n  }\n}\n/*# sourceMappingURL=gigya-change-password.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GigyaChangePasswordComponent, { className: "GigyaChangePasswordComponent", filePath: "src\\app\\components\\gigya-managements\\gigya-change-password\\gigya-change-password.component.ts", lineNumber: 12 });
})();

// src/app/components/ups/ups.component.ts
var UpsComponent = class _UpsComponent {
  constructor(router) {
    this.router = router;
  }
  ngOnInit() {
    document.forms["upsform"].submit();
  }
  static {
    this.\u0275fac = function UpsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _UpsComponent)(\u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _UpsComponent, selectors: [["app-ups"]], decls: 5, vars: 0, consts: [["formGroupDirective", "ngForm"], ["id", "upsForm", "method", "POST", "action", "https://row.ups.com/GuestAccess/Guest/Access", "id", "upsform", "autocomplete", "off", 1, "form-signin"], [1, "form-label-group", "mb-4"], ["appearance", "outline", 1, "w-100"], ["type", "hidden", "name", "Company", "value", "Wk5MYWJz"]], template: function UpsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "form", 1, 0)(2, "div", 2)(3, "mat-form-field", 3);
        \u0275\u0275element(4, "input", 4);
        \u0275\u0275elementEnd()()();
      }
    }, dependencies: [MatLegacyFormField, \u0275NgNoValidate, NgControlStatusGroup, NgForm] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(UpsComponent, { className: "UpsComponent", filePath: "src\\app\\components\\ups\\ups.component.ts", lineNumber: 8 });
})();

// src/app/components/zrl-verification/zrl-verification.component.ts
function ZrlVerificationComponent_div_3_div_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 17);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "a", 21);
    \u0275\u0275text(3, "www.zoetisdx.com");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.newAccount, " ");
    \u0275\u0275advance();
    \u0275\u0275property("href", ctx_r1.apiUrl, \u0275\u0275sanitizeUrl);
  }
}
function ZrlVerificationComponent_div_3_button_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 22);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_3_button_19_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.cancelError());
    });
    \u0275\u0275text(1, "Cancel");
    \u0275\u0275elementEnd();
  }
}
function ZrlVerificationComponent_div_3_button_20_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 23);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_3_button_20_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.zrlVerification());
    });
    \u0275\u0275text(1, "Continue");
    \u0275\u0275elementEnd();
  }
}
function ZrlVerificationComponent_div_3_button_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 23);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_3_button_21_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.loginUrl());
    });
    \u0275\u0275text(1, "Login");
    \u0275\u0275elementEnd();
  }
}
function ZrlVerificationComponent_div_3_button_22_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 23);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_3_button_22_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.okError());
    });
    \u0275\u0275text(1, "Ok");
    \u0275\u0275elementEnd();
  }
}
function ZrlVerificationComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 5)(1, "div", 6)(2, "div", 7)(3, "div", 8);
    \u0275\u0275element(4, "img", 9);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p", 10);
    \u0275\u0275text(6, "Please enter the email associated with your ZRL Portal account ");
    \u0275\u0275elementStart(7, "span")(8, "mat-icon", 11);
    \u0275\u0275text(9, "info");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 12)(11, "form", 13)(12, "mat-form-field", 14)(13, "input", 15);
    \u0275\u0275listener("keyup", function ZrlVerificationComponent_div_3_Template_input_keyup_13_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.noSpaces($event.target.value));
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(14, ZrlVerificationComponent_div_3_div_14_Template, 4, 2, "div", 16);
    \u0275\u0275elementStart(15, "div", 17);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "div", 18);
    \u0275\u0275text(18);
    \u0275\u0275elementEnd();
    \u0275\u0275template(19, ZrlVerificationComponent_div_3_button_19_Template, 2, 0, "button", 19)(20, ZrlVerificationComponent_div_3_button_20_Template, 2, 0, "button", 20)(21, ZrlVerificationComponent_div_3_button_21_Template, 2, 0, "button", 20)(22, ZrlVerificationComponent_div_3_button_22_Template, 2, 0, "button", 20);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(11);
    \u0275\u0275property("formGroup", ctx_r1.zrlForm);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r1.newAccount);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.error, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.msg, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.cerr);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.Conerr);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.Lerr);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.err);
  }
}
function ZrlVerificationComponent_div_4_mat_option_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 29);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const title_r8 = ctx.$implicit;
    \u0275\u0275property("value", title_r8.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(title_r8.Prefix);
  }
}
function ZrlVerificationComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "form", 24)(2, "div", 25)(3, "h5");
    \u0275\u0275text(4, "Profile");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "div", 26)(6, "mat-form-field", 27)(7, "mat-label");
    \u0275\u0275text(8, "Title");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "mat-select", 28)(10, "mat-option", 29);
    \u0275\u0275text(11, " Choose ");
    \u0275\u0275elementEnd();
    \u0275\u0275template(12, ZrlVerificationComponent_div_4_mat_option_12_Template, 2, 2, "mat-option", 30);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "mat-form-field", 27)(14, "mat-label");
    \u0275\u0275text(15, "First Name*");
    \u0275\u0275elementEnd();
    \u0275\u0275element(16, "input", 31);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "mat-form-field", 27)(18, "mat-label");
    \u0275\u0275text(19, "Last Name*");
    \u0275\u0275elementEnd();
    \u0275\u0275element(20, "input", 32);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "mat-form-field", 27)(22, "mat-label");
    \u0275\u0275text(23, "Suffix");
    \u0275\u0275elementEnd();
    \u0275\u0275element(24, "input", 33);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "mat-form-field", 27)(26, "mat-label");
    \u0275\u0275text(27, "Email");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "input", 34);
    \u0275\u0275twoWayListener("ngModelChange", function ZrlVerificationComponent_div_4_Template_input_ngModelChange_28_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.email, $event) || (ctx_r1.email = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(29, "mat-form-field", 27)(30, "mat-label");
    \u0275\u0275text(31, "Password*");
    \u0275\u0275elementEnd();
    \u0275\u0275element(32, "input", 35);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "mat-form-field", 27)(34, "mat-label");
    \u0275\u0275text(35, "Confirm Password*");
    \u0275\u0275elementEnd();
    \u0275\u0275element(36, "input", 36);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(37, "div", 37)(38, "button", 38);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_4_Template_button_click_38_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.cancelBack());
    });
    \u0275\u0275text(39, "Cancel");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "button", 39);
    \u0275\u0275listener("click", function ZrlVerificationComponent_div_4_Template_button_click_40_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.UpdateUserProfile());
    });
    \u0275\u0275text(41, "Complete Profile");
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("formGroup", ctx_r1.profileForm);
    \u0275\u0275advance(11);
    \u0275\u0275property("ngForOf", ctx_r1.dsTitle);
    \u0275\u0275advance(16);
    \u0275\u0275twoWayProperty("ngModel", ctx_r1.email);
  }
}
var ZrlVerificationComponent = class _ZrlVerificationComponent {
  constructor(fb, userService, labelService, router, EncrDecr, commonService, confirmationDialogService) {
    this.fb = fb;
    this.userService = userService;
    this.labelService = labelService;
    this.router = router;
    this.EncrDecr = EncrDecr;
    this.commonService = commonService;
    this.confirmationDialogService = confirmationDialogService;
    this.zrlEmail = true;
    this.isProfile = false;
    this.msg = "";
    this.error = "";
    this.err = false;
    this.cerr = false;
    this.Lerr = false;
    this.Conerr = true;
    this.dsTitle = [];
    this.dsSuffix = [];
    this.createForm();
    this.createProfileForm();
    this.apiUrl = ("https:" == document.location.protocol ? "https://" : "http://") + location.host + "/#/www.zoetisdx.com/" + this.labelService.selectedLanguage;
  }
  ngOnInit() {
    this.commonService.getUserDDLDetails(this.labelService.selectedLanguage, this.labelService.userCountryId, null).subscribe((data) => {
      this.dsTitle = data.ResponseData.TitleDetails;
      this.dsSuffix = data.ResponseData.SuffixDetails;
    });
  }
  createForm() {
    this.zrlForm = this.fb.group({
      email: ["", Validators.email]
    });
  }
  createProfileForm() {
    this.profileForm = this.fb.group({
      Title: [""],
      FirstName: ["", Validators.required],
      LastName: ["", Validators.required],
      Suffix: [""],
      Email: [this.email],
      Signal: ["", Validators.required],
      ConfirmSignal: ["", Validators.required],
      UserGuid: [this.userGuid]
    });
  }
  noSpaces(val) {
    if (val.match(/\s/g)) {
      this.zrlForm.controls["User"].setValue(val.replace(/\s/g, ""));
    }
  }
  zrlVerification() {
    this.email = this.zrlForm.controls["email"].value;
    this.userService.zrl = this.zrlForm.value;
    if (this.zrlForm.status == "VALID") {
      this.profileForm.patchValue({ Email: this.zrlForm.controls["email"].value });
      this.userService.verifyZrl().subscribe((data) => {
        if (data.ResponseData == "userprofile") {
          this.zrlEmail = false;
          this.isProfile = true;
        } else if (data.ResponseData == "userlogin") {
          this.Conerr = false;
          this.cerr = true;
          this.Lerr = true;
          this.error = "A ZoetisDx account already exists with this email address.Please log in with your existing ZoetisDx credentials";
        } else if (data.ResponseData == "notfound") {
          this.Conerr = false;
          this.cerr = false;
          this.err = true;
          this.newAccount = "This service is available for email addresses used in the ZRL Portal. You can sign up for a new ZoetisDx account at";
          this.msg = "";
        } else if (data.ResponseData.length > 20) {
          this.userGuid = data.ResponseData;
          this.zrlEmail = false;
          this.isProfile = true;
        }
      });
    } else {
      if (!this.zrlForm.controls["email"].valid && this.zrlForm.controls["email"].value != null && this.zrlForm.controls["email"].value != "") {
        this.msg = this.labelService.dsLoginScreen.Pleaseentervalidemail;
      } else {
        this.msg = this.labelService.dsLoginScreen.Pleaseenterallrequiredfields;
      }
    }
  }
  loginUrl() {
    this.router.navigate(["/login"]);
  }
  cancelError() {
    this.error = "";
    this.msg = "";
    this.cerr = false;
    this.Lerr = false;
    this.Conerr = true;
    this.zrlForm.reset();
  }
  okError() {
    this.err = false;
    this.Conerr = true;
    this.error = "";
    this.newAccount = "";
    this.zrlForm.reset();
  }
  cancelBack() {
    this.isProfile = false;
    this.zrlEmail = true;
    this.msg = "";
    this.zrlForm.reset();
  }
  UpdateUserProfile() {
    this.signal = this.profileForm.controls["Signal"].value;
    this.profileForm.patchValue({ UserGuid: this.userGuid });
    if (this.profileForm.status == "VALID") {
      if (this.signal === this.profileForm.controls["ConfirmSignal"].value) {
        this.userService.UpdatezrlUserProfile(this.profileForm.value).subscribe(() => {
          this.confirmationDialogService.confirm("", "Profile Updated Successfully", this.labelService.dsSignUpScreen.OK, this.labelService.dsSignUpScreen.Cancel, "sm", true, false).then((confirmed) => {
            if (confirmed) {
              this.router.navigateByUrl("/login");
              this.profileForm.reset();
            }
          });
        });
      }
    }
  }
  static {
    this.\u0275fac = function ZrlVerificationComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ZrlVerificationComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(ConfirmationDialogService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ZrlVerificationComponent, selectors: [["app-zrl-verification"]], decls: 5, vars: 2, consts: [[1, "login-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], ["class", "col-sm-5", 4, "ngIf"], [4, "ngIf"], [1, "col-sm-5"], [1, "card", "card-login", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "logo-login"], [1, "textpart"], ["matTooltip", "The email address associated with your ZRL Portal account can be found logging into ZRL Portal and clicking on the profile icon.\n                                                                                                      The email address associated to your account will be displayed at the top of the screen.", 1, "maticons"], [1, "inputbox"], [1, "example-form", 3, "formGroup"], ["appearance", "outline", "floatLabel", "always", 1, "loginPart"], ["type", "text", "matInput", "", "formControlName", "email", "placeholder", "Email*", "required", "", 3, "keyup"], ["class", "text-center mb-4 errpart", 4, "ngIf"], [1, "text-center", "mb-4", "errpart"], [1, "text-center", "mb-4", "errormsg", "errpartone"], ["mat-button", "", "color", "primary", "class", "Btns cncl", 3, "click", 4, "ngIf"], ["mat-button", "", "color", "primary", "class", "Btns", 3, "click", 4, "ngIf"], ["target", "_blank", 3, "href"], ["mat-button", "", "color", "primary", 1, "Btns", "cncl", 3, "click"], ["mat-button", "", "color", "primary", 1, "Btns", 3, "click"], [3, "formGroup"], [1, "heading"], [1, "profilepart", "d-flex", "justify-content-start", "flex-wrap"], ["appearance", "outline", "floatLabel", "always", 1, "inpt", "mr-3"], ["placeholder", "Choose", "formControlName", "Title"], [3, "value"], [3, "value", 4, "ngFor", "ngForOf"], ["type", "text", "placeholder", "Enter First Name", "matInput", "", "formControlName", "FirstName"], ["type", "text", "placeholder", "Enter Last Name", "matInput", "", "formControlName", "LastName"], ["type", "text", "matInput", "", "formControlName", "Suffix", "placeholder", "Enter Suffix"], ["type", "text", "matInput", "", "formControlName", "Email", "required", "", "readonly", "", 3, "ngModelChange", "ngModel"], ["type", "password", "placeholder", "Enter Password", "matInput", "", "formControlName", "Signal"], ["type", "password", "matInput", "", "placeholder", "Confirm Password", "formControlName", "ConfirmSignal"], [1, "profileBtn"], [1, "cancelBtn", "mr-3", 3, "click"], [1, "submitBtn", 3, "click"]], template: function ZrlVerificationComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        \u0275\u0275template(3, ZrlVerificationComponent_div_3_Template, 23, 8, "div", 3);
        \u0275\u0275elementEnd();
        \u0275\u0275template(4, ZrlVerificationComponent_div_4_Template, 42, 3, "div", 4);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275property("ngIf", ctx.zrlEmail);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isProfile);
      }
    }, dependencies: [NgForOf, NgIf, MatLegacyFormField, MatLegacyLabel, MatLegacyInput, MatLegacyButton, MatIcon, MatLegacySelect, MatLegacyOption, MatLegacyTooltip, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, FormGroupDirective, FormControlName], styles: ['\n\n.login-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.lang[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 12px;\n  right: 16px;\n}\n.card-login[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 85%;\n  margin-top: 23px;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 100%;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 30% !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 12px;\n  font-weight: bold;\n}\n.icon[_ngcontent-%COMP%] {\n  position: relative;\n  top: -7px;\n  width: 11px;\n}\n.login-outer[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\n  padding-bottom: 4px;\n}\n.example-form[_ngcontent-%COMP%] {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n.example-full-width[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.inputBtn[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 0.7rem;\n  background: #ffffff;\n  font-weight: bold;\n}\n.Btns[_ngcontent-%COMP%] {\n  background: #ff6400;\n  color: #ffffff;\n  font-size: 12px;\n  font-weight: bold;\n  width: 80%;\n  margin: 0 auto;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\n  width: 80%;\n  margin: 0 auto;\n}\n.textpart[_ngcontent-%COMP%] {\n  text-align: center;\n  font-weight: bold;\n  font-size: 0.9rem;\n  padding: 1rem 2.5rem 0 2.5rem;\n  width: 80%;\n  margin: 0 auto;\n  margin-bottom: 1rem;\n}\n.cncl[_ngcontent-%COMP%] {\n  background: #fcfdfd;\n  color: #282626;\n  font-size: 12px;\n  font-weight: bold;\n  width: 80%;\n  margin: 0 auto;\n  border: 1px solid #ccc;\n  margin-bottom: 1.5rem;\n}\n.errpart[_ngcontent-%COMP%] {\n  color: black;\n  font-size: 13px;\n  font-weight: bold;\n  width: 90%;\n  margin: 0 auto;\n}\n.errpartone[_ngcontent-%COMP%] {\n  color: red;\n  font-size: 13px;\n  font-weight: bold;\n  width: 90%;\n  margin: 0 auto;\n}\n.inputbox[_ngcontent-%COMP%] {\n  text-align: center;\n}\n.inputbox[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\n  width: 80%;\n  margin: 0 auto;\n}\n.textpart[_ngcontent-%COMP%]   .maticons[_ngcontent-%COMP%] {\n  font-size: 16px;\n  color: #3780c5;\n}\n@media (max-width: 1025px) {\n  .card-login[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-login[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n.loginPart[_ngcontent-%COMP%] {\n  width: 100%;\n}\n  .mat-tooltip {\n  font-size: 13px;\n  white-space: pre-wrap;\n  color: gray !important;\n  background-color: #fff;\n  max-width: 400px !important;\n  margin-left: 200px !important;\n  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2) !important;\n  font-weight: bold;\n}\n.profilepart[_ngcontent-%COMP%]   .inpt[_ngcontent-%COMP%] {\n  width: 23%;\n  border: none;\n  margin-bottom: 1.5rem;\n}\n.profilepart[_ngcontent-%COMP%] {\n  background: #f1eded9e;\n  border-radius: 45px;\n  padding: 4rem 1rem 4rem 4rem;\n}\n.profilepart[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  padding: 0.3rem;\n}\n.profileBtn[_ngcontent-%COMP%] {\n  width: 100%;\n  text-align: center;\n}\n.profileBtn[_ngcontent-%COMP%]   .cancelBtn[_ngcontent-%COMP%] {\n  width: 23%;\n  margin-left: -38px;\n  color: grey;\n  border: 1px solid grey;\n}\n.profileBtn[_ngcontent-%COMP%]   .submitBtn[_ngcontent-%COMP%] {\n  width: 23%;\n  background-color: #fd6400;\n  color: #fff;\n  border: none;\n}\n.heading[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  text-align: center;\n  padding-bottom: 1rem;\n}\n.mat-select[_ngcontent-%COMP%] {\n  padding: 0.3rem;\n}\n/*# sourceMappingURL=zrl-verification.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ZrlVerificationComponent, { className: "ZrlVerificationComponent", filePath: "src\\app\\components\\zrl-verification\\zrl-verification.component.ts", lineNumber: 11 });
})();

// src/app/components/zdx-redirection/zdx-redirection.component.ts
var ZdxRedirectionComponent = class _ZdxRedirectionComponent {
  constructor(router, commonService, headerService, dataService, sidemenuService, location2, confirmationDialogService, labelService) {
    this.router = router;
    this.commonService = commonService;
    this.headerService = headerService;
    this.dataService = dataService;
    this.sidemenuService = sidemenuService;
    this.location = location2;
    this.confirmationDialogService = confirmationDialogService;
    this.labelService = labelService;
    this.isBkoUrl = false;
    if (this.router.url.indexOf("?res=") != -1) {
      const params = this.router.url.trim().split("?res=");
      if (params[1] == "null") {
        this.sidemenuService.logOut();
        this.router.navigate(["/login"]);
        return;
      }
      if (params[1] != void 0 && params[1] != null && params[1] != "")
        this.velidateAndRedirect(params[1]);
    } else {
      console.log("Incorrect res paramerter.");
      this.failedAPIRedirection();
    }
  }
  velidateAndRedirect(guId) {
    localStorage.removeItem("locationBackFromInfo");
    this.commonService.getKeyData(guId).subscribe((reponse) => {
      if (reponse.StatusCode == 200) {
        const guidVal = this.commonService.decrypt(reponse.ResponseData);
        localStorage.setItem("rediretionDetails", guidVal);
        localStorage.removeItem("authDetails");
        this.dataService.appState.consultationBackUrl = guidVal.split("backURL=")[1] != void 0 ? guidVal.split("backURL=")[1].split("&")[0] : "";
        const redirectionUrl = (guidVal.split("redirect=")[1] != void 0 ? guidVal.split("redirect=")[1].split("&")[0] : "/internal").replace("#", "");
        const accessToken = guidVal.split("refresh_token=")[1] != void 0 ? guidVal.split("refresh_token=")[1].split("&")[0] : "";
        let businessGuid = guidVal.split("businessGuid=")[1] != void 0 ? guidVal.split("businessGuid=")[1].split("&")[0] : "";
        const userGuid = guidVal.split("UserGuid=")[1] != void 0 ? guidVal.split("UserGuid=")[1].split("&")[0] : null;
        const AppointmentGuid = guidVal.split("AppointmentGuid=")[1] != void 0 ? guidVal.split("AppointmentGuid=")[1].split("&")[0] : null;
        const ReportDisabled = guidVal.split("ReportDisabled=")[1] != void 0 ? guidVal.split("ReportDisabled=")[1].split("&")[0] : null;
        const isInternalUser = guidVal.split("isInternal=")[1] != void 0 ? guidVal.split("isInternal=")[1].split("&")[0] : false;
        const token = guidVal.split("token=")[1] != void 0 ? guidVal.split("token=")[1].split("&")[0] : null;
        const UIGuid = guidVal.split("deviceId=")[1] != void 0 ? guidVal.split("deviceId=")[1].split("&")[0] : null;
        localStorage.setItem("UIGuid", UIGuid);
        this.isBkoUrl = guidVal.split("isNewInternal=")[1] != void 0 ? JSON.parse(guidVal.split("isNewInternal=")[1].split("&")[0]) : false;
        const isViewClinic = guidVal.split("isViewClinic=")[1] != void 0 ? guidVal.split("isViewClinic=")[1].split("&")[0] : false;
        const bkoUrlRedirection = (guidVal.split("backBkoUrl=")[1] != void 0 ? guidVal.split("backBkoUrl=")[1].split("&")[0] : this.checkBackTOBko()).replace("#", "");
        localStorage.setItem("bkoUrlRedirection", bkoUrlRedirection);
        const bkoBussinessInfo = guidVal.split("bkoBussinessInfo=")[1] != void 0 ? guidVal.split("bkoBussinessInfo=")[1] : this.checkBckBus();
        localStorage.setItem("bckBusinessInfo", bkoBussinessInfo);
        const bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo")) ? JSON.parse(localStorage.getItem("bckBusinessInfo")) : null;
        const isReflab = guidVal.split("IsLinkedRefLabClinic=")[1] != void 0 ? guidVal.split("IsLinkedRefLabClinic=")[1].split("&")[0] : false;
        this.dataService.appData["AppointmentGuid"] = AppointmentGuid;
        this.dataService.appData["ReportDisabled"] = ReportDisabled;
        this.dataService.data.next(this.dataService.appData);
        localStorage.setItem("AppointmentGuid", AppointmentGuid);
        localStorage.setItem("ReportDisabled", ReportDisabled);
        const checkConsulation = !(isInternalUser || isViewClinic) && redirectionUrl != "/refLab/dos" ? true : false;
        if (businessGuid == "")
          businessGuid = guidVal.split("businessguid=")[1] != void 0 ? guidVal.split("businessguid=")[1].split("&")[0] : "";
        if (accessToken != null && accessToken != "") {
          this.userAuth = new UserAuth();
          this.userAuth.refresh_token = accessToken;
          this.userAuth.LanguageId = guidVal.split("languageId=")[1] != void 0 ? parseInt(guidVal.split("languageId=")[1].split("&")[0]) : EnmLanguage.English;
          this.userAuth.BOAccessUserGuid = bckBusinessInfo ? bckBusinessInfo.UserGuid : null;
          if (isInternalUser || isViewClinic || checkConsulation) {
            console.log("testing0");
            this.userAuth.BOAccessUserGuid = userGuid;
          }
          this.userAuth.access_token = token;
          this.userAuth.TokenSource = "zdx";
          this.commonService.refreshToken(this.userAuth).subscribe((data) => {
            this.dataService.appData.authDetails = data;
            this.dataService.data.next(this.dataService.appData);
            if (businessGuid != "")
              data.BusinessGuid = businessGuid;
            if (checkConsulation && data.IsConsultantUser)
              data.UserGuid = userGuid;
            this.headerService.setAuthSession(data);
            const authData = JSON.parse(localStorage.authDetails);
            if (bckBusinessInfo) {
              this.headerService.loginUserGuid = bckBusinessInfo.UserGuid;
              this.dataService.appData.authDetails["BusinessGuid"] = bckBusinessInfo.BusinessGuid;
              this.dataService.appData.authDetails["UserGuid"] = bckBusinessInfo.UserGuid;
              this.dataService.appData.authDetails["IsLinkedRefLabClinic"] = bckBusinessInfo.IsLinkedRefLabClinic ? true : false;
              this.dataService.pageState.dashboard.requestParams = null;
              this.dataService.appData.authDetails["IsReflabActive"] = bckBusinessInfo.IsLinkedRefLabClinic ? true : false;
              authData.BusinessGuid = bckBusinessInfo.BusinessGuid;
              authData.UserGuid = bckBusinessInfo.UserGuid;
              localStorage.setItem("authDetails", JSON.stringify(authData));
              this.dataService.data.next(this.dataService.appData);
              this.headerService.businessGuid = bckBusinessInfo.BusinessGuid;
              this.headerService.selectedBusinessGuid = bckBusinessInfo.BusinessGuid;
              localStorage.setItem("businessGuid", bckBusinessInfo.BusinessGuid);
              localStorage["businessGuid"] = bckBusinessInfo.BusinessGuid;
              this.getLabelDetails(1);
              if (redirectionUrl.includes("/result-details") != 1) {
                this.sidemenuService.getSideMenu(this.headerService.userTypeId, data.LanguageId, data.BCountryId, false);
              } else {
                localStorage.setItem("bkolanding", "3");
                this.getPatientData(JSON.parse(bkoBussinessInfo));
              }
            }
            if (checkConsulation && data.IsConsultantUser) {
              this.headerService.loginUserGuid = userGuid;
              this.dataService.appData.authDetails["UserGuid"] = userGuid;
              authData.UserGuid = userGuid;
            }
            if (data.UserTypeId == EnmUserType.Consult || data.UserTypeId == EnmUserType.ConsultAdmin) {
              localStorage.setItem("languageId", data.LanguageId);
              localStorage.setItem("userCountryId", data.CountryId);
              this.labelService.selectedLanguage = data.LanguageId != void 0 && data.LanguageId != null && data.LanguageId != "" && data.LanguageId != "0" ? parseInt(data.LanguageId) : EnmLanguage.English;
              this.labelService.userCountryId = data.CountryId != void 0 && data.CountryId != null && data.CountryId != "" ? parseInt(data.CountryId) : EnmCountry.UnitedStates;
              this.sidemenuService.getSideMenu(this.headerService.userTypeId, data.LanguageId, data.CountryId, false);
              this.filterDDL();
              this.getLabelDetails(this.labelService.selectedLanguage);
            }
            if (redirectionUrl.indexOf("patient/list") !== -1) {
              this.dataService.appData.authDetails["IsLinkedRefLabClinic"] = isReflab ? true : false;
              this.dataService.appData.authDetails["IsReflabActive"] = isReflab ? true : false;
              this.dataService.data.next(this.dataService.appData);
              localStorage.setItem("locationBackFromInfo", "1");
            }
            if (redirectionUrl.includes("/result-details") != 1)
              this.router.navigateByUrl(redirectionUrl);
            this.dataService.appState.consultantLandingUrl = redirectionUrl;
            this.dataService.state.next(this.dataService.appState);
          }, (error) => {
            console.log(JSON.stringify("zcs to zdx redirection error:", error));
            this.isBkoUrl ? this.sidemenuService.logOut("internal") : this.sidemenuService.logOut();
          });
        }
      } else {
        this.failedAPIRedirection();
      }
    }, (error) => {
      console.log(JSON.stringify("zcs to zdx redirection error111:", error));
      this.failedAPIRedirection();
    });
  }
  failedAPIRedirection() {
    if (!localStorage?.authDetails)
      return window.location.href = environment.ZdxInternalUrl;
    localStorage?.authDetails["BackOfficeFlag"] || localStorage?.authDetails["IsConsultantUser"] ? this.sidemenuService.logOut("internal") : this.sidemenuService.logOut();
  }
  checkBckBus() {
    if (localStorage.bckBusinessInfo) {
      return localStorage.getItem("bckBusinessInfo");
    } else {
      return null;
    }
  }
  checkBackTOBko() {
    if (localStorage.bckBusinessInfo) {
      return localStorage.getItem("bkoUrlRedirection");
    } else {
      return "/internal";
    }
  }
  getPatientData(res) {
    const reqbody = {
      AnalysisSourceId: 0,
      AnalysisStatusId: 0,
      AnalysisTypeId: 0,
      AnalysisTypeName: null,
      Analyzer: null,
      Breed: "",
      BusinessGuid: res.BusinessGuid,
      FromDate: null,
      GenderId: 0,
      IsApplyFilter: true,
      IsBackOfficeUser: true,
      IsExactFilter: true,
      LanguageId: 1,
      OwnerName: null,
      PageNo: 1,
      PageSize: 60,
      PatientId: res.patientId,
      PatientName: null,
      PhysicianName: null,
      SearchText: null,
      SpeciesId: 0,
      SpeciesName: null,
      ToDate: null,
      UserGuid: res.UserGuid,
      isFollowedPatient: false,
      isSortByLastResultDate: true,
      ZDXPatientInfoId: res.zdxPatientId ? res.zdxPatientId : 0
    };
    this.commonService.getPatientResultList(reqbody).subscribe((resp) => {
      if (resp.ResponseData.DashboardPatientList != null) {
        const element = resp.ResponseData.DashboardPatientList[0];
        this.dataService.appState.selectedResult.element = element;
        const patientHistoryList = resp.ResponseData.DashboardPatientList[0].Details;
        let subEle;
        if (res.SourceType == "InClinic") {
          subEle = patientHistoryList.find((x) => x.AnalysisTypeName == res.AnalysisTypeName && x.DateReceived == res.DateReceived);
        } else {
          subEle = patientHistoryList.find((x) => x.AnalysisTypeId == res.AnalysisTypeId);
        }
        if (subEle) {
          this.dataService.appState.selectedResult.subElement = subEle;
          this.dataService.state.next(this.dataService.appState);
          this.sidemenuService.getSideMenu(this.headerService.userTypeId, 1, 40, false);
          this.router.navigateByUrl("/result-details");
        } else {
          this.openDialog();
        }
      } else {
        this.openDialog();
      }
    });
  }
  openDialog() {
    this.confirmationDialogService.BO_Confirm("", "No Results Found", "OK", "Cancel", "sm", true, false).then((confirmed) => {
      if (confirmed) {
        this.headerService.EndBkoImpersonation();
      }
    });
  }
  filterDDL() {
    const langId = this.dataService.appData.authDetails["LanguageId"];
    if (langId) {
      this.commonService.getFilterDDLDetails(langId).subscribe((res) => {
        this.dataService.appData.filterDropDownList = res.ResponseData;
        this.dataService.data.next(this.dataService.appData);
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    }
  }
  getLabelDetails(selectedLang) {
    this.labelService.getLabelDetails(null, selectedLang, true).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.dataService.appData.labels = this.labelService.dsLabelData;
    });
  }
  static {
    this.\u0275fac = function ZdxRedirectionComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ZdxRedirectionComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(LocationStrategy), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(LabelService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ZdxRedirectionComponent, selectors: [["app-zdx-redirection"]], decls: 2, vars: 0, template: function ZdxRedirectionComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "p");
        \u0275\u0275text(1, "zdx redirection inprogress...!");
        \u0275\u0275elementEnd();
      }
    } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ZdxRedirectionComponent, { className: "ZdxRedirectionComponent", filePath: "src\\app\\components\\zdx-redirection\\zdx-redirection.component.ts", lineNumber: 14 });
})();

// src/app/components/search-results/search-results.component.ts
function SearchResultsComponent_p_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "p", 22)(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 23);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "span", 24);
    \u0275\u0275listener("click", function SearchResultsComponent_p_11_Template_span_click_5_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.clearSearch());
    });
    \u0275\u0275text(6, "X");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.resultlabel, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.filter.SearchText, " ");
  }
}
function SearchResultsComponent_mat_header_cell_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.PatientID, " ");
  }
}
function SearchResultsComponent_mat_cell_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 27);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.PatientID, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r3.PatientId);
  }
}
function SearchResultsComponent_mat_header_cell_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.PatientName, " ");
  }
}
function SearchResultsComponent_mat_cell_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 28);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.PatientName, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r4.PatientName);
  }
}
function SearchResultsComponent_mat_header_cell_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.OwnerName, " ");
  }
}
function SearchResultsComponent_mat_cell_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 29);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.OwnerName, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r5.OwnerName, "");
  }
}
function SearchResultsComponent_mat_header_cell_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Species, " ");
  }
}
function SearchResultsComponent_mat_cell_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 29);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.Species, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r6.SpeciesName);
  }
}
function SearchResultsComponent_mat_header_cell_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Breed, " ");
  }
}
function SearchResultsComponent_mat_cell_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 29);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.Breed, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r7.BreedName);
  }
}
function SearchResultsComponent_mat_header_cell_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Sex, " ");
  }
}
function SearchResultsComponent_mat_cell_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 29);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.Sex, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r8.GenderName);
  }
}
function SearchResultsComponent_mat_header_cell_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-header-cell", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.DateTime, " ");
  }
}
function SearchResultsComponent_mat_cell_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-cell")(1, "span", 26);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 29);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", ctx_r1.label.DateTime, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r9.DateReceivedStr);
  }
}
function SearchResultsComponent_mat_header_row_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "mat-header-row");
  }
}
function SearchResultsComponent_mat_row_36_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-row", 30);
    \u0275\u0275listener("click", function SearchResultsComponent_mat_row_36_Template_mat_row_click_0_listener() {
      const row_r11 = \u0275\u0275restoreView(_r10).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.OnRowClick(row_r11));
    });
    \u0275\u0275elementEnd();
  }
}
function SearchResultsComponent_div_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 31)(1, "p");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.FirstWordCapital(ctx_r1.label.NoRecordsFound));
  }
}
var SearchResultsComponent = class _SearchResultsComponent {
  constructor(router, activatedRoute, commonService, sidemenuService, headerService, patientService, labelService, sidefilterService, dataService, EncrDecr, title, alertService) {
    this.router = router;
    this.activatedRoute = activatedRoute;
    this.commonService = commonService;
    this.sidemenuService = sidemenuService;
    this.headerService = headerService;
    this.patientService = patientService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.dataService = dataService;
    this.EncrDecr = EncrDecr;
    this.title = title;
    this.alertService = alertService;
    this.columnsToDisplay = ["PatientId", "PatientName", "Owner", "SpeciesName", "BreedName", "Sex", "LastResultDate"];
    this.dataSource = new MatLegacyTableDataSource();
    this.title.setTitle("Search Results");
    this.authDetails = this.dataService.appData.authDetails;
    this.isBackOfficeUser = this.authDetails["BackOfficeFlag"];
    this.label = this.labelService.searchResultScreen;
    this.filter = new SideFilter();
    this.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.filter.IsBackOfficeUser = this.isBackOfficeUser;
    this.activatedRoute.queryParams.subscribe(() => {
      this.filter.SearchText = this.headerService.searchText;
      this.headerService.searchText = "";
      if (this.dataService.appState.searchResult.searchStr) {
        this.filter.SearchText = this.dataService.appState.searchResult.searchStr;
      }
    });
  }
  search(value) {
    this.filter.SearchText = value;
    this.getPatientList(this.filter);
  }
  getPatientList(requestParams, fromScroll = false) {
    if (!this.filter.SearchText) {
      return;
    }
    if (this.prevSearchText != this.filter.SearchText) {
      this.prevSearchText = this.filter.SearchText;
      requestParams.PageNo = 1;
    }
    if (this.filter.PageNo == 1) {
      this.pataientList = [];
    }
    requestParams.isSortByLastResultDate = true;
    requestParams.sortOrder = true;
    this.commonService.getSearchResult(requestParams).subscribe((data) => {
      const fetchedPatientList = data.ResponseData.PatientList ? this.CheckLastResultDate(data.ResponseData.PatientList) : data.ResponseData.PatientList;
      if (this.filter.PageNo == 1) {
        if (fetchedPatientList != null && fetchedPatientList.length > 0) {
          this.pataientList = fetchedPatientList;
        } else {
          this.pataientList = [];
        }
      } else {
        if (fetchedPatientList != null && fetchedPatientList.length > 0 && fromScroll) {
          this.pataientList = this.pataientList.concat(fetchedPatientList);
        }
      }
      if (fetchedPatientList != null && fetchedPatientList.length > 0 && this.isLoadMore) {
        this.isLoadMore = false;
      } else {
        this.scrolltoTop(null);
      }
      this.dataSource = new MatLegacyTableDataSource(this.pataientList);
      this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
      this.dataSource.sort = this.sort;
    }, (err) => {
      this.dataSource.data = [];
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  CheckLastResultDate(results) {
    return results.filter((el) => {
      if (el.DateReceivedStr)
        return el;
    });
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      this.isLoadMore = true;
      this.filter.PageNo++;
      this.getPatientList(this.filter, true);
    }
  }
  scrolltoTop(topVal) {
    const scrollabe = document.getElementById("tbl-container");
    scrollabe.scrollTop = topVal;
  }
  clearSearch() {
    this.filter.SearchText = "";
    this.dataService.appState.searchResult.searchStr = null;
    this.dataService.state.next(this.dataService.appState);
    this.dataSource.data = [];
  }
  OnRowClick(element) {
    this.patientService.showPataientInfo(element, this.filter, this.filter.PageNo, null, null, true);
  }
  ngAfterViewInit() {
    try {
      this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
        this.labelService.dsLabelData = data.ResponseData;
        this.labelService.getSearchResultScreen();
        this.label = this.labelService.searchResultScreen;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } catch (error) {
      console.log(JSON.stringify(error));
      this.commonService.showCommonToastrError();
    }
    const tblContainer = document.getElementById("tbl-container");
    tblContainer.style.height = window.innerHeight - 190 + "px";
  }
  FirstWordCapital(text) {
    text = text.toLowerCase();
    return text[0].toUpperCase() + text.slice(1);
  }
  static {
    this.\u0275fac = function SearchResultsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SearchResultsComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(AlertService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SearchResultsComponent, selectors: [["app-search-results"]], viewQuery: function SearchResultsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
      }
    }, decls: 38, vars: 10, consts: [[1, "wrapper"], ["id", "content", 1, "search-res"], [3, "searchEvent"], [1, "title-container"], ["href", "javascript:void(0)", 1, "back-btn", 3, "click"], ["data-testid", "sr-title", 1, "page-title"], [1, "page-container", "mat-elevation-z2"], ["class", "filter-status-text mb-0", 4, "ngIf"], ["id", "tbl-container", 1, "mattext"], ["matSort", "", 3, "scroll", "dataSource"], ["matColumnDef", "PatientId"], ["mat-sort-header", "", 4, "matHeaderCellDef"], [4, "matCellDef"], ["matColumnDef", "PatientName"], ["matColumnDef", "Owner"], ["matColumnDef", "SpeciesName"], ["matColumnDef", "BreedName"], ["matColumnDef", "Sex"], ["matColumnDef", "LastResultDate"], [4, "matHeaderRowDef", "matHeaderRowDefSticky"], [3, "click", 4, "matRowDef", "matRowDefColumns"], ["class", "norecord", 4, "ngIf"], [1, "filter-status-text", "mb-0"], [1, "pr-2"], [2, "cursor", "pointer", 3, "click"], ["mat-sort-header", ""], [1, "mobile-label"], [1, "mobile-text", "p-id", 2, "color", "#007bff"], [1, "mobile-text", "p-name"], [1, "mobile-text"], [3, "click"], [1, "norecord"]], template: function SearchResultsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "section")(4, "app-header", 2);
        \u0275\u0275listener("searchEvent", function SearchResultsComponent_Template_app_header_searchEvent_4_listener($event) {
          return ctx.search($event);
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(5, "section", 3)(6, "a", 4);
        \u0275\u0275listener("click", function SearchResultsComponent_Template_a_click_6_listener() {
          return ctx.commonService.goBack();
        });
        \u0275\u0275text(7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "span", 5);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(10, "section", 6);
        \u0275\u0275template(11, SearchResultsComponent_p_11_Template, 7, 2, "p", 7);
        \u0275\u0275elementStart(12, "div", 8)(13, "mat-table", 9);
        \u0275\u0275listener("scroll", function SearchResultsComponent_Template_mat_table_scroll_13_listener($event) {
          return ctx.onTableScroll($event);
        });
        \u0275\u0275elementContainerStart(14, 10);
        \u0275\u0275template(15, SearchResultsComponent_mat_header_cell_15_Template, 2, 1, "mat-header-cell", 11)(16, SearchResultsComponent_mat_cell_16_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(17, 13);
        \u0275\u0275template(18, SearchResultsComponent_mat_header_cell_18_Template, 2, 1, "mat-header-cell", 11)(19, SearchResultsComponent_mat_cell_19_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(20, 14);
        \u0275\u0275template(21, SearchResultsComponent_mat_header_cell_21_Template, 2, 1, "mat-header-cell", 11)(22, SearchResultsComponent_mat_cell_22_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(23, 15);
        \u0275\u0275template(24, SearchResultsComponent_mat_header_cell_24_Template, 2, 1, "mat-header-cell", 11)(25, SearchResultsComponent_mat_cell_25_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(26, 16);
        \u0275\u0275template(27, SearchResultsComponent_mat_header_cell_27_Template, 2, 1, "mat-header-cell", 11)(28, SearchResultsComponent_mat_cell_28_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(29, 17);
        \u0275\u0275template(30, SearchResultsComponent_mat_header_cell_30_Template, 2, 1, "mat-header-cell", 11)(31, SearchResultsComponent_mat_cell_31_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(32, 18);
        \u0275\u0275template(33, SearchResultsComponent_mat_header_cell_33_Template, 2, 1, "mat-header-cell", 11)(34, SearchResultsComponent_mat_cell_34_Template, 5, 2, "mat-cell", 12);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(35, SearchResultsComponent_mat_header_row_35_Template, 1, 0, "mat-header-row", 19)(36, SearchResultsComponent_mat_row_36_Template, 1, 0, "mat-row", 20);
        \u0275\u0275elementEnd();
        \u0275\u0275template(37, SearchResultsComponent_div_37_Template, 3, 1, "div", 21);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.label.Back);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.label.SearchResults);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.filter.SearchText);
        \u0275\u0275advance(2);
        \u0275\u0275classProp("isMobile", ctx.isMobile);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(22);
        \u0275\u0275property("matHeaderRowDef", ctx.columnsToDisplay)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.columnsToDisplay);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.dataSource.data.length === 0);
      }
    }, dependencies: [NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, HeaderComponent, SideMenuComponent], styles: ["\n\n.norecord[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #ffffff !important;\n  border-bottom-right-radius: 10px !important;\n  border-bottom-left-radius: 10px !important;\n  margin: 0 12px;\n  width: inherit !important;\n}\n.page-container[_ngcontent-%COMP%] {\n  background: #fff;\n  min-height: 500px;\n  border-radius: 14px;\n  margin: 20px 0px 14px 0px;\n}\n.page-container[_ngcontent-%COMP%]   p.filter-status-text[_ngcontent-%COMP%] {\n  padding: 14px 14px 0px;\n}\n#tbl-container[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  min-width: 300px;\n  background: #fff;\n}\n.mat-table[_ngcontent-%COMP%] {\n  overflow: auto;\n  border-radius: 10px;\n  padding: 0 12px;\n}\n.mat-header-row[_ngcontent-%COMP%] {\n  background: #ed8c01;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.mobile-label[_ngcontent-%COMP%] {\n  display: none;\n}\n.data-not-found[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 100px;\n  font-weight: bold;\n}\n@media (max-width: 767px) {\n  .mobile-label[_ngcontent-%COMP%] {\n    width: 80px;\n    display: inline-block;\n    font-weight: bold;\n  }\n  .mat-header-row[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .mat-row[_ngcontent-%COMP%] {\n    flex-direction: column;\n    align-items: start;\n    padding: 8px 24px;\n  }\n}\n.mattext[_ngcontent-%COMP%] {\n  padding-top: 15px;\n}\n.mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%] {\n  color: #fff;\n  font-size: 13px;\n  font-weight: 600;\n}\nmat-row.mat-row[_ngcontent-%COMP%]:hover {\n  background: #ed8c0159;\n  cursor: pointer;\n}\n@media screen and (max-width: 767px) {\n  .mat-cell[_ngcontent-%COMP%], \n   .mat-footer-cell[_ngcontent-%COMP%] {\n    width: 100%;\n    min-height: 25px;\n    display: flex;\n    align-items: flex-start;\n  }\n  .mobile-label[_ngcontent-%COMP%] {\n    width: 55%;\n  }\n  .mobile-text[_ngcontent-%COMP%] {\n    width: 45%;\n  }\n  mat-cell[_ngcontent-%COMP%]:first-of-type, \n   mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \n   mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 0;\n  }\n  #tbl-container[_ngcontent-%COMP%], \n   .page-container[_ngcontent-%COMP%], \n   .mat-table[_ngcontent-%COMP%] {\n    background: none;\n    box-shadow: none;\n  }\n  mat-footer-row[_ngcontent-%COMP%], \n   mat-row[_ngcontent-%COMP%] {\n    min-height: auto;\n  }\n  .mat-row[_ngcontent-%COMP%] {\n    border-radius: 10px;\n    margin-bottom: 15px;\n  }\n  mat-cell[_ngcontent-%COMP%]:last-of-type, \n   mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \n   mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n    padding-right: 0;\n  }\n  .search-res[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .p-id[_ngcontent-%COMP%], \n   .p-name[_ngcontent-%COMP%] {\n    font-weight: bold;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0 0px 20px;\n    text-align: center;\n    background: #fff;\n    padding: 15px;\n    border-top: 2px solid #d2cdcd;\n    border-bottom: 2px solid #d2cdcd;\n  }\n  .page-container[_ngcontent-%COMP%]   p.filter-status-text[_ngcontent-%COMP%] {\n    padding: 0px 14px 0px;\n  }\n  .data-not-found[_ngcontent-%COMP%] {\n    margin: inherit;\n  }\n  .data-not-found[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    background: #fff;\n    padding: 12px;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    margin-left: -12%;\n  }\n  .page-container[_ngcontent-%COMP%] {\n    min-height: 100% !important;\n  }\n  #tbl-container[_ngcontent-%COMP%] {\n    height: 100% !important;\n  }\n  .wrapper[_ngcontent-%COMP%] {\n    display: inherit;\n  }\n}\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]:nth-child(2), \n   .mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]:nth-child(1), \n   .mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]:nth-child(3) {\n    min-width: 110px;\n  }\n  .mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]:last-child {\n    min-width: 200px;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1180px) {\n  .mattext[_ngcontent-%COMP%]   .mat-header-cell[_ngcontent-%COMP%]:last-child {\n    min-width: 200px;\n  }\n}\n/*# sourceMappingURL=search-results.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SearchResultsComponent, { className: "SearchResultsComponent", filePath: "src\\app\\components\\search-results\\search-results.component.ts", lineNumber: 36 });
})();

// src/app/components/accession-results/accession-results.component.ts
var import_moment3 = __toESM(require_moment());

// src/app/components/accession-results/templates/accession-template-one/accession-template-one.component.ts
var _c020 = () => ["expandedDetail"];
var _c115 = (a0) => ({ "nothumb": a0 });
var _c28 = (a0, a1) => ({ "clsGreen": a0, "clsRed": a1 });
function AccessionTemplateOneComponent_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Test, " ");
  }
}
function AccessionTemplateOneComponent_td_4_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 32);
    \u0275\u0275listener("click", function AccessionTemplateOneComponent_td_4_img_2_Template_img_click_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const element_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r3, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateOneComponent_td_4_span_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const element_r3 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getTestNoteFormated(element_r3.TestNote, 35), " ");
  }
}
function AccessionTemplateOneComponent_td_4_span_6_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "span", 36);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const element_r3 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r3, element_r3.TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateOneComponent_td_4_span_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 33);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_4_span_6_ng_container_1_Template, 2, 1, "ng-container", 34)(2, AccessionTemplateOneComponent_td_4_span_6_ng_container_2_Template, 2, 1, "ng-container", 34);
    \u0275\u0275elementStart(3, "a", 35);
    \u0275\u0275listener("click", function AccessionTemplateOneComponent_td_4_span_6_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r4);
      const element_r3 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView(element_r3.showMore1 = !element_r3.showMore1);
    });
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !element_r3.showMore1);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.showMore1);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" See ", element_r3.showMore1 ? "less" : "more", " ");
  }
}
function AccessionTemplateOneComponent_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 28)(1, "div", 29);
    \u0275\u0275template(2, AccessionTemplateOneComponent_td_4_img_2_Template, 1, 2, "img", 30);
    \u0275\u0275elementStart(3, "strong");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275element(5, "br");
    \u0275\u0275template(6, AccessionTemplateOneComponent_td_4_span_6_Template, 5, 3, "span", 31);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r3.Definition !== null && element_r3.Definition !== "");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("headtxt ", (ctx_r0.patientService == null ? null : ctx_r0.patientService.dataSource.data.length) !== 1 ? "flt-right" : "flt-lft", "");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.Parameter, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r3.TestNote !== null && element_r3.TestNote !== "");
  }
}
function AccessionTemplateOneComponent_th_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 37);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.RefRange, " ");
  }
}
function AccessionTemplateOneComponent_td_7_div_1_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", "<" + element_r5.MaxRange, " ");
  }
}
function AccessionTemplateOneComponent_td_7_div_1_span_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ">" + element_r5.MinRange, " ");
  }
}
function AccessionTemplateOneComponent_td_7_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_7_div_1_span_1_span_1_Template, 2, 1, "span", 34)(2, AccessionTemplateOneComponent_td_7_div_1_span_1_span_2_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.MinRange === null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.MaxRange === null);
  }
}
function AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(4).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r5.MinRange);
  }
}
function AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(4).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r5.MaxRange);
  }
}
function AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_span_1_Template, 2, 1, "span", 34);
    \u0275\u0275text(2, "-");
    \u0275\u0275template(3, AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_span_3_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.MinRange !== null);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r5.MaxRange !== null);
  }
}
function AccessionTemplateOneComponent_td_7_div_1_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, AccessionTemplateOneComponent_td_7_div_1_ng_template_2_span_0_Template, 4, 2, "span", 34);
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngIf", element_r5.MinRange !== null && element_r5.MaxRange !== null);
  }
}
function AccessionTemplateOneComponent_td_7_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_7_div_1_span_1_Template, 3, 2, "span", 39)(2, AccessionTemplateOneComponent_td_7_div_1_ng_template_2_Template, 1, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const generalContent_r6 = \u0275\u0275reference(3);
    const element_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.Parameter && element_r5.Parameter.trim() === "GGT" && (element_r5.MinRange === null || element_r5.MaxRange === null))("ngIfElse", generalContent_r6);
  }
}
function AccessionTemplateOneComponent_td_7_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275textInterpolate1(" ", element_r5.TestResultRanges, " ");
  }
}
function AccessionTemplateOneComponent_td_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 38);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_7_div_1_Template, 4, 2, "div", 39)(2, AccessionTemplateOneComponent_td_7_ng_template_2_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const refLabRange_r7 = \u0275\u0275reference(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r5.AnalyzerName !== "Ref Lab")("ngIfElse", refLabRange_r7);
  }
}
function AccessionTemplateOneComponent_th_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 40);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Units, " ");
  }
}
function AccessionTemplateOneComponent_td_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 41);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r8.Units, " ");
  }
}
function AccessionTemplateOneComponent_th_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Graph, " ");
  }
}
function AccessionTemplateOneComponent_td_13_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 47);
    \u0275\u0275element(1, "mat-slider", 48)(2, "mat-slider", 48)(3, "mat-slider", 48);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
  }
}
function AccessionTemplateOneComponent_td_13_ng_template_3_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 47);
    \u0275\u0275element(1, "mat-slider", 50)(2, "mat-slider", 50)(3, "mat-slider", 50);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(9, _c115, !(element_r9.Indicator === "Low" || element_r9.Section === "A" && element_r9.Indicator === "Out")))("max", element_r9.Indicator !== "Low" ? 100 : 115)("value", element_r9.Indicator === "Low" || element_r9.Section === "A" && element_r9.Indicator === "Out" ? element_r9.GraphResult : element_r9.Indicator !== "" ? "100" : "0");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(11, _c115, element_r9.Indicator !== "In Range" || element_r9.Section === "A" && element_r9.Indicator === "Out"))("max", element_r9.Indicator !== "In Range" ? 100 : 115)("value", element_r9.Indicator === "In Range" ? element_r9.GraphResult : element_r9.Indicator === "High" || element_r9.Section === "C" && element_r9.Indicator === "Out" ? "100" : "0");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(13, _c115, element_r9.Indicator !== "High" && element_r9.Indicator !== "Out" || element_r9.Section === "A" && element_r9.Indicator === "Out"))("max", element_r9.Indicator !== "High" && element_r9.Indicator !== "Out" ? 100 : 115)("value", element_r9.Indicator === "High" || element_r9.Indicator === "Out" ? element_r9.GraphResult : "0");
  }
}
function AccessionTemplateOneComponent_td_13_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, AccessionTemplateOneComponent_td_13_ng_template_3_span_0_Template, 4, 15, "span", 49);
  }
  if (rf & 2) {
    const element_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngIf", element_r9.Indicator !== null && element_r9.Indicator !== "" && element_r9.GraphResult !== null);
  }
}
function AccessionTemplateOneComponent_td_13_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 51);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.getTranslation(element_r9.Indicator));
  }
}
function AccessionTemplateOneComponent_td_13_span_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 52);
    \u0275\u0275text(1, " Out ");
    \u0275\u0275elementEnd();
  }
}
function AccessionTemplateOneComponent_td_13_span_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 52);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1("", ctx_r0.getTranslation("High"), " ");
  }
}
function AccessionTemplateOneComponent_td_13_span_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 53);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r9.GraphResult, " ");
  }
}
function AccessionTemplateOneComponent_td_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 28)(1, "div", 42);
    \u0275\u0275template(2, AccessionTemplateOneComponent_td_13_span_2_Template, 4, 3, "span", 43)(3, AccessionTemplateOneComponent_td_13_ng_template_3_Template, 1, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(5, AccessionTemplateOneComponent_td_13_span_5_Template, 2, 1, "span", 44)(6, AccessionTemplateOneComponent_td_13_span_6_Template, 2, 0, "span", 45)(7, AccessionTemplateOneComponent_td_13_span_7_Template, 2, 1, "span", 45)(8, AccessionTemplateOneComponent_td_13_span_8_Template, 2, 1, "span", 46);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const resultBlock_r10 = \u0275\u0275reference(4);
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r9.Indicator !== null && element_r9.Indicator !== "" && element_r9.GraphResult !== null && (element_r9.Parameter && element_r9.Parameter.trim() === "GGT" && (element_r9.MinRange === null || element_r9.MaxRange === null) || element_r9.Result && (element_r9.Result.indexOf(">") !== -1 || element_r9.Result.indexOf("<") !== -1)))("ngIfElse", resultBlock_r10);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r0.rangeCheck(element_r9) && element_r9.GraphResult && element_r9.Indicator !== "" && (element_r9.Indicator === "High" || element_r9.Indicator === "Low" || element_r9.Indicator === "Out"));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r9.Result && (element_r9.AnalyzerName !== "Ref Lab" || element_r9.Parameter.trim() === "GGT" && (element_r9.MinRange === null || element_r9.MaxRange === null)) && (element_r9.AnalyzerName !== "Ref Lab" && (element_r9.Result.indexOf(">") !== -1 || element_r9.Result.indexOf("<") !== -1)));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r9.Result && element_r9.Parameter.trim() === "GGT" && element_r9.TestResultFlag === "CH");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r9.Indicator === null || element_r9.Indicator === "");
  }
}
function AccessionTemplateOneComponent_th_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27)(1, "span", 54);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.imageObject[0].title, "");
  }
}
function AccessionTemplateOneComponent_td_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 55)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r11.Result);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r11.Result), " ");
  }
}
function AccessionTemplateOneComponent_th_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27)(1, "span", 54);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateOneComponent_td_19_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r12.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateOneComponent_td_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 56);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_19_span_1_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r12.DynamicDate2_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateOneComponent_th_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27)(1, "span", 54);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateOneComponent_td_22_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r13.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateOneComponent_td_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 56);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_22_span_1_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r13.DynamicDate3_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateOneComponent_th_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27)(1, "span", 54);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateOneComponent_td_25_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r14.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateOneComponent_td_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 56);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_25_span_1_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r14.DynamicDate4_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateOneComponent_th_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 27)(1, "span", 54);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateOneComponent_td_28_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 58);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r15 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(2, _c28, element_r15.Indicator === "" && element_r15.Result !== "NEG" || element_r15.Indicator === "In Range", element_r15.Indicator !== "" && element_r15.Indicator !== "In Range" || element_r15.Result === "NEG"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r15.Result), " ");
  }
}
function AccessionTemplateOneComponent_td_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 56);
    \u0275\u0275template(1, AccessionTemplateOneComponent_td_28_span_1_Template, 2, 5, "span", 57);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r15 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r15.Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.selectedDate !== void 0);
  }
}
function AccessionTemplateOneComponent_td_30_div_3_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 63)(1, "label", 64);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 36);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.patientService.backdDteOfSelectedLatestDate[3]);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r16.DynamicDate4_Result, element_r16.DynamicDate4_TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateOneComponent_td_30_div_3_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 63)(1, "label", 64);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 36);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.patientService.backdDteOfSelectedLatestDate[2]);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r16.DynamicDate3_Result, element_r16.DynamicDate3_TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateOneComponent_td_30_div_3_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 63)(1, "label", 64);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 36);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.patientService.backdDteOfSelectedLatestDate[1]);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r16.DynamicDate2_Result, element_r16.DynamicDate2_TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateOneComponent_td_30_div_3_div_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 63)(1, "label", 64);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 36);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.patientService.backdDteOfSelectedLatestDate[0]);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r16.DynamicDate1_Result, element_r16.DynamicDate1_TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateOneComponent_td_30_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 62)(1, "div", 63)(2, "label", 64);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275element(4, "p", 36);
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, AccessionTemplateOneComponent_td_30_div_3_div_5_Template, 4, 2, "div", 65)(6, AccessionTemplateOneComponent_td_30_div_3_div_6_Template, 4, 2, "div", 65)(7, AccessionTemplateOneComponent_td_30_div_3_div_7_Template, 4, 2, "div", 65)(8, AccessionTemplateOneComponent_td_30_div_3_div_8_Template, 4, 2, "div", 65);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.selectedLatestDate);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(element_r16.Result, element_r16.TestNote), \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3]);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2]);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1]);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[0]);
  }
}
function AccessionTemplateOneComponent_td_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 28)(1, "div", 59);
    \u0275\u0275element(2, "div", 60);
    \u0275\u0275template(3, AccessionTemplateOneComponent_td_30_div_3_Template, 9, 6, "div", 61);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r16 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275attribute("colspan", ctx_r0.displayedColumns.length);
    \u0275\u0275advance();
    \u0275\u0275property("@detailExpand", element_r16 === ctx_r0.expandedElement || (ctx_r0.patientService == null ? null : ctx_r0.patientService.dataSource.data.length) === 1 ? "expanded" : "collapsed");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.isTextVisible(element_r16) && ctx_r0.patientService.SourceType === "ReferenceLab");
  }
}
function AccessionTemplateOneComponent_tr_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 66);
  }
}
function AccessionTemplateOneComponent_tr_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 67);
  }
}
function AccessionTemplateOneComponent_tr_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 68);
  }
}
function AccessionTemplateOneComponent_div_34_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r17 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", element_r17.Parameter, " - ", element_r17.Result, "");
  }
}
function AccessionTemplateOneComponent_div_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 69);
    \u0275\u0275template(1, AccessionTemplateOneComponent_div_34_span_1_Template, 2, 2, "span", 70);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.patientService == null ? null : ctx_r0.patientService.dataSourceVS2);
  }
}
var AccessionTemplateOneComponent = class _AccessionTemplateOneComponent {
  constructor(labelService, ptService, commonService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.commonService = commonService;
    this.displayedColumns = ["Parameter", "date1", "Units", "Range", "GraphResult"];
    this.mdfound = false;
    this.mifound = false;
    this.ccfound = false;
    this.selectedLatestDate = null;
    this.patientService = {};
    this.showMore1 = false;
  }
  // public getResultText(result, testNote) {
  //   let noteTitleObj = NoteFormateKeys;
  //   // let noteTitleObj = {
  //   //   'CLINICAL HISTORY T TENTATIVE/WORKING CLINICAL DIAGNOSIS-DIFFERENTIAL DIAGNOSIS:': 'CLINICAL HISTORY T TENTATIVE/WORKING CLINICAL DIAGNOSIS-DIFFERENTIAL DIAGNOSIS:',
  //   //   'DIAGNOSIS: ': 'DIAGNOSIS:',
  //   //   'SPECIMEN(S) GROSS DESCRIPTION:': 'SPECIMEN(S) GROSS DESCRIPTION:',
  //   //   'MICROSCOPIC DESCRIPTION:': 'MICROSCOPIC DESCRIPTION:',
  //   //   'DESCRIPTION: ': 'DESCRIPTION:',
  //   //   'MICROSCOPIC INTERPRETATION:': 'MICROSCOPIC INTERPRETATION:', // New added
  //   //   'FELINE INTERPRETATION:': 'FELINE INTERPRETATION:', // New added
  //   //   'FELINE & CANINE INTERPRETATION:': 'FELINE & CANINE INTERPRETATION:', // New added
  //   //   'INTERPRETATION: ': 'INTERPRETATION:',
  //   //   'CASE COMMENT:': 'CASE COMMENT:',
  //   //   'COMMENT: ': 'COMMENT:',
  //   //   'COMMENTS:': 'COMMENTS:',  // New added
  //   //   // Cytology
  //   //   'SPECIMEN:': 'SPECIMEN:',
  //   //   'SITE/HISTORY': 'SITE/HISTORY',
  //   //   'HISTORY: ': 'HISTORY:',
  //   //   'SITE #:': 'SITE #:',
  //   //   'PATHOLOGIST SIGNATURE:': 'PATHOLOGIST SIGNATURE:',
  //   //   // Histopathology
  //   //   'RESULT ID:': 'RESULT ID:',
  //   //   'Result ID:': 'RESULT ID:',
  //   //   'TEST(S) PERFORMED:': 'TEST(S) PERFORMED:',
  //   // };
  //   if (testNote != null && testNote != "") {
  //     for (let x in noteTitleObj) {
  //       // var patt = new RegExp(x, 'gi')
  //       // if (patt.test(testNote)) {
  //       // testNote = testNote.replaceAll(x, noteTitleObj[x]);
  //       testNote = testNote.replaceAll(x, '<br/><br/><b>' + noteTitleObj[x] + '</b>');
  //       // }
  //     }
  //     return testNote;
  //   } else {
  //     return result;
  //   }
  // };
  ngOnInit() {
    this.patientService = this.data;
  }
  // public bindChart(testName) {
  //   testName = this.replaceSpecialChar(testName);
  //   if (this.patientService.dataSourceGraphPoint2.length) {
  //     $("#chartContainer_" + testName).show();
  //     // var chart = new CanvasJS.Chart("chartContainer", {
  //     //   animationEnabled: true,
  //     //   title: {
  //     //     text: ""
  //     //   },
  //     //   dataPointWidth: 40,
  //     //   axisY: {
  //     //     title: this.patientService.graphAxisYTitle,
  //     //     gridThickness: 1,
  //     //     gridColor: "#dfe2e5",
  //     //     lineColor: "#dfe2e5",
  //     //     showInLegend: false,
  //     //     includeZero: true,
  //     //     //interval: this.patientService.graphIntervalValue,
  //     //     labelFontFamily: "gothambook",
  //     //     labelFontColor: "#3e3e3e",
  //     //     tickLength: 10,
  //     //     tickThickness: 0,
  //     //     labelFontSize: 12,
  //     //   },
  //     //   axisX: {
  //     //     title: " ",
  //     //     tickLength: 10,
  //     //     tickThickness: 0,
  //     //     labelFontFamily: "gothambook",
  //     //     labelFontColor: "#3e3e3e",
  //     //     labelFontSize: 12,
  //     //     gridColor: "#dfe2e5",
  //     //     lineColor: "#dfe2e5",
  //     //     labelWrap: true,
  //     //     labelMaxWidth: 90,
  //     //   },
  //     //   toolTip: {
  //     //     // content:"{label}: {y[0]}-{y[1]}" ,
  //     //     content: "{tooltipContent}",
  //     //   },
  //     //   data: [
  //     //     {
  //     //       type: "error",
  //     //       stemThickness: 2,
  //     //       toolTipContent: null,
  //     //       whiskerThickness: 2,
  //     //       highlightEnabled: false,
  //     //       dataPoints: this.patientService.dataSourceGraphPoint1
  //     //       // dataPoints: [
  //     //       //   { label: "Oven", y: [38, 65], whiskerColor: "#4372c4" ,stemColor: "#4372c4"},
  //     //       //   { label: "Microwawe", y: [45, 75],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //     //       //   { label: "PC & Peripherals", y: [32, 67],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //     //       //   { label: "Air Conditioner", y: [27, 67] },
  //     //       //   { label: "Dishwasher", y: [48, 70],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //     //       //   { label: "Shaver", y: [25, 65] },
  //     //       // ]
  //     //     },
  //     //     {
  //     //       type: "line",
  //     //       markerType: "circle",  //"circle", "square", "cross", "none"
  //     //       markerSize: 10,
  //     //       indexLabel: "{y}",
  //     //       indexLabelBackgroundColor: "#fff",
  //     //       indexLabelFontColor: "#ff6400",
  //     //       indexLabelFontSize: 12,
  //     //       lineDashType: "dash",
  //     //       lineThickness: 1,
  //     //       lineColor: "#4372c4",
  //     //       dataPoints: this.patientService.dataSourceGraphPoint2
  //     //       // dataPoints: [
  //     //       //   { label: "Jan", y: 12 ,markerColor: "green"},
  //     //       //   { label: "Feb", y: 32,markerColor: "red" },
  //     //       //   { label: "Mar", y: 50 ,markerColor: "#4372c4" },
  //     //       //   { label: "Apr", y: 32 ,markerColor: "#4372c4"  },
  //     //       //   { label: "May", y: 38,markerColor: "red"  },
  //     //       //   { label: "June", y: 36 ,markerColor: "#4372c4"  },
  //     //       // ]
  //     //     },
  //     //   ]
  //     // });
  //     //chart.render();
  //     // ------New design----------------
  //     var stockChart = new CanvasJS.StockChart("chartContainer_" + testName, {
  //       animationEnabled: true,
  //       title: {
  //         text: ""
  //       },
  //       //dataPointWidth: 40,
  //       charts: [{
  //         axisY: {
  //           title: this.patientService.graphAxisYTitle,
  //           gridThickness: 1,
  //           gridColor: "#dfe2e5",
  //           lineColor: "#dfe2e5",
  //           showInLegend: false,
  //           includeZero: true,
  //           //interval: this.patientService.graphIntervalValue,
  //           labelFontFamily: "gothambook",
  //           labelFontColor: "#3e3e3e",
  //           tickLength: 10,
  //           tickThickness: 0,
  //           labelFontSize: 12,
  //         },
  //         axisX: {
  //           title: " ",
  //           tickLength: 10,
  //           tickThickness: 0,
  //           labelFontFamily: "gothambook",
  //           labelFontColor: "#3e3e3e",
  //           labelFontSize: 12,
  //           gridColor: "#dfe2e5",
  //           lineColor: "#dfe2e5",
  //           labelWrap: true,
  //           labelMaxWidth: 90,
  //         },
  //         toolTip: {
  //           // content:"{label}: {y[0]}-{y[1]}" ,
  //           content: "{tooltipContent}",
  //         },
  //         data: [
  //           {
  //             type: "error",
  //             stemThickness: 2,
  //             toolTipContent: null,
  //             whiskerThickness: 2,
  //             highlightEnabled: false,
  //             dataPoints: this.patientService.dataSourceGraphPoint1
  //             // dataPoints: [
  //             //   { label: "Oven", y: [38, 65], whiskerColor: "#4372c4" ,stemColor: "#4372c4"},
  //             //   { label: "Microwawe", y: [45, 75],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //             //   { label: "PC & Peripherals", y: [32, 67],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //             //   { label: "Air Conditioner", y: [27, 67] },
  //             //   { label: "Dishwasher", y: [48, 70],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //             //   { label: "Shaver", y: [25, 65] },
  //             // ]
  //           },
  //           {
  //             type: "line",
  //             markerType: "circle",  //"circle", "square", "cross", "none"
  //             markerSize: 10,
  //             indexLabel: "{y}",
  //             indexLabelBackgroundColor: "#fff",
  //             indexLabelFontColor: "#ff6400",
  //             indexLabelFontSize: 12,
  //             lineDashType: "dash",
  //             lineThickness: 1,
  //             lineColor: "#4372c4",
  //             dataPoints: this.patientService.dataSourceGraphPoint2
  //             // dataPoints: [
  //             //   { label: "Jan", y: 12 ,markerColor: "green"},
  //             //   { label: "Feb", y: 32,markerColor: "red" },
  //             //   { label: "Mar", y: 50 ,markerColor: "#4372c4" },
  //             //   { label: "Apr", y: 32 ,markerColor: "#4372c4"  },
  //             //   { label: "May", y: 38,markerColor: "red"  },
  //             //   { label: "June", y: 36 ,markerColor: "#4372c4"  },
  //             //  ]
  //           },
  //         ]
  //       }],
  //       navigator: {
  //         height: '25px',
  //         backgroundColor: "white",
  //         data: [{
  //           type: "line",
  //           lineColor: "white",
  //           dataPoints: this.patientService.dataSourceGraphPoint2
  //         }],
  //         axisX: {
  //           labelFontColor: "white",
  //           //viewportMinimum: 0,
  //         },
  //         slider: {
  //           maskInverted: false,
  //           minimum: this.patientService.sliderMax - 5.5, //2.5
  //           maximum: this.patientService.sliderMax + .5, //5.5
  //           // minimum: this.sliderMax + 5.5, //2.5
  //           // maximum: this.sliderMax - .5, //5.5
  //           // minimum: new Date('2020/11/19'),
  //           // maximum: new Date('2021/01/20'),
  //         },
  //       },
  //       rangeSelector: {
  //         enabled: false,
  //         // inputFields: {
  //         //   startValue: new Date("2021,02,19"),
  //         //   endValue: new Date("2021,02,19")
  //         // },
  //         // inputFields: {
  //         //   startValue: new Date(2017, 06, 01),
  //         //   endValue: new Date(2017, 09, 01)
  //         // },
  //         // buttons: [{
  //         //   label: "1Y",
  //         //   range: 1,
  //         //   rangeType: "year"
  //         // }]
  //       }
  //     });
  //     if (this.patientService.dataSourceGraphPoint1.length == 1) {
  //       stockChart.options.charts[0].axisX.viewportMinimum = -0.5;
  //       stockChart.options.charts[0].axisX.viewportMaximum = -2.5;
  //     }
  //     stockChart.render();
  //   }
  //   else {
  //     $("#chartContainer_" + testName).hide();
  //   }
  // }
  replaceSpecialChar(name) {
    return name.replace("%", "pc").replace("#", "hs").replace(".", "dt").replace("(", "bo").replace(")", "bc");
  }
  isTextVisible(row) {
    return row.Result != null && row.Result != "" && isNaN(parseFloat(row.Result));
  }
  selectedRow(row) {
    this.expandedElement = row;
    this.patientService.selectedTestName = row.Parameter;
  }
  getTranslation(val) {
    let rtnValue = val;
    if (val != null && val != "") {
      switch (val.toLowerCase()) {
        case "low":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Low;
          break;
        case "high":
          rtnValue = this.labelService.dsAnaysisResultsScreen.High;
          break;
        case "out":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Out;
          break;
      }
    }
    return rtnValue;
  }
  // public toggle() {
  //   this.allRowsExpanded = !this.allRowsExpanded;
  //   this.expandedElement = null;
  // }
  // public bindGraphDataPoints(filterData, testName) {
  //   this.patientService.dataSourceGraphPoint1 = [];
  //   this.patientService.dataSourceGraphPoint2 = [];
  //   if (filterData.length > 0) {
  //     
  //     let isRefRangeSame: boolean = true;
  //     //let rowIndex = filterData.findIndex(x => x.DateReceived == this.selectedDate && x.Parameter == testName);
  //     let resultLabel = this.labelService.dsAnaysisResultsScreen.Results;
  //     let refRengeLabel = this.labelService.dsAnaysisResultsScreen.RefRange;
  //     let refUnitsLabel = this.labelService.dsAnaysisResultsScreen.Units;
  //     //  let minValue = filterData.filter(x => x.DateReceived == this.patientService.backdDteOfSelectedLatestDate[0])[1].MinRange;
  //     //let minValue = filterData.find(x => x.DateReceived == this.selectedDate && x.Parameter == testName).MinRange;
  //     //let maxValue = filterData.find(x => x.DateReceived == this.selectedDate && x.Parameter == testName).MaxRange;
  //     // this.patientService.templateOneSelectedTestName = filterData.filter(x => x.DateReceived == this.selectedDate)[rowIndex].Parameter;
  //     //this.patientService.templateOneSelectedTestName = testName;
  //     //this.patientService.selectedTestName = testName;
  //     this.patientService.graphAxisYTitle = this.selectedDate === 'All' ? filterData[0].Units : filterData.find(x => x.DateReceived == this.selectedDate && x.Parameter == testName).Units;
  //     // this.setInterval(minValue, maxValue);
  //     let indx = this.selectedDate === 'All' ? 0 : this.patientService.imageObject.findIndex(x => x.title == this.selectedDate);
  //     // this.sliderMax = (this.patientService.imageObject.length - 1) - indx;
  //     this.patientService.sliderMax = indx;
  //     //let i = this.patientService.imageObject.length - 1;  //indx + 5;
  //     ;
  //     // for (i; i >= indx; i--) {
  //     // for (i; i >= 0; i--) {
  //     for (let i = 0; i < this.patientService.imageObject.length; i++) {
  //       let obj = [];
  //       // obj = filterData.filter(x => x.DateReceived == this.patientService.backdDteOfSelectedLatestDate[i]);
  //       if (this.patientService.imageObject[i] != undefined) {
  //         obj = filterData.find(x => x.DateReceived == this.patientService.imageObject[i].title && x.Parameter == testName);
  //         // if (obj != undefined && obj != null && !isNaN(parseFloat(obj["Result"])) && (obj["MinRange"] == minValue && obj["MaxRange"] == maxValue)) {    // Condition is for same RefLab value only
  //           if (obj != undefined && obj != null && !isNaN(parseFloat(obj["Result"]))) {
  //           // isRefRangeSame=true; // added for resolve 605
  //           let ele = {};
  //           let tooltipContent = this.patientService.imageObject[i].title + " <br>" + resultLabel + ": " + obj["Result"] + " <br>" + refRengeLabel + ": " + obj["MinRange"] + "-" + obj["MaxRange"] + " <br>" + refUnitsLabel + ": " + obj["Units"];
  //           let minMaxvalu = [];
  //           minMaxvalu.push(obj["MinRange"]);
  //           minMaxvalu.push(obj["MaxRange"]);
  //           ele['label'] = obj["Parameter"];
  //           ele['y'] = minMaxvalu;
  //           // ele['whiskerColor'] = "#0072ce";
  //           // ele['stemColor'] = "#0072ce";
  //           if (i == indx) {
  //             ele['whiskerColor'] = "darkblue";
  //             ele['stemColor'] = "darkblue";
  //             ele['whiskerThickness'] = 3;
  //             ele['stemThickness'] = 3;
  //           }
  //           else {
  //             ele['whiskerColor'] = "#0072ce";
  //             ele['stemColor'] = "#0072ce";
  //           }
  //           ele['tooltipContent'] = tooltipContent;
  //           this.patientService.dataSourceGraphPoint1.push(ele);
  //           //   dataPoints: [
  //           //    { label: "Oven", y: [38, 65], whiskerColor: "#4372c4" ,stemColor: "#4372c4"},
  //           //    { label: "Dishwasher", y: [48, 70],whiskerColor: "#4372c4" ,stemColor: "#4372c4" },
  //           //    { label: "Shaver", y: [25, 65] },
  //           //  ]
  //           let ele2 = {};
  //           // ele2['label'] = this.patientService.backdDteOfSelectedLatestDate[i];
  //           ele2['label'] = this.patientService.imageObject[i].title;
  //           ele2['y'] = parseFloat(obj["Result"]);
  //           if (obj["Indicator"] == "In Range")
  //             ele2['markerColor'] = "green";
  //           else
  //             ele2['markerColor'] = "red";
  //           ele2['tooltipContent'] = tooltipContent;
  //           this.patientService.dataSourceGraphPoint2.push(ele2);
  //           // dataPoints: [
  //           //   { label: "Jan", y: 12 ,markerColor: "green"},
  //           //   { label: "Feb", y: 32,markerColor: "red" }
  //           // ]
  //         }
  //         else {
  //           isRefRangeSame = false;
  //         }
  //       }
  //     }
  //     ;
  //     this.bindChart(testName);
  //   }
  //   else {
  //     $("#chartContainer_" + testName).hide();
  //   }
  // }
  isNumber(val) {
    return typeof val;
  }
  rangeCheck(elm) {
    if (elm.AnalyzerName == "Ref Lab" && elm.Parameter == "GGT" && (elm.MaxRange == null || elm.MinRange == null))
      return false;
    if (elm.MinRange || elm.MaxRange)
      return true;
    if (elm.MinRange === 0 || elm.MaxRange === 0)
      return true;
    return false;
  }
  openTestDefinition(element) {
    this.patientService.showDescription(this.labelService.dsAnaysisResultsScreen.TestDefinition, element, this.labelService.dsAnaysisResultsScreen.Close);
  }
  static {
    this.\u0275fac = function AccessionTemplateOneComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateOneComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateOneComponent, selectors: [["app-accession-template-one"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 35, vars: 7, consts: [["refLabRange", ""], ["generalContent", ""], ["resultBlock", ""], [1, "accesspart", "accpart", 2, "width", "100%"], ["summary", "", "mat-table", "", "multiTemplateDataRows", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "Parameter"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "Range"], ["mat-header-cell", "", "class", "dref", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "dref text-lighter", 4, "matCellDef"], ["matColumnDef", "Units"], ["mat-header-cell", "", "class", "units", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "units text-lighter", 4, "matCellDef"], ["matColumnDef", "GraphResult"], ["matColumnDef", "date1"], ["mat-cell", "", "class", "text-bolder", 3, "title", 4, "matCellDef"], ["matColumnDef", "date2"], ["mat-cell", "", 3, "title", 4, "matCellDef"], ["matColumnDef", "date3"], ["matColumnDef", "date4"], ["matColumnDef", "Result"], ["matColumnDef", "expandedDetail"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "student-element-row", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", "class", "student-detail-row", 4, "matRowDef", "matRowDefColumns"], ["class", "d-flex justify-content-center lstrow", 4, "ngIf"], ["mat-header-cell", ""], ["mat-cell", ""], [1, "d-block", "align-items-center"], ["src", "../../../../assets/img/info-icon.svg", "class", "test_info_icon pl-1", "alt", "", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["class", "test-note", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", 1, "test_info_icon", "pl-1", 3, "click", "matTooltip", "matTooltipPosition"], [1, "test-note"], [4, "ngIf"], ["href", "javascript:void(0)", 3, "click"], [3, "innerHTML"], ["mat-header-cell", "", 1, "dref"], ["mat-cell", "", 1, "dref", "text-lighter"], [4, "ngIf", "ngIfElse"], ["mat-header-cell", "", 1, "units"], ["mat-cell", "", 1, "units", "text-lighter"], ["id", "result-block", 1, "d-flex", "align-items-center", "justify-content-start", "align-indicator"], ["class", "d-flex  align-items-center graph-wrapper justify-content-start", 4, "ngIf", "ngIfElse"], ["class", "clsRed indicator ml-1", 4, "ngIf"], ["class", "clsRed indicator ml-1 no-underline", 4, "ngIf"], ["class", "d-flex  align-items-center graph-wrapper", 4, "ngIf"], [1, "d-flex", "align-items-center", "graph-wrapper", "justify-content-start"], ["mode", "determinate", 1, "nothumb", 3, "max"], ["class", "d-flex  align-items-center graph-wrapper justify-content-start", 4, "ngIf"], ["mode", "determinate", 3, "ngClass", "max", "value"], [1, "clsRed", "indicator", "ml-1"], [1, "clsRed", "indicator", "ml-1", "no-underline"], [1, "d-flex", "align-items-center", "graph-wrapper"], [1, "date_block"], ["mat-cell", "", 1, "text-bolder", 3, "title"], ["mat-cell", "", 3, "title"], ["class", "pink", 3, "ngClass", 4, "ngIf"], [1, "pink", 3, "ngClass"], [1, "row", "student-element-detail"], [2, "height", "150px", "width", "100%"], ["class", "text-block", 4, "ngIf"], [1, "text-block"], [1, "mb-3"], ["for", "", 1, "review_head"], ["class", "mb-3", 4, "ngIf"], ["mat-header-row", ""], ["mat-row", "", 1, "student-element-row"], ["mat-row", "", 1, "student-detail-row"], [1, "d-flex", "justify-content-center", "lstrow"], [4, "ngFor", "ngForOf"]], template: function AccessionTemplateOneComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 3)(1, "table", 4);
        \u0275\u0275elementContainerStart(2, 5);
        \u0275\u0275template(3, AccessionTemplateOneComponent_th_3_Template, 2, 1, "th", 6)(4, AccessionTemplateOneComponent_td_4_Template, 7, 6, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(5, 8);
        \u0275\u0275template(6, AccessionTemplateOneComponent_th_6_Template, 2, 1, "th", 9)(7, AccessionTemplateOneComponent_td_7_Template, 4, 2, "td", 10);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(8, 11);
        \u0275\u0275template(9, AccessionTemplateOneComponent_th_9_Template, 2, 1, "th", 12)(10, AccessionTemplateOneComponent_td_10_Template, 2, 1, "td", 13);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(11, 14);
        \u0275\u0275template(12, AccessionTemplateOneComponent_th_12_Template, 2, 1, "th", 6)(13, AccessionTemplateOneComponent_td_13_Template, 9, 6, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(14, 15);
        \u0275\u0275template(15, AccessionTemplateOneComponent_th_15_Template, 3, 1, "th", 6)(16, AccessionTemplateOneComponent_td_16_Template, 3, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(17, 17);
        \u0275\u0275template(18, AccessionTemplateOneComponent_th_18_Template, 3, 1, "th", 6)(19, AccessionTemplateOneComponent_td_19_Template, 2, 2, "td", 18);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(20, 19);
        \u0275\u0275template(21, AccessionTemplateOneComponent_th_21_Template, 3, 1, "th", 6)(22, AccessionTemplateOneComponent_td_22_Template, 2, 2, "td", 18);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(23, 20);
        \u0275\u0275template(24, AccessionTemplateOneComponent_th_24_Template, 3, 1, "th", 6)(25, AccessionTemplateOneComponent_td_25_Template, 2, 2, "td", 18);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(26, 21);
        \u0275\u0275template(27, AccessionTemplateOneComponent_th_27_Template, 3, 1, "th", 6)(28, AccessionTemplateOneComponent_td_28_Template, 2, 2, "td", 18);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(29, 22);
        \u0275\u0275template(30, AccessionTemplateOneComponent_td_30_Template, 4, 3, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(31, AccessionTemplateOneComponent_tr_31_Template, 1, 0, "tr", 23)(32, AccessionTemplateOneComponent_tr_32_Template, 1, 0, "tr", 24)(33, AccessionTemplateOneComponent_tr_33_Template, 1, 0, "tr", 25);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(34, AccessionTemplateOneComponent_div_34_Template, 2, 1, "div", 26);
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("dataSource", ctx.patientService == null ? null : ctx.patientService.dataSource);
        \u0275\u0275advance(30);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", \u0275\u0275pureFunction0(6, _c020));
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceVS2) !== null && (ctx.patientService == null ? null : ctx.patientService.dataSourceVS2.length) > 0 && ctx.patientService.categoryName.toLocaleLowerCase() === "vetscan vs2");
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacySlider, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 10px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.align-indicator[_ngcontent-%COMP%] {\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n  margin-left: 28px;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indi-con[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n  text-decoration: underline;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 0 10px;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  padding-left: 3px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 10px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.date_block[_ngcontent-%COMP%] {\n  width: 80px;\n  padding: 0px 12px 0 0;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.test_info_icon[_ngcontent-%COMP%] {\n  vertical-align: middle !important;\n  padding-right: 5px;\n  padding-left: 0 !important;\n  margin-left: 0;\n}\n.headtxt[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 91%;\n  float: right;\n}\n.flt-lft[_ngcontent-%COMP%] {\n  float: left !important;\n}\n@media screen and (max-width: 767px) {\n  .test-note[_ngcontent-%COMP%] {\n    margin-left: 0;\n  }\n  .accesspart.accpart[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 18px !important;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type {\n    padding-right: inherit;\n  }\n  td.mat-cel[_ngcontent-%COMP%]:first-of-type, \n   td.mat-footer-cel[_ngcontent-%COMP%]:first-of-type, \n   th.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    min-width: 155px;\n  }\n  .headtxt[_ngcontent-%COMP%] {\n    cursor: pointer;\n    width: 70%;\n    float: right;\n  }\n}\n.text-lighter[_ngcontent-%COMP%] {\n  opacity: 0.9 !important;\n}\n.text-bolder[_ngcontent-%COMP%] {\n  font-weight: bolder !important;\n}\n/*# sourceMappingURL=accession-template-one.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateOneComponent, { className: "AccessionTemplateOneComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-one\\accession-template-one.component.ts", lineNumber: 19 });
})();

// src/app/components/accession-results/templates/accession-template-three/accession-template-three.component.ts
function AccessionTemplateThreeComponent_th_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Test, " ");
  }
}
function AccessionTemplateThreeComponent_td_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 14)(1, "span", 15);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", element_r2.Parameter.charAt(0), " ");
  }
}
function AccessionTemplateThreeComponent_th_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13);
    \u0275\u0275text(1, " \xA0 ");
    \u0275\u0275elementEnd();
  }
}
function AccessionTemplateThreeComponent_td_6_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 17);
    \u0275\u0275listener("click", function AccessionTemplateThreeComponent_td_6_img_2_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r3);
      const element_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r4, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateThreeComponent_td_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 14);
    \u0275\u0275text(1);
    \u0275\u0275template(2, AccessionTemplateThreeComponent_td_6_img_2_Template, 1, 2, "img", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r4.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.Definition !== null && element_r4.Definition !== "");
  }
}
function AccessionTemplateThreeComponent_th_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[0], "");
  }
}
function AccessionTemplateThreeComponent_td_9_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r5.DynamicDate1_Result), " ");
  }
}
function AccessionTemplateThreeComponent_td_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275template(1, AccessionTemplateThreeComponent_td_9_span_1_Template, 2, 1, "span", 20);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r5.DynamicDate1_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[0] !== void 0);
  }
}
function AccessionTemplateThreeComponent_th_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateThreeComponent_td_12_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r6.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateThreeComponent_td_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275template(1, AccessionTemplateThreeComponent_td_12_span_1_Template, 2, 1, "span", 20);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r6.DynamicDate2_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateThreeComponent_th_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateThreeComponent_td_15_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r7.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateThreeComponent_td_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275template(1, AccessionTemplateThreeComponent_td_15_span_1_Template, 2, 1, "span", 20);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r7.DynamicDate3_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateThreeComponent_th_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateThreeComponent_td_18_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r8.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateThreeComponent_td_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275template(1, AccessionTemplateThreeComponent_td_18_span_1_Template, 2, 1, "span", 20);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r8.DynamicDate4_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateThreeComponent_th_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 13)(1, "span", 18);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateThreeComponent_td_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    \u0275\u0275property("title", element_r9.Result);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r9.Result, " ");
  }
}
function AccessionTemplateThreeComponent_tr_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 22);
  }
}
function AccessionTemplateThreeComponent_tr_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 23);
  }
}
var AccessionTemplateThreeComponent = class _AccessionTemplateThreeComponent {
  constructor(labelService, ptService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.displayedColumns = ["Position", "Parameter", "DynamicDate1_Result", "DynamicDate2_Result", "DynamicDate3_Result", "DynamicDate4_Result", "Result"];
    this.patientService = {};
  }
  ngOnInit() {
    this.patientService = this.data;
  }
  static {
    this.\u0275fac = function AccessionTemplateThreeComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateThreeComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateThreeComponent, selectors: [["app-accession-template-three"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 24, vars: 4, consts: [["mat-table", "", "summary", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "Position"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "Parameter"], ["matColumnDef", "DynamicDate1_Result"], ["mat-cell", "", 3, "title", 4, "matCellDef"], ["matColumnDef", "DynamicDate2_Result"], ["matColumnDef", "DynamicDate3_Result"], ["matColumnDef", "DynamicDate4_Result"], ["matColumnDef", "Result"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], [1, "initials", "rounded-circle"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", "class", "test_info_icon", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", 1, "test_info_icon", 3, "click", "matTooltip", "matTooltipPosition"], [1, "date_block"], ["mat-cell", "", 3, "title"], [4, "ngIf"], [1, "pink"], ["mat-header-row", ""], ["mat-row", ""]], template: function AccessionTemplateThreeComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "table", 0);
        \u0275\u0275elementContainerStart(1, 1);
        \u0275\u0275template(2, AccessionTemplateThreeComponent_th_2_Template, 2, 1, "th", 2)(3, AccessionTemplateThreeComponent_td_3_Template, 3, 1, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(4, 4);
        \u0275\u0275template(5, AccessionTemplateThreeComponent_th_5_Template, 2, 0, "th", 2)(6, AccessionTemplateThreeComponent_td_6_Template, 3, 2, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(7, 5);
        \u0275\u0275template(8, AccessionTemplateThreeComponent_th_8_Template, 3, 1, "th", 2)(9, AccessionTemplateThreeComponent_td_9_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(10, 7);
        \u0275\u0275template(11, AccessionTemplateThreeComponent_th_11_Template, 3, 1, "th", 2)(12, AccessionTemplateThreeComponent_td_12_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(13, 8);
        \u0275\u0275template(14, AccessionTemplateThreeComponent_th_14_Template, 3, 1, "th", 2)(15, AccessionTemplateThreeComponent_td_15_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(16, 9);
        \u0275\u0275template(17, AccessionTemplateThreeComponent_th_17_Template, 3, 1, "th", 2)(18, AccessionTemplateThreeComponent_td_18_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(19, 10);
        \u0275\u0275template(20, AccessionTemplateThreeComponent_th_20_Template, 3, 1, "th", 2)(21, AccessionTemplateThreeComponent_td_21_Template, 3, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(22, AccessionTemplateThreeComponent_tr_22_Template, 1, 0, "tr", 11)(23, AccessionTemplateThreeComponent_tr_23_Template, 1, 0, "tr", 12);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275property("dataSource", ctx.patientService == null ? null : ctx.patientService.dataSource);
        \u0275\u0275advance(22);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
      }
    }, dependencies: [NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ["\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n  width: 100px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 140px;\n  align-items: center;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 56px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n#result-block[_ngcontent-%COMP%] {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n}\n.date_block[_ngcontent-%COMP%] {\n  max-width: 95px;\n  white-space: normal;\n  word-break: break-word;\n  display: block;\n}\n.sticky_table[_ngcontent-%COMP%] {\n  margin-top: -34px;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.initials[_ngcontent-%COMP%] {\n  background: #ccc;\n  padding: 5px;\n  width: 32px;\n  display: block;\n  height: 32px;\n  text-align: center;\n  font-size: 17px;\n  color: #fff;\n}\n/*# sourceMappingURL=accession-template-three.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateThreeComponent, { className: "AccessionTemplateThreeComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-three\\accession-template-three.component.ts", lineNumber: 9 });
})();

// src/app/components/accession-results/templates/accession-template-four/accession-template-four.component.ts
var _c021 = (a0) => ({ "nodata": a0 });
function AccessionTemplateFourComponent_div_0_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.SATest, " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_4_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 21);
    \u0275\u0275listener("click", function AccessionTemplateFourComponent_div_0_td_4_img_2_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const element_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r3, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateFourComponent_div_0_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275text(1);
    \u0275\u0275template(2, AccessionTemplateFourComponent_div_0_td_4_img_2_Template, 1, 2, "img", 20);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.Definition !== null && element_r3.Definition !== "");
  }
}
function AccessionTemplateFourComponent_div_0_th_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Units, " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r4.Units, " ");
  }
}
function AccessionTemplateFourComponent_div_0_th_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[0], "");
  }
}
function AccessionTemplateFourComponent_div_0_td_11_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r5.DynamicDate1_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_0_td_11_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r5.DynamicDate1_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[0] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[0] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_0_th_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateFourComponent_div_0_td_14_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r6.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_0_td_14_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r6.DynamicDate2_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[1] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_0_th_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateFourComponent_div_0_td_17_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r7.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_0_td_17_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r7.DynamicDate3_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[2] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_0_th_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateFourComponent_div_0_td_20_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r8.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_0_td_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_0_td_20_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r8.DynamicDate4_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[3] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_0_th_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateFourComponent_div_0_td_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 27)(1, "span", 28);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    \u0275\u0275property("title", element_r9.Result);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r9.Result, " ");
  }
}
function AccessionTemplateFourComponent_div_0_tr_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 29);
  }
}
function AccessionTemplateFourComponent_div_0_tr_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 30);
  }
}
function AccessionTemplateFourComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1)(1, "table", 2);
    \u0275\u0275elementContainerStart(2, 3);
    \u0275\u0275template(3, AccessionTemplateFourComponent_div_0_th_3_Template, 2, 1, "th", 4)(4, AccessionTemplateFourComponent_div_0_td_4_Template, 3, 2, "td", 5);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(5, 6);
    \u0275\u0275template(6, AccessionTemplateFourComponent_div_0_th_6_Template, 2, 1, "th", 4)(7, AccessionTemplateFourComponent_div_0_td_7_Template, 2, 1, "td", 7);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementStart(8, "table", 8);
    \u0275\u0275elementContainerStart(9, 9);
    \u0275\u0275template(10, AccessionTemplateFourComponent_div_0_th_10_Template, 3, 1, "th", 4)(11, AccessionTemplateFourComponent_div_0_td_11_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(12, 11);
    \u0275\u0275template(13, AccessionTemplateFourComponent_div_0_th_13_Template, 3, 1, "th", 4)(14, AccessionTemplateFourComponent_div_0_td_14_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(15, 12);
    \u0275\u0275template(16, AccessionTemplateFourComponent_div_0_th_16_Template, 3, 1, "th", 4)(17, AccessionTemplateFourComponent_div_0_td_17_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(18, 13);
    \u0275\u0275template(19, AccessionTemplateFourComponent_div_0_th_19_Template, 3, 1, "th", 4)(20, AccessionTemplateFourComponent_div_0_td_20_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(21, 14);
    \u0275\u0275template(22, AccessionTemplateFourComponent_div_0_th_22_Template, 3, 1, "th", 4)(23, AccessionTemplateFourComponent_div_0_td_23_Template, 3, 2, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd();
    \u0275\u0275template(24, AccessionTemplateFourComponent_div_0_tr_24_Template, 1, 0, "tr", 16)(25, AccessionTemplateFourComponent_div_0_tr_25_Template, 1, 0, "tr", 17);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("dataSource", ctx_r0.patientService.dataSource);
    \u0275\u0275advance(23);
    \u0275\u0275property("matHeaderRowDef", ctx_r0.displayedColumnsSA)("matHeaderRowDefSticky", true);
    \u0275\u0275advance();
    \u0275\u0275property("matRowDefColumns", ctx_r0.displayedColumnsSA);
  }
}
function AccessionTemplateFourComponent_div_1_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.UATest, " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_4_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 21);
    \u0275\u0275listener("click", function AccessionTemplateFourComponent_div_1_td_4_img_2_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const element_r11 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r11, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateFourComponent_div_1_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 19);
    \u0275\u0275text(1);
    \u0275\u0275template(2, AccessionTemplateFourComponent_div_1_td_4_img_2_Template, 1, 2, "img", 31);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r11.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r11.Definition !== null && element_r11.Definition !== "");
  }
}
function AccessionTemplateFourComponent_div_1_th_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Units, " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r12.Units, " ");
  }
}
function AccessionTemplateFourComponent_div_1_th_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[0], "");
  }
}
function AccessionTemplateFourComponent_div_1_td_10_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r13.DynamicDate1_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_1_td_10_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r13.DynamicDate1_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[0] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[0] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_1_th_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateFourComponent_div_1_td_13_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r14.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_1_td_13_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r14.DynamicDate2_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[1] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_1_th_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateFourComponent_div_1_td_16_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r15 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r15.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_1_td_16_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r15 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r15.DynamicDate3_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[2] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_1_th_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateFourComponent_div_1_td_19_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getBlankToDash(element_r16.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateFourComponent_div_1_td_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplateFourComponent_div_1_td_19_span_1_Template, 2, 1, "span", 25);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("title", element_r16.DynamicDate4_Result)("ngClass", \u0275\u0275pureFunction1(3, _c021, ctx_r0.patientService.backdDteOfSelectedLatestDate[3] === void 0));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateFourComponent_div_1_th_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 18)(1, "span", 23);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateFourComponent_div_1_td_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 27)(1, "span", 28);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r17 = ctx.$implicit;
    \u0275\u0275property("title", element_r17.Result);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r17.Result, " ");
  }
}
function AccessionTemplateFourComponent_div_1_tr_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 29);
  }
}
function AccessionTemplateFourComponent_div_1_tr_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 30);
  }
}
function AccessionTemplateFourComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 1)(1, "table", 2);
    \u0275\u0275elementContainerStart(2, 3);
    \u0275\u0275template(3, AccessionTemplateFourComponent_div_1_th_3_Template, 2, 1, "th", 4)(4, AccessionTemplateFourComponent_div_1_td_4_Template, 3, 2, "td", 5);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(5, 6);
    \u0275\u0275template(6, AccessionTemplateFourComponent_div_1_th_6_Template, 2, 1, "th", 4)(7, AccessionTemplateFourComponent_div_1_td_7_Template, 2, 1, "td", 7);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(8, 9);
    \u0275\u0275template(9, AccessionTemplateFourComponent_div_1_th_9_Template, 3, 1, "th", 4)(10, AccessionTemplateFourComponent_div_1_td_10_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(11, 11);
    \u0275\u0275template(12, AccessionTemplateFourComponent_div_1_th_12_Template, 3, 1, "th", 4)(13, AccessionTemplateFourComponent_div_1_td_13_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(14, 12);
    \u0275\u0275template(15, AccessionTemplateFourComponent_div_1_th_15_Template, 3, 1, "th", 4)(16, AccessionTemplateFourComponent_div_1_td_16_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(17, 13);
    \u0275\u0275template(18, AccessionTemplateFourComponent_div_1_th_18_Template, 3, 1, "th", 4)(19, AccessionTemplateFourComponent_div_1_td_19_Template, 2, 5, "td", 10);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(20, 14);
    \u0275\u0275template(21, AccessionTemplateFourComponent_div_1_th_21_Template, 3, 1, "th", 4)(22, AccessionTemplateFourComponent_div_1_td_22_Template, 3, 2, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275template(23, AccessionTemplateFourComponent_div_1_tr_23_Template, 1, 0, "tr", 16)(24, AccessionTemplateFourComponent_div_1_tr_24_Template, 1, 0, "tr", 17);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("dataSource", ctx_r0.patientService.dataSourceUA);
    \u0275\u0275advance(22);
    \u0275\u0275property("matHeaderRowDef", ctx_r0.displayedColumnsUA)("matHeaderRowDefSticky", true);
    \u0275\u0275advance();
    \u0275\u0275property("matRowDefColumns", ctx_r0.displayedColumnsUA);
  }
}
var AccessionTemplateFourComponent = class _AccessionTemplateFourComponent {
  constructor(labelService, ptService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.displayedColumnsSA = ["Parameter", "Units", "DynamicDate1_Result", "DynamicDate2_Result", "DynamicDate3_Result", "DynamicDate4_Result", "Result"];
    this.displayedColumnsUA = ["Parameter", "Units", "DynamicDate1_Result", "DynamicDate2_Result", "DynamicDate3_Result", "DynamicDate4_Result", "Result"];
    this.patientService = {};
  }
  ngOnInit() {
    this.patientService = this.data;
  }
  static {
    this.\u0275fac = function AccessionTemplateFourComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateFourComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateFourComponent, selectors: [["app-accession-template-four"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 2, vars: 2, consts: [["class", "w-100", "style", "overflow-y: scroll;", 4, "ngIf"], [1, "w-100", 2, "overflow-y", "scroll"], ["mat-table", "", "summary", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "Parameter"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "datas", 4, "matCellDef"], ["matColumnDef", "Units"], ["mat-cell", "", 4, "matCellDef"], ["summary", ""], ["matColumnDef", "DynamicDate1_Result"], ["mat-cell", "", "class", "datepart", 3, "title", "ngClass", 4, "matCellDef"], ["matColumnDef", "DynamicDate2_Result"], ["matColumnDef", "DynamicDate3_Result"], ["matColumnDef", "DynamicDate4_Result"], ["matColumnDef", "Result"], ["mat-cell", "", "class", "datepart", 3, "title", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", "", 1, "datas"], ["src", "../../../../assets/img/info-icon.svg", "class", "test_info_icon", "alt", "", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", 1, "test_info_icon", 3, "click", "matTooltip", "matTooltipPosition"], ["mat-cell", ""], [1, "date_block"], ["mat-cell", "", 1, "datepart", 3, "title", "ngClass"], ["class", "tablecont", 4, "ngIf"], [1, "tablecont"], ["mat-cell", "", 1, "datepart", 3, "title"], [1, "pink"], ["mat-header-row", ""], ["mat-row", ""], ["src", "../../../../assets/img/info-icon.svg", "alt", "", "class", "test_info_icon", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"]], template: function AccessionTemplateFourComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, AccessionTemplateFourComponent_div_0_Template, 26, 4, "div", 0)(1, AccessionTemplateFourComponent_div_1_Template, 25, 4, "div", 0);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSource) !== null && ctx.patientService.dataSource.data.length > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceUA) !== null && ctx.patientService.dataSourceUA.data.length > 0);
      }
    }, dependencies: [NgClass, NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ["\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 150px;\n  align-items: center;\n  line-height: 1.2;\n  padding-left: 5px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 42px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n#result-block[_ngcontent-%COMP%] {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n}\n.date_block[_ngcontent-%COMP%] {\n  max-width: 95px;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.tablecont[_ngcontent-%COMP%] {\n  align-items: center;\n  justify-content: center;\n  line-height: 1.2;\n  height: 48px;\n  width: 150px;\n}\ntd.mat-cell.datas[_ngcontent-%COMP%] {\n  max-width: 260px;\n  width: 160px;\n  white-space: nowrap;\n}\ntd.mat-cell[_ngcontent-%COMP%]:nth-child(2) {\n  width: 100px;\n}\ntd.mat-cell.nodata[_ngcontent-%COMP%] {\n  width: 1px;\n}\ntd.datepart[_ngcontent-%COMP%] {\n  width: 150px;\n}\ntd.mat-cell[_ngcontent-%COMP%], \ntd.mat-footer-cell[_ngcontent-%COMP%], \nth.mat-header-cell[_ngcontent-%COMP%] {\n  padding: 0 10px;\n}\n/*# sourceMappingURL=accession-template-four.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateFourComponent, { className: "AccessionTemplateFourComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-four\\accession-template-four.component.ts", lineNumber: 9 });
})();

// src/app/components/accession-results/templates/accession-template-five/accession-template-five.component.ts
function AccessionTemplateFiveComponent_th_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 8);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.OvaOocysts, " ");
  }
}
function AccessionTemplateFiveComponent_td_3_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 11);
    \u0275\u0275listener("click", function AccessionTemplateFiveComponent_td_3_img_2_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const element_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r3, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateFiveComponent_td_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 9);
    \u0275\u0275text(1);
    \u0275\u0275template(2, AccessionTemplateFiveComponent_td_3_img_2_Template, 1, 2, "img", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.AnalyteDesc, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r3.Definition !== null && element_r3.Definition !== "");
  }
}
function AccessionTemplateFiveComponent_th_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 8);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Detected, " ");
  }
}
function AccessionTemplateFiveComponent_td_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 9);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.formateText(element_r4.ResultDetection), " ");
  }
}
function AccessionTemplateFiveComponent_th_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 8);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Count, " ");
  }
}
function AccessionTemplateFiveComponent_td_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 9);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r5.ResultCount, " ");
  }
}
function AccessionTemplateFiveComponent_tr_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 12);
  }
}
function AccessionTemplateFiveComponent_tr_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 13);
  }
}
var AccessionTemplateFiveComponent = class _AccessionTemplateFiveComponent {
  constructor(labelService, ptService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.displayedColumns = ["AnalyteDesc", "ResultDetection", "ResultCount"];
    this.patientService = {};
  }
  ngOnInit() {
    this.patientService = this.data;
  }
  formateText(txt) {
    if (txt != void 0 && txt != null) {
      if (txt.toString().trim().toLowerCase() == "true")
        txt = "Yes";
      if (txt.toString().trim().toLowerCase() == "false")
        txt = "No";
    }
    return txt;
  }
  static {
    this.\u0275fac = function AccessionTemplateFiveComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateFiveComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateFiveComponent, selectors: [["app-accession-template-five"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 12, vars: 4, consts: [["mat-table", "", "summary", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "AnalyteDesc"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "ResultDetection"], ["matColumnDef", "ResultCount"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", ""], ["mat-cell", ""], ["src", "../../../../assets/img/info-icon.svg", "class", "test_info_icon", "alt", "", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", 1, "test_info_icon", 3, "click", "matTooltip", "matTooltipPosition"], ["mat-header-row", ""], ["mat-row", ""]], template: function AccessionTemplateFiveComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "table", 0);
        \u0275\u0275elementContainerStart(1, 1);
        \u0275\u0275template(2, AccessionTemplateFiveComponent_th_2_Template, 2, 1, "th", 2)(3, AccessionTemplateFiveComponent_td_3_Template, 3, 2, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(4, 4);
        \u0275\u0275template(5, AccessionTemplateFiveComponent_th_5_Template, 2, 1, "th", 2)(6, AccessionTemplateFiveComponent_td_6_Template, 2, 1, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(7, 5);
        \u0275\u0275template(8, AccessionTemplateFiveComponent_th_8_Template, 2, 1, "th", 2)(9, AccessionTemplateFiveComponent_td_9_Template, 2, 1, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(10, AccessionTemplateFiveComponent_tr_10_Template, 1, 0, "tr", 6)(11, AccessionTemplateFiveComponent_tr_11_Template, 1, 0, "tr", 7);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275property("dataSource", ctx.patientService == null ? null : ctx.patientService.dataSource);
        \u0275\u0275advance(10);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
      }
    }, dependencies: [NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ["\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 4px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  align-items: center;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 10px;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n#result-block[_ngcontent-%COMP%] {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n}\n.date_block[_ngcontent-%COMP%] {\n  max-width: 95px;\n  white-space: normal;\n  word-break: break-word;\n  display: block;\n}\n.initials[_ngcontent-%COMP%] {\n  background: #ccc;\n  padding: 5px;\n  width: 32px;\n  display: block;\n  height: 32px;\n  text-align: center;\n  font-size: 17px;\n  color: #fff;\n}\n/*# sourceMappingURL=accession-template-five.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateFiveComponent, { className: "AccessionTemplateFiveComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-five\\accession-template-five.component.ts", lineNumber: 10 });
})();

// src/app/components/accession-results/templates/accession-template-six/accession-template-six.component.ts
function AccessiontTemplateSixComponent_ng_container_1_div_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 9)(1, "p", 10);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "img", 11);
    \u0275\u0275listener("click", function AccessiontTemplateSixComponent_ng_container_1_div_1_span_4_Template_img_click_3_listener() {
      const imgIndex_r2 = \u0275\u0275restoreView(_r1).index;
      const data_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3.viewImageSlider(data_r3.CytoTestImages, imgIndex_r2));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const imgData_r5 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", imgData_r5.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("src", imgData_r5.Result, \u0275\u0275sanitizeUrl);
  }
}
function AccessiontTemplateSixComponent_ng_container_1_div_1_span_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 12)(1, "p", 13);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 10);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const testData_r6 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", testData_r6.AnalyteDesc, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", testData_r6.Result, " ");
  }
}
function AccessiontTemplateSixComponent_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3)(1, "h5", 4);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 5);
    \u0275\u0275template(4, AccessiontTemplateSixComponent_ng_container_1_div_1_span_4_Template, 4, 2, "span", 6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 7);
    \u0275\u0275template(6, AccessiontTemplateSixComponent_ng_container_1_div_1_span_6_Template, 5, 2, "span", 8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const data_r3 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", data_r3.GroupName, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", data_r3.CytoTestImages);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", data_r3.CytoTests);
  }
}
function AccessiontTemplateSixComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, AccessiontTemplateSixComponent_ng_container_1_div_1_Template, 7, 3, "div", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r3.patientService.cytoTestData);
  }
}
function AccessiontTemplateSixComponent_ng_container_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 16)(1, "p", 13);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 10);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const signData_r7 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", signData_r7.AnalyteDesc, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", signData_r7.Result, " ");
  }
}
function AccessiontTemplateSixComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 14);
    \u0275\u0275template(2, AccessiontTemplateSixComponent_ng_container_2_span_2_Template, 5, 2, "span", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r3.patientService.cytoTestSingnature);
  }
}
function AccessiontTemplateSixComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 17)(2, "p", 13);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate2(" ", ctx_r3.labelService.dsAnaysisResultsScreen.Disclaimer, ": ", ctx_r3.patientService.cytoTestDisclaimerText, "");
  }
}
var AccessiontTemplateSixComponent = class _AccessiontTemplateSixComponent {
  constructor(labelService, ptService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.viewImages = new EventEmitter();
    this.patientService = {};
  }
  ngOnInit() {
    this.patientService = this.data;
  }
  viewImageSlider(imageList, imgIndex) {
    const imgObjet = [];
    imgObjet["ImageList"] = imageList;
    imgObjet["ImageIndex"] = imgIndex;
    this.viewImages.emit(imgObjet);
  }
  static {
    this.\u0275fac = function AccessiontTemplateSixComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessiontTemplateSixComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessiontTemplateSixComponent, selectors: [["app-accession-template-six"]], inputs: { selectedDate: "selectedDate", data: "data" }, outputs: { viewImages: "viewImages" }, decls: 4, vars: 3, consts: [[1, "col-sm-12"], [4, "ngIf"], ["class", "Headcontent", 4, "ngFor", "ngForOf"], [1, "Headcontent"], [1, "t6-title"], [1, "row"], ["class", "col-sm-3 text-center imgpart", 4, "ngFor", "ngForOf"], [1, "row", "contP"], ["class", "col-sm-12 contentpart", 4, "ngFor", "ngForOf"], [1, "col-sm-3", "text-center", "imgpart"], [1, "analyte-img-title"], ["alt", "", 3, "click", "src"], [1, "col-sm-12", "contentpart"], [1, "analyte-desc"], [1, "row", "SignP"], ["class", "col-sm-12 sigpart", 4, "ngFor", "ngForOf"], [1, "col-sm-12", "sigpart"], [1, "disclaimer"]], template: function AccessiontTemplateSixComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275template(1, AccessiontTemplateSixComponent_ng_container_1_Template, 2, 1, "ng-container", 1)(2, AccessiontTemplateSixComponent_ng_container_2_Template, 3, 1, "ng-container", 1)(3, AccessiontTemplateSixComponent_ng_container_3_Template, 4, 2, "ng-container", 1);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.cytoTestData) !== null && ctx.patientService.cytoTestData.length > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.cytoTestSingnature) !== null && ctx.patientService.cytoTestSingnature.length > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.cytoTestDisclaimerText) !== null && ctx.patientService.cytoTestDisclaimerText.length > 0);
      }
    }, dependencies: [NgForOf, NgIf], styles: ["\n\n.analyte-desc[_ngcontent-%COMP%] {\n  margin: 1px 5px;\n}\n.t6-title[_ngcontent-%COMP%] {\n  width: 100%;\n  font-weight: bold;\n  margin: 14px 0px;\n  color: blue;\n  font-size: 20px;\n}\n.imgpart[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.imgpart[_ngcontent-%COMP%] {\n  margin-bottom: 2rem;\n}\n.imgpart[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  text-align: left;\n  padding-bottom: 0.5rem;\n  margin: 0;\n}\n.contentpart[_ngcontent-%COMP%] {\n  margin-bottom: 2rem;\n}\n.sigpart[_ngcontent-%COMP%] {\n  margin-bottom: 1rem;\n}\n.contP[_ngcontent-%COMP%], \n.SignP[_ngcontent-%COMP%] {\n  margin-bottom: 2rem;\n}\n.contentpart[_ngcontent-%COMP%]   .analyte-desc[_ngcontent-%COMP%], \n.sigpart[_ngcontent-%COMP%]   .analyte-desc[_ngcontent-%COMP%] {\n  font-size: 16px;\n}\n.disclaimer[_ngcontent-%COMP%] {\n  padding: 10px 39px 8.5px 10px;\n  border-radius: 5px;\n  background-color: #f4f4f4;\n}\n/*# sourceMappingURL=accession-template-six.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessiontTemplateSixComponent, { className: "AccessiontTemplateSixComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-six\\accession-template-six.component.ts", lineNumber: 9 });
})();

// src/app/components/accession-results/templates/accession-template-seven/accession-template-seven.component.ts
function AccessionTemplateSevenComponent_th_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Test, " ");
  }
}
function AccessionTemplateSevenComponent_td_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 16)(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r2 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", element_r2.AnalyteDesc, " ");
  }
}
function AccessionTemplateSevenComponent_th_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Graph, " ");
  }
}
function AccessionTemplateSevenComponent_td_6_mat_slider_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "mat-slider", 20);
  }
  if (rf & 2) {
    const element_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("value", element_r3.GraphResult !== null && element_r3.GraphResult !== "" ? element_r3.GraphResult : 0);
  }
}
function AccessionTemplateSevenComponent_td_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 16)(1, "div", 17)(2, "span", 18);
    \u0275\u0275template(3, AccessionTemplateSevenComponent_td_6_mat_slider_3_Template, 1, 1, "mat-slider", 19);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", element_r3.AnalyteDesc !== "Large Aggregated Platelet" && element_r3.AnalyteDesc !== "Medium Aggregated Platelet");
  }
}
function AccessionTemplateSevenComponent_th_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[0], "");
  }
}
function AccessionTemplateSevenComponent_td_9_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r4.DynamicDate1_Result), " ");
  }
}
function AccessionTemplateSevenComponent_td_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_td_9_span_1_Template, 2, 1, "span", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r4.DynamicDate1_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[0] !== void 0);
  }
}
function AccessionTemplateSevenComponent_th_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateSevenComponent_td_12_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r5.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateSevenComponent_td_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_td_12_span_1_Template, 2, 1, "span", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r5.DynamicDate2_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateSevenComponent_th_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateSevenComponent_td_15_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r6.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateSevenComponent_td_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_td_15_span_1_Template, 2, 1, "span", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r6.DynamicDate3_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateSevenComponent_th_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateSevenComponent_td_18_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r7.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateSevenComponent_td_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_td_18_span_1_Template, 2, 1, "span", 14);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r7.DynamicDate4_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateSevenComponent_th_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 15)(1, "span", 21);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateSevenComponent_td_21_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 24);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r8.Result), " ");
  }
}
function AccessionTemplateSevenComponent_td_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 22);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_td_21_span_1_Template, 2, 1, "span", 23);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r8.Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.selectedDate !== void 0);
  }
}
function AccessionTemplateSevenComponent_tr_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 25);
  }
}
function AccessionTemplateSevenComponent_tr_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 26);
  }
}
function AccessionTemplateSevenComponent_ng_container_25_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 29)(1, "p", 30);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p", 31);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const topSource_r9 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", topSource_r9.AnalyteDesc, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", topSource_r9.Result, " ");
  }
}
function AccessionTemplateSevenComponent_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 27);
    \u0275\u0275template(2, AccessionTemplateSevenComponent_ng_container_25_span_2_Template, 5, 2, "span", 28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.patientService.dataSourceTop);
  }
}
function AccessionTemplateSevenComponent_ng_container_26_div_1_span_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 36)(1, "p", 37);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "img", 38);
    \u0275\u0275listener("click", function AccessionTemplateSevenComponent_ng_container_26_div_1_span_4_Template_img_click_3_listener() {
      const imgIndex_r11 = \u0275\u0275restoreView(_r10).index;
      const data_r12 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.viewImageSlider(data_r12.Images, imgIndex_r11));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ele_r13 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ele_r13.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("src", ele_r13.Result, \u0275\u0275sanitizeUrl);
  }
}
function AccessionTemplateSevenComponent_ng_container_26_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 33)(1, "h5", 30);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 34);
    \u0275\u0275template(4, AccessionTemplateSevenComponent_ng_container_26_div_1_span_4_Template, 4, 2, "span", 35);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const data_r12 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", data_r12.GroupName, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", data_r12.Images);
  }
}
function AccessionTemplateSevenComponent_ng_container_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, AccessionTemplateSevenComponent_ng_container_26_div_1_Template, 5, 2, "div", 32);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.patientService.imgData);
  }
}
var AccessionTemplateSevenComponent = class _AccessionTemplateSevenComponent {
  constructor(ptService, labelService, modalService) {
    this.ptService = ptService;
    this.labelService = labelService;
    this.modalService = modalService;
    this.displayedColumns = ["Parameter", "GraphResult", "date1", "date2", "date3", "date4", "Result"];
    this.patientService = {};
  }
  ngOnInit() {
    this.patientService = this.data;
  }
  viewImageSlider(imageList, imgIndex) {
    const modalRef = this.modalService.open(ImageSliderComponent, {
      centered: true,
      backdrop: "static",
      scrollable: false
    });
    modalRef.componentInstance.imageList = imageList;
    modalRef.componentInstance.currentIndex = imgIndex;
    modalRef.componentInstance.patientDetails = this.patientService.patientDetails;
  }
  isTextVisible(row) {
    return row.Result != null && row.Result != "" && isNaN(parseFloat(row.Result));
  }
  getTranslation(val) {
    let rtnValue = val;
    if (val != null && val != "") {
      switch (val.toLowerCase()) {
        case "low":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Low;
          break;
        case "high":
          rtnValue = this.labelService.dsAnaysisResultsScreen.High;
          break;
        case "out":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Out;
          break;
      }
    }
    return rtnValue;
  }
  static {
    this.\u0275fac = function AccessionTemplateSevenComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateSevenComponent)(\u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(NgbModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateSevenComponent, selectors: [["app-accession-template-seven"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 27, vars: 6, consts: [["mat-table", "", "summary", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "Parameter"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "GraphResult"], ["matColumnDef", "date1"], ["mat-cell", "", 3, "title", 4, "matCellDef"], ["matColumnDef", "date2"], ["matColumnDef", "date3"], ["matColumnDef", "date4"], ["matColumnDef", "Result"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "student-element-row", 4, "matRowDef", "matRowDefColumns"], [1, "col-sm-12"], [4, "ngIf"], ["mat-header-cell", ""], ["mat-cell", ""], ["id", "result-block", 1, "d-flex", "align-items-center", "justify-content-between", "resultBlock", "tempt7"], [1, "w-100", "d-flex", "align-items-center", "graph-wrapper", "resultBlocks"], ["mode", "determinate", "min", "-12", "max", "104", 3, "value", 4, "ngIf"], ["mode", "determinate", "min", "-12", "max", "104", 3, "value"], [1, "date_block"], ["mat-cell", "", 3, "title"], ["class", "pink", 4, "ngIf"], [1, "pink"], ["mat-header-row", ""], ["mat-row", "", 1, "student-element-row"], [1, "row", "contP"], ["class", "col-sm-12 sigpart", 4, "ngFor", "ngForOf"], [1, "col-sm-12", "sigpart"], [1, "analyte-desc"], [1, "analyte-result"], ["class", "Headcontent", 4, "ngFor", "ngForOf"], [1, "Headcontent"], [1, "row"], ["class", "col-sm-3 text-center imgpart", 4, "ngFor", "ngForOf"], [1, "col-sm-3", "text-center", "imgpart"], [1, "analyte-img-title"], ["alt", "", 3, "click", "src"]], template: function AccessionTemplateSevenComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "table", 0);
        \u0275\u0275elementContainerStart(1, 1);
        \u0275\u0275template(2, AccessionTemplateSevenComponent_th_2_Template, 2, 1, "th", 2)(3, AccessionTemplateSevenComponent_td_3_Template, 3, 1, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(4, 4);
        \u0275\u0275template(5, AccessionTemplateSevenComponent_th_5_Template, 2, 1, "th", 2)(6, AccessionTemplateSevenComponent_td_6_Template, 4, 1, "td", 3);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(7, 5);
        \u0275\u0275template(8, AccessionTemplateSevenComponent_th_8_Template, 3, 1, "th", 2)(9, AccessionTemplateSevenComponent_td_9_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(10, 7);
        \u0275\u0275template(11, AccessionTemplateSevenComponent_th_11_Template, 3, 1, "th", 2)(12, AccessionTemplateSevenComponent_td_12_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(13, 8);
        \u0275\u0275template(14, AccessionTemplateSevenComponent_th_14_Template, 3, 1, "th", 2)(15, AccessionTemplateSevenComponent_td_15_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(16, 9);
        \u0275\u0275template(17, AccessionTemplateSevenComponent_th_17_Template, 3, 1, "th", 2)(18, AccessionTemplateSevenComponent_td_18_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(19, 10);
        \u0275\u0275template(20, AccessionTemplateSevenComponent_th_20_Template, 3, 1, "th", 2)(21, AccessionTemplateSevenComponent_td_21_Template, 2, 2, "td", 6);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(22, AccessionTemplateSevenComponent_tr_22_Template, 1, 0, "tr", 11)(23, AccessionTemplateSevenComponent_tr_23_Template, 1, 0, "tr", 12);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(24, "div", 13);
        \u0275\u0275template(25, AccessionTemplateSevenComponent_ng_container_25_Template, 3, 1, "ng-container", 14)(26, AccessionTemplateSevenComponent_ng_container_26_Template, 2, 1, "ng-container", 14);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275property("dataSource", ctx.patientService == null ? null : ctx.patientService.dataSource);
        \u0275\u0275advance(22);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceTop) && ctx.patientService.dataSourceTop.length > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.imgData) !== null && ctx.patientService.imgData.length > 0);
      }
    }, dependencies: [NgForOf, NgIf, MatLegacySlider, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n  .tempt7 .mat-slider:first-child .mat-slider-thumb {\n  background-color: #71c5e8 !important;\n  width: 30px !important;\n  border-radius: 1px !important;\n}\n.mat-slider-horizontal[_ngcontent-%COMP%] {\n  min-width: 100% !important;\n}\n.analyte-desc[_ngcontent-%COMP%] {\n  margin: 20px 5px 5px 5px;\n  font-weight: bold;\n}\n.analyte-result[_ngcontent-%COMP%] {\n  margin: 5px;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 56px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.tempt7[_ngcontent-%COMP%] {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n}\n.date_block[_ngcontent-%COMP%] {\n  max-width: 90px;\n  padding: 0px 12px;\n  white-space: normal;\n  word-break: break-word;\n  display: block;\n}\n.sticky_table[_ngcontent-%COMP%] {\n  margin-top: -34px;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.imgpart[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 15px;\n}\n.imgpart[_ngcontent-%COMP%]   .analyte-img-title[_ngcontent-%COMP%] {\n  text-align: left;\n  margin-left: 0;\n  text-transform: lowercase;\n}\n.Headcontent[_ngcontent-%COMP%]   .analyte-desc[_ngcontent-%COMP%] {\n  margin-left: 0;\n  padding-bottom: 15px;\n}\n.sigpart[_ngcontent-%COMP%]   .analyte-desc[_ngcontent-%COMP%], \n.sigpart[_ngcontent-%COMP%]   .analyte-result[_ngcontent-%COMP%] {\n  margin-left: 0;\n}\n.sigpart[_ngcontent-%COMP%]   .analyte-desc[_ngcontent-%COMP%] {\n  font-size: 1.25rem;\n}\n/*# sourceMappingURL=accession-template-seven.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateSevenComponent, { className: "AccessionTemplateSevenComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-seven\\accession-template-seven.component.ts", lineNumber: 11 });
})();

// src/app/components/accession-results/templates/accession-template-nine/accession-template-nine.component.ts
function AccessionTemplateNineComponent_div_0_section_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "section", 3)(1, "h3", 4);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 5)(4, "h5", 6);
    \u0275\u0275text(5);
    \u0275\u0275elementEnd();
    \u0275\u0275element(6, "p", 7);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const data_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", data_r1.AnalysisTypeName, "");
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", data_r1.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1.commonService.getResultText(data_r1.Result, data_r1.TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateNineComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, AccessionTemplateNineComponent_div_0_section_1_Template, 7, 3, "section", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.testNoteList);
  }
}
function AccessionTemplateNineComponent_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", element_r3.Parameter, " - ", element_r3.Result, "");
  }
}
function AccessionTemplateNineComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8);
    \u0275\u0275template(1, AccessionTemplateNineComponent_div_1_span_1_Template, 2, 2, "span", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.patientService == null ? null : ctx_r1.patientService.dataSourceVS2);
  }
}
var AccessionTemplateNineComponent = class _AccessionTemplateNineComponent {
  constructor(labelService, ptService, commonService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.commonService = commonService;
    this.displayedColumns = ["Parameter", "date1", "Units", "Range", "GraphResult"];
    this.mdfound = false;
    this.mifound = false;
    this.ccfound = false;
    this.selectedLatestDate = null;
    this.patientService = {};
    this.showMore1 = false;
    this.testNoteList = [];
  }
  // public getResultText(result, testNote) {
  //   let noteTitleObj = NoteFormateKeys;
  //   if (testNote != null && testNote != "") {
  //     for (let x in noteTitleObj) {
  //       testNote = testNote.replaceAll(x, '<br/><br/><b>' + noteTitleObj[x] + '</b>');
  //     }
  //     return testNote;
  //   } else {
  //     return result;
  //   }
  // };
  ngOnInit() {
    this.patientService = this.data;
    this.testNoteList = this.patientService?.dataSource.data.filter((ele) => {
      if (ele.TestNote) {
        return ele;
      }
    });
    console.log("testNoteList =>", this.testNoteList);
  }
  replaceSpecialChar(name) {
    return name.replace("%", "pc").replace("#", "hs").replace(".", "dt").replace("(", "bo").replace(")", "bc");
  }
  isTextVisible(row) {
    return row.Result != null && row.Result != "" && isNaN(parseFloat(row.Result));
  }
  selectedRow(row) {
    this.expandedElement = row;
    this.patientService.selectedTestName = row.Parameter;
  }
  getTranslation(val) {
    let rtnValue = val;
    if (val != null && val != "") {
      switch (val.toLowerCase()) {
        case "low":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Low;
          break;
        case "high":
          rtnValue = this.labelService.dsAnaysisResultsScreen.High;
          break;
        case "out":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Out;
          break;
      }
    }
    return rtnValue;
  }
  isNumber(val) {
    return typeof val;
  }
  rangeCheck(elm) {
    if (elm.MinRange || elm.MaxRange)
      return true;
    if (elm.MinRange === 0 || elm.MaxRange === 0)
      return true;
    return false;
  }
  static {
    this.\u0275fac = function AccessionTemplateNineComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateNineComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateNineComponent, selectors: [["app-accession-template-nine"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 2, vars: 2, consts: [[4, "ngIf"], ["class", "d-flex justify-content-center lstrow", 4, "ngIf"], ["style", "width:100%", 4, "ngFor", "ngForOf"], [2, "width", "100%"], [1, "note-header"], [1, "text-block"], [2, "font-weight", "bold"], [3, "innerHTML"], [1, "d-flex", "justify-content-center", "lstrow"], [4, "ngFor", "ngForOf"]], template: function AccessionTemplateNineComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, AccessionTemplateNineComponent_div_0_Template, 2, 1, "div", 0)(1, AccessionTemplateNineComponent_div_1_Template, 2, 1, "div", 1);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", (ctx.testNoteList == null ? null : ctx.testNoteList.length) > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceVS2) !== null && ctx.patientService.dataSourceVS2.length > 0 && ctx.patientService.categoryName.toLocaleLowerCase() === "vetscan vs2");
      }
    }, dependencies: [NgForOf, NgIf], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 10px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.align-indicator[_ngcontent-%COMP%] {\n  justify-content: end !important;\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n  margin-left: 28px;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indi-con[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n  text-decoration: underline;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 0 10px;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  padding-left: 3px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 10px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.date_block[_ngcontent-%COMP%] {\n  width: 105px;\n  padding: 0px 12px 0 0;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.test_info_icon[_ngcontent-%COMP%] {\n  vertical-align: middle !important;\n  padding-right: 5px;\n  padding-left: 0 !important;\n  margin-left: 0;\n}\n.headtxt[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 91%;\n  float: right;\n}\n.flt-lft[_ngcontent-%COMP%] {\n  float: left !important;\n}\n@media screen and (max-width: 767px) {\n  .test-note[_ngcontent-%COMP%] {\n    margin-left: 0;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 18px !important;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type {\n    padding-right: inherit;\n  }\n  td.mat-cel[_ngcontent-%COMP%]:first-of-type, \n   td.mat-footer-cel[_ngcontent-%COMP%]:first-of-type, \n   th.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    min-width: 155px;\n  }\n  .headtxt[_ngcontent-%COMP%] {\n    cursor: pointer;\n    width: 70%;\n    float: right;\n  }\n}\n.note-header[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 12px 14px;\n  color: #fff;\n  border-radius: 10px 10px 0px 0px;\n  font-size: 14px;\n}\n/*# sourceMappingURL=accession-template-nine.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateNineComponent, { className: "AccessionTemplateNineComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-nine\\accession-template-nine.component.ts", lineNumber: 18 });
})();

// src/app/components/accession-results/templates/accession-template-12/accession-template-12.component.ts
var _c022 = (a0) => ({ "top-border": a0 });
var _c116 = (a0) => ({ "icon-disable": a0 });
function AccessionTemplate12Component_h3_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h3", 6);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.noneSensitivityList[0].AnalysisTypeName, " ");
  }
}
function AccessionTemplate12Component_ng_container_4_p_1_span_3_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r2 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", item_r2.TestNote, " ");
  }
}
function AccessionTemplate12Component_ng_container_4_p_1_span_3_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const item_r2 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275textInterpolate(item_r2.Result);
  }
}
function AccessionTemplate12Component_ng_container_4_p_1_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, AccessionTemplate12Component_ng_container_4_p_1_span_3_span_1_Template, 2, 1, "span", 8)(2, AccessionTemplate12Component_ng_container_4_p_1_span_3_ng_template_2_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const showResult_r3 = \u0275\u0275reference(3);
    const item_r2 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r2.Result === "See Note" && item_r2.TestNote)("ngIfElse", showResult_r3);
  }
}
function AccessionTemplate12Component_ng_container_4_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, AccessionTemplate12Component_ng_container_4_p_1_span_3_Template, 4, 2, "span", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", item_r2.Parameter, ": ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r2.Result);
  }
}
function AccessionTemplate12Component_ng_container_4_p_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "strong");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", item_r2.Parameter, " Note: ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", item_r2.TestNote, "");
  }
}
function AccessionTemplate12Component_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, AccessionTemplate12Component_ng_container_4_p_1_Template, 4, 2, "p", 7)(2, AccessionTemplate12Component_ng_container_4_p_2_Template, 5, 2, "p", 7);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r2.Result || item_r2.TestNote);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r2.Result !== "See Note" && item_r2.TestNote);
  }
}
function AccessionTemplate12Component_div_5_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, "Note");
    \u0275\u0275elementEnd();
  }
}
function AccessionTemplate12Component_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "p")(2, "strong");
    \u0275\u0275text(3);
    \u0275\u0275template(4, AccessionTemplate12Component_div_5_span_4_Template, 2, 0, "span", 7);
    \u0275\u0275text(5, ": ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(6, "span", 10);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r4 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(4, _c022, ctx_r0.bottomNoneSensitivityList.length > 0 && item_r4.Parameter === "Organism"));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", item_r4.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r4.TestNote && item_r4.Parameter !== "Comment");
    \u0275\u0275advance(2);
    \u0275\u0275property("innerHTML", item_r4.displayNote, \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplate12Component_div_6_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 23);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Sensitivity, " ");
  }
}
function AccessionTemplate12Component_div_6_td_4_img_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 27);
    \u0275\u0275listener("click", function AccessionTemplate12Component_div_6_td_4_img_3_Template_img_click_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const element_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      ctx_r0.openTestDefinition(element_r6);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplate12Component_div_6_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24)(1, "div")(2, "p", 25);
    \u0275\u0275template(3, AccessionTemplate12Component_div_6_td_4_img_3_Template, 1, 2, "img", 26);
    \u0275\u0275elementStart(4, "span");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", element_r6.Definition);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r6.Parameter, " ");
  }
}
function AccessionTemplate12Component_div_6_th_6_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.backDates[0].Result, " ");
  }
}
function AccessionTemplate12Component_div_6_th_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "th", 28)(1, "span", 29);
    \u0275\u0275listener("click", function AccessionTemplate12Component_div_6_th_6_Template_span_click_1_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.prevResult());
    });
    \u0275\u0275text(2, " arrow_back ");
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, AccessionTemplate12Component_div_6_th_6_span_3_Template, 2, 1, "span", 30);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c116, ctx_r0.startOrganismIndex === 0));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.backDates[0] && ctx_r0.backDates[0].Result);
  }
}
function AccessionTemplate12Component_div_6_td_7_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r8.backDate0_Result ? element_r8.backDate0_Result : "--", " ");
  }
}
function AccessionTemplate12Component_div_6_td_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_td_7_p_1_Template, 3, 1, "p", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[0] && ctx_r0.backDates[0].Result);
  }
}
function AccessionTemplate12Component_div_6_th_9_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.backDates[1].Result, " ");
  }
}
function AccessionTemplate12Component_div_6_th_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 28);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_th_9_span_1_Template, 2, 1, "span", 30);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[1] && ctx_r0.backDates[1].Result);
  }
}
function AccessionTemplate12Component_div_6_td_10_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 31)(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r9.backDate1_Result ? element_r9.backDate1_Result : "--", " ");
  }
}
function AccessionTemplate12Component_div_6_td_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_td_10_p_1_Template, 3, 1, "p", 30);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[1] && ctx_r0.backDates[1].Result);
  }
}
function AccessionTemplate12Component_div_6_th_12_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.backDates[2].Result, " ");
  }
}
function AccessionTemplate12Component_div_6_th_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 28);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_th_12_span_1_Template, 2, 1, "span", 30);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[2] && ctx_r0.backDates[2].Result);
  }
}
function AccessionTemplate12Component_div_6_td_13_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r10 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r10.backDate2_Result ? element_r10.backDate2_Result : "--", " ");
  }
}
function AccessionTemplate12Component_div_6_td_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_td_13_p_1_Template, 3, 1, "p", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[2] && ctx_r0.backDates[2].Result);
  }
}
function AccessionTemplate12Component_div_6_th_15_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 31);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.backDates[3].Result, " ");
  }
}
function AccessionTemplate12Component_div_6_th_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "th", 28);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_th_15_span_1_Template, 2, 1, "span", 30);
    \u0275\u0275elementStart(2, "span", 32);
    \u0275\u0275listener("click", function AccessionTemplate12Component_div_6_th_15_Template_span_click_2_listener() {
      \u0275\u0275restoreView(_r11);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.nextResult());
    });
    \u0275\u0275text(3, " arrow_forward ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[3] && ctx_r0.backDates[3].Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(2, _c116, ctx_r0.endOrganismIndex <= 4));
  }
}
function AccessionTemplate12Component_div_6_td_16_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p")(1, "span");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r12 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r12.backDate3_Result ? element_r12.backDate3_Result : "--", " ");
  }
}
function AccessionTemplate12Component_div_6_td_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 24);
    \u0275\u0275template(1, AccessionTemplate12Component_div_6_td_16_p_1_Template, 3, 1, "p", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.backDates[3] && ctx_r0.backDates[3].Result);
  }
}
function AccessionTemplate12Component_div_6_tr_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 33);
  }
}
function AccessionTemplate12Component_div_6_tr_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 34);
  }
}
function AccessionTemplate12Component_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 11)(1, "table", 12);
    \u0275\u0275elementContainerStart(2, 13);
    \u0275\u0275template(3, AccessionTemplate12Component_div_6_th_3_Template, 2, 1, "th", 14)(4, AccessionTemplate12Component_div_6_td_4_Template, 6, 2, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(5, 16);
    \u0275\u0275template(6, AccessionTemplate12Component_div_6_th_6_Template, 4, 4, "th", 17)(7, AccessionTemplate12Component_div_6_td_7_Template, 2, 1, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(8, 18);
    \u0275\u0275template(9, AccessionTemplate12Component_div_6_th_9_Template, 2, 1, "th", 17)(10, AccessionTemplate12Component_div_6_td_10_Template, 2, 1, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(11, 19);
    \u0275\u0275template(12, AccessionTemplate12Component_div_6_th_12_Template, 2, 1, "th", 17)(13, AccessionTemplate12Component_div_6_td_13_Template, 2, 1, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementContainerStart(14, 20);
    \u0275\u0275template(15, AccessionTemplate12Component_div_6_th_15_Template, 4, 4, "th", 17)(16, AccessionTemplate12Component_div_6_td_16_Template, 2, 1, "td", 15);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275template(17, AccessionTemplate12Component_div_6_tr_17_Template, 1, 0, "tr", 21)(18, AccessionTemplate12Component_div_6_tr_18_Template, 1, 0, "tr", 22);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("dataSource", ctx_r0.dataSource);
    \u0275\u0275advance(16);
    \u0275\u0275property("matHeaderRowDef", ctx_r0.displayedColumns)("matHeaderRowDefSticky", true);
    \u0275\u0275advance();
    \u0275\u0275property("matRowDefColumns", ctx_r0.displayedColumns);
  }
}
var AccessionTemplate12Component = class _AccessionTemplate12Component {
  // public selectedBackDateIndex: number = 0;
  // public organismGroups: any[] = [];
  // public organismGrouplist: any[] = [];
  constructor(patientService, labelService, dataService) {
    this.patientService = patientService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.labResults = [];
    this.labReports = [];
    this.labReportFilterByAnalysisType = [];
    this.displayedColumns = ["Sensitivity", "prevDate1", "prevDate2", "prevDate3", "prevDate4"];
    this.labReportDistinct = [];
    this.labReportFiltered = [];
    this.topNoneSensitiveElements = [];
    this.middleNoneSensitiveElements = [];
    this.bottomNoneSensitiveElements = [];
    this.organismList = [];
    this.noneSensitivityList = [];
    this.bottomNoneSensitivityList = [];
    this.sensitivityList = [];
    this.startOrganismIndex = 0;
    this.endOrganismIndex = 4;
    this.backDates = [];
    this.topNoneSensitiveElements = [
      "Source",
      "Urine Collection Method",
      "Time & Date of Collection",
      "Location of Collection"
    ];
    this.middleNoneSensitiveElements = [
      "Media Plated",
      "Culture Comment",
      "Aerobic Culture Results",
      "Anaerobic Culture Results",
      "Fungal Culture Result",
      "Culture Results",
      "Blood Culture Results",
      "Campylobacter Screen",
      "Salmonella Screen",
      "Fungal Culture Comment",
      "Dermatophyte Culture Result"
    ];
    this.bottomNoneSensitiveElements = [
      "Organism",
      "Quantity",
      "Comment"
    ];
    this.noneSensitiveElements = this.topNoneSensitiveElements.concat(this.middleNoneSensitiveElements).concat(this.bottomNoneSensitiveElements);
  }
  ngOnChanges(changes) {
    if (changes.labResults && changes.labResults.firstChange) {
      this.labReports = this.labResults ? this.labResults["LabReports"] : [];
    }
    if (changes.selectedAnalysisType && !changes.selectedAnalysisType.firstChange) {
      this.selectedAnalysisType = changes.selectedAnalysisType.currentValue;
    }
    this.labReportDistinct = [...new Map(this.labReports.map((item) => [item["DateReceived"], item])).values()];
    this.filterAndUpdateReport();
  }
  selectNote(event) {
    this.selectedDate = event.value;
    this.filterAndUpdateReport();
    this.dataService.appData.tblTopPatientDetails = this.labReportDistinct.filter((ele) => ele.DateReceived == this.selectedDate)[0];
    this.patientService.markAs(this.dataService.appData.tblTopPatientDetails, "READ");
  }
  filterAndUpdateReport() {
    this.labReports = this.labReports.filter((ele) => ele.DateReceived == this.selectedDate);
    console.log("labReports =>", this.labReports);
    this.labReportFiltered = this.data.dataSource.filteredData;
    this.organismList = this.labReportFiltered.filter((ele) => {
      return ele.Parameter == "Organism" && ele.Result != "See Note" && /_/.test(ele.PanelTestId);
    });
    console.log("organismList =>", this.organismList);
    this.backDates = this.organismList.slice(this.startOrganismIndex, this.endOrganismIndex);
    console.log("backDates =>", this.backDates);
    const topData = this.labReportFiltered.filter((ele) => {
      return this.noneSensitiveElements.includes(ele.Parameter);
    });
    const sortedTopData = [...topData].sort((a, b) => {
      const indexA = this.noneSensitiveElements.indexOf(a.Parameter);
      const indexB = this.noneSensitiveElements.indexOf(b.Parameter);
      return indexA - indexB;
    });
    console.log("sortedTopData =>", sortedTopData);
    const topNoneSensitiveData = [], bottomNoneSensitiveData = [], othersNoneSensitiveData = [];
    let middleNoneSensitiveData = [];
    sortedTopData.forEach((ele) => {
      if (this.topNoneSensitiveElements.includes(ele.Parameter)) {
        topNoneSensitiveData.push(ele);
      } else if (this.middleNoneSensitiveElements.includes(ele.Parameter)) {
        middleNoneSensitiveData.push(ele);
      } else if (/_/.test(ele.PanelTestId) && this.bottomNoneSensitiveElements.includes(ele.Parameter)) {
        bottomNoneSensitiveData.push(ele);
      } else {
        othersNoneSensitiveData.push(ele);
      }
    });
    const indexedMiddleNoneSensitiveData = [];
    middleNoneSensitiveData.forEach((ele) => {
      const id = ele.PanelTestId.split("_")[1];
      if (ele.Parameter == "Media Plated") {
        indexedMiddleNoneSensitiveData.push(ele);
        middleNoneSensitiveData.forEach((subEle) => {
          const subId = subEle.PanelTestId.split("_")[1];
          if (ele.Parameter != subEle.Parameter && id == subId) {
            indexedMiddleNoneSensitiveData.push(subEle);
          }
        });
      }
    });
    middleNoneSensitiveData = indexedMiddleNoneSensitiveData;
    this.noneSensitivityList = topNoneSensitiveData.concat(middleNoneSensitiveData);
    const indexedBottomNoneSensitiveData = [];
    bottomNoneSensitiveData.forEach((ele) => {
      const id = ele.PanelTestId.split("_")[1];
      if (ele.Parameter == "Organism") {
        indexedBottomNoneSensitiveData.push(ele);
        bottomNoneSensitiveData.forEach((subEle) => {
          const subId = subEle.PanelTestId.split("_")[1];
          if (ele.Parameter != subEle.Parameter && id == subId) {
            indexedBottomNoneSensitiveData.push(subEle);
          }
        });
      }
    });
    this.bottomNoneSensitivityList = indexedBottomNoneSensitiveData.map((ele) => {
      if (ele.Parameter == "Comment") {
        if (ele.Result == "See Note" && ele.TestNote) {
          ele.displayNote = ele.TestNote;
        } else if (ele.Result != "See Note" && ele.TestNote) {
          ele.displayNote = ele.Result + "<br/>" + ele.TestNote;
        } else {
          ele.displayNote = ele.Result;
        }
      } else {
        if (ele.TestNote) {
          ele.displayNote = ele.TestNote;
        } else {
          ele.displayNote = ele.Result;
        }
      }
      return ele;
    });
    console.log("bottomNoneSensitivityList =>", this.bottomNoneSensitivityList);
    this.sensitivityList = this.labReportFiltered.filter((ele) => {
      return !this.noneSensitiveElements.includes(ele.Parameter) && /_/.test(ele.PanelTestId);
    });
    this.sensitivityList = this.sensitivityList.filter((obj, index) => {
      return index === this.sensitivityList.findIndex((o) => obj.Parameter === o.Parameter);
    });
    console.log("sensitivityList =>", this.sensitivityList);
    this.labReportFiltered = this.sensitivityList;
    this.labReportFiltered.forEach((element) => {
      this.backDates.forEach((subEle, subIndx) => {
        const nextOrganism = this.labReports.find((x) => x.Parameter == element.Parameter && x.PanelTestId.split("_")[1] == subEle.PanelTestId.split("_")[1]);
        if (nextOrganism != void 0) {
          element["backDate" + subIndx] = nextOrganism;
          element["backDate" + subIndx + "_Result"] = nextOrganism["Result"] ? nextOrganism["Result"] : "--";
          element["backDate" + subIndx + "_Parameter"] = nextOrganism["Parameter"];
          element["backDate" + subIndx + "_TestNote"] = nextOrganism["TestNote"];
          element["backDate" + subIndx + "_PanelTestId"] = nextOrganism["PanelTestId"];
          element["backDate" + subIndx + "_OrganismName"] = nextOrganism["Parameter"];
        }
      });
    });
    this.dataSource = new MatLegacyTableDataSource(this.labReportFiltered);
  }
  prevResult() {
    if (this.startOrganismIndex == 0)
      return;
    this.startOrganismIndex = this.startOrganismIndex - 1;
    this.endOrganismIndex = this.endOrganismIndex - 1;
    this.dataSource.data.forEach((ele) => {
      for (let i = 0; i < 4; i++) {
        ele["backDate" + i + "_Result"] = null;
      }
    });
    this.filterAndUpdateReport();
  }
  nextResult() {
    if (this.endOrganismIndex <= 4)
      return;
    this.startOrganismIndex = this.startOrganismIndex + 1;
    this.endOrganismIndex = this.endOrganismIndex + 1;
    this.dataSource.data.forEach((ele) => {
      for (let i = 0; i < 4; i++) {
        ele["backDate" + i + "_Result"] = null;
      }
    });
    this.filterAndUpdateReport();
  }
  static {
    this.\u0275fac = function AccessionTemplate12Component_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplate12Component)(\u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplate12Component, selectors: [["app-accession-template-12"]], inputs: { data: "data", selectedDate: "selectedDate", labResults: "labResults", labReports: "labReports", labReportFilterByAnalysisType: "labReportFilterByAnalysisType", selectedAnalysisType: "selectedAnalysisType" }, features: [\u0275\u0275NgOnChangesFeature], decls: 7, vars: 4, consts: [["showResult", ""], ["class", "hl-head", 4, "ngIf"], [1, "wz-content"], [4, "ngFor", "ngForOf"], [3, "ngClass", 4, "ngFor", "ngForOf"], ["class", "temp1 wz-table", 4, "ngIf"], [1, "hl-head"], [4, "ngIf"], [4, "ngIf", "ngIfElse"], [3, "ngClass"], [3, "innerHTML"], [1, "temp1", "wz-table"], ["mat-table", "", "summary", "", 3, "dataSource"], ["matColumnDef", "Sensitivity"], ["style", "min-width: 175px;", "mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "prevDate1"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", "prevDate2"], ["matColumnDef", "prevDate3"], ["matColumnDef", "prevDate4"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "student-element-row", 4, "matRowDef", "matRowDefColumns"], ["mat-header-cell", "", 2, "min-width", "175px"], ["mat-cell", ""], [2, "width", "165px"], ["src", "../../../../assets/img/info-icon.svg", "class", "test_info_icon pl-1", "alt", "info-icon", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "info-icon", 1, "test_info_icon", "pl-1", 3, "click", "matTooltip", "matTooltipPosition"], ["mat-header-cell", ""], ["title", "Previous", 1, "material-symbols-outlined", "date-navitation-icon", 3, "click", "ngClass"], ["class", "back-date", 4, "ngIf"], [1, "back-date"], ["title", "Next", 1, "material-symbols-outlined", "date-navitation-icon", "nextBtn", 3, "click", "ngClass"], ["mat-header-row", ""], ["mat-row", "", 1, "student-element-row"]], template: function AccessionTemplate12Component_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "section")(1, "article");
        \u0275\u0275template(2, AccessionTemplate12Component_h3_2_Template, 2, 1, "h3", 1);
        \u0275\u0275elementStart(3, "div", 2);
        \u0275\u0275template(4, AccessionTemplate12Component_ng_container_4_Template, 3, 2, "ng-container", 3)(5, AccessionTemplate12Component_div_5_Template, 7, 6, "div", 4);
        \u0275\u0275elementEnd()()();
        \u0275\u0275template(6, AccessionTemplate12Component_div_6_Template, 19, 4, "div", 5);
      }
      if (rf & 2) {
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.noneSensitivityList.length > 0);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.noneSensitivityList);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.bottomNoneSensitivityList);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.labReportFiltered.length > 0);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 10px;\n  white-space: nowrap;\n  z-index: 1 !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n  padding-left: 24px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n  align-items: center;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.align-indicator[_ngcontent-%COMP%] {\n  justify-content: end !important;\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n  text-decoration: underline;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 0 10px;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  padding-left: 3px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #0072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 14px;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.date_block[_ngcontent-%COMP%] {\n  width: 80px;\n  padding: 0px 12px 0 0;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.resrange[_ngcontent-%COMP%], \n.resunits[_ngcontent-%COMP%] {\n  display: none;\n}\n.refMob[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  .resrange[_ngcontent-%COMP%], \n   .resunits[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .dref[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .refMob[_ngcontent-%COMP%] {\n    display: block;\n    width: 118px;\n    float: right;\n  }\n  .refMob[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    font-weight: 100 !important;\n    color: #989393;\n  }\n  .resheader[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n    color: #beb9b9;\n  }\n  .resheader[_ngcontent-%COMP%] {\n    display: flex;\n    justify-content: center;\n  }\n  .mat-column-Range[_ngcontent-%COMP%], \n   .mat-column-Units[_ngcontent-%COMP%] {\n    display: none;\n  }\n  #result-block[_ngcontent-%COMP%] {\n    min-width: 170px;\n    max-width: inherit;\n    width: inherit;\n  }\n  .restest[_ngcontent-%COMP%] {\n    justify-content: center;\n    text-align: center;\n  }\n  .reshd[_ngcontent-%COMP%] {\n    text-align: center !important;\n  }\n  td.mat-cell[_ngcontent-%COMP%]:first-of-type, \n   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \n   th.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 32px !important;\n    min-width: 150px;\n  }\n  .pink[_ngcontent-%COMP%] {\n    justify-content: center;\n  }\n}\n.back-date[_ngcontent-%COMP%] {\n  width: 90px;\n  padding: 7px 7px;\n  white-space: initial;\n  display: inline-block;\n  font-weight: inherit;\n  cursor: pointer;\n}\n.test_tbl_icon[_ngcontent-%COMP%] {\n  vertical-align: super;\n  cursor: pointer;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  word-break: break-all;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n  width: 110px;\n  height: 50.5px;\n  border-right: 3px solid #ece7e7;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1)   .test_info_icon[_ngcontent-%COMP%] {\n  padding: 0 5px 0 5px !important;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1)   span[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n  width: 220px;\n  word-break: break-all;\n  padding-left: 40px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n  width: 175px;\n  padding-left: 10px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n  width: 175px;\n  padding-left: 18px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n  width: 175px;\n  padding-left: 18px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(8) {\n  width: 175px;\n  padding-right: 45px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6), \n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(7) {\n  width: 175px;\n}\n.prevBtn[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  margin-top: -22px;\n  cursor: pointer;\n}\n.prevBtn[_ngcontent-%COMP%] {\n  margin-top: 22px;\n  display: inline-block;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6)   .back-date[_ngcontent-%COMP%] {\n  width: initial;\n}\n.fw-bold[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.col-bg[_ngcontent-%COMP%] {\n  margin-top: 0;\n  margin-bottom: 0;\n  background: #ffeee4;\n  display: flex;\n  align-items: center;\n  padding: 19px 4px;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1)   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n}\n.elipsis[_ngcontent-%COMP%] {\n  white-space: nowrap;\n  width: 120px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  float: right;\n  display: inherit !important;\n}\n.date-navitation-icon[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.icon-disable[_ngcontent-%COMP%] {\n  color: #bac;\n  cursor: initial;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(7)   p[_ngcontent-%COMP%], \n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(8)   p[_ngcontent-%COMP%] {\n  padding-left: 8px;\n}\n.temp1[_ngcontent-%COMP%] {\n  height: calc(100vh - 220px);\n  overflow-y: auto;\n  border-bottom: 2px solid #f3eded;\n  margin-bottom: 30px;\n}\n.chartContainer[_ngcontent-%COMP%] {\n  display: none;\n}\n.note-title[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 14px;\n  font-size: 1rem;\n  font-weight: bold;\n  color: #dee2e6;\n  border-radius: 7px 7px 0px 0px;\n}\n.cutomToolTip[_ngcontent-%COMP%] {\n  width: 150px;\n  position: absolute;\n  top: 37px;\n  right: 0;\n  z-index: 999;\n  background: #f8f9fa;\n  border: 1px solid grey;\n  border-radius: 5px;\n  padding: 7px;\n  display: none;\n}\n.cutomToolTip[_ngcontent-%COMP%] {\n  width: 150px;\n  position: absolute;\n  top: 37px;\n  right: 0;\n  z-index: 999;\n  background: #f8f9fa;\n  border: 1px solid grey;\n  border-radius: 5px;\n  padding: 7px;\n  display: none;\n}\n.Headcontent[_ngcontent-%COMP%] {\n  margin-bottom: 30px;\n}\n.analyte-desc[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.imgpart[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  font-weight: 100;\n}\n.circle-char[_ngcontent-%COMP%] {\n  border-radius: 50%;\n  margin: 0px 5px 0px 0px;\n  padding: 11px 9px 9px 7px;\n  font-weight: bold;\n  height: 20px;\n  line-height: 6%;\n  width: 20px !important;\n  color: #fff;\n  font-size: 11px;\n}\n.hl-head[_ngcontent-%COMP%] {\n  background: #0072ce;\n  color: #ffffff;\n  border-radius: 5px 5px 0 0px !important;\n  padding: 18px 0;\n  padding-left: 24px;\n  font-size: 14px;\n}\n.wz-content[_ngcontent-%COMP%], \n.wz-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  padding-left: 24px;\n}\n.wz-content[_ngcontent-%COMP%] {\n  max-height: 500px;\n  overflow-y: auto;\n  margin-bottom: 2.5rem;\n  padding-right: 14px;\n}\n.top-border[_ngcontent-%COMP%] {\n  border-top: 2px solid #80808099;\n  padding-top: 16px;\n}\n/*# sourceMappingURL=accession-template-12.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplate12Component, { className: "AccessionTemplate12Component", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-12\\accession-template-12.component.ts", lineNumber: 9 });
})();

// src/app/components/accession-results/templates/accession-template-13/accession-template-13.component.ts
function AccessionTemplate13Component_div_0_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 7)(2, "p")(3, "strong");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "p");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275element(7, "p", 8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const data_r1 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", data_r1.Parameter, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", data_r1.Result, " ");
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1.commonService.getResultText(data_r1.Result, data_r1.TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplate13Component_div_0_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "h5", 10);
    \u0275\u0275text(2, " Panel Notes: ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 8);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275property("innerHTML", ctx_r1.commonService.getResultText(ctx_r1.testNoteList[0].Result, ctx_r1.testNoteList[0].PanelNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplate13Component_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2)(1, "h3", 3);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "section", 4);
    \u0275\u0275template(4, AccessionTemplate13Component_div_0_ng_container_4_Template, 8, 3, "ng-container", 5)(5, AccessionTemplate13Component_div_0_div_5_Template, 4, 1, "div", 6);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.testNoteList[0].AnalysisTypeName, "");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r1.testNoteList);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r1.testNoteList == null ? null : ctx_r1.testNoteList.length) > 0 && ctx_r1.testNoteList[0].PanelNote);
  }
}
function AccessionTemplate13Component_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", element_r3.Parameter, " - ", element_r3.Result, "");
  }
}
function AccessionTemplate13Component_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 11);
    \u0275\u0275template(1, AccessionTemplate13Component_div_1_span_1_Template, 2, 2, "span", 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r1.patientService == null ? null : ctx_r1.patientService.dataSourceVS2);
  }
}
var AccessionTemplate13Component = class _AccessionTemplate13Component {
  constructor(labelService, ptService, commonService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.commonService = commonService;
    this.displayedColumns = ["Parameter", "date1", "Units", "Range", "GraphResult"];
    this.selectedLatestDate = null;
    this.patientService = {};
    this.showMore1 = false;
    this.testNoteList = [];
  }
  ngOnInit() {
    this.patientService = this.data;
    this.testNoteList = this.patientService?.dataSource.data.filter((ele) => {
      if (ele.TestNote) {
        return ele;
      }
    });
    console.log("testNoteList =>", this.testNoteList);
  }
  replaceSpecialChar(name) {
    return name.replace("%", "pc").replace("#", "hs").replace(".", "dt").replace("(", "bo").replace(")", "bc");
  }
  isTextVisible(row) {
    return row.Result != null && row.Result != "" && isNaN(parseFloat(row.Result));
  }
  selectedRow(row) {
    this.expandedElement = row;
    this.patientService.selectedTestName = row.Parameter;
  }
  static {
    this.\u0275fac = function AccessionTemplate13Component_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplate13Component)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplate13Component, selectors: [["app-accession-template-13"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 2, vars: 2, consts: [["class", "pagefont", 4, "ngIf"], ["class", "d-flex justify-content-center lstrow", 4, "ngIf"], [1, "pagefont"], [1, "note-header"], [1, "text-block", 2, "width", "100%"], [4, "ngFor", "ngForOf"], ["style", "padding-left: 14px;", 4, "ngIf"], [1, "col-12"], [3, "innerHTML"], [2, "padding-left", "14px"], [1, "note-head"], [1, "d-flex", "justify-content-center", "lstrow"]], template: function AccessionTemplate13Component_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275template(0, AccessionTemplate13Component_div_0_Template, 6, 3, "div", 0)(1, AccessionTemplate13Component_div_1_Template, 2, 1, "div", 1);
      }
      if (rf & 2) {
        \u0275\u0275property("ngIf", (ctx.testNoteList == null ? null : ctx.testNoteList.length) > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceVS2) !== null && (ctx.patientService.dataSourceVS2 == null ? null : ctx.patientService.dataSourceVS2.length) > 0 && ctx.patientService.categoryName.toLocaleLowerCase() === "vetscan vs2");
      }
    }, dependencies: [NgForOf, NgIf], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 10px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.align-indicator[_ngcontent-%COMP%] {\n  justify-content: end !important;\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n  margin-left: 28px;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indi-con[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n  text-decoration: underline;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 0 10px;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  padding-left: 3px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 10px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.date_block[_ngcontent-%COMP%] {\n  width: 105px;\n  padding: 0px 12px 0 0;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.test_info_icon[_ngcontent-%COMP%] {\n  vertical-align: middle !important;\n  padding-right: 5px;\n  padding-left: 0 !important;\n  margin-left: 0;\n}\n.headtxt[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 91%;\n  float: right;\n}\n.flt-lft[_ngcontent-%COMP%] {\n  float: left !important;\n}\n@media screen and (max-width: 767px) {\n  .test-note[_ngcontent-%COMP%] {\n    margin-left: 0;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 18px !important;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type {\n    padding-right: inherit;\n  }\n  td.mat-cel[_ngcontent-%COMP%]:first-of-type, \n   td.mat-footer-cel[_ngcontent-%COMP%]:first-of-type, \n   th.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    min-width: 155px;\n  }\n  .headtxt[_ngcontent-%COMP%] {\n    cursor: pointer;\n    width: 70%;\n    float: right;\n  }\n}\n.note-header[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 12px 14px;\n  color: #fff;\n  border-radius: 10px 10px 0px 0px;\n  font-size: 13px;\n}\n.note-head[_ngcontent-%COMP%] {\n  color: #212529;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.pagefont[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif;\n}\n/*# sourceMappingURL=accession-template-13.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplate13Component, { className: "AccessionTemplate13Component", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-13\\accession-template-13.component.ts", lineNumber: 16 });
})();

// src/app/components/accession-results/templates/accession-template-ten/accession-template-ten.component.ts
var _c023 = (a0) => ({ "nothumb": a0 });
var _c117 = (a0, a1) => ({ "clsGreen": a0, "clsRed": a1 });
function AccessionTemplateTenComponent_th_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Test, " ");
  }
}
function AccessionTemplateTenComponent_td_4_img_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 29);
    \u0275\u0275listener("click", function AccessionTemplateTenComponent_td_4_img_2_Template_img_click_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const element_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      ctx_r0.ptService.showDescription(ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition, element_r3, ctx_r0.labelService.dsAnaysisResultsScreen.Dismiss);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("matTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.TestDefinition)("matTooltipPosition", "above");
  }
}
function AccessionTemplateTenComponent_td_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 26)(1, "div", 27);
    \u0275\u0275template(2, AccessionTemplateTenComponent_td_4_img_2_Template, 1, 2, "img", 28);
    \u0275\u0275elementStart(3, "strong");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r3.Definition !== null && element_r3.Definition !== "");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("headtxt ", (ctx_r0.patientService == null ? null : ctx_r0.patientService.dataSource.data == null ? null : ctx_r0.patientService.dataSource.data.length) !== 1 ? "flt-right" : "flt-lft", "");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.Parameter, " ");
  }
}
function AccessionTemplateTenComponent_th_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 30);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.RefRange, " ");
  }
}
function AccessionTemplateTenComponent_td_7_div_1_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", "<" + element_r4.MaxRange, " ");
  }
}
function AccessionTemplateTenComponent_td_7_div_1_span_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ">" + element_r4.MinRange, " ");
  }
}
function AccessionTemplateTenComponent_td_7_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_7_div_1_span_1_span_1_Template, 2, 1, "span", 33)(2, AccessionTemplateTenComponent_td_7_div_1_span_1_span_2_Template, 2, 1, "span", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.MinRange === null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.MaxRange === null);
  }
}
function AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(4).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r4.MinRange);
  }
}
function AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(4).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(element_r4.MaxRange);
  }
}
function AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_span_1_Template, 2, 1, "span", 33);
    \u0275\u0275text(2, "-");
    \u0275\u0275template(3, AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_span_3_Template, 2, 1, "span", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.MinRange !== null);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r4.MaxRange !== null);
  }
}
function AccessionTemplateTenComponent_td_7_div_1_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, AccessionTemplateTenComponent_td_7_div_1_ng_template_2_span_0_Template, 4, 2, "span", 33);
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngIf", element_r4.MinRange !== null && element_r4.MaxRange !== null);
  }
}
function AccessionTemplateTenComponent_td_7_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_7_div_1_span_1_Template, 3, 2, "span", 32)(2, AccessionTemplateTenComponent_td_7_div_1_ng_template_2_Template, 1, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const generalContent_r5 = \u0275\u0275reference(3);
    const element_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.Parameter && element_r4.Parameter.trim() === "GGT" && (element_r4.MinRange === null || element_r4.MaxRange === null))("ngIfElse", generalContent_r5);
  }
}
function AccessionTemplateTenComponent_td_7_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const element_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275textInterpolate1(" ", element_r4.TestResultRanges, " ");
  }
}
function AccessionTemplateTenComponent_td_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 31);
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_7_div_1_Template, 4, 2, "div", 32)(2, AccessionTemplateTenComponent_td_7_ng_template_2_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    const refLabRange_r6 = \u0275\u0275reference(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r4.AnalyzerName !== "Ref Lab")("ngIfElse", refLabRange_r6);
  }
}
function AccessionTemplateTenComponent_th_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 34);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Units, " ");
  }
}
function AccessionTemplateTenComponent_td_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 35);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r7 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r7.Units, " ");
  }
}
function AccessionTemplateTenComponent_th_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsAnaysisResultsScreen.Graph, " ");
  }
}
function AccessionTemplateTenComponent_td_13_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 41);
    \u0275\u0275element(1, "mat-slider", 42)(2, "mat-slider", 42)(3, "mat-slider", 42);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
    \u0275\u0275advance();
    \u0275\u0275property("max", 0);
  }
}
function AccessionTemplateTenComponent_td_13_ng_template_3_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 41);
    \u0275\u0275element(1, "mat-slider", 44)(2, "mat-slider", 44)(3, "mat-slider", 44);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(9, _c023, !(element_r8.Indicator === "Low" || element_r8.Section === "A" && element_r8.Indicator === "Out")))("max", element_r8.Indicator !== "Low" ? 100 : 115)("value", element_r8.Indicator === "Low" || element_r8.Section === "A" && element_r8.Indicator === "Out" ? element_r8.GraphResult : element_r8.Indicator !== "" ? "100" : "0");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(11, _c023, element_r8.Indicator !== "In Range" || element_r8.Section === "A" && element_r8.Indicator === "Out"))("max", element_r8.Indicator !== "In Range" ? 100 : 115)("value", element_r8.Indicator === "In Range" ? element_r8.GraphResult : element_r8.Indicator === "High" || element_r8.Section === "C" && element_r8.Indicator === "Out" ? "100" : "0");
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(13, _c023, element_r8.Indicator !== "High" && element_r8.Indicator !== "Out" || element_r8.Section === "A" && element_r8.Indicator === "Out"))("max", element_r8.Indicator !== "High" && element_r8.Indicator !== "Out" ? 100 : 115)("value", element_r8.Indicator === "High" || element_r8.Indicator === "Out" ? element_r8.GraphResult : "0");
  }
}
function AccessionTemplateTenComponent_td_13_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, AccessionTemplateTenComponent_td_13_ng_template_3_span_0_Template, 4, 15, "span", 43);
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngIf", element_r8.Indicator !== null && element_r8.Indicator !== "" && element_r8.GraphResult !== null);
  }
}
function AccessionTemplateTenComponent_td_13_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 45);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.getTranslation(element_r8.Indicator));
  }
}
function AccessionTemplateTenComponent_td_13_span_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 46);
    \u0275\u0275text(1, " Out ");
    \u0275\u0275elementEnd();
  }
}
function AccessionTemplateTenComponent_td_13_span_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 45);
    \u0275\u0275text(1, " \xA0");
    \u0275\u0275elementEnd();
  }
}
function AccessionTemplateTenComponent_td_13_span_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 47);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r8.GraphResult, " ");
  }
}
function AccessionTemplateTenComponent_td_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 26)(1, "div", 36);
    \u0275\u0275template(2, AccessionTemplateTenComponent_td_13_span_2_Template, 4, 3, "span", 37)(3, AccessionTemplateTenComponent_td_13_ng_template_3_Template, 1, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(5, AccessionTemplateTenComponent_td_13_span_5_Template, 2, 1, "span", 38)(6, AccessionTemplateTenComponent_td_13_span_6_Template, 2, 0, "span", 39)(7, AccessionTemplateTenComponent_td_13_span_7_Template, 2, 0, "span", 38)(8, AccessionTemplateTenComponent_td_13_span_8_Template, 2, 1, "span", 40);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const resultBlock_r9 = \u0275\u0275reference(4);
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r8.Indicator !== null && element_r8.Indicator !== "" && element_r8.GraphResult !== null && (element_r8.Parameter && element_r8.Parameter.trim() === "GGT" && (element_r8.MinRange === null || element_r8.MaxRange === null) || element_r8.Result && (element_r8.Result.indexOf(">") !== -1 || element_r8.Result.indexOf("<") !== -1)))("ngIfElse", resultBlock_r9);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r0.rangeCheck(element_r8) && element_r8.Indicator !== "" && (element_r8.Indicator === "High" || element_r8.Indicator === "Low" || element_r8.Indicator === "Out") && (element_r8.Result.indexOf(">") === -1 && element_r8.Result.indexOf("<") === -1));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r8.Result && (element_r8.AnalyzerName !== "Ref Lab" || element_r8.Parameter.trim() === "GGT" && (element_r8.MinRange === null || element_r8.MaxRange === null)) && (element_r8.AnalyzerName !== "Ref Lab" && (element_r8.Result.indexOf(">") !== -1 || element_r8.Result.indexOf("<") !== -1)));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r8.Indicator !== "High" && element_r8.Indicator !== "Low" && element_r8.Indicator !== "Out" && (element_r8.Result.indexOf(">") === -1 && element_r8.Result.indexOf("<") === -1));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r8.Indicator === null || element_r8.Indicator === "");
  }
}
function AccessionTemplateTenComponent_th_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25)(1, "span", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.imageObject[0].title, "");
  }
}
function AccessionTemplateTenComponent_td_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 49)(1, "span", 50);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r10.Result);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r10.Result), " ");
  }
}
function AccessionTemplateTenComponent_th_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25)(1, "span", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[1], "");
  }
}
function AccessionTemplateTenComponent_td_19_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r11.DynamicDate2_Result), " ");
  }
}
function AccessionTemplateTenComponent_td_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 49);
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_19_span_1_Template, 2, 1, "span", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r11.DynamicDate2_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[1] !== void 0);
  }
}
function AccessionTemplateTenComponent_th_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25)(1, "span", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[2], "");
  }
}
function AccessionTemplateTenComponent_td_22_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r12.DynamicDate3_Result), " ");
  }
}
function AccessionTemplateTenComponent_td_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 49);
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_22_span_1_Template, 2, 1, "span", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r12.DynamicDate3_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[2] !== void 0);
  }
}
function AccessionTemplateTenComponent_th_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25)(1, "span", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientService.backdDteOfSelectedLatestDate[3], "");
  }
}
function AccessionTemplateTenComponent_td_25_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r13.DynamicDate4_Result), " ");
  }
}
function AccessionTemplateTenComponent_td_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 49);
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_25_span_1_Template, 2, 1, "span", 33);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r13.DynamicDate4_Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.patientService.backdDteOfSelectedLatestDate[3] !== void 0);
  }
}
function AccessionTemplateTenComponent_th_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 25)(1, "span", 48);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.selectedDate, "");
  }
}
function AccessionTemplateTenComponent_td_28_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 52);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(2, _c117, element_r14.Indicator === "" && element_r14.Result !== "NEG" || element_r14.Indicator === "In Range", element_r14.Indicator !== "" && element_r14.Indicator !== "In Range" || element_r14.Result === "NEG"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.ptService.getResultFormated(element_r14.Result), " ");
  }
}
function AccessionTemplateTenComponent_td_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 49);
    \u0275\u0275template(1, AccessionTemplateTenComponent_td_28_span_1_Template, 2, 5, "span", 51);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r14 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("title", element_r14.Result);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.selectedDate !== void 0);
  }
}
function AccessionTemplateTenComponent_tr_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 53);
  }
}
function AccessionTemplateTenComponent_tr_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 54);
  }
}
function AccessionTemplateTenComponent_section_31_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "h5", 57);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "p", 58);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const data_r15 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", data_r15.Parameter, " ");
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(data_r15.Result, data_r15.TestNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionTemplateTenComponent_section_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "section", 55);
    \u0275\u0275template(1, AccessionTemplateTenComponent_section_31_div_1_Template, 4, 2, "div", 56);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.testNoteList);
  }
}
function AccessionTemplateTenComponent_div_32_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r16 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", element_r16.Parameter, " - ", element_r16.Result, "");
  }
}
function AccessionTemplateTenComponent_div_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 59);
    \u0275\u0275template(1, AccessionTemplateTenComponent_div_32_span_1_Template, 2, 2, "span", 56);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.patientService == null ? null : ctx_r0.patientService.dataSourceVS2);
  }
}
var AccessionTemplateTenComponent = class _AccessionTemplateTenComponent {
  constructor(labelService, ptService, commonService) {
    this.labelService = labelService;
    this.ptService = ptService;
    this.commonService = commonService;
    this.displayedColumns = ["Parameter", "date1", "Units", "Range", "GraphResult"];
    this.mdfound = false;
    this.mifound = false;
    this.ccfound = false;
    this.selectedLatestDate = null;
    this.patientService = {};
    this.showMore1 = false;
    this.testNoteList = [];
  }
  ngOnInit() {
    this.patientService = this.data;
    this.testNoteList = this.patientService?.dataSource.data.filter((ele) => {
      if (ele.TestNote) {
        return ele;
      }
    });
    console.log("testNoteList =>", this.testNoteList);
  }
  replaceSpecialChar(name) {
    return name.replace("%", "pc").replace("#", "hs").replace(".", "dt").replace("(", "bo").replace(")", "bc");
  }
  isTextVisible(row) {
    return row.Result != null && row.Result != "" && isNaN(parseFloat(row.Result));
  }
  selectedRow(row) {
    this.expandedElement = row;
    this.patientService.selectedTestName = row.Parameter;
  }
  getTranslation(val) {
    let rtnValue = val;
    if (val != null && val != "") {
      switch (val.toLowerCase()) {
        case "low":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Low;
          break;
        case "high":
          rtnValue = this.labelService.dsAnaysisResultsScreen.High;
          break;
        case "out":
          rtnValue = this.labelService.dsAnaysisResultsScreen.Out;
          break;
      }
    }
    return rtnValue;
  }
  isNumber(val) {
    return typeof val;
  }
  rangeCheck(elm) {
    if (elm.MinRange || elm.MaxRange)
      return true;
    if (elm.MinRange === 0 || elm.MaxRange === 0)
      return true;
    return false;
  }
  static {
    this.\u0275fac = function AccessionTemplateTenComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionTemplateTenComponent)(\u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionTemplateTenComponent, selectors: [["app-accession-template-ten"]], inputs: { selectedDate: "selectedDate", data: "data" }, decls: 33, vars: 6, consts: [["refLabRange", ""], ["generalContent", ""], ["resultBlock", ""], [1, "accesspart", "accpart", 2, "width", "100%"], ["summary", "", "mat-table", "", "multiTemplateDataRows", "", 1, "sticky_table", 3, "dataSource"], ["matColumnDef", "Parameter"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "Range"], ["mat-header-cell", "", "class", "dref", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "dref text-lighter", 4, "matCellDef"], ["matColumnDef", "Units"], ["mat-header-cell", "", "class", "units", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "units text-lighter", 4, "matCellDef"], ["matColumnDef", "GraphResult"], ["matColumnDef", "date1"], ["mat-cell", "", 3, "title", 4, "matCellDef"], ["matColumnDef", "date2"], ["matColumnDef", "date3"], ["matColumnDef", "date4"], ["matColumnDef", "Result"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "student-element-row", 4, "matRowDef", "matRowDefColumns"], ["class", "text-block", "style", "width:100%", 4, "ngIf"], ["class", "d-flex justify-content-center lstrow", 4, "ngIf"], ["mat-header-cell", ""], ["mat-cell", ""], [1, "d-block", "align-items-center"], ["src", "../../../../assets/img/info-icon.svg", "class", "test_info_icon pl-1", "alt", "", 3, "matTooltip", "matTooltipPosition", "click", 4, "ngIf"], ["src", "../../../../assets/img/info-icon.svg", "alt", "", 1, "test_info_icon", "pl-1", 3, "click", "matTooltip", "matTooltipPosition"], ["mat-header-cell", "", 1, "dref"], ["mat-cell", "", 1, "dref", "text-lighter"], [4, "ngIf", "ngIfElse"], [4, "ngIf"], ["mat-header-cell", "", 1, "units"], ["mat-cell", "", 1, "units", "text-lighter"], ["id", "result-block", 1, "d-flex", "align-items-center", "justify-content-start", "align-indicator"], ["class", "d-flex  align-items-center graph-wrapper justify-content-start", 4, "ngIf", "ngIfElse"], ["class", "clsRed indicator ml-1", 4, "ngIf"], ["class", "clsRed indicator ml-1 no-underline", 4, "ngIf"], ["class", "w-100 d-flex  align-items-center graph-wrapper", 4, "ngIf"], [1, "d-flex", "align-items-center", "graph-wrapper", "justify-content-start"], ["mode", "determinate", 1, "nothumb", 3, "max"], ["class", "d-flex  align-items-center graph-wrapper justify-content-start", 4, "ngIf"], ["mode", "determinate", 3, "ngClass", "max", "value"], [1, "clsRed", "indicator", "ml-1"], [1, "clsRed", "indicator", "ml-1", "no-underline"], [1, "w-100", "d-flex", "align-items-center", "graph-wrapper"], [1, "date_block"], ["mat-cell", "", 3, "title"], [2, "font-weight", "bolder"], ["class", "pink", "style", "font-weight: bolder;", 3, "ngClass", 4, "ngIf"], [1, "pink", 2, "font-weight", "bolder", 3, "ngClass"], ["mat-header-row", ""], ["mat-row", "", 1, "student-element-row"], [1, "text-block", 2, "width", "100%"], [4, "ngFor", "ngForOf"], [2, "font-weight", "bold"], [3, "innerHTML"], [1, "d-flex", "justify-content-center", "lstrow"]], template: function AccessionTemplateTenComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 3)(1, "table", 4);
        \u0275\u0275elementContainerStart(2, 5);
        \u0275\u0275template(3, AccessionTemplateTenComponent_th_3_Template, 2, 1, "th", 6)(4, AccessionTemplateTenComponent_td_4_Template, 5, 5, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(5, 8);
        \u0275\u0275template(6, AccessionTemplateTenComponent_th_6_Template, 2, 1, "th", 9)(7, AccessionTemplateTenComponent_td_7_Template, 4, 2, "td", 10);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(8, 11);
        \u0275\u0275template(9, AccessionTemplateTenComponent_th_9_Template, 2, 1, "th", 12)(10, AccessionTemplateTenComponent_td_10_Template, 2, 1, "td", 13);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(11, 14);
        \u0275\u0275template(12, AccessionTemplateTenComponent_th_12_Template, 2, 1, "th", 6)(13, AccessionTemplateTenComponent_td_13_Template, 9, 6, "td", 7);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(14, 15);
        \u0275\u0275template(15, AccessionTemplateTenComponent_th_15_Template, 3, 1, "th", 6)(16, AccessionTemplateTenComponent_td_16_Template, 3, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(17, 17);
        \u0275\u0275template(18, AccessionTemplateTenComponent_th_18_Template, 3, 1, "th", 6)(19, AccessionTemplateTenComponent_td_19_Template, 2, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(20, 18);
        \u0275\u0275template(21, AccessionTemplateTenComponent_th_21_Template, 3, 1, "th", 6)(22, AccessionTemplateTenComponent_td_22_Template, 2, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(23, 19);
        \u0275\u0275template(24, AccessionTemplateTenComponent_th_24_Template, 3, 1, "th", 6)(25, AccessionTemplateTenComponent_td_25_Template, 2, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(26, 20);
        \u0275\u0275template(27, AccessionTemplateTenComponent_th_27_Template, 3, 1, "th", 6)(28, AccessionTemplateTenComponent_td_28_Template, 2, 2, "td", 16);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(29, AccessionTemplateTenComponent_tr_29_Template, 1, 0, "tr", 21)(30, AccessionTemplateTenComponent_tr_30_Template, 1, 0, "tr", 22);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(31, AccessionTemplateTenComponent_section_31_Template, 2, 1, "section", 23)(32, AccessionTemplateTenComponent_div_32_Template, 2, 1, "div", 24);
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275property("dataSource", ctx.patientService == null ? null : ctx.patientService.dataSource);
        \u0275\u0275advance(28);
        \u0275\u0275property("matHeaderRowDef", ctx.displayedColumns)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.displayedColumns);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.testNoteList == null ? null : ctx.testNoteList.length) > 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", (ctx.patientService == null ? null : ctx.patientService.dataSourceVS2) !== null && (ctx.patientService.dataSourceVS2 == null ? null : ctx.patientService.dataSourceVS2.length) > 0 && ctx.patientService.categoryName.toLocaleLowerCase() === "vetscan vs2");
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacySlider, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatLegacyTooltip], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 0 10px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\n.align-indicator[_ngcontent-%COMP%] {\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n  margin-left: 28px;\n}\n  .mat-tooltip {\n  max-width: 100% !important;\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indi-con[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n  text-decoration: underline;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  margin-top: 1.6rem !important;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 40% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 0 10px;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  padding-left: 3px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 10px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n.date_block[_ngcontent-%COMP%] {\n  width: 105px;\n  padding: 0px 12px 0 0;\n  white-space: normal;\n  display: block;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.test_info_icon[_ngcontent-%COMP%] {\n  vertical-align: middle !important;\n  padding-right: 5px;\n  padding-left: 0 !important;\n  margin-left: 0;\n}\n.headtxt[_ngcontent-%COMP%] {\n  cursor: pointer;\n  width: 91%;\n  float: right;\n}\n.flt-lft[_ngcontent-%COMP%] {\n  float: left !important;\n}\n@media screen and (max-width: 767px) {\n  .test-note[_ngcontent-%COMP%] {\n    margin-left: 0;\n  }\n  .accesspart.accpart[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type {\n    padding-left: 18px !important;\n  }\n  .accesspart[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:last-of-type {\n    padding-right: inherit;\n  }\n  td.mat-cel[_ngcontent-%COMP%]:first-of-type, \n   td.mat-footer-cel[_ngcontent-%COMP%]:first-of-type, \n   th.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n    min-width: 155px;\n  }\n  .headtxt[_ngcontent-%COMP%] {\n    cursor: pointer;\n    width: 70%;\n    float: right;\n  }\n}\n.text-lighter[_ngcontent-%COMP%] {\n  opacity: 0.9 !important;\n}\n/*# sourceMappingURL=accession-template-ten.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionTemplateTenComponent, { className: "AccessionTemplateTenComponent", filePath: "src\\app\\components\\accession-results\\templates\\accession-template-ten\\accession-template-ten.component.ts", lineNumber: 17 });
})();

// src/app/components/accession-results/accession-results.component.ts
var _c024 = ["nav"];
function AccessionResultsComponent_span_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientDetails.SpeciesName + ",", " ");
  }
}
function AccessionResultsComponent_span_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientDetails.BreedName + ",", " ");
  }
}
function AccessionResultsComponent_span_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientDetails.Dob + ",", " ");
  }
}
function AccessionResultsComponent_span_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.patientDetails.GenderName, " ");
  }
}
function AccessionResultsComponent_div_56_span_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 35)(1, "button", 36);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_56_span_2_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.getRecords());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r0.labelService.accessionResultScreen.AddAPanel);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.accessionResultScreen.AddAPanel);
  }
}
function AccessionResultsComponent_div_56_span_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 37)(1, "img", 38);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_56_span_10_Template_img_click_1_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.goToConsultation());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r0.labelService.accessionResultScreen.ConsultationRequest);
  }
}
function AccessionResultsComponent_div_56_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 25)(1, "div", 26);
    \u0275\u0275template(2, AccessionResultsComponent_div_56_span_2_Template, 3, 2, "span", 27);
    \u0275\u0275elementStart(3, "span", 28)(4, "img", 29);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_56_Template_img_click_4_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.downloadMainfest());
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(5, "span", 28)(6, "img", 30);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_56_Template_img_click_6_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.getResultPdf("downloadPdf"));
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "span", 31)(8, "a", 32)(9, "img", 33);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_56_Template_img_click_9_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.getResultPdf("sendEmail"));
    });
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(10, AccessionResultsComponent_div_56_span_10_Template, 2, 1, "span", 34);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.orderId && ctx_r0.accessionId);
    \u0275\u0275advance(4);
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r0.labelService.accessionResultScreen.AccessionResultPDF);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("alt", ctx_r0.labelService.dsAnaysisResultsScreen.EmailResults);
    \u0275\u0275propertyInterpolate("ngbTooltip", ctx_r0.labelService.dsAnaysisResultsScreen.EmailResults);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.isBackOfficeUser);
  }
}
function AccessionResultsComponent_div_59_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 50);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "span", 51);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275text(4, " result ");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" This is ", test_r6.StatusName === "Amended" ? "an" : "a", " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(test_r6.StatusName);
  }
}
function AccessionResultsComponent_div_59_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 52);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_59_button_4_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r7);
      const test_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.viewHistory(test_r6));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.accessionResultScreen.ViewHistory);
  }
}
function AccessionResultsComponent_div_59_mat_panel_description_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-panel-description")(1, "span", 17);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 53);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.accessionResultScreen.ReviewedBy, ": \xA0 ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(test_r6.reviewedResult);
  }
}
function AccessionResultsComponent_div_59_button_13_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 54);
    \u0275\u0275listener("click", function AccessionResultsComponent_div_59_button_13_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r8);
      const test_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.viewHistory(test_r6));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.labelService.accessionResultScreen.ViewHistory);
  }
}
function AccessionResultsComponent_div_59_div_14_p_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 17);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", test_r6.AnalysisTypeName, " ");
  }
}
function AccessionResultsComponent_div_59_div_14_p_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275template(1, AccessionResultsComponent_div_59_div_14_p_1_span_1_Template, 2, 1, "span", 56);
    \u0275\u0275elementStart(2, "span", 17);
    \u0275\u0275text(3, "Notes: ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(4, "span", 57);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", test_r6.TemplateId === 10 || test_r6.TemplateId === 9 || test_r6.TemplateId === 12);
    \u0275\u0275advance(3);
    \u0275\u0275property("innerHTML", ctx_r0.commonService.getResultText(null, test_r6.PanelNote), \u0275\u0275sanitizeHtml);
  }
}
function AccessionResultsComponent_div_59_div_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 55);
    \u0275\u0275template(1, AccessionResultsComponent_div_59_div_14_p_1_Template, 5, 2, "p", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", test_r6.PanelNote);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_one_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-one", 63);
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r0.bigData[test_r6.AnalysisTypeName])("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_three_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-three", 64);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_four_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-four", 64);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_five_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-five", 64);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_six_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-accession-template-six", 65);
    \u0275\u0275listener("viewImages", function AccessionResultsComponent_div_59_div_15_app_accession_template_six_5_Template_app_accession_template_six_viewImages_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.viewImageTemp6($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_seven_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "app-accession-template-seven", 65);
    \u0275\u0275listener("viewImages", function AccessionResultsComponent_div_59_div_15_app_accession_template_seven_6_Template_app_accession_template_seven_viewImages_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.viewImageTemp6($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_nine_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-nine", 63);
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r0.bigData[test_r6.AnalysisTypeName])("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_ten_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-ten", 63);
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r0.bigData[test_r6.AnalysisTypeName])("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_12_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-12", 66);
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("labReports", ctx_r0.labReports)("data", ctx_r0.bigData[test_r6.AnalysisTypeName])("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_app_accession_template_13_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "app-accession-template-13", 63);
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("data", ctx_r0.bigData[test_r6.AnalysisTypeName])("selectedDate", ctx_r0.selectedLatestDate);
  }
}
function AccessionResultsComponent_div_59_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 58);
    \u0275\u0275template(1, AccessionResultsComponent_div_59_div_15_app_accession_template_one_1_Template, 1, 2, "app-accession-template-one", 59)(2, AccessionResultsComponent_div_59_div_15_app_accession_template_three_2_Template, 1, 1, "app-accession-template-three", 60)(3, AccessionResultsComponent_div_59_div_15_app_accession_template_four_3_Template, 1, 1, "app-accession-template-four", 60)(4, AccessionResultsComponent_div_59_div_15_app_accession_template_five_4_Template, 1, 1, "app-accession-template-five", 60)(5, AccessionResultsComponent_div_59_div_15_app_accession_template_six_5_Template, 1, 1, "app-accession-template-six", 61)(6, AccessionResultsComponent_div_59_div_15_app_accession_template_seven_6_Template, 1, 1, "app-accession-template-seven", 61)(7, AccessionResultsComponent_div_59_div_15_app_accession_template_nine_7_Template, 1, 2, "app-accession-template-nine", 59)(8, AccessionResultsComponent_div_59_div_15_app_accession_template_ten_8_Template, 1, 2, "app-accession-template-ten", 59)(9, AccessionResultsComponent_div_59_div_15_app_accession_template_12_9_Template, 1, 3, "app-accession-template-12", 62)(10, AccessionResultsComponent_div_59_div_15_app_accession_template_13_10_Template, 1, 2, "app-accession-template-13", 59);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const test_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 1 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 3 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 4 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 5 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 6 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 7 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 9 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 10 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 12 && ctx_r0.readyToShow);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (ctx_r0.bigData[test_r6.AnalysisTypeName] == null ? null : ctx_r0.bigData[test_r6.AnalysisTypeName].templateId) === 13 && ctx_r0.readyToShow);
  }
}
function AccessionResultsComponent_div_59_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 39);
    \u0275\u0275template(1, AccessionResultsComponent_div_59_p_1_Template, 5, 2, "p", 40);
    \u0275\u0275elementStart(2, "mat-expansion-panel", 41);
    \u0275\u0275listener("opened", function AccessionResultsComponent_div_59_Template_mat_expansion_panel_opened_2_listener() {
      const test_r6 = \u0275\u0275restoreView(_r5).$implicit;
      return \u0275\u0275resetView(test_r6.isOpened = true);
    })("closed", function AccessionResultsComponent_div_59_Template_mat_expansion_panel_closed_2_listener() {
      const test_r6 = \u0275\u0275restoreView(_r5).$implicit;
      return \u0275\u0275resetView(test_r6.isOpened = false);
    });
    \u0275\u0275elementStart(3, "mat-expansion-panel-header");
    \u0275\u0275template(4, AccessionResultsComponent_div_59_button_4_Template, 2, 1, "button", 42);
    \u0275\u0275elementStart(5, "mat-panel-title", 43)(6, "p")(7, "span", 44);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "span", 45);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(11, "div", 46);
    \u0275\u0275template(12, AccessionResultsComponent_div_59_mat_panel_description_12_Template, 5, 2, "mat-panel-description", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275template(13, AccessionResultsComponent_div_59_button_13_Template, 2, 1, "button", 47);
    \u0275\u0275elementEnd();
    \u0275\u0275template(14, AccessionResultsComponent_div_59_div_14_Template, 2, 1, "div", 48)(15, AccessionResultsComponent_div_59_div_15_Template, 11, 10, "div", 49);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const test_r6 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", test_r6.AnalysisTypeId + "-cls mt-3 dropdwn");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.commonService.ACPText(test_r6));
    \u0275\u0275advance();
    \u0275\u0275property("expanded", true);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", test_r6.isOpened);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1("", ctx_r0.labelService.accessionResultScreen.AnalysisType, ": ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1("", test_r6.AnalysisTypeName, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", test_r6.isOpened && test_r6.reviewedResult);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", test_r6.isOpened);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", test_r6.TemplateId !== 13 && test_r6.isOpened);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", test_r6.isOpened);
  }
}
var AccessionResultsComponent = class _AccessionResultsComponent {
  constructor(patientService, commonService, router, headerService, labelService, dataService, confirmationDialogService, EncrDecr, title, modalService, refLabService, fuseService, sidefilterService, toaster) {
    this.patientService = patientService;
    this.commonService = commonService;
    this.router = router;
    this.headerService = headerService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.confirmationDialogService = confirmationDialogService;
    this.EncrDecr = EncrDecr;
    this.title = title;
    this.modalService = modalService;
    this.refLabService = refLabService;
    this.fuseService = fuseService;
    this.sidefilterService = sidefilterService;
    this.toaster = toaster;
    this.isAnalyzerChanged = false;
    this.dsDate = [];
    this.dsImagyst = [];
    this.originalDataAnalysisType = [];
    this.dsAnalyzer = [];
    this.dsAnalysisType = [];
    this.analysisTypeName = "";
    this.selectedLatestDate = "";
    this.orderId = "";
    this.templateId = 0;
    this.accessionId = "";
    this.physicianName = "";
    this.reviewedBy = "";
    this.reviewedResult = "";
    this.prelimText = "";
    this.readyToShow = false;
    this.bigData = /* @__PURE__ */ Object.create(null);
    this.tests = [];
    this.currentSelectedTest = null;
    this.filterData = null;
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.labResults = null;
    this.labReports = [];
    this.labReportFilterByAnalysisType = [];
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.businessId = parseInt(this.dataService.appData.authDetails["BusinessId"]);
    this.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.refLAbClinicId = this.dataService.appData.authDetails["BackOfficeFlag"] && this.bckBusinessInfo ? this.bckBusinessInfo["RefLabClinicId"] : this.dataService.appData.authDetails["RefLabClinicId"];
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.bindAnaysisResultsLabel();
    }
    this.getnSetCompatiableDetails();
    localStorage.setItem("prevPageFix", "accession-results");
  }
  ngOnInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.accessionResultScreen.AccessionResult}`);
  }
  getnSetCompatiableDetails() {
    this.patientDetails = this.patientService.patientDetails;
    this.sidefilterService.filter = new SideFilter();
    this.isBackOfficeUser = this.dataService.appData.authDetails["BackOfficeFlag"];
    this.isConsultantUser = this.dataService.appData.authDetails["IsConsultantUser"];
    this.sidefilterService.filter.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.LanguageId = this.labelService.selectedLanguage;
    this.sidefilterService.filter.IsApplyFilter = true;
    this.sidefilterService.filter.IsExactFilter = true;
    this.sidefilterService.filter["IsPatientInfo"] = true;
    this.sidefilterService.filter.PatientId = this.patientService.patientDetails?.PatientId;
    this.sidefilterService.filter.ZDXPatientInfoId = this.patientService.patientDetails?.ZDXPatientId;
    this.sidefilterService.filter.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    this.patientService.getPatientInfo(this.sidefilterService.filter).subscribe((data) => {
      this.patientService.patientDetails.Details = data.ResponseData.DashboardPatientList[0].Details;
      this.patientService.patientDetails["AnalysisTypeToGetTestReslt"] = this.patientService.patientDetails.Details.find((x) => x.AccessionNumber == this.patientService.patientDetails.spacificAccessionId);
      this.patientDetails = this.patientService.patientDetails;
      this.patientDetails.Details.forEach((v) => v.isOpened = false);
      this.setPatientDetails();
    });
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.bindAnaysisResultsLabel();
    });
  }
  ngAfterViewInit() {
    this.title.setTitle(`ZoetisDx | ${this.labelService.accessionResultScreen.AccessionResult}`);
    try {
      this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
        this.labelService.dsLabelData = data.ResponseData;
        this.labelService.getAccessionResultScreen();
      }, (err) => {
        console.log(JSON.stringify(err));
      });
    } catch (error) {
      console.log(error);
    }
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "Accession-Results");
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  onAnalysisTypeChange(test) {
    test.isOpened = true;
    this.currentSelectedTest = test;
    this.patientResultByFilter.AnalysisTypeName = test.AnalysisTypeName;
    this.scrollTo("." + test.AnalysisTypeId + "-cls");
    this.bindDataSource();
  }
  setPatientDetails() {
    this.patientDetails = this.patientService.patientDetails;
    this.patientService.selectedTestName = "";
    this.patientResultByFilter = new PatientResultByFilter();
    this.patientResultByFilter.PatientId = this.patientDetails.PatientId;
    this.patientResultByFilter.FromDate = null;
    this.txtFromDate = null;
    this.patientResultByFilter.ToDate = null;
    this.txtToDate = null;
    this.patientResultByFilter.BusinessGuid = this.BusinessGuid;
    const getAnalyzer_name = this.patientDetails.Analyzer ? this.patientDetails.Analyzer : "";
    const getAnalysisTypeName = this.patientDetails.AnalysisTypeName ? this.patientDetails.AnalysisTypeName : "";
    const getSourceType = this.patientDetails.SourceType ? this.patientDetails.SourceType : "";
    this.patientResultByFilter.Analyzer = this.patientDetails.AnalysisTypeToGetTestReslt != null ? this.patientDetails.AnalysisTypeToGetTestReslt.Analyzer : getAnalyzer_name;
    this.patientResultByFilter.SourceType = this.patientDetails.AnalysisTypeToGetTestReslt != null ? this.patientDetails.AnalysisTypeToGetTestReslt.SourceType : getSourceType;
    this.patientResultByFilter.AnalysisTypeName = this.patientDetails.AnalysisTypeToGetTestReslt != null ? this.patientDetails.AnalysisTypeToGetTestReslt.AnalysisTypeName : getAnalysisTypeName;
    this.selectedLatestDate = "All";
    this.physicianName = this.patientDetails.AnalysisTypeToGetTestReslt ? this.patientDetails.AnalysisTypeToGetTestReslt.PhysicianName : this.patientDetails.PhysicianName;
    this.physicianName = this.formatPhysicianName(this.physicianName);
    this.currentSelectedTest = this.patientDetails.AnalysisTypeToGetTestReslt;
    this.patientService.getAnalyzer(this.BusinessGuid).subscribe((data) => {
      this.dsAnalyzer = data.ResponseData.Analyzers;
      this.getAnalysisResults();
    });
    if (this.patientDetails.Details && this.patientDetails.Details.length) {
      const completedRefLabs = this.patientDetails.Details.filter((x) => x.SourceType == "ReferenceLab" && x.AnalysisStatusName == "Completed");
      this.tests = completedRefLabs.filter((x) => x.AccessionNumber == this.patientDetails.AnalysisTypeToGetTestReslt.AccessionNumber);
      this.patientDetails.Details = completedRefLabs;
    }
  }
  getAnalysisResults() {
    this.dsDate = [];
    this.patientService.imageObject = [];
    this.patientResultByFilter.AccessionNumber = this.patientDetails.AnalysisTypeToGetTestReslt.AccessionNumber;
    this.patientResultByFilter.LanguageId = this.labelService.selectedLanguage;
    this.patientResultByFilter.UserGuid = this.headerService.loginUserGuid;
    this.patientResultByFilter.ZDXPatientInfoId = this.dataService.appState.selectedResult.element["ZDXPatientId"];
    this.patientResultByFilter.IsBackOfficeUser = this.isConsultantUser || this.isBackOfficeUser ? true : false;
    if (this.txtFromDate != null && this.txtFromDate != "")
      this.patientResultByFilter.FromDate = (0, import_moment3.default)(this.txtFromDate).format("MM/DD/YYYY 00:00:00");
    if (this.txtToDate != null && this.txtToDate != "")
      this.patientResultByFilter.ToDate = (0, import_moment3.default)(this.txtToDate).format("MM/DD/YYYY 23:59:59");
    this.patientService.getResultDetails(this.patientResultByFilter).subscribe({
      next: (data) => {
        this.patientService.originalData = data.ResponseData["LabResults"];
        this.labResults = data.ResponseData && data.ResponseData["LabResults"] && data.ResponseData["LabResults"].length > 0 ? data.ResponseData["LabResults"][0] : null;
        this.labReports = this.labResults ? this.labResults["LabReports"] : [];
        const recIds = [];
        this.tests.forEach((v) => {
          recIds.push(v.RecID);
          setTimeout(() => {
            v.isOpened = true;
            this.currentSelectedTest = v;
            this.patientResultByFilter.AnalysisTypeName = v.AnalysisTypeName;
            this.bindDataSource();
          }, 500);
        });
        if (this.commonService.isInternalUsers()) {
          const req = {
            BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
            UserGuid: this.dataService.appData.authDetails["UserGuid"],
            ObjResultTagModel: [
              {
                Source: "ReferenceLab",
                ResultIds: recIds.join(","),
                Tag: "READ"
              }
            ]
          };
          this.commonService.UpdateResultTag(req).subscribe((resp) => {
            console.log(resp);
          });
        }
      },
      error: () => {
        this.setDefaultDataSource();
      }
    });
  }
  bindDataSource() {
    this.patientService.imageObject = [];
    this.dsDate = [];
    this.patientService.dataService = null;
    this.patientService.orgDataSet = [];
    this.templateId = 0;
    this.patientService.SourceType = "ReferenceLab";
    this.orderId = this.patientService.patientDetails["OrderNumber"] || this.patientService.originalData[0]["OrderNumber"];
    this.accessionId = this.patientService.patientDetails["AccessionNumber"] || this.patientService.originalData[0]["AccessionNumber"];
    this.prelimText = this.patientService.patientDetails && this.patientService.patientDetails.LabReports && this.patientService.patientDetails.LabReports.length > 0 && this.patientService.patientDetails.LabReports[0].PrelimText ? this.patientService.patientDetails.LabReports[0].PrelimText : null;
    if (this.labReports.length) {
      this.patientService.orgDataSet = this.labReports.filter((x) => x.AnalyzerName == this.patientResultByFilter.Analyzer && x.AnalysisTypeName == this.patientResultByFilter.AnalysisTypeName);
    }
    if (this.patientService.orgDataSet.length) {
      this.patientService.orgDataSet.forEach((element) => {
        this.dsDate.push(element.DateReceived);
      });
      this.dsDate = this.dsDate.filter((n, i) => this.dsDate.indexOf(n) === i);
      this.dsDate = this.sortDate(this.dsDate);
      this.dsDate.forEach((ele) => {
        this.patientService.imageObject.push({ title: ele });
      });
      this.filterAnalysisResults();
    }
  }
  sortDate(date) {
    date.sort(function(a, b) {
      if (new Date(b) > new Date(a))
        return 1;
      if (new Date(b) < new Date(a))
        return -1;
      return 0;
    }).reverse();
    return date;
  }
  filterAnalysisResults() {
    this.selectedLatestDate = "All";
    this.dsImagyst = [];
    this.patientService.dataSourceTop = [];
    this.filterData = JSON.parse(JSON.stringify(this.patientService.orgDataSet));
    this.templateId = this.filterData.find((x) => x.TemplateId != null && x.TemplateId != "")["TemplateId"];
    this.patientService.categoryName = this.patientResultByFilter.Analyzer;
    if (this.templateId != 6) {
      const reviewedByObj = this.filterData.find((x) => x.PanelTestId == "2232");
      this.dsImagyst = this.filterData.filter((x) => x.Parameter != null && x.Parameter.indexOf("_IMG") != -1);
      this.patientService.dataSourceTop = this.filterData.filter((x) => x.Parameter != null && x.TestTypeId == EnmTestType.Top);
      this.filterData = this.filterData.filter((x) => x.Parameter != null && x.Parameter.indexOf("_IMG") == -1 && x.PanelTestId != "2232" && x.TestTypeId != EnmTestType.Top);
      if (reviewedByObj != void 0) {
        this.reviewedBy = reviewedByObj["Parameter"];
        this.reviewedResult = reviewedByObj["Result"];
        this.currentSelectedTest.reviewedBy = reviewedByObj["Parameter"];
        this.currentSelectedTest.reviewedResult = reviewedByObj["Result"];
      }
    } else {
      if (this.selectedLatestDate != "All" && this.selectedLatestDate != "") {
        this.filterData = this.filterData.filter((x) => x.DateReceived == this.selectedLatestDate && x.Parameter != null && (x.TestTypeId == EnmTestType.CytoTest || x.TestTypeId == EnmTestType.ImageList));
      }
    }
    this.getDSBackDate();
  }
  getDSBackDate() {
    this.patientService.dataSource = null;
    this.patientService.dataSourceUA = null;
    let filterDataSet = JSON.parse(JSON.stringify(this.filterData));
    if (this.patientService.backdDteOfSelectedLatestDate.length && this.templateId != 6) {
      const refRengeLabel = this.labelService.dsAnaysisResultsScreen.RefRange;
      this.filterData.forEach((element, indx) => {
        this.patientService.backdDteOfSelectedLatestDate.forEach((subEle, subIndx) => {
          const nextDateData = this.patientService.orgDataSet.find((x) => x.DateReceived == subEle && x.Parameter == element.Parameter);
          const colName = "DynamicDate" + (subIndx + 1);
          const colNameIndicator = colName + "_Indicator";
          const colNameRefRange = colName + "_RefRange";
          const colNameResult = colName + "_Result";
          const colNameTestNote = colName + "_TestNote";
          const colNameParameter = colName + "_Parameter";
          if (nextDateData != void 0) {
            filterDataSet[indx][colName] = this.patientService.backdDteOfSelectedLatestDate[subIndx];
            filterDataSet[indx][colNameIndicator] = nextDateData["Indicator"];
            filterDataSet[indx][colNameRefRange] = refRengeLabel + ": " + (nextDateData["MinRange"] != null ? nextDateData["MinRange"] : "") + "-" + (nextDateData["MaxRange"] != null ? nextDateData["MaxRange"] : "");
            filterDataSet[indx][colNameResult] = nextDateData["Result"] != void 0 && nextDateData["Result"] != null && nextDateData["Result"].trim() != "" ? nextDateData["Result"] : "--";
            filterDataSet[indx][colNameTestNote] = nextDateData["TestNote"];
            filterDataSet[indx][colNameParameter] = nextDateData["Parameter"];
          }
        });
      });
    }
    switch (this.templateId) {
      case 4:
        this.patientService.dataSource = new MatLegacyTableDataSource(filterDataSet.filter((x) => x.TestTypeId == EnmTestType.SATest));
        this.patientService.dataSourceUA = new MatLegacyTableDataSource(filterDataSet.filter((x) => x.TestTypeId == EnmTestType.UATest));
        this.patientService.dataSourceVS2 = null;
        break;
      case 5:
        filterDataSet = filterDataSet.filter((x) => x.TestTypeId == EnmTestType.OvaOocysts);
        this.patientService.dataSource = new MatLegacyTableDataSource(Array.from(new Set(filterDataSet.map((x) => x.AnalyteDesc))).map((id) => {
          return {
            "AnalyteDesc": id,
            "DateReceived": filterDataSet.find((ele) => ele.AnalyteDesc == id).DateReceived,
            "ResultDetection": filterDataSet.find((ele) => ele.AnalyteDesc == id && ele.Parameter != null && ele.Parameter.toString().toLowerCase().indexOf("_dt") >= 0) != void 0 ? filterDataSet.find((e) => e.AnalyteDesc == id && e.Parameter != null && e.Parameter.toString().toLowerCase().indexOf("_dt") >= 0).Result : "false",
            "ResultCount": filterDataSet.find((ele) => ele.AnalyteDesc == id && ele.Parameter != null && ele.Parameter.toString().toLowerCase().indexOf("_ct") >= 0) != void 0 ? filterDataSet.find((e) => e.AnalyteDesc == id && e.Parameter != null && e.Parameter.toString().toLowerCase().indexOf("_ct") >= 0).Result : "0"
          };
        }));
        break;
      case 6:
        this.getDataSetForTempSix();
        break;
      default:
        if (this.templateId == 1) {
          this.patientService.dataSourceVS2 = filterDataSet.filter((x) => x.TestTypeId == EnmTestType.VS2Test);
        } else {
          this.patientService.dataSourceVS2 = null;
        }
        if (this.templateId == 7) {
          this.getDataImageForTempSeven();
        }
        if (this.templateId == 12) {
          this.selectedLatestDate = filterDataSet.length > 0 ? filterDataSet[0]["DateReceived"] : "All";
        }
        filterDataSet = filterDataSet.filter((ele) => {
          if (ele.Result == "SEE DETAILS" || ele.Result == "See Note") {
            if (ele.TestNote) {
              return ele;
            }
          } else {
            return ele;
          }
        });
        this.patientService.dataSource = new MatLegacyTableDataSource(filterDataSet.filter((x) => x.TestTypeId == EnmTestType.ForAll));
        this.patientService.dataSourceUA = null;
        console.log(this.patientService.dataSource.filteredData);
    }
    this.bigData[this.currentSelectedTest.AnalysisTypeName] = __spreadValues({}, this.patientService);
    this.bigData[this.currentSelectedTest.AnalysisTypeName].templateId = this.templateId;
    this.readyToShow = true;
  }
  getDataSetForTempSix() {
    let cytoTestDisclaimer;
    this.patientService.cytoTestData = [];
    this.patientService.cytoTestSingnature = [];
    this.patientService.cytoTestDisclaimerText = "";
    let filterDataSet = JSON.parse(JSON.stringify(this.filterData));
    if (this.filterData.length) {
      this.patientService.cytoTestSingnature = filterDataSet.filter((x) => x.TestTypeId == EnmTestType.CytoTest && x.Parameter != null && x.Parameter.toLowerCase().indexOf("s_") == 0);
      cytoTestDisclaimer = filterDataSet.find((x) => x.DisclaimerText != null);
      this.patientService.cytoTestDisclaimerText = cytoTestDisclaimer != void 0 ? cytoTestDisclaimer["DisclaimerText"] : "";
      filterDataSet = filterDataSet.filter((x) => (x.TestTypeId == EnmTestType.CytoTest || x.TestTypeId == EnmTestType.ImageList) && x.Parameter != null && x.Parameter.toLowerCase().indexOf("s_") != 0);
      this.patientService.cytoTestData = Array.from(new Set(filterDataSet.map((x) => x.Parameter.split("_")[0]))).map((key) => {
        return {
          "GroupName": key + (filterDataSet.find((e) => e.TestTypeId == EnmTestType.CytoTest && e.Parameter != null && e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null && e.AnalyteDesc.toLowerCase() == "site name") != void 0 ? "_" + filterDataSet.find((e) => e.TestTypeId == EnmTestType.CytoTest && e.Parameter != null && e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null && e.AnalyteDesc.toLowerCase() == "site name")["Result"] : ""),
          "CytoTestImages": filterDataSet.filter((e) => e.TestTypeId == EnmTestType.ImageList && e.Parameter != null && e.Parameter.indexOf(key) == 0),
          "CytoTests": filterDataSet.filter((e) => e.TestTypeId == EnmTestType.CytoTest && e.Parameter != null && e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null && e.AnalyteDesc.toLowerCase() != "site name")
        };
      });
    }
  }
  getDataImageForTempSeven() {
    this.patientService.imgData = [];
    const filterDataImage = JSON.parse(JSON.stringify(this.dsImagyst));
    if (this.dsImagyst.length) {
      this.patientService.imgData = Array.from(new Set(filterDataImage.map((x) => x.Parameter.split("_")[0]))).map((key) => {
        return {
          "GroupName": filterDataImage.find((e) => e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null) != void 0 ? filterDataImage.find((e) => e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null)["AnalyteDesc"].split("image")[0].trim() : key,
          "Images": filterDataImage.filter((e) => e.Parameter.indexOf(key) == 0 && e.AnalyteDesc != null)
        };
      });
    }
  }
  getAnalysisIdForPDF(dt) {
    return this.patientService.orgDataSet.find((x) => x.DateReceived == dt)["AnalysisTypeId"];
  }
  viewImageTemp6(imgObj) {
    if (imgObj != void 0 && imgObj != null) {
      this.viewImageSlider(imgObj.ImageList, imgObj.ImageIndex);
    }
  }
  viewImageSlider(imageList, imgIndex) {
    const modalRef = this.modalService.open(ImageSliderComponent, {
      centered: true,
      scrollable: false,
      backdrop: "static"
    });
    modalRef.componentInstance.imageList = imageList;
    modalRef.componentInstance.patientDetails = this.patientDetails;
    modalRef.componentInstance.currentIndex = imgIndex;
    modalRef.componentInstance.analyzerDispName = this.dsAnalyzer.find((x) => x.AnalyzerName == this.patientResultByFilter.Analyzer)["AnalyzerDisplayName"];
  }
  showMsg(msg) {
    if (msg == void 0 || msg == null || msg == "")
      this.confirmationDialogService.confirm("", msg, this.labelService.dsAnaysisResultsScreen.Ok, "", "sm", true, false).then((confirmed) => {
        console.log(confirmed);
      });
  }
  goToConsultation() {
    this.dataService.data.next(this.dataService.appData);
    this.dataService.appData.prevUrl = "dashboard";
    const emailId = this.bckBusinessInfo ? this.bckBusinessInfo["EmailId"] : "";
    let urlStr = "email=" + JSON.parse(localStorage.authDetails).Email + "&bkoClinicEmail=" + emailId + "&token=" + JSON.parse(localStorage.authDetails).access_token + "&refresh_token=" + JSON.parse(localStorage.authDetails).refresh_token + "&BusinessGuid=" + JSON.parse(localStorage.authDetails).BusinessGuid + "&deviceId=" + localStorage.UIGuid + "&clinicphone=" + JSON.parse(localStorage.authDetails).BusinessPhoneNo + "&clinicname=" + JSON.parse(localStorage.authDetails).BusinessName + "&patientName=" + this.patientDetails?.PatientName + "&species=" + this.patientDetails.SpeciesName + "&breed=" + this.patientDetails.BreedName + "&doctorname=" + this.physicianName + "&patientId=" + this.patientDetails.PatientId + "&ZDXPatientId=" + this.patientDetails.ZDXPatientId + "&ownerName=" + this.patientDetails.OwnerName + "&accessionId=" + this.accessionId + "&gender=" + this.patientDetails.Gender + "&age=" + this.patientDetails.Dob + "&timeZoneId=" + this.commonService.tzSelectMethod().timeZoneId + "&timeZoneName=" + this.commonService.tzSelectMethod().timeZoneName + "&Isbackoffice=" + JSON.parse(localStorage.authDetails).BackOfficeFlag + "&backUrl=" + window.location.href + "&TimeFormatId=" + this.dataService.appData.authDetails["TimeFormatId"] + "&TimeZoneId=" + this.dataService.appData.authDetails["TimeZoneId"] + "&DateFormatId=" + this.dataService.appData.authDetails["DateFormatId"] + "&ZDxUrl=" + this.commonService.getZDxUrl();
    urlStr = this.EncrDecr.encrypt(urlStr);
    if (this.headerService.isNRP) {
      this.commonService.getRedirectionKey({ "ValueString": urlStr }).subscribe((res) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + res.ResponseData;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } else {
      this.commonService.getEncryptDetail({ toEncryptStr: urlStr }).subscribe((data) => {
        window.location.href = environment.ZCSUrl + "#/user/consultation-request?ref=" + data.ResponseData.encryptedKey;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    }
  }
  getRecords() {
    this.dataService.appData.AccessionNumber = this.accessionId;
    this.dataService.data.next(this.dataService.appData);
    const daysDifference = this.commonService.getDaysDifference(this.tests[0].DateCreated, this.dataService.appData.serverDate);
    if (daysDifference > 7) {
      const msg = constant.addOnAccessionRestrictionPopupMsg;
      this.confirmationDialogService.confirm("Alert", msg, "Dismiss", "Cancel", "sm", true, false);
      return;
    }
    localStorage.setItem("lastOrderId", this.orderId);
    this.fuseService.getClinicDetails(this.refLAbClinicId, this.BusinessGuid).subscribe((res) => {
      const isReflabActive = res.ResponseData["is_active"] == "true" ? true : false;
      if (isReflabActive) {
        this.router.navigate(["/refLab/addOrder"]);
      } else {
        const msg = constant.consultRestrictionPopupMsg;
        this.confirmationDialogService.confirm("Alert", msg, "Dismiss", "Cancel", "sm", true, false);
      }
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  downloadMainfest() {
    this.refLabService.downloadableMainfest(this.orderId, this.BusinessGuid).subscribe((res) => {
      const blob = new Blob([res], { type: "application/pdf" });
      const objectURL = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = objectURL;
      a.target = "_blank";
      a.click();
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  getResultPdf(requestType) {
    if (requestType == "sendEmail") {
      this.dataService.appData["requestFrom"] = "AccessionPage";
      this.dataService.appData["downloadPdfRequestParams"] = { accessionId: this.accessionId, businessGuid: this.BusinessGuid };
      this.dataService.data.next(this.dataService.appData);
    } else {
      this.refLabService.downloadableAccession(this.accessionId, this.BusinessGuid).subscribe((data) => {
        const blob = new Blob([data], { type: "application/pdf" });
        const objectURL = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = objectURL;
        a.target = "_blank";
        a.click();
      }, (err) => {
        console.log(JSON.stringify(err));
        this.confirmationDialogService.confirm("", "No accession result pdf available", "OK", "Cancel", "sm", true, false).then((confirmed) => {
          console.log(confirmed);
        });
      });
    }
  }
  scrollTo(elmCls) {
    $("html, body").animate({
      scrollTop: $(elmCls).offset().top
    }, 1e3);
  }
  viewHistory(test) {
    test.isOpened = false;
    this.dataService.appState.selectedResult.element = this.patientDetails;
    this.dataService.appState.selectedResult.subElement = test;
    this.dataService.state.next(this.dataService.appState);
    this.patientService.showPataientTestResult(this.patientDetails, test, this.headerService.filter, null, null, null);
  }
  formatPhysicianName(name) {
    return name != void 0 && name != null && name != "" && name.toLocaleLowerCase() != "none" ? name : "N/A";
  }
  setDefaultDataSource() {
    this.patientService.dataSource = null;
    this.patientService.dataSourceUA = null;
    this.patientService.dataSourceTop = [];
    this.patientService.dataSourceVS2 = null;
    this.patientService.categoryName = "";
    this.patientService.backdDteOfSelectedLatestDate = [];
    this.patientService.dataSourceBackDate = null;
    this.patientService.isNextEnable = false;
    this.patientService.isPreviousEnable = false;
    this.templateId = 0;
    this.patientService.dataSourceGraphPoint1 = [];
    this.patientService.dataSourceGraphPoint2 = [];
  }
  static {
    this.\u0275fac = function AccessionResultsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AccessionResultsComponent)(\u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(FuseService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AccessionResultsComponent, selectors: [["app-accession-results"]], viewQuery: function AccessionResultsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c024, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.slider = _t.first);
      }
    }, decls: 60, vars: 20, consts: [[1, "wrapper", "accesswrap"], ["id", "content", 1, "page-wrapper", "access-wrap"], [1, "title-container", "icon-cont"], ["href", "javascript:void(0)", 1, "back-btn", 3, "click"], ["data-testid", "ars-title", 1, "page-title", "font-weight-bold"], ["src", "../../../assets/img/help-icon.svg", "matTooltipPosition", "below", "matTooltipClass", "below", "alt", "help-circle", 1, "iconquestion", 3, "click", "matTooltip"], ["id", "portal-outer1", 1, "portal-outer", "view-user", "result_block"], [1, "row"], [1, "col-sm-12", "pl-1", "pr-1"], [1, "pt-0", "mat-part"], [1, "col-lg-6", "accpart"], [1, "font-weight-bolder"], ["href", "javascript:void(0)", 3, "click"], [1, "row", "accession-result", "first-info", "col-12"], [1, "w-100", "ml-5", "pl-3"], [4, "ngIf"], [1, "w-100"], [1, "font-weight-bold"], [1, "col-lg-6", "mt-4", "mt-lg-0", "accpart"], [1, "row", "accession-result"], [1, "col-md-4", "col-lg-6"], [1, "col-md-12", "pr-3", "pr-lg-3"], ["class", "row m-0 w-100 pb-0", 4, "ngIf"], [1, "container", "container1"], ["style", "position: relative", 3, "ngClass", 4, "ngFor", "ngForOf"], [1, "row", "m-0", "w-100", "pb-0"], [1, "col-12", "picons", "p-0", "text-right", "d-flex", "justify-content-end", "align-items-end"], ["class", "imgs mr-1", 4, "ngIf"], [1, "mr-1", "imgs"], ["src", "../../../../assets/img/order_manifest.svg", "alt", "", "placement", "top", "ngbTooltip", "Requisition Form", 3, "click"], ["src", "../../../../assets/img/result-button@2x.svg", "alt", "", "placement", "top", 3, "click", "ngbTooltip"], [1, "lastimg", "deskview", "mx-1"], ["routerLink", "/communication/email"], ["src", "../../../../assets/img/emailicon.svg", "placement", "top", "height", "36", "DisableRightClick", "", 1, "adjusttip", 3, "click", "alt", "ngbTooltip"], ["class", "mr-0", 4, "ngIf"], [1, "imgs", "mr-1"], ["mat-raised-button", "", "type", "button", "color", "accent", "placement", "top", 1, "save-change", 3, "click", "ngbTooltip"], [1, "mr-0"], ["src", "../../../../assets/img/BlueBgConsultancy2x.svg", "alt", "", "placement", "top", 1, "aimg", 3, "click", "ngbTooltip"], [2, "position", "relative", 3, "ngClass"], ["class", "peramecorr accession", 4, "ngIf"], [3, "opened", "closed", "expanded"], ["class", "float-right mobile_button", "mat-stroked-button", "", "color", "blue", 3, "click", 4, "ngIf"], [2, "width", "100%"], [1, "mb-0", "p-title"], [1, "light-text", "mb-0"], [1, "accres"], ["class", "float-right desk_button mr-2 accBtn", "mat-stroked-button", "", "color", "blue", 3, "click", 4, "ngIf"], ["class", "col-12 nextp", 4, "ngIf"], ["class", "details-templates", 4, "ngIf"], [1, "peramecorr", "accession"], [1, "font-weight-bold", 2, "text-transform", "uppercase"], ["mat-stroked-button", "", "color", "blue", 1, "float-right", "mobile_button", 3, "click"], [1, "light-text"], ["mat-stroked-button", "", "color", "blue", 1, "float-right", "desk_button", "mr-2", "accBtn", 3, "click"], [1, "col-12", "nextp"], ["class", "font-weight-bold", 4, "ngIf"], [1, "light-text", 3, "innerHTML"], [1, "details-templates"], ["class", "w-100", 3, "data", "selectedDate", 4, "ngIf"], ["class", "w-100", 3, "selectedDate", 4, "ngIf"], ["class", "w-100", 3, "selectedDate", "viewImages", 4, "ngIf"], ["class", "w-100", 3, "labReports", "data", "selectedDate", 4, "ngIf"], [1, "w-100", 3, "data", "selectedDate"], [1, "w-100", 3, "selectedDate"], [1, "w-100", 3, "viewImages", "selectedDate"], [1, "w-100", 3, "labReports", "data", "selectedDate"]], template: function AccessionResultsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 1)(3, "div")(4, "div");
        \u0275\u0275element(5, "app-header");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(6, "section", 2)(7, "a", 3);
        \u0275\u0275listener("click", function AccessionResultsComponent_Template_a_click_7_listener() {
          return ctx.commonService.goBack();
        });
        \u0275\u0275text(8);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "span", 4);
        \u0275\u0275text(10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(11, "img", 5);
        \u0275\u0275listener("click", function AccessionResultsComponent_Template_img_click_11_listener() {
          return ctx.commonService.onlineHelp(ctx.helpObj.PageID);
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(12, "div", 6)(13, "div", 7)(14, "div", 8)(15, "mat-card", 9)(16, "div", 7)(17, "div", 10)(18, "h6")(19, "span", 11);
        \u0275\u0275text(20);
        \u0275\u0275elementEnd();
        \u0275\u0275text(21);
        \u0275\u0275elementStart(22, "a", 12);
        \u0275\u0275listener("click", function AccessionResultsComponent_Template_a_click_22_listener() {
          return ctx.patientService.showPataientInfo(ctx.patientDetails, null, null, null, null);
        });
        \u0275\u0275text(23);
        \u0275\u0275elementEnd()();
        \u0275\u0275element(24, "hr");
        \u0275\u0275elementStart(25, "div", 13)(26, "p", 14);
        \u0275\u0275template(27, AccessionResultsComponent_span_27_Template, 2, 1, "span", 15)(28, AccessionResultsComponent_span_28_Template, 2, 1, "span", 15)(29, AccessionResultsComponent_span_29_Template, 2, 1, "span", 15)(30, AccessionResultsComponent_span_30_Template, 2, 1, "span", 15);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(31, "p", 16)(32, "span", 17);
        \u0275\u0275text(33, "Owner:");
        \u0275\u0275elementEnd();
        \u0275\u0275text(34);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(35, "div", 18)(36, "h6", 17);
        \u0275\u0275text(37);
        \u0275\u0275elementEnd();
        \u0275\u0275element(38, "hr");
        \u0275\u0275elementStart(39, "div", 19)(40, "div", 20)(41, "p", 17);
        \u0275\u0275text(42);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(43, "p");
        \u0275\u0275text(44);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(45, "div", 20)(46, "p", 17);
        \u0275\u0275text(47);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(48, "p");
        \u0275\u0275text(49);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(50, "div", 20)(51, "p", 17);
        \u0275\u0275text(52);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(53, "p");
        \u0275\u0275text(54);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(55, "div", 21);
        \u0275\u0275template(56, AccessionResultsComponent_div_56_Template, 11, 5, "div", 22);
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275elementStart(57, "div", 8)(58, "div", 23);
        \u0275\u0275template(59, AccessionResultsComponent_div_59_Template, 16, 10, "div", 24);
        \u0275\u0275elementEnd()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate(ctx.labelService.accessionResultScreen.Back);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.labelService.accessionResultScreen.AccessionResult);
        \u0275\u0275advance();
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate1("", ctx.labelService.accessionResultScreen.Patient, ":");
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.patientDetails == null ? null : ctx.patientDetails.PatientName, " - ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.patientDetails == null ? null : ctx.patientDetails.PatientId, " ");
        \u0275\u0275advance(4);
        \u0275\u0275property("ngIf", ctx.patientDetails == null ? null : ctx.patientDetails.SpeciesName);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientDetails == null ? null : ctx.patientDetails.BreedName);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientDetails == null ? null : ctx.patientDetails.Dob);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientDetails == null ? null : ctx.patientDetails.GenderName);
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.patientDetails == null ? null : ctx.patientDetails.OwnerName, " ");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.labelService.accessionResultScreen.Result);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1("", ctx.labelService.accessionResultScreen.OrderID, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.orderId);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.labelService.accessionResultScreen.AccessionID, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.accessionId);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1("", ctx.labelService.accessionResultScreen.RequestingDoctor, ": ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.physicianName);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", !ctx.isConsultantUser);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngForOf", ctx.tests);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, RouterLink, NgbTooltip, MatLegacyButton, MatLegacyCard, MatExpansionPanel, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatLegacyTooltip, HeaderComponent, SideMenuComponent, DisableRightClickDirective, AccessionTemplateOneComponent, AccessionTemplateThreeComponent, AccessionTemplateFourComponent, AccessionTemplateFiveComponent, AccessiontTemplateSixComponent, AccessionTemplateSevenComponent, AccessionTemplateNineComponent, AccessionTemplate12Component, AccessionTemplate13Component, AccessionTemplateTenComponent], styles: ['\n\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n  .mat-tooltip {\n  background: white !important;\n  color: black !important;\n  border: 1px solid #ccc !important;\n  padding-right: 17px !important;\n}\n  .mat-tooltip.below {\n  overflow: initial;\n  margin-top: 1rem;\n}\n  .mat-tooltip.below:after {\n  top: -0.5rem;\n  right: calc(50% - 0.5rem);\n  transform: rotate(0);\n}\n.head1[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 14px !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.custome-label[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 13px !important;\n  font-family: "GothamNarrowBold", sans-serif !important;\n  margin-right: 9px;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.mat-card[_ngcontent-%COMP%] {\n  border-radius: 10px 10px 0 0;\n  box-shadow: 0 0 2px 0 rgba(0, 0, 0, 0.1);\n  overflow: auto;\n  border-top: 16px solid #fff;\n}\n.analysisresult[_ngcontent-%COMP%] {\n  padding: 0 6px 0 0;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\nth.mat-header-cell[_ngcontent-%COMP%] {\n  background: #0072ce;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.main-inner[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 90%;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  position: relative;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: left;\n}\n.col[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n}\n.colLink[_ngcontent-%COMP%] {\n  min-width: 0;\n  max-width: 100%;\n  padding: 0;\n  font-size: 13px !important;\n  color: #1072ce;\n  cursor: pointer;\n}\n.test-note[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding: 0 !important;\n}\n.cust-width[_ngcontent-%COMP%] {\n  width: 68%;\n}\n.dateouter[_ngcontent-%COMP%] {\n  width: 75%;\n}\n.clsGreen[_ngcontent-%COMP%] {\n  color: green;\n}\n.clsRed[_ngcontent-%COMP%] {\n  color: red;\n}\n.indicator[_ngcontent-%COMP%] {\n  min-width: 32px;\n  font-size: 10px;\n  text-align: revert;\n  position: relative;\n  left: 13px;\n  top: 2px;\n}\n.col-sm-4[_ngcontent-%COMP%] {\n  flex: 0 0 33.333333%;\n  max-width: 31.333333%;\n  padding-right: 0;\n}\n.range[_ngcontent-%COMP%]   .mat-form-field-flex[_ngcontent-%COMP%] {\n  padding-left: 2px;\n  padding-right: 1px;\n}\n.range[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\n.lstrow[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 12px 10px;\n  border-radius: 0px 0px 5px 5px;\n}\n.lstrow[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  width: 100px;\n  text-align: center;\n}\n.resultdata[_ngcontent-%COMP%] {\n  background: #f5fbf7;\n  padding: 4px;\n  text-align: center;\n  border-radius: 7px;\n  width: 42px;\n  display: block;\n  font-size: 12px;\n}\n.mat-progress-bar[_ngcontent-%COMP%] {\n  margin-right: 1px;\n  height: 9px;\n}\n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(4), \n.patient-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n  width: 170px;\n}\n.sliderwrapper[_ngcontent-%COMP%] {\n  margin-bottom: 8px;\n}\n#print-btn[_ngcontent-%COMP%] {\n  line-height: 34px;\n  border-radius: 50% !important;\n  height: 45px !important;\n  width: 45px !important;\n  background: #1072ce;\n  z-index: 9;\n}\n#print-btn[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #fff;\n}\n.backdate-outer[_ngcontent-%COMP%] {\n  width: 85%;\n  margin: 0 auto;\n}\n.rightarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 10px;\n  top: 43%;\n  transition: revert;\n  transform: rotate(180deg);\n  cursor: pointer;\n}\n.leftarrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 10px;\n  top: 43%;\n  cursor: pointer;\n}\n.rightarrow.disable-arrow[_ngcontent-%COMP%], \n.leftarrow.disable-arrow[_ngcontent-%COMP%] {\n  filter: grayscale(100%);\n}\n.trail-text[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: -8px;\n  background: white;\n  width: 151px;\n  text-indent: -99999px;\n}\n.btn-toggle[_ngcontent-%COMP%]:before {\n  content: attr(data-graph);\n  left: -5.5rem;\n}\n.btn-toggle[_ngcontent-%COMP%]:after {\n  content: attr(data-trends);\n  right: -4.5rem;\n  opacity: 0.5;\n}\n.t-5[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.t-4[_ngcontent-%COMP%] {\n  height: 56px;\n}\n.t-1[_ngcontent-%COMP%] {\n  margin-top: -37px;\n}\n#chartContainer[_ngcontent-%COMP%] {\n  width: 90% !important;\n  margin: 0 auto;\n}\n.trend[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  margin-top: 14px;\n  font-size: 15px;\n}\n.chart-head[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-family: "gothambook", sans-serif;\n  font-size: 15px;\n  margin-left: 41px;\n  margin-bottom: 30px;\n  margin-top: 26px;\n  z-index: 99999999;\n  position: relative;\n}\n.btn-toggle.active[_ngcontent-%COMP%]:after {\n  opacity: 1 !important;\n}\n.clr-date[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  bottom: -16px;\n  font-size: 11px;\n  cursor: pointer;\n  text-decoration: underline;\n  color: #1072ce;\n  font-family: "GothamNarrowBold", sans-serif;\n}\nhr[_ngcontent-%COMP%] {\n  border-top: 3px solid #ccc;\n}\n.t-4-d-none[_ngcontent-%COMP%] {\n  height: 14px;\n}\n.t-5-d-none[_ngcontent-%COMP%] {\n  height: 92px;\n}\n.tfive-text[_ngcontent-%COMP%]   .col[_ngcontent-%COMP%] {\n  min-width: 33% !important;\n  max-width: 100%;\n  margin-bottom: 2px;\n  flex-grow: inherit;\n}\n.t-head[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.cmt-head[_ngcontent-%COMP%] {\n  font-size: 17px;\n  text-transform: uppercase;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.c-point[_ngcontent-%COMP%] {\n  cursor: pointer;\n}\n.follow_patient[_ngcontent-%COMP%] {\n  margin-top: -7px;\n}\n.ana_result[_ngcontent-%COMP%]   .col-sm-3[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.mat-slide-toggle[_ngcontent-%COMP%] {\n  margin: 0px 0 0 9px;\n  position: relative;\n  top: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.signs[_ngcontent-%COMP%] {\n  font-weight: bolder;\n  font-size: large;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.student-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.student-element-row[_ngcontent-%COMP%]:not(.student-expanded-row):active {\n  background: #efefef;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.student-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.student-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.prebtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  left: -4px;\n}\n.nxtbtn[_ngcontent-%COMP%] {\n  position: absolute;\n  background: #fff;\n  border: none;\n  top: 4px;\n  right: 0px;\n}\n.pink[_ngcontent-%COMP%] {\n  background: #ffeee3;\n  display: flex;\n  height: 48px;\n  width: 91px;\n  align-items: center;\n}\n.review_head[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.review_subhead[_ngcontent-%COMP%] {\n  color: #182b70;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 13px;\n}\n.text-block[_ngcontent-%COMP%] {\n  border: 1px solid #99999969;\n  padding: 10px;\n  border-radius: 8px;\n  max-height: 340px;\n  overflow: auto;\n  width: 97%;\n}\n.backlink[_ngcontent-%COMP%] {\n  cursor: pointer;\n  color: #2478c7 !important;\n  text-decoration: underline;\n  font-size: 14px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  padding-left: 56px !important;\n}\n.left_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 7px;\n  top: 7px;\n  z-index: 999;\n}\n.right_arrow[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 9px;\n  top: 7px;\n  z-index: 999;\n}\n#result-block[_ngcontent-%COMP%] {\n  min-width: 170px;\n  max-width: 170px;\n  width: 170px;\n}\n.date_block[_ngcontent-%COMP%] {\n  max-width: 95px;\n  white-space: normal;\n  word-break: break-word;\n  display: block;\n}\n.sticky_table[_ngcontent-%COMP%] {\n  margin-top: -34px;\n}\n.sticky-top[_ngcontent-%COMP%] {\n  position: sticky;\n  top: 6px;\n}\n.theadpart[_ngcontent-%COMP%] {\n  width: 33%;\n}\n  .modal-dialog.modal-lg.modal-dialog-centered .modal-header {\n  display: flex !important;\n  height: 45px !important;\n}\n  .modal-dialog.modal-lg.modal-dialog-centered .modal-title {\n  position: absolute !important;\n}\n  .modal-dialog.modal-lg.modal-dialog-centered {\n  max-width: 75% !important;\n  min-width: auto !important;\n}\n  .modal-dialog.modal-lg.modal-dialog-centered .modal-body .msg {\n  max-height: 310px !important;\n  overflow-y: auto !important;\n  display: inherit !important;\n  text-align: left;\n}\n.textsP[_ngcontent-%COMP%] {\n  width: 50% !important;\n  max-width: 100%;\n  flex: 50%;\n}\n.textsPart[_ngcontent-%COMP%] {\n  max-width: 13%;\n}\n.rPart[_ngcontent-%COMP%] {\n  width: 28%;\n  display: flex;\n  justify-content: space-around;\n}\n.iconPart[_ngcontent-%COMP%] {\n  max-width: 16% !important;\n  display: flex;\n  justify-content: flex-end;\n  width: 16% !important;\n  padding-right: 0;\n}\n.iconPart[_ngcontent-%COMP%]   .lastimg[_ngcontent-%COMP%] {\n  margin-top: -2px;\n}\n.hdpart[_ngcontent-%COMP%] {\n  width: auto !important;\n  display: contents;\n}\n.hdpart1[_ngcontent-%COMP%] {\n  padding-left: 10px;\n}\n.imgs[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 35px;\n  margin-left: 5px;\n  margin-top: 4px;\n}\n.iconPart[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:nth-child(4)   img[_ngcontent-%COMP%] {\n  margin-left: 2px;\n}\n.aimg[_ngcontent-%COMP%] {\n  margin: 0 5px;\n}\n  .mat-expansion-indicator::after {\n  color: #0000008a !important;\n}\n.light-text[_ngcontent-%COMP%] {\n  color: rgb(0 0 0 / 63%);\n  font-size: 15px;\n  line-height: 27px;\n  font-weight: normal;\n}\n  button.float-right.mat-stroked-button.mat-button-base.mat-blue {\n  border-color: #0072ce;\n  color: #0072ce;\n  font-weight: bold;\n  border: 2px solid;\n  margin-right: 20px;\n}\n  span.mat-expansion-indicator {\n  border-radius: 20px;\n  background-color: #f26323;\n  padding: 1px 6px 5px 6px;\n  line-height: 15px;\n}\n  .mat-expansion-indicator::after {\n  color: #fff !important;\n}\n.portal-outer[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n#content[_ngcontent-%COMP%] {\n  padding-bottom: 10px !important;\n}\n.accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0px;\n  font-size: 15px;\n  font-family: "gothambook", sans-serif;\n}\n.accession-result[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], \n.accpart[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\n  font-size: 15px;\n  font-family: "gothambook", sans-serif;\n}\n@media screen and (min-width: 1200px) {\n  .accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n    min-height: 45px;\n    display: flex;\n  }\n  .accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n    padding-left: 5px;\n  }\n  .mat-expansion-panel-header-title[_ngcontent-%COMP%], \n   .mat-expansion-panel-header-description[_ngcontent-%COMP%] {\n    align-items: center;\n  }\n}\n@media screen and (max-width: 991px) {\n  .accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n    padding-left: 5px;\n  }\n  .container1[_ngcontent-%COMP%] {\n    max-width: 100% !important;\n  }\n}\n@media screen and (max-width: 1199px) {\n  .accession-result[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n    padding-bottom: 10px;\n    padding-right: 0px;\n  }\n}\n@media screen and (max-width: 767px) and (min-width: 500px) {\n  .accession-result[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n    width: 250px;\n  }\n}\n@media screen and (max-width: 499px) {\n  .accession-result[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n    width: 150px;\n  }\n  .accession-result[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n    width: 200px;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 14px 35px;\n  }\n}\n  .acc-temp-one {\n  display: none;\n}\n.result_block[_ngcontent-%COMP%] {\n  width: 97.5%;\n}\n@media screen and (max-width: 767px) {\n    .mat-expansion-panel-header span.mat-content {\n    display: block !important;\n  }\n    .picons .tooltip.show {\n    display: none !important;\n  }\n  .accres[_ngcontent-%COMP%] {\n    width: 100% !important;\n    display: inherit !important;\n    flex-direction: initial !important;\n    justify-content: inherit !important;\n    padding-top: 0 !important;\n  }\n  .mat-expansion-panel[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n    padding-top: 0 !important;\n  }\n  .mat-expansion-panel[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n    padding-top: 0 !important;\n  }\n  .accp[_ngcontent-%COMP%] {\n    padding-top: 0 !important;\n  }\n  .result_block[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .container1[_ngcontent-%COMP%] {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  .mat-expansion-panel-header-description[_ngcontent-%COMP%], \n   .mat-expansion-panel-header-title[_ngcontent-%COMP%] {\n    margin-right: 0;\n  }\n  .accpart[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\n    font-size: 16px;\n  }\n  .first-info[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n    text-decoration: underline;\n  }\n  .mat-expansion-panel-content[_ngcontent-%COMP%] {\n    margin-top: 15px !important;\n  }\n  .mat-expansion-panel-header[_ngcontent-%COMP%] {\n    height: auto !important;\n    padding: 10px !important;\n  }\n  .mat-expansion-panel-header.mat-expanded[_ngcontent-%COMP%] {\n    padding: 10px 10px 0 10px !important;\n  }\n  .mat-expansion-panel-header-description[_ngcontent-%COMP%], \n   .mat-expansion-panel-header-title[_ngcontent-%COMP%] {\n    font-size: 15px;\n    line-height: 25px;\n  }\n    button.float-right.mobile_button.mat-stroked-button.mat-button-base.mat-blue {\n    display: block;\n  }\n    span.mat-expansion-indicator, \n     button.float-right.mobile_button.mat-stroked-button.mat-button-base.mat-blue {\n    position: relative;\n    top: 0;\n  }\n  .dropdwn[_ngcontent-%COMP%] {\n    position: relative;\n  }\n    .mat-expanded span.mat-expansion-indicator {\n    top: 15px;\n    position: absolute;\n    right: 13px;\n    z-index: 10;\n  }\n    .mat-expanded button.float-right.mobile_button.mat-stroked-button.mat-button-base.mat-blue {\n    top: 10px;\n    right: 36px;\n    position: absolute;\n  }\n    .mat-expanded .mat-expansion-panel-header span.mat-content {\n    padding-top: 50px !important;\n  }\n  .desk_button[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .nextp[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .nextp[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    margin-bottom: 0;\n  }\n  .picons[_ngcontent-%COMP%] {\n    justify-content: center !important;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    margin-left: -30px;\n    font-size: 16px;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0 0px 20px;\n    text-align: center;\n    background: #fff;\n    padding: 15px;\n    border-top: 3px solid #c7c2c2;\n    border-bottom: 3px solid #c7c2c2;\n  }\n  .page-wrapper[_ngcontent-%COMP%] {\n    padding: 20px 0 0 0 !important;\n  }\n  .portal-outer[_ngcontent-%COMP%] {\n    padding: 0px 20px;\n  }\n    .acc-temp-one {\n    display: block;\n  }\n  .accession-result.first-info[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    margin-left: 0 !important;\n    padding-left: 0 !important;\n  }\n}\n.mobile_button[_ngcontent-%COMP%] {\n  display: none;\n}\n.mat-expansion-panel-header-description[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:first-child {\n  color: #000;\n  font-size: 15px;\n  font-weight: bold;\n  font-family: "gothambook", sans-serif;\n}\n.mat-expansion-panel-header-description[_ngcontent-%COMP%] {\n  position: relative;\n}\n.mat-expansion-panel-header-description[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n}\n  .mat-content {\n  overflow: visible !important;\n}\n@media screen and (min-width: 768px) and (max-width: 1080px) {\n  .result_block[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  .mat-expansion-panel.mat-expanded[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n    padding-top: 4px !important;\n  }\n  .accBtn[_ngcontent-%COMP%] {\n    position: relative !important;\n    top: 4px !important;\n  }\n  .mat-expansion-panel[_ngcontent-%COMP%] {\n    padding-top: 10px;\n  }\n}\n@media only screen and (min-device-width: 820px) and (max-device-width: 1180px) and (orientation: landscape) {\n  .mat-expansion-panel.mat-expanded[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n    padding-top: 4px !important;\n  }\n  .accBtn[_ngcontent-%COMP%] {\n    position: relative !important;\n    top: 4px !important;\n  }\n  .mat-expansion-panel[_ngcontent-%COMP%] {\n    padding-top: 10px;\n  }\n}\n.accres[_ngcontent-%COMP%] {\n  width: 30%;\n}\n.accp[_ngcontent-%COMP%] {\n  padding-top: 20px;\n}\n.accBtn[_ngcontent-%COMP%] {\n  position: relative;\n  top: 15px;\n  width: 130px;\n}\n.mat-expansion-panel.mat-expanded[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n  padding-top: 0px;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]   .accres[_ngcontent-%COMP%] {\n  padding-top: 70px;\n}\n.nextp[_ngcontent-%COMP%] {\n  word-break: break-all;\n}\n.wrapper.accesswrap[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.save-change[_ngcontent-%COMP%] {\n  background-color: #f26323;\n  margin-top: 0.5rem;\n}\n.save-change.addpan[_ngcontent-%COMP%] {\n  background: #f65c00 !important;\n}\n.p-title[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif;\n  font-weight: 700;\n}\n.mat-expansion-panel-header[_ngcontent-%COMP%], \n.nextp[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif;\n}\n.dropdwn[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  color: #000;\n  font-size: 15px;\n  font-weight: bold;\n  font-family: "gothambook", sans-serif;\n}\n.dropdwn[_ngcontent-%COMP%]   p.light-text[_ngcontent-%COMP%], \n.dropdwn[_ngcontent-%COMP%]   span.light-text[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, .87);\n  font-weight: 100;\n  font-family: "gothambook", sans-serif;\n}\n.mat-part[_ngcontent-%COMP%] {\n  overflow: inherit !important;\n}\n#content[_ngcontent-%COMP%] {\n  height: calc(100vh - 250px);\n  overflow-y: auto;\n}\n/*# sourceMappingURL=accession-results.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AccessionResultsComponent, { className: "AccessionResultsComponent", filePath: "src\\app\\components\\accession-results\\accession-results.component.ts", lineNumber: 29 });
})();

// src/app/components/maintenance/maintenance.component.ts
var MaintenanceComponent = class _MaintenanceComponent {
  static {
    this.\u0275fac = function MaintenanceComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _MaintenanceComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MaintenanceComponent, selectors: [["app-maintenance"]], decls: 9, vars: 0, consts: [[1, "m-page"], [1, "content-box"], ["src", "../../../../assets/img/logo-header@2x.png", "alt", "", 2, "width", "150px"], [2, "color", "red", "font-weight", "bold"]], template: function MaintenanceComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "section", 0)(1, "div", 1);
        \u0275\u0275element(2, "img", 2);
        \u0275\u0275elementStart(3, "h1")(4, "span", 3);
        \u0275\u0275text(5, "Sorry,");
        \u0275\u0275elementEnd();
        \u0275\u0275text(6, " we're down for maintenance. ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(7, "p");
        \u0275\u0275text(8, "We'll be back shortly.");
        \u0275\u0275elementEnd()()();
      }
    }, styles: ["\n\n.m-page[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 100%;\n  position: absolute;\n}\n.content-box[_ngcontent-%COMP%] {\n  color: #ff6400;\n  font-size: 57px;\n  text-align: center;\n  background: #fff;\n  border-radius: 25px;\n  padding: 50px;\n  width: 750px;\n  margin: 175px auto;\n}\n/*# sourceMappingURL=maintenance.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MaintenanceComponent, { className: "MaintenanceComponent", filePath: "src\\app\\components\\maintenance\\maintenance.component.ts", lineNumber: 8 });
})();

// src/app/components/consult-dos/consult-dos.component.ts
var _c025 = (a0, a1, a2, a3, a4, a5) => ({ dotdosskyBlue: a0, dotdosGreen: a1, dotdosorange: a2, dotdosequine: a3, dotdosBlue: a4, dotdosallother: a5 });
var _c118 = () => ["expandedDetail"];
var _c29 = (a0, a1, a2, a3, a4, a5) => ({ dosskyBlue: a0, dosGreen: a1, dosorange: a2, dosequine: a3, dosBlue: a4, dosallother: a5 });
var _c36 = (a0, a1, a2, a3, a4, a5, a6) => ({ "dot-sst": a0, "dot-rtt": a1, "dot-urine": a2, "dot-btt": a3, "dot-feces": a4, "dot-grntt": a5, "dot-ltt": a6 });
var _c43 = (a0) => ({ expandedall: a0 });
function ConsultDosComponent_section_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "section", 77)(1, "h5")(2, "span", 78);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.label.DirectoryOfServices);
  }
}
function ConsultDosComponent_h5_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h5", 79)(1, "p");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.DirectoryOfServices);
  }
}
function ConsultDosComponent_mat_option_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 80);
    \u0275\u0275element(1, "span", 23);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const filter_r3 = ctx.$implicit;
    \u0275\u0275property("value", filter_r3.Color);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction6(3, _c025, filter_r3.Color === "Blue", filter_r3.Color === "Green", filter_r3.Color === "Orange", filter_r3.Color === "Equine", filter_r3.Color === "AvianExotic", filter_r3.Color === "AllOther"));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(filter_r3.Name);
  }
}
function ConsultDosComponent_mat_option_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-option", 80);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const filter_r4 = ctx.$implicit;
    \u0275\u0275property("value", filter_r4.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(filter_r4.Name);
  }
}
function ConsultDosComponent_th_134_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 81);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Name, " ");
  }
}
function ConsultDosComponent_td_135_span_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 87);
    \u0275\u0275listener("click", function ConsultDosComponent_td_135_span_4_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const element_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.setClickedtrueRow(element_r6);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(1, "img", 88);
    \u0275\u0275elementEnd();
  }
}
function ConsultDosComponent_td_135_span_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 87);
    \u0275\u0275listener("click", function ConsultDosComponent_td_135_span_5_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const element_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      ctx_r1.setClickedtrueRow(element_r6);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275element(1, "img", 89);
    \u0275\u0275elementEnd();
  }
}
function ConsultDosComponent_td_135_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 82)(1, "span", 83);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 42);
    \u0275\u0275template(4, ConsultDosComponent_td_135_span_4_Template, 2, 0, "span", 84)(5, ConsultDosComponent_td_135_span_5_Template, 2, 0, "span", 84);
    \u0275\u0275elementStart(6, "div", 85)(7, "span");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "div")(10, "span", 86);
    \u0275\u0275text(11, "Test Code:");
    \u0275\u0275elementEnd();
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction6(6, _c29, element_r6.Menu === "Blue", element_r6.Menu === "Green", element_r6.Menu === "Orange", element_r6.Menu === "Equine", element_r6.Menu === "AvianExotic", element_r6.Menu === "AllOther"));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Name);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", element_r6.IsFavourite === true);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r6.IsFavourite === false);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(element_r6.TestName);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", element_r6.OrderCode, "");
  }
}
function ConsultDosComponent_th_137_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 90);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Class, " ");
  }
}
function ConsultDosComponent_td_138_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 91)(1, "span", 83);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 92);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Class);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r8.Class, " ");
  }
}
function ConsultDosComponent_th_140_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 90);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.SampleRequirements, " ");
  }
}
function ConsultDosComponent_td_141_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 91)(1, "span", 93);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r9 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.SampleRequirements);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(element_r9.SampleRequirements);
  }
}
function ConsultDosComponent_th_143_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 90);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.TubeType, " ");
  }
}
function ConsultDosComponent_td_144_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 85)(2, "span", 95);
    \u0275\u0275element(3, "span", 23);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const tube_r10 = ctx.$implicit;
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction7(2, _c36, tube_r10.code === "SST", tube_r10.code === "RTT", tube_r10.code === "Urine", tube_r10.code === "BTT", tube_r10.code === "Feces", tube_r10.code === "GrnTT", tube_r10.code === "LTT"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(tube_r10.code);
  }
}
function ConsultDosComponent_td_144_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 91)(1, "span", 83);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, ConsultDosComponent_td_144_ng_container_3_Template, 5, 10, "ng-container", 94);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r11 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.TubeType);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", element_r11.TubeType);
  }
}
function ConsultDosComponent_th_146_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 90);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Tat, " ");
  }
}
function ConsultDosComponent_td_147_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 91)(1, "span", 83);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 96);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Tat);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r12.TAT, "");
  }
}
function ConsultDosComponent_th_149_span_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Price, " ");
  }
}
function ConsultDosComponent_th_149_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 97);
    \u0275\u0275template(1, ConsultDosComponent_th_149_span_1_Template, 2, 1, "span", 98);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isViewDOSPrice);
  }
}
function ConsultDosComponent_td_150_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r13 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r13.Price, " ");
  }
}
function ConsultDosComponent_td_150_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 91)(1, "span", 83);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, ConsultDosComponent_td_150_span_3_Template, 2, 1, "span", 98);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Price);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isViewDOSPrice);
  }
}
function ConsultDosComponent_th_152_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "th", 97)(1, "button", 99);
    \u0275\u0275listener("click", function ConsultDosComponent_th_152_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r14);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.toggle());
    });
    \u0275\u0275element(2, "img", 100);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(1, _c43, ctx_r1.allRowsExpanded));
  }
}
function ConsultDosComponent_td_153_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 101);
    \u0275\u0275element(1, "img", 102);
    \u0275\u0275elementEnd();
  }
}
function ConsultDosComponent_td_155_span_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 117);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const meth_r15 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(meth_r15.methodology);
  }
}
function ConsultDosComponent_td_155_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 103)(1, "div", 104)(2, "div", 105)(3, "div", 106)(4, "div", 107)(5, "table", 108)(6, "tr", 109);
    \u0275\u0275element(7, "th");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "tr")(9, "td")(10, "div", 110)(11, "strong");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "span", 83);
    \u0275\u0275text(14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "span", 111);
    \u0275\u0275text(16);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(17, "td")(18, "div", 112)(19, "strong");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "span", 83);
    \u0275\u0275text(22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "span", 113);
    \u0275\u0275text(24);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(25, "td")(26, "div", 114)(27, "strong");
    \u0275\u0275text(28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "span", 83);
    \u0275\u0275text(30);
    \u0275\u0275elementEnd();
    \u0275\u0275template(31, ConsultDosComponent_td_155_span_31_Template, 2, 1, "span", 115);
    \u0275\u0275elementEnd()();
    \u0275\u0275element(32, "td");
    \u0275\u0275elementStart(33, "td")(34, "div", 116)(35, "strong");
    \u0275\u0275text(36);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(37, "span", 83);
    \u0275\u0275text(38);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(39, "span", 113);
    \u0275\u0275text(40);
    \u0275\u0275elementEnd()()();
    \u0275\u0275element(41, "td")(42, "td");
    \u0275\u0275elementEnd()()()()()()();
  }
  if (rf & 2) {
    const element_r16 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275attribute("colspan", ctx_r1.columnsToDisplay.length);
    \u0275\u0275advance();
    \u0275\u0275property("@detailExpand", element_r16 === ctx_r1.expandedElement || ctx_r1.allRowsExpanded ? "expanded" : "collapsed");
    \u0275\u0275advance(4);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction6(15, _c29, element_r16.Menu === "Blue", element_r16.Menu === "Green", element_r16.Menu === "Orange", element_r16.Menu === "Equine", element_r16.Menu === "AvianExotic", element_r16.Menu === "AllOther"));
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Component, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Component);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r16.Component, " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Notes, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Notes);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r16.Notes, " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Methodology, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Methodology);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", element_r16.Methodologies);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1(" ", ctx_r1.label.Lab, ":");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.label.Lab);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", element_r16.LabName, " ");
  }
}
function ConsultDosComponent_tr_156_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 118);
  }
}
function ConsultDosComponent_tr_157_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 119);
    \u0275\u0275listener("click", function ConsultDosComponent_tr_157_Template_tr_click_0_listener() {
      const element_r18 = \u0275\u0275restoreView(_r17).$implicit;
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.expandCard(element_r18));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r18 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classProp("example-expanded-row", ctx_r1.expandedElement === element_r18);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction6(3, _c29, element_r18.Menu === "Blue", element_r18.Menu === "Green", element_r18.Menu === "Orange", element_r18.Menu === "Equine", element_r18.Menu === "AvianExotic", element_r18.Menu === "AllOther"));
  }
}
function ConsultDosComponent_tr_158_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 120);
  }
}
function ConsultDosComponent_tbody_160_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tbody", 121)(1, "tr")(2, "td");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r1.label.Norecordsfound);
  }
}
var ConsultDosComponent = class _ConsultDosComponent {
  constructor(commonService, userService, fb, sidemenuService, headerService, patientService, labelService, dataService, modalService, sidefilterService) {
    this.commonService = commonService;
    this.userService = userService;
    this.fb = fb;
    this.sidemenuService = sidemenuService;
    this.headerService = headerService;
    this.patientService = patientService;
    this.labelService = labelService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.sidefilterService = sidefilterService;
    this.dsDashboardScreen = new DashboardScreen();
    this.allRowsExpanded = false;
    this.isAdvSearched = false;
    this.isNotificationSelected = false;
    this.recordCount = 0;
    this.selectedBusinessId = localStorage.businessGuid != void 0 && localStorage.businessGuid != null && localStorage.businessGuid != "" ? parseInt(localStorage.businessGuid) : 0;
    this.columnsToDisplay = ["TestName", "Class", "SampleRequirements", "TubeType", "TAT", "Price", " "];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.dsAnalysisSource = [];
    this.active = true;
    this.proActive = false;
    this.checked = false;
    this.filterClassData = [];
    this.filterMenuData = [];
    this.isChecked = false;
    this.CheckForm = new UntypedFormGroup({});
    this.userId = localStorage.authDetails ? JSON.parse(localStorage.authDetails).Id : 0;
    this.searchValue = null;
    this.selectedMenu = null;
    this.selectedCass = null;
    this.isFavourite = false;
    this.start = 0;
    this.limit = 15;
    this.end = this.limit + this.start;
    this.selectedRowIndex = null;
    this.searchTextChanged = new Subject();
    this.authDetails = this.dataService.appData.authDetails;
    this.isBackOfficeUser = this.authDetails["BackOfficeFlag"];
    this.isViewDOSPrice = this.authDetails["IsViewDOSPrice"];
    this.sidemenuService.selectedModuleId = EnmModule.dos;
    this.labelService.getDosScreenLabels();
    this.label = this.labelService.dosScreen;
    this.getDosTestData();
  }
  ngOnInit() {
    if (localStorage.getItem("alert-popup") == "true") {
      this.modalService.open(AlertMessageComponent, {
        centered: true,
        backdrop: "static",
        scrollable: false
      });
    }
    this.getDosfilter();
  }
  ngAfterViewInit() {
    const tblContainer = document.getElementById("dos-datatbl");
    tblContainer.style.maxHeight = window.innerHeight - 200 + "px";
    this.searchTextChanged.pipe(debounceTime(1e3), distinctUntilChanged()).subscribe((data) => {
      this.searchValue = data;
      this.getDosTestData();
    });
  }
  getQuerytext(event) {
    if (event.target.value[event.target.value.length - 1] != " ") {
      this.searchTextChanged.next(event.target.value);
    }
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (scrollLocation > limit) {
      const data = this.getTableData(this.start, this.end);
      this.dataSource.data = this.dataSource.data.concat(data);
      this.updateIndex();
    }
  }
  getTableData(start, end) {
    return this.originData.filter((value, index) => index >= start && index < end);
  }
  updateIndex() {
    this.start = this.end;
    this.end = this.limit + this.start;
  }
  onDataSort() {
    const scrollabe = document.getElementById("dos-datatbl");
    scrollabe.scrollTop = 0;
  }
  bindDataSource() {
    this.dataSource = new MatLegacyTableDataSource(this.originData);
    this.updateIndex();
    this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
    this.dataSource.sort = this.sort;
    this.recordCount = this.dataSource.data.length;
    if (this.recordCount > 0 && this.isNotificationSelected) {
      this.allRowsExpanded = true;
      this.isNotificationSelected = false;
    } else {
      this.allRowsExpanded = false;
    }
  }
  getDosfilter() {
    this.commonService.GetDOSFilterdetails().subscribe((data) => {
      this.filterClassData = data.ResponseData?.Class;
      this.filterMenuData = data.ResponseData.Menu;
    });
  }
  setDefaultFilter() {
    this.selected = "Filter By Class";
    this.selectedMenu = "Filter By Menu";
    this.isAdvSearched = false;
  }
  toggle() {
    this.allRowsExpanded = !this.allRowsExpanded;
    this.expandedElement = null;
  }
  setClickedtrueRow(element) {
    this.selectedRow = element;
    this.dataSource.data.forEach((data) => {
      if (data.TestId == element.TestId) {
        data.IsFavourite = !data.IsFavourite;
      }
    });
    const fav = {
      TestId: element.TestId,
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      IsFavourite: element.IsFavourite
    };
    this.commonService.postFavourite(fav).subscribe({ next: () => {
      this.expandedElement = null;
    } });
  }
  searchDosTestData() {
    const dosfields = {
      SearchText: this.searchValue,
      IsOrder: false,
      UserGuid: this.headerService.loginUserGuid
    };
    this.commonService.GetDOSTestdata(dosfields).subscribe((data) => {
      this.originData = data.ResponseData;
      this.bindDataSource();
    }, (err) => {
      console.log(JSON.stringify(err));
      this.commonService.showCommonToastrError();
    });
  }
  getDosTestData() {
    const dosfields = {
      IsOrder: false,
      UserGuid: this.authDetails["UserGuid"],
      SearchText: this.searchValue,
      Menu: this.selectedMenu,
      ClassName: this.selectedCass,
      IsFavourite: this.isFavourite
    };
    this.commonService.GetDOSTestdata(dosfields).subscribe((data) => {
      this.originData = data.ResponseData;
      this.bindDataSource();
    });
  }
  onFilterChange(selectedField, event) {
    if (selectedField == "search") {
      this.selectedMenu = null;
      this.selectedCass = null;
      this.isFavourite = false;
    }
    if (selectedField == "menu") {
      this.selectedMenu = event.value;
    }
    if (selectedField == "class") {
      this.selectedCass = event.value;
    }
    if (selectedField == "favorites") {
      this.isFavourite = event.checked;
    }
    this.getDosTestData();
  }
  clraeAll() {
    this.searchValue = null;
    this.selectedMenu = null;
    this.selectedCass = null;
    this.isFavourite = false;
    this.getDosTestData();
  }
  expandCard(ele) {
    this.expandedElement = this.expandedElement === ele ? null : ele;
    gtag("event", "Directory_of_Services", {
      Total_Services_Visited: "",
      Total_Unique_Services_Clicked: "",
      Service_Name: ele.TestName,
      Service_Class: ele.Class,
      Sample_Requirements: ele.SampleRequirements,
      Tube_Type: ele.TubeType,
      TAT: ele["TAT"],
      Price: ele.Price,
      Component: ele.Component,
      Notes: ele.Notes,
      Methodology: ele.Methodologies,
      Lab: ele.LabName
    });
  }
  static {
    this.\u0275fac = function ConsultDosComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultDosComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(UserService), \u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(SidefilterService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultDosComponent, selectors: [["app-consult-dos"]], viewQuery: function ConsultDosComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatLegacyPaginator, 7);
        \u0275\u0275viewQuery(MatSort, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.paginator = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
      }
    }, decls: 161, vars: 31, consts: [["drawer", ""], ["selectedmenu", ""], ["selectedClass", ""], [1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], ["class", "title-container", 4, "ngIf"], ["hasBackdrop", "true", 1, "example-container1"], ["mode", "over", "position", "end", 1, "example-sidenav", "sidefilter", "right-filter"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "p-0"], [1, "mt-0"], ["class", "bko-page-title", 4, "ngIf"], [1, "tbl-filter", "tblpart", "d-flex", "align-items-center"], [1, "fprt", "row", "m-0", "w-100", "justify-content-start", "align-items-center"], [1, "col-12", "col-md-10", "pl-0", "order-md-1", "order-2"], [1, "row", "m-0", "align-items-end"], [1, "col-12", "mt-2", "mt-md-0", "col-sm-6", "col-md-3", "pl-0", "pr-sm-3", "pr-0", "srchpart"], ["appearance", "outline", "floatLabel", "always"], ["matPrefix", "", 2, "cursor", "pointer", 3, "click"], ["src", "../../../../assets/img/search-icon.png", "alt", "search-icon"], ["type", "text", "matInput", "", "maxlength", "20", "ngDefaultControl", "", "placeholder", "Search", 3, "ngModelChange", "keyup", "ngModel"], [1, "col-12", "mt-2", "mt-md-0", "col-sm-6", "col-md-3", "pl-0", "pr-md-3", "pr-0"], ["appearance", "outline", "floatLabel", "always", 1, "dotpart"], [3, "ngClass"], [3, "valueChange", "selectionChange", "value", "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], [1, "col-12", "mt-2", "mt-md-0", "col-sm-6", "col-md-3", "pl-0", "pr-sm-3", "pr-0"], [1, "col-12", "mt-2", "mt-md-0", "col-sm-6", "col-md-3", "pl-0", "pr-sm-3", "pr-0", "m-fav"], ["ngDefaultControl", "", 1, "example-margin", 3, "ngModelChange", "valueChange", "change", "ngModel", "value"], [1, "clrall", "m-clrall", 3, "click"], [1, "col-12", "col-md-2", "sprt", "d-flex", "justify-content-end", "order-md-2", "order-1"], [1, "clrall", 3, "click"], [1, "d-flex", "justify-content-between", "my-2", "pl-3", "pr-3", "align-items-center", "toprow"], [1, "d-flex", "align-items-center", "tube_type_key"], [1, "tooltip"], [1, "tooltext"], ["src", "../../../assets/img/infos.svg", "alt", ""], [1, "tooltiptext"], [1, "tool_header"], [1, "tool_text", "p-3"], [1, "d-flex", "justify-content-start", "align-items-center", "mb-2"], [1, "dot", "sst"], [1, "d-flex"], [1, "abbre"], [1, "dot", "rrt"], [1, "dot", "ltt"], [1, "dot", "btt"], [1, "dot", "grntt"], [1, "dot", "f"], [1, "dot", "u"], [1, "micro", "msst"], [1, "micro", "mrtt"], [1, "micro", "mltt"], [1, "micro", "mgrntt"], [1, "p-0", "pt-3", "cust-postion"], [1, "example-container", "pt-0"], ["id", "dos-datatbl", 1, "usermangemt", 3, "scroll"], ["mat-table", "", "multiTemplateDataRows", "", "summary", "", "matSort", "", 1, "dashboard-table", "pt-4", 3, "dataSource"], ["matColumnDef", "TestName"], ["mat-header-cell", "", "style", "padding-left: 20px", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", "id", "first_block", 3, "ngClass", 4, "matCellDef"], ["matColumnDef", "Class"], ["mat-header-cell", "", "mat-sort-header", "", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "SampleRequirements"], ["matColumnDef", "TubeType"], ["matColumnDef", "TAT"], ["matColumnDef", "Price"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", " "], ["mat-cell", "", "id", "arrow_block", "class", "down-arrow", 4, "matCellDef"], ["matColumnDef", "expandedDetail"], ["id", "expanded_td", "mat-cell", "", "td", "", 4, "matCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef", "matHeaderRowDefSticky"], ["mat-row", "", "class", "example-element-row pt-5 pb-4", 3, "ngClass", "example-expanded-row", "click", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", "class", "example-detail-row", 4, "matRowDef", "matRowDefColumns"], ["class", "norecord", 4, "ngIf"], [1, "title-container"], ["data-testid", "dos-title", 1, "page-title"], [1, "bko-page-title"], [3, "value"], ["mat-header-cell", "", "mat-sort-header", "", 2, "padding-left", "20px"], ["mat-cell", "", "id", "first_block", 3, "ngClass"], [1, "textTtl", "d-none"], ["class", "mr-2 star_wrapper", 3, "click", 4, "ngIf"], [1, "d-flex", "flex-column"], [1, "mr-1"], [1, "mr-2", "star_wrapper", 3, "click"], ["src", "../../../assets/img/star.png", "alt", "star.png", "width", "18"], ["src", "../../../assets/img/unstar.png", "alt", "unstar.png", "width", "18"], ["mat-header-cell", "", "mat-sort-header", ""], ["mat-cell", ""], [1, "bluetext"], [1, "textTtl", "d-none", "sample-req-txt"], [4, "ngFor", "ngForOf"], [1, "d-flex", "align-items-center", "mb-1"], [1, "tat_text"], ["mat-header-cell", ""], [4, "ngIf"], ["mat-raised-button", "", 1, "closeall", 3, "click", "ngClass"], ["src", "../../../assets/img/expandall.png ", "alt", "expandall"], ["mat-cell", "", "id", "arrow_block", 1, "down-arrow"], ["src", "../../../assets/img/down-gray@2x.png", "alt", "down-gray"], ["id", "expanded_td", "mat-cell", "", "td", ""], [1, "example-element-detail"], [1, "row", "py-0", "card-block", "w-100"], [1, "d-flex", "w-100"], [1, "w-100"], ["id", "inner_table", "summary", "", 3, "ngClass"], [2, "display", "none"], [1, "d-flex", "pr-3", "flex-column", "two", "text-left", "pl-5", "comp"], [1, "comp_text", "desc_text"], [1, "d-flex", "pr-3", "flex-column", "three", "text-left", "notes_block"], [1, "desc_text"], [1, "d-flex", "pr-3", "flex-column", "four", "text-left"], ["class", "desc_textmethodology", 4, "ngFor", "ngForOf"], [1, "d-flex", "pr-3", "flex-column", "six", "text-left"], [1, "desc_textmethodology"], ["mat-header-row", ""], ["mat-row", "", 1, "example-element-row", "pt-5", "pb-4", 3, "click", "ngClass"], ["mat-row", "", 1, "example-detail-row"], [1, "norecord"]], template: function ConsultDosComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 3);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 4)(3, "div");
        \u0275\u0275element(4, "app-header");
        \u0275\u0275elementEnd();
        \u0275\u0275template(5, ConsultDosComponent_section_5_Template, 4, 1, "section", 5);
        \u0275\u0275elementStart(6, "mat-drawer-container", 6);
        \u0275\u0275element(7, "mat-drawer", 7, 0);
        \u0275\u0275elementStart(9, "div", 8)(10, "mat-card", 9)(11, "div", 10);
        \u0275\u0275template(12, ConsultDosComponent_h5_12_Template, 3, 1, "h5", 11);
        \u0275\u0275elementStart(13, "section", 12)(14, "div", 13)(15, "div", 14)(16, "div", 15)(17, "div", 16)(18, "mat-form-field", 17)(19, "span", 18);
        \u0275\u0275listener("click", function ConsultDosComponent_Template_span_click_19_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.searchDosTestData());
        });
        \u0275\u0275element(20, "img", 19);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(21, "input", 20);
        \u0275\u0275twoWayListener("ngModelChange", function ConsultDosComponent_Template_input_ngModelChange_21_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.searchValue, $event) || (ctx.searchValue = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("keyup", function ConsultDosComponent_Template_input_keyup_21_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getQuerytext($event));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(22, "div", 21)(23, "mat-form-field", 22);
        \u0275\u0275element(24, "span", 23);
        \u0275\u0275elementStart(25, "mat-select", 24, 1);
        \u0275\u0275twoWayListener("valueChange", function ConsultDosComponent_Template_mat_select_valueChange_25_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.selectedMenu, $event) || (ctx.selectedMenu = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("selectionChange", function ConsultDosComponent_Template_mat_select_selectionChange_25_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFilterChange("menu", $event));
        });
        \u0275\u0275template(27, ConsultDosComponent_mat_option_27_Template, 4, 10, "mat-option", 25);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(28, "div", 26)(29, "mat-form-field", 17)(30, "mat-select", 24, 2);
        \u0275\u0275twoWayListener("valueChange", function ConsultDosComponent_Template_mat_select_valueChange_30_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.selectedCass, $event) || (ctx.selectedCass = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("selectionChange", function ConsultDosComponent_Template_mat_select_selectionChange_30_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFilterChange("class", $event));
        });
        \u0275\u0275template(32, ConsultDosComponent_mat_option_32_Template, 2, 2, "mat-option", 25);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(33, "div", 27)(34, "mat-checkbox", 28);
        \u0275\u0275twoWayListener("ngModelChange", function ConsultDosComponent_Template_mat_checkbox_ngModelChange_34_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.isFavourite, $event) || (ctx.isFavourite = $event);
          return \u0275\u0275resetView($event);
        })("valueChange", function ConsultDosComponent_Template_mat_checkbox_valueChange_34_listener($event) {
          \u0275\u0275restoreView(_r1);
          \u0275\u0275twoWayBindingSet(ctx.checked, $event) || (ctx.checked = $event);
          return \u0275\u0275resetView($event);
        });
        \u0275\u0275listener("change", function ConsultDosComponent_Template_mat_checkbox_change_34_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onFilterChange("favorites", $event));
        });
        \u0275\u0275text(35);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(36, "a", 29);
        \u0275\u0275listener("click", function ConsultDosComponent_Template_a_click_36_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clraeAll());
        });
        \u0275\u0275text(37);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(38, "div", 30)(39, "a", 31);
        \u0275\u0275listener("click", function ConsultDosComponent_Template_a_click_39_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.clraeAll());
        });
        \u0275\u0275text(40);
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(41, "div", 32)(42, "span", 33)(43, "div", 34)(44, "span", 35);
        \u0275\u0275text(45);
        \u0275\u0275elementEnd();
        \u0275\u0275element(46, "img", 36);
        \u0275\u0275elementStart(47, "div", 37)(48, "div", 38);
        \u0275\u0275text(49);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(50, "div", 39)(51, "div", 40);
        \u0275\u0275element(52, "span", 41);
        \u0275\u0275elementStart(53, "div", 42)(54, "span", 43);
        \u0275\u0275text(55, "SST");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(56, "span");
        \u0275\u0275text(57, "Serum Separator");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(58, "div", 40);
        \u0275\u0275element(59, "span", 44);
        \u0275\u0275elementStart(60, "div", 42)(61, "span", 43);
        \u0275\u0275text(62, "RTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(63, "span");
        \u0275\u0275text(64, "Serum, No Gel");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(65, "div", 40);
        \u0275\u0275element(66, "span", 45);
        \u0275\u0275elementStart(67, "div", 42)(68, "span", 43);
        \u0275\u0275text(69, "LTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(70, "span");
        \u0275\u0275text(71, "EDTA Whole Blood");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(72, "div", 40);
        \u0275\u0275element(73, "span", 46);
        \u0275\u0275elementStart(74, "div", 42)(75, "span", 43);
        \u0275\u0275text(76, "BTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(77, "span");
        \u0275\u0275text(78, "Citrated Blood");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(79, "div", 40);
        \u0275\u0275element(80, "span", 47);
        \u0275\u0275elementStart(81, "div", 42)(82, "span", 43);
        \u0275\u0275text(83, "GRNTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(84, "span");
        \u0275\u0275text(85, "Heparinized Blood");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(86, "div", 40);
        \u0275\u0275element(87, "span", 48);
        \u0275\u0275elementStart(88, "div", 42)(89, "span", 43);
        \u0275\u0275text(90, "F");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(91, "span");
        \u0275\u0275text(92, "Feces");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(93, "div", 40);
        \u0275\u0275element(94, "span", 49);
        \u0275\u0275elementStart(95, "div", 42)(96, "span", 43);
        \u0275\u0275text(97, "U");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(98, "span");
        \u0275\u0275text(99, "Urine");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(100, "div", 40);
        \u0275\u0275element(101, "span", 50);
        \u0275\u0275elementStart(102, "div", 42)(103, "span", 43);
        \u0275\u0275text(104, "M-SST");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(105, "span");
        \u0275\u0275text(106, "Micro Serum Separator");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(107, "div", 40);
        \u0275\u0275element(108, "span", 51);
        \u0275\u0275elementStart(109, "div", 42)(110, "span", 43);
        \u0275\u0275text(111, "M-RTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(112, "span");
        \u0275\u0275text(113, "Micro Serum, No Gel");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(114, "div", 40);
        \u0275\u0275element(115, "span", 52);
        \u0275\u0275elementStart(116, "div", 42)(117, "span", 43);
        \u0275\u0275text(118, "M-LTT ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(119, "span");
        \u0275\u0275text(120, "Micro EDTA Whole Blood");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(121, "div", 40);
        \u0275\u0275element(122, "span", 53);
        \u0275\u0275elementStart(123, "div", 42)(124, "span", 43);
        \u0275\u0275text(125, "M-GRNTT");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(126, "span");
        \u0275\u0275text(127, "Micro Heparinized Blood (Lithium)");
        \u0275\u0275elementEnd()()()()()()()();
        \u0275\u0275elementStart(128, "div", 54)(129, "div")(130, "div", 55)(131, "div", 56);
        \u0275\u0275listener("scroll", function ConsultDosComponent_Template_div_scroll_131_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.onTableScroll($event));
        });
        \u0275\u0275elementStart(132, "table", 57);
        \u0275\u0275elementContainerStart(133, 58);
        \u0275\u0275template(134, ConsultDosComponent_th_134_Template, 2, 1, "th", 59)(135, ConsultDosComponent_td_135_Template, 13, 13, "td", 60);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(136, 61);
        \u0275\u0275template(137, ConsultDosComponent_th_137_Template, 2, 1, "th", 62)(138, ConsultDosComponent_td_138_Template, 5, 2, "td", 63);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(139, 64);
        \u0275\u0275template(140, ConsultDosComponent_th_140_Template, 2, 1, "th", 62)(141, ConsultDosComponent_td_141_Template, 5, 2, "td", 63);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(142, 65);
        \u0275\u0275template(143, ConsultDosComponent_th_143_Template, 2, 1, "th", 62)(144, ConsultDosComponent_td_144_Template, 4, 2, "td", 63);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(145, 66);
        \u0275\u0275template(146, ConsultDosComponent_th_146_Template, 2, 1, "th", 62)(147, ConsultDosComponent_td_147_Template, 5, 2, "td", 63);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(148, 67);
        \u0275\u0275template(149, ConsultDosComponent_th_149_Template, 2, 1, "th", 68)(150, ConsultDosComponent_td_150_Template, 4, 2, "td", 63);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(151, 69);
        \u0275\u0275template(152, ConsultDosComponent_th_152_Template, 3, 3, "th", 68)(153, ConsultDosComponent_td_153_Template, 2, 0, "td", 70);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(154, 71);
        \u0275\u0275template(155, ConsultDosComponent_td_155_Template, 43, 22, "td", 72);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(156, ConsultDosComponent_tr_156_Template, 1, 0, "tr", 73)(157, ConsultDosComponent_tr_157_Template, 1, 10, "tr", 74)(158, ConsultDosComponent_tr_158_Template, 1, 0, "tr", 75);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(159, "div");
        \u0275\u0275template(160, ConsultDosComponent_tbody_160_Template, 4, 1, "tbody", 76);
        \u0275\u0275elementEnd()()()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(5);
        \u0275\u0275property("ngIf", !ctx.isBackOfficeUser);
        \u0275\u0275advance(7);
        \u0275\u0275property("ngIf", ctx.isBackOfficeUser);
        \u0275\u0275advance(9);
        \u0275\u0275twoWayProperty("ngModel", ctx.searchValue);
        \u0275\u0275advance(3);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction6(23, _c025, ctx.selectedMenu === "Blue", ctx.selectedMenu === "Green", ctx.selectedMenu === "Orange", ctx.selectedMenu === "Equine", ctx.selectedMenu === "AvianExotic", ctx.selectedMenu === "AllOther"));
        \u0275\u0275advance();
        \u0275\u0275twoWayProperty("value", ctx.selectedMenu);
        \u0275\u0275property("placeholder", ctx.label.FilterByMenu);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.filterMenuData);
        \u0275\u0275advance(3);
        \u0275\u0275twoWayProperty("value", ctx.selectedCass);
        \u0275\u0275property("placeholder", ctx.label.FilterByClass);
        \u0275\u0275advance(2);
        \u0275\u0275property("ngForOf", ctx.filterClassData);
        \u0275\u0275advance(2);
        \u0275\u0275twoWayProperty("ngModel", ctx.isFavourite)("value", ctx.checked);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.label.Favorites, "");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.label.ClearAll);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.label.ClearAll);
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate1(" ", ctx.label.TubeTypeKey, "");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate1(" ", ctx.label.DirectoryOfServicesSampleKey, " ");
        \u0275\u0275advance(83);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(24);
        \u0275\u0275property("matHeaderRowDef", ctx.columnsToDisplay)("matHeaderRowDefSticky", true);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.columnsToDisplay);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", \u0275\u0275pureFunction0(30, _c118));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngIf", ctx.dataSource === null || ctx.dataSource.data.length === 0);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, MatLegacyFormField, MatLegacyPrefix, MatLegacyInput, MatLegacyButton, MatLegacyCheckbox, MatLegacyCard, MatLegacySelect, MatLegacyOption, MatDrawer, MatDrawerContainer, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, MatSort, MatSortHeader, HeaderComponent, SideMenuComponent, DefaultValueAccessor, NgControlStatus, MaxLengthValidator, NgModel], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: center !important;\n  font-size: 17px;\n  color: #000;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 99.1% !important;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 23px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 45px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n  position: relative;\n  top: -12px;\n  box-shadow: 0 8px 12px 0 rgb(0 0 0 / 19%) !important;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n  padding: 12px 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n  justify-content: space-around;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.card-complete[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.mat-column-expandedDetail[_ngcontent-%COMP%] {\n  background: #f5f7f9;\n}\n.card-head[_ngcontent-%COMP%] {\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n  width: 90%;\n  word-break: break-word;\n  white-space: break-spaces;\n  text-align: left;\n  line-height: 16px;\n}\n.card-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  min-width: 62px;\n  word-break: break-word;\n  white-space: normal;\n  text-align: left;\n  max-width: 75px;\n}\n.card-block[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  box-shadow: none !important;\n  margin-bottom: 13px;\n  padding: 12px;\n  height: 100%;\n  border-radius: 5px !important;\n  padding-bottom: 0;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child   img[_ngcontent-%COMP%] {\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: rotate(-90deg);\n  transition: all 0.1s;\n  position: absolute;\n  top: 16px;\n  right: 12px;\n}\n.example-element-row.example-expanded-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child   img[_ngcontent-%COMP%] {\n  background-repeat: no-repeat;\n  background-position: center;\n  transform: rotate(0deg);\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(1), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(2), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(3) {\n  margin-bottom: 10px;\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n.card-arrow[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.cdk-column-expandedDetail[_ngcontent-%COMP%] {\n  padding-right: 0 !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child, \ntr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  padding-left: 14px !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  padding-right: 0;\n}\n.dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1) {\n  background-color: #fbfbfb !important;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(1) {\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 15px;\n  margin-top: 20px;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(2) {\n  font-size: 15px;\n  margin-top: 20px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  padding-left: 18px;\n}\n.closeall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(0deg);\n  transition: all 0.1s;\n}\n.closeall.expandedall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(-180deg);\n}\n.closeall[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 999;\n  top: 36px;\n  right: 37px;\n  background: transparent;\n  min-width: 34px;\n  padding: 0;\n}\n.cust-postion[_ngcontent-%COMP%] {\n  position: relative;\n}\n.example-container1[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dvn_name[_ngcontent-%COMP%] {\n  width: auto !important;\n}\n@media (max-width: 800px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n@media only screen and (min-width: 1024px) and (max-height: 1366px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.5) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n.filter-txt[_ngcontent-%COMP%] {\n  position: relative;\n  height: 22px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n.cros-btn[_ngcontent-%COMP%] {\n  position: relative;\n  right: 0;\n  top: 0;\n  height: 30px !important;\n  width: 30px;\n  margin-left: 6px;\n}\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n  margin-right: 10px;\n  margin-left: 10px;\n  box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n  border-radius: 6px !important;\n  margin-bottom: 11px;\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n  font-family: "GothamNarrowBold", sans-serif !important;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: center !important;\n  font-size: 17px;\n  color: #000;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 23px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 45px;\n  white-space: nowrap;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.card-complete[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red;\n}\n.mat-column-expandedDetail[_ngcontent-%COMP%] {\n  background: #f5f7f9;\n}\n.card-head[_ngcontent-%COMP%] {\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n  width: 90%;\n  word-break: break-word;\n  white-space: break-spaces;\n  text-align: left;\n  line-height: 16px;\n}\n.card-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  min-width: 62px;\n  word-break: break-word;\n  white-space: normal;\n  text-align: left;\n  max-width: 75px;\n}\n.card-block[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  box-shadow: none !important;\n  margin-bottom: 13px;\n  padding: 12px;\n  height: 100%;\n  border-radius: 5px !important;\n  padding-bottom: 0;\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(1), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(2), \n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%]:nth-of-type(3) {\n  margin-bottom: 10px;\n}\n.card-block[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  margin-bottom: 10px;\n}\n.card-arrow[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.cdk-column-expandedDetail[_ngcontent-%COMP%] {\n  padding-right: 0 !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   .col-sm-4[_ngcontent-%COMP%] {\n  padding-right: 0;\n}\n.dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1) {\n  background-color: #fbfbfb !important;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(1) {\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 15px;\n  margin-top: 20px;\n}\n.noresult[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-of-type(2) {\n  font-size: 15px;\n  margin-top: 20px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-size: 15px;\n  color: #3e3e3e;\n}\n.noresult[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  padding-left: 18px;\n}\n.closeall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(0deg);\n  transition: all 0.1s;\n}\n.closeall.expandedall[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  transform: rotate(-180deg);\n}\n.closeall[_ngcontent-%COMP%] {\n  position: absolute;\n  z-index: 999;\n  top: 4px;\n  right: 6px;\n  background: transparent;\n  min-width: 34px;\n  padding: 0;\n}\n.cust-postion[_ngcontent-%COMP%] {\n  position: relative;\n}\n.example-container1[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dvn_name[_ngcontent-%COMP%] {\n  width: auto !important;\n}\n@media (max-width: 800px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n@media only screen and (min-width: 1024px) and (max-height: 1366px) and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.5) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: 106px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 48px;\n    padding: 0;\n    margin-left: 10px;\n  }\n}\n.filter-txt[_ngcontent-%COMP%] {\n  position: relative;\n  height: 22px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n}\n.cros-btn[_ngcontent-%COMP%] {\n  position: relative;\n  right: 0;\n  top: 0;\n  height: 30px !important;\n  width: 30px;\n  margin-left: 6px;\n}\n.example-action-buttons[_ngcontent-%COMP%] {\n  padding-bottom: 20px;\n}\n.example-headers-align[_ngcontent-%COMP%]   .mat-expansion-panel-header-title[_ngcontent-%COMP%], \n.example-headers-align[_ngcontent-%COMP%]   .mat-expansion-panel-header-description[_ngcontent-%COMP%] {\n  flex-basis: 0;\n}\n.example-headers-align[_ngcontent-%COMP%]   .mat-expansion-panel-header-description[_ngcontent-%COMP%] {\n  justify-content: space-between;\n  align-items: center;\n}\n.example-headers-align[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%]    + .mat-form-field[_ngcontent-%COMP%] {\n  margin-left: 8px;\n}\n.heading_bar[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  background: #ed8b00;\n  color: #fff;\n  padding: 8px 10px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.heading_bar[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  width: 60px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n  min-width: 290px;\n  padding-right: 12px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2) {\n  width: 250px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3) {\n  width: 305px;\n  padding-right: 17px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4) {\n  width: 200px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5) {\n  width: 100px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(6) {\n  width: 120px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(7) {\n  width: 100px;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], \ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n  font-size: 13px;\n}\ntd[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif;\n  vertical-align: top;\n}\nth[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif !important;\n  font-weight: 100;\n}\n.heading_bar[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  vertical-align: middle;\n}\n.dot-sst[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  border: 4px solid #d91c00;\n}\n.dot-rtt[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #d91c00;\n}\n.dot-urine[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #fed504;\n}\n.dot-btt[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #a0dcee;\n}\n.dot-ltt[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #a884bb;\n}\n.dot-grntt[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #31b44a;\n}\n.dot-feces[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #a36510;\n}\n.dot[_ngcontent-%COMP%] {\n  min-height: 15px;\n  min-width: 15px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n}\n.dred[_ngcontent-%COMP%] {\n  background: red;\n}\n.dgreen[_ngcontent-%COMP%] {\n  background: green;\n}\n.dred_circle[_ngcontent-%COMP%] {\n  background: transparent;\n  border: 2px solid red;\n}\n.mat-accordion[_ngcontent-%COMP%] {\n  width: 100%;\n  height: calc(100vh - 216px);\n  overflow: auto;\n}\n.tooltip[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  font-size: 13px;\n  opacity: 1;\n}\n.tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n  visibility: hidden;\n  width: 370px;\n  background-color: #fff;\n  color: #000;\n  text-align: center;\n  border-radius: 6px;\n  padding: 0;\n  position: absolute;\n  z-index: 1;\n  top: -5px;\n  right: 110%;\n  box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n}\n.tooltip[_ngcontent-%COMP%]:hover   .tooltiptext[_ngcontent-%COMP%] {\n  visibility: visible;\n}\n.tool_header[_ngcontent-%COMP%] {\n  background: #0072ce;\n  padding: 16px 0;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  color: #fff;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.tool_text[_ngcontent-%COMP%] {\n  font-size: 12px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.abbre[_ngcontent-%COMP%] {\n  width: 92px;\n  display: inline-block;\n  text-align: left;\n  padding-left: 3px;\n}\n.filter-head[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-family: "GothamNarrowBold", sans-serif;\n  color: #585858;\n  margin-bottom: 12px;\n}\n.clrall[_ngcontent-%COMP%] {\n  color: #0072ce !important;\n  font-family: "GothamNarrowBold", sans-serif;\n  cursor: pointer;\n  font-weight: bold;\n}\n.do_srch[_ngcontent-%COMP%] {\n  background: url("./media/search-icon.png");\n  background-repeat: no-repeat;\n  background-size: 15px;\n  padding-left: 24px;\n}\n.do_filter_wrapper[_ngcontent-%COMP%] {\n  height: calc(100vh - 119px);\n  display: flex;\n  flex-flow: column;\n  justify-content: space-between;\n}\n.del_doc[_ngcontent-%COMP%] {\n  font-family: "gothambook", sans-serif;\n}\n.sst[_ngcontent-%COMP%] {\n  border: 4px solid #d91c00;\n}\n.rrt[_ngcontent-%COMP%] {\n  background: #d91c00;\n}\n.ltt[_ngcontent-%COMP%] {\n  background: #a884bb;\n}\n.btt[_ngcontent-%COMP%] {\n  background: #a0dcee;\n}\n.grntt[_ngcontent-%COMP%] {\n  background: #31b44a;\n}\n.f[_ngcontent-%COMP%] {\n  background: #a36510;\n}\n.u[_ngcontent-%COMP%] {\n  background: #fed504;\n}\n.micro[_ngcontent-%COMP%] {\n  min-height: 16px;\n  min-width: 16px;\n  margin-right: 5px;\n}\n.msst[_ngcontent-%COMP%] {\n  background: #fff;\n  border: 4px solid #ff0000;\n}\n.mrtt[_ngcontent-%COMP%] {\n  background: #d91c00;\n}\n.mltt[_ngcontent-%COMP%] {\n  background: #a884bb;\n}\n.mgrntt[_ngcontent-%COMP%] {\n  background: #31b44a;\n}\n.tooltext[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100px;\n  right: 27px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  display: flex;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.tat_text[_ngcontent-%COMP%] {\n  width: 130px;\n  word-wrap: break-word;\n  white-space: normal;\n  display: block;\n  line-height: 15px;\n}\n.desc_text[_ngcontent-%COMP%] {\n  word-wrap: break-word;\n  white-space: normal;\n  display: block;\n  line-height: 15px;\n  min-height: 30px;\n}\n.desc_textmethodology[_ngcontent-%COMP%] {\n  word-wrap: break-word;\n  white-space: normal;\n  display: block;\n  min-height: 30px;\n  margin: 0px 0px 6px 0px;\n}\n.desc_textmethodology[_ngcontent-%COMP%]:last-child {\n  margin: 0px !important;\n}\n.usermangemt[_ngcontent-%COMP%] {\n  height: calc(100vh - 260px);\n  overflow: auto;\n  padding: 0 12px;\n  padding-left: 5px;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 17px;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-weight: bold;\n}\n.color1[_ngcontent-%COMP%] {\n  background: red;\n  height: 34px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n}\nth.mat-sort-header-sorted[_ngcontent-%COMP%] {\n  color: black;\n}\n.links[_ngcontent-%COMP%] {\n  color: #0075bc;\n  cursor: pointer !important;\n  text-decoration: underline;\n}\n.adduser-btn[_ngcontent-%COMP%] {\n  background-color: #ff6400 !important;\n  color: #fff !important;\n  height: 34px !important;\n  padding: 0px 30px !important;\n  border-radius: 6px !important;\n  line-height: 34px;\n}\n.view-user[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  display: block;\n  position: relative;\n  flex: auto;\n  min-width: 0;\n  width: 115px;\n}\n.view-user[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 4px 6px 7px 4px;\n  margin: 0 !important;\n  top: -2px;\n  font-size: 14px;\n}\n.view-user[_ngcontent-%COMP%]   .mat-select-value[_ngcontent-%COMP%] {\n  color: #585858;\n}\n.view-user[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n  padding: 0;\n  border-radius: 10px 10px 0 0;\n}\n.edit-profile[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\n  padding-bottom: 0px;\n}\n.cancel-btn[_ngcontent-%COMP%] {\n  background-color: #9e9e9e;\n  min-width: 125px;\n}\n.save-change[_ngcontent-%COMP%] {\n  background-color: #ff6400;\n  color: #fff;\n  min-width: 125px;\n}\n.editicon[_ngcontent-%COMP%]   .mat-icon-button.mat-accent[_ngcontent-%COMP%] {\n  color: #1072ce !important;\n}\n.deleteicon[_ngcontent-%COMP%]   .mat-icon-button.mat-accent[_ngcontent-%COMP%] {\n  color: #1072ce !important;\n  margin-right: 10px;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child, \n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  width: 100px;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(5), \n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(5) {\n  width: 190px;\n  text-align: left;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], \n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  vertical-align: middle;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2) {\n  width: 217px;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  text-align: center;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  padding-right: 30px !important;\n}\n.delbtn[_ngcontent-%COMP%] {\n  background: #1072ce !important;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  background-color: #fbfbfb;\n}\n.custom-error[_ngcontent-%COMP%] {\n  color: red;\n  display: block;\n  font-size: 11px;\n  position: absolute;\n  left: 26px;\n}\ntable[_ngcontent-%COMP%] {\n  border-collapse: separate;\n  border-spacing: 0 1em;\n}\ntable.mat-table[_ngcontent-%COMP%] {\n  border-collapse: separate !important;\n  border-spacing: 0 12px !important;\n  position: relative;\n  top: -32px;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n  border-top-right-radius: 10px !important;\n  border-bottom-right-radius: 10px !important;\n  position: relative;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  background: #fff;\n  padding-right: 10px;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  padding-left: 67px !important;\n}\n.usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\n.usermangemt[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\n.usermangemt[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.name_outer[_ngcontent-%COMP%] {\n  line-height: 16px;\n}\n[hidden][_ngcontent-%COMP%] {\n  display: none !important;\n}\n.msg[_ngcontent-%COMP%] {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.dosskyBlue[_ngcontent-%COMP%] {\n  border-left: 5px solid #2d68c4;\n}\n.dosGreen[_ngcontent-%COMP%] {\n  border-left: 5px solid #31b44a;\n}\n.dosorange[_ngcontent-%COMP%] {\n  border-left: 5px solid #fed504;\n}\n.dosequine[_ngcontent-%COMP%] {\n  border-left: 5px solid #006271;\n}\n.dosBlue[_ngcontent-%COMP%] {\n  border-left: 5px solid #a0dcee;\n}\n.dosallother[_ngcontent-%COMP%] {\n  border-left: 5px solid #a884bb;\n}\n.dotdosskyBlue[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #2d68c4;\n}\n.dotdosGreen[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #31b44a;\n}\n.dotdosorange[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #fed504;\n}\n.dotdosequine[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #006271;\n}\n.dotdosBlue[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #a0dcee;\n}\n.dotdosallother[_ngcontent-%COMP%] {\n  min-height: 12px;\n  min-width: 12px;\n  border-radius: 50%;\n  margin-right: 9px;\n  display: inline-block;\n  background: #a884bb;\n}\n.star_wrapper[_ngcontent-%COMP%] {\n  width: 40px;\n}\n.comp_text[_ngcontent-%COMP%] {\n  word-break: break-word;\n}\n#inner_table[_ngcontent-%COMP%] {\n  border-right: 17px solid transparent;\n  border-collapse: inherit !important;\n  border-spacing: inherit !important;\n  border-bottom-left-radius: 10px !important;\n}\n#inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n  border-radius: 10px !important;\n  box-shadow: none !important;\n}\n.noresult[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 51px;\n  width: calc(100vw - 397px);\n}\n.tool_text[_ngcontent-%COMP%]   .d-flex[_ngcontent-%COMP%] {\n  height: 25px;\n}\n.bluetext[_ngcontent-%COMP%] {\n  color: #000 !important;\n  padding-right: 24px;\n  word-break: break-word;\n  white-space: normal;\n}\n.left-block[_ngcontent-%COMP%] {\n  width: calc(100vw - 366px) !important;\n}\ntable[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n}\n.tube_type_key[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 20px !important;\n}\n.tblpart[_ngcontent-%COMP%] {\n  padding-top: 20px;\n  margin-left: 20px;\n}\n.srchpart[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  top: -5px !important;\n  position: relative;\n}\n.srchpart[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\n  padding-left: 10px;\n}\n.mat-drawer-container[_ngcontent-%COMP%] {\n  background: transparent;\n}\n.bko-page-title[_ngcontent-%COMP%] {\n  text-align: center;\n  font-weight: bold;\n  margin-top: 70px;\n  padding: 25px 0px 0px;\n}\n  .srchpart .mat-form-field-appearance-outline .mat-form-field-infix {\n  top: 1px !important;\n}\n.dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1), \n.dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(even) {\n  background: #fff !important;\n}\n  .usermangemt .mat-sort-header-button {\n  white-space: nowrap !important;\n  padding-right: 10px !important;\n}\n.m-fav[_ngcontent-%COMP%]   .clrall.m-clrall[_ngcontent-%COMP%] {\n  display: none;\n}\n  .page-wrapper.refpart {\n  padding: 20px 50px 20px 20px !important;\n}\n@media screen and (max-width: 767px) {\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td.down-arrow[_ngcontent-%COMP%] {\n    position: absolute !important;\n    bottom: 21px !important;\n    left: 8px !important;\n    width: 20px !important;\n    background: none;\n    min-width: 20px !important;\n    padding: 0 !important;\n  }\n  .desc_text[_ngcontent-%COMP%] {\n    display: flex;\n    align-items: center;\n    padding-top: 3px;\n  }\n  tr.example-element-row.pt-5.pb-4.mat-row.dosorange[_ngcontent-%COMP%], \n   tr.example-element-row.pt-5.pb-4.mat-row.dosGreen[_ngcontent-%COMP%], \n   tr.example-element-row.pt-5.pb-4.mat-row.dosallother[_ngcontent-%COMP%] {\n    background: #fff !important;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n    height: 50px;\n  }\n  #inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  #inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    padding-top: 10px;\n  }\n  .clrall[_ngcontent-%COMP%] {\n    display: none;\n  }\n  tr.example-element-row.pt-5.pb-4.mat-row.dosskyBlue[_ngcontent-%COMP%] {\n    background: #fff !important;\n  }\n  .m-fav[_ngcontent-%COMP%]   .clrall.m-clrall[_ngcontent-%COMP%] {\n    display: block;\n  }\n    .dashboard .mat-card {\n    background: none;\n    box-shadow: none !important;\n  }\n  .tblpart[_ngcontent-%COMP%] {\n    background: #fff;\n    padding: 15px 5px 0 20px;\n    margin: 10px 30px -10px 20px;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff !important;\n    padding: 20px;\n    margin: 0 30px 0 20px;\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n  }\n  .tooltip[_ngcontent-%COMP%] {\n    margin-right: 30px;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: none;\n  }\n  .m-fav[_ngcontent-%COMP%] {\n    display: flex;\n    justify-content: space-between;\n  }\n  .dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  .example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child   img[_ngcontent-%COMP%] {\n    right: 0px;\n    position: relative;\n    z-index: 99;\n    width: 22px;\n  }\n  .tat_text[_ngcontent-%COMP%] {\n    width: auto;\n    padding-right: 20px;\n  }\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 0px solid rgb(255, 255, 255);\n    position: relative;\n    padding-left: 50%;\n  }\n  .dashboard-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    position: relative;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 0;\n    padding-right: 10px;\n    white-space: inherit;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n    padding-left: 3%;\n  }\n  .example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding: 10px 0px;\n  }\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    width: 100%;\n    border-radius: 3px !important;\n  }\n  #inner_table[_ngcontent-%COMP%] {\n    border-bottom-left-radius: 3px !important;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: auto !important;\n  }\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none !important;\n  }\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    min-width: 100% !important;\n    padding-left: 38% !important;\n    text-align: left !important;\n    word-break: break-all;\n    border: none;\n  }\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  table.mat-table[_ngcontent-%COMP%] {\n    top: -58px;\n  }\n  #inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   b[_ngcontent-%COMP%] {\n    display: none;\n  }\n  #inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    padding: 10px 0;\n  }\n  #inner_table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    display: flex;\n  }\n  .comp[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n  }\n  .star_wrapper[_ngcontent-%COMP%] {\n    width: 40px;\n    position: absolute;\n    top: -30px;\n    left: 9px;\n  }\n  .dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(4n+1), \n   .dashboard-table[_ngcontent-%COMP%]   .mat-row[_ngcontent-%COMP%]:nth-child(even) {\n    background: transparent !important;\n  }\n  tr.example-detail-row[_ngcontent-%COMP%] {\n    top: -21px;\n  }\n  .title-container[_ngcontent-%COMP%] {\n    margin: 0 0px 20px;\n    background: #fff;\n    padding: 12px;\n    border-top: 2px solid #cfcdcd;\n    border-bottom: 3px solid #cfcdcd;\n  }\n  tr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n    background: white;\n  }\n}\n@media screen and (max-width: 560px) {\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 48% !important;\n    padding-right: 10px;\n  }\n}\n@media screen and (max-width: 450px) {\n  .sample-req-txt[_ngcontent-%COMP%] {\n    width: 115px;\n    padding-right: 0px !important;\n    line-height: 16px;\n    word-break: break-word;\n  }\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n    width: 296px;\n  }\n}\n@media screen and (max-width: 375px) {\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], \n   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    font-size: 12px;\n  }\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n    width: 250px;\n  }\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\n    align-self: start !important;\n  }\n}\n@media screen and (max-width: 360px) {\n  .page-title[_ngcontent-%COMP%] {\n    padding: 14px 23px;\n  }\n  .usermangemt[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 44% !important;\n    padding-right: 5px;\n  }\n}\n@media screen and (max-width: 768px) and (max-width: 1024px) {\n  .usermangemt[_ngcontent-%COMP%] {\n    max-height: calc(100vh - 278px) !important;\n  }\n}\n@media screen and (min-width: 800px) and (max-width: 1180px) {\n  .usermangemt[_ngcontent-%COMP%] {\n    max-height: calc(100vh - 278px) !important;\n  }\n}\n/*# sourceMappingURL=consult-dos.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("collapsed", style({ height: "0px", minHeight: "0" })),
        state("expanded", style({ height: "*" })),
        transition("expanded <=> collapsed", animate("225ms cubic-bezier(0.4, 0.0, 0.2, 1)"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultDosComponent, { className: "ConsultDosComponent", filePath: "src\\app\\components\\consult-dos\\consult-dos.component.ts", lineNumber: 35 });
})();

// src/app/components/homepage/result-list/result-list.component.ts
var _c026 = ["textContainer"];
var _c119 = (a0, a1) => ({ boxRed: a0, boxGreen: a1 });
var _c210 = (a0) => ({ showHide: a0 });
function ResultListComponent_p_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.Showingresultslast72hours, " ");
  }
}
function ResultListComponent_div_6_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1, ".");
    \u0275\u0275elementEnd();
  }
}
function ResultListComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "span", 7);
    \u0275\u0275text(2);
    \u0275\u0275template(3, ResultListComponent_div_6_span_3_Template, 2, 0, "span", 3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "button", 8);
    \u0275\u0275listener("click", function ResultListComponent_div_6_Template_button_click_4_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.sideMenu.goToLink(1));
    });
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.labelService.dsHomePageScreen.noNewResultMsg);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.commonService.hasDot(ctx_r0.labelService.dsHomePageScreen.noNewResultMsg));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.SeeAllResults, " ");
  }
}
function ResultListComponent_div_7_div_1_span_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span");
  }
}
function ResultListComponent_div_7_div_1_a_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 23);
    \u0275\u0275listener("click", function ResultListComponent_div_7_div_1_a_12_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r6 = \u0275\u0275nextContext();
      const result_r5 = ctx_r6.$implicit;
      const i_r8 = ctx_r6.index;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.toggleText(i_r8, $event, result_r5));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const result_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(result_r5.showmore ? ctx_r0.labelService.dsHomePageScreen.less : ctx_r0.labelService.dsHomePageScreen.more);
  }
}
function ResultListComponent_div_7_div_1_button_14_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 24);
    \u0275\u0275listener("click", function ResultListComponent_div_7_div_1_button_14_Template_button_click_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.stopPropagation($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const result_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("hidden", result_r5.ViewedFlag);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.New, " ");
  }
}
function ResultListComponent_div_7_div_1_button_15_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 25);
    \u0275\u0275listener("click", function ResultListComponent_div_7_div_1_button_15_Template_button_click_0_listener($event) {
      \u0275\u0275restoreView(_r10);
      const ctx_r0 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r0.stopPropagation($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const result_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("hidden", !result_r5.ViewedFlag);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.Viewed, " ");
  }
}
function ResultListComponent_div_7_div_1_p_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 26);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.Completed, " ");
  }
}
function ResultListComponent_div_7_div_1_p_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p", 27);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.Canceled, " ");
  }
}
function ResultListComponent_div_7_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 12);
    \u0275\u0275listener("click", function ResultListComponent_div_7_div_1_Template_div_click_0_listener() {
      const result_r5 = \u0275\u0275restoreView(_r4).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.navToPatientInfo(result_r5, 1));
    });
    \u0275\u0275elementStart(1, "div", 13)(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "p");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div", 14)(7, "p", 15, 0);
    \u0275\u0275template(9, ResultListComponent_div_7_div_1_span_9_Template, 1, 0, "span", 3);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p", 16);
    \u0275\u0275listener("click", function ResultListComponent_div_7_div_1_Template_p_click_11_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onPreventClick($event));
    });
    \u0275\u0275template(12, ResultListComponent_div_7_div_1_a_12_Template, 2, 1, "a", 17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 18);
    \u0275\u0275template(14, ResultListComponent_div_7_div_1_button_14_Template, 2, 2, "button", 19)(15, ResultListComponent_div_7_div_1_button_15_Template, 2, 2, "button", 20)(16, ResultListComponent_div_7_div_1_p_16_Template, 2, 1, "p", 21)(17, ResultListComponent_div_7_div_1_p_17_Template, 2, 1, "p", 22);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const result_r5 = ctx.$implicit;
    const i_r8 = ctx.index;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(13, _c119, result_r5.AnalysisStatusName == "Canceled", result_r5.AnalysisStatusName == "Completed"));
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(result_r5.DateReceivedStr);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate3(" ", result_r5.FirstName, " ", result_r5.LastName, ", ", result_r5.PatientId, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(16, _c210, !result_r5.showmore));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.overflowStates[i_r8] && result_r5.showmore);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", result_r5.AnalysisTypeName, " ");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r0.overflowStates[i_r8]);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", result_r5.AnalysisStatusName != "Canceled");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", result_r5.AnalysisStatusName != "Canceled");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", result_r5.AnalysisStatusName == "Completed");
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", result_r5.AnalysisStatusName == "Canceled");
  }
}
function ResultListComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275listener("scroll", function ResultListComponent_div_7_Template_div_scroll_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onScroll($event));
    });
    \u0275\u0275template(1, ResultListComponent_div_7_div_1_Template, 18, 18, "div", 10);
    \u0275\u0275elementStart(2, "button", 11);
    \u0275\u0275listener("click", function ResultListComponent_div_7_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.sideMenu.goToLink(1));
    });
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.patientList);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsHomePageScreen.SeeAllResults, " ");
  }
}
var ResultListComponent = class _ResultListComponent {
  constructor(commonService, dataService, patientService, headerService, sidefilterService, labelService, sideMenu) {
    this.commonService = commonService;
    this.dataService = dataService;
    this.patientService = patientService;
    this.headerService = headerService;
    this.sidefilterService = sidefilterService;
    this.labelService = labelService;
    this.sideMenu = sideMenu;
    this.patientList = [];
    this.allPatientData = [];
    this.lastThreeDates = [];
    this.defaultPageNumber = 1;
    this.atBottom = false;
    this.stopScrolling = false;
    this.originData = [];
    this.overflowStates = [];
    this.label = this.labelService.dsHomePageScreen;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.getHomePageScreenLabel();
    }
    this.filter = new SideFilter();
    this.BusinessGuId = this.dataService.appData.authDetails["BusinessGuid"];
    this.filter.BusinessGuid = this.BusinessGuId;
    this.filter.LanguageId = this.dataService.appData.authDetails["LanguageId"];
    this.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    if (!this.dataService.pageState.dashboard.requestParams) {
      this.dataService.pageState.dashboard.requestParams = this.filter;
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      console.log(data);
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.getHomePageScreenLabel();
    });
  }
  onScroll(event) {
    const element = event.target;
    const currentAtBottom = Math.round(element.scrollHeight) - Math.round(element.scrollTop) === Math.round(element.clientHeight);
    console.log(element.scrollHeight, element.scrollTop, element.clientHeight);
    if (this.stopScrolling == false) {
      if (currentAtBottom && !this.atBottom) {
        this.atBottom = true;
        this.onScrollEnd();
      } else if (!currentAtBottom) {
        this.atBottom = false;
      }
    }
  }
  onScrollEnd() {
    console.log("Scrolled to the end");
    this.defaultPageNumber = this.defaultPageNumber + 1;
    this.getPatientResultDetails();
  }
  onResize(event) {
    this.checkOverflow();
  }
  ngOnInit() {
    console.log("requestParams => ", this.dataService.pageState.dashboard.requestParams);
    this.getPatientResultDetails();
  }
  // getOnlyDate(datetime) {
  //   return datetime.split(" ")[0];
  // }
  getExactDate(datetime) {
    let newDate = new Date(datetime.replace("T", " "));
    return newDate;
  }
  // pushOrUpdatePatientResult(obj, dateType) {
  //   let elem = this.patientList.find(
  //     (o) => o.PatientId === obj["PatientId"] && o.dateType == dateType
  //   );
  //   if (elem) {
  //     elem.AnalysisTypeName =
  //       elem.AnalysisTypeName + "," + obj["AnalysisTypeName"];
  //   } else {
  //     obj.dateType = dateType;
  //     this.patientList.push(JSON.parse(JSON.stringify(obj)));
  //   }
  // }
  groupByPatientId(patients) {
    const grouped = {};
    patients.forEach((patient) => {
      const { PatientId } = patient;
      if (!grouped[PatientId]) {
        grouped[PatientId] = [];
      }
      grouped[PatientId].push(patient);
    });
    return Object.values(grouped);
  }
  groupBy24Hours(patientArray) {
    console.log(patientArray);
    if (patientArray.length > 1) {
      let latestDateTime, secondLatestDate, thirdLatestDate;
      const sortedList = patientArray.sort((a, b) => new Date(b.DateReceived).getTime() - new Date(a.DateReceived).getTime());
      latestDateTime = new Date(sortedList[0].DateReceived);
      secondLatestDate = new Date(latestDateTime);
      thirdLatestDate = new Date(latestDateTime);
      this.lastThreeDates = [
        latestDateTime.getTime(),
        secondLatestDate.setDate(latestDateTime.getDate() - 1),
        thirdLatestDate.setDate(latestDateTime.getDate() - 2)
      ];
      const ranges = [
        [this.lastThreeDates[0], this.lastThreeDates[1], 1],
        [this.lastThreeDates[1], this.lastThreeDates[2], 2],
        [this.lastThreeDates[2], 0, 3]
        // 0 as lower bound for the third range
      ];
      ranges.forEach(([upper, lower, dateType]) => {
        const filteredData = sortedList.filter((item) => {
          const itemTime = new Date(item.DateReceived).getTime();
          return itemTime <= upper && itemTime > lower;
        });
        filteredData.forEach((elem) => {
          this.pushOrUpdatePatientResult(elem, dateType);
        });
      });
    } else {
      this.pushOrUpdatePatientResult(patientArray[0], 4);
    }
  }
  stopPropagation(event) {
    event.stopPropagation();
  }
  pushOrUpdatePatientResult(obj, dateType) {
    let elem = this.patientList.find((o) => o.PatientId === obj["PatientId"] && o.dateType == dateType);
    if (elem) {
      elem.AnalysisTypeName = elem.AnalysisTypeName + "," + obj["AnalysisTypeName"];
    } else {
      obj.dateType = dateType;
      this.patientList.push(JSON.parse(JSON.stringify(obj)));
    }
  }
  getPatientResultDetails() {
    let reqbody;
    const today = /* @__PURE__ */ new Date();
    console.log("todays date", today);
    const threeDaysBack = /* @__PURE__ */ new Date();
    threeDaysBack.setDate(today.getDate() - 3);
    console.log("threeDaysBack", threeDaysBack);
    console.log("defaultPageNumber", this.defaultPageNumber);
    reqbody = JSON.parse(JSON.stringify(this.dataService.pageState.dashboard.requestParams));
    reqbody.BusinessGuid = this.dataService.appData.authDetails["BusinessGuid"];
    reqbody.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    reqbody.AnalysisTypeId = 0;
    reqbody.AnalysisStatusId = 0;
    reqbody.PageNo = this.defaultPageNumber;
    reqbody.PageSize = 60;
    reqbody.IsApplyFilter = true;
    reqbody.PatientId = null;
    reqbody.ZDXPatientInfoId = 0;
    reqbody.ToDate = this.commonService.formatDate(today, "1").split(" ")[0] + " 23:59:59";
    reqbody.FromDate = this.commonService.formatDate(threeDaysBack, "3").split(" ")[0] + " 00:00:00";
    this.commonService.getResultList(reqbody).subscribe((data) => {
      let patientDetailsByDate = [];
      this.patientList = [];
      let obj = {};
      if (data.ResponseData.DashboardPatientList.length < 60) {
        this.stopScrolling = true;
      }
      if (data.ResponseData.DashboardPatientList != void 0 || data.ResponseData.DashboardPatientList != null) {
        data.ResponseData.DashboardPatientList.forEach((data2) => {
          if (data2.Details && data2.Details.length > 0) {
            data2.Details.forEach((d) => {
              obj = {
                AccessionNumber: data2?.AccessionNumber,
                BirthDate: data2?.BirthDate,
                BreedName: data2?.BreedName,
                Dob: data2?.Dob,
                FirstName: data2?.FirstName,
                Gender: data2?.Gender,
                LastName: data2?.LastName,
                OrderNote: data2?.OrderNote,
                OrderNumber: data2?.OrderNumber,
                OwnerFirstName: data2?.OwnerFirstName,
                OwnerLastName: data2?.OwnerLastName,
                OwnerName: data2?.Owner_Name,
                PatientId: data2?.PatientId,
                PatientName: data2?.PatientName,
                SpeciesId: data2?.SpeciesId,
                SpeciesName: data2?.SpeciesName,
                Status: data2?.Status,
                ZDXPatientId: data2?.ZDXPatientId,
                showmore: false,
                // added to show more text
                dateType: 1
              };
              obj = Object.assign(obj, d);
              patientDetailsByDate.push(obj);
              obj = {};
            });
          }
        });
        if (this.allPatientData.length == 0) {
          this.allPatientData = patientDetailsByDate;
        } else {
          this.allPatientData = this.allPatientData.concat(patientDetailsByDate);
        }
      }
      const filteredArr = this.allPatientData.reduce((acc, current) => {
        const isWithinLastThreeDays = new Date(current.DateReceived) >= threeDaysBack;
        const x = acc.find((item) => item.PatientId === current.PatientId && item.DateReceivedStr === current.DateReceivedStr && item.AnalysisTypeName === current.AnalysisTypeName);
        if (!x && isWithinLastThreeDays) {
          return acc.concat([current]);
        } else {
          return acc;
        }
      }, []);
      console.log("this.allPatientData", this.allPatientData);
      console.log("filteredArr", filteredArr);
      if (filteredArr && filteredArr.length > 0) {
        const groupedPatients = this.groupByPatientId(filteredArr);
        console.log(groupedPatients);
        for (let pat of groupedPatients) {
          this.groupBy24Hours(pat);
        }
      }
      this.patientList.sort((a, b) => this.getExactDate(b.DateReceived) - this.getExactDate(a.DateReceived));
      console.log(this.patientList);
      setTimeout(() => {
        this.checkOverflow();
      }, 1e3);
    });
  }
  navToPatientInfo(element, rowIndex) {
    this.dataService.appState.selectedResult.element = element;
    this.dataService.pageState.dashboard.selectedRow = rowIndex;
    this.dataService.pageState.dashboard.resultsList = this.originData;
    this.dataService.page.next(this.dataService.pageState);
    this.patientService.showPataientInfo(element, this.headerService.filter, this.sidefilterService.filter, void 0, void 0);
  }
  onPreventClick(event) {
    event.stopPropagation();
  }
  toggleText(i, event, res) {
    event.preventDefault();
    res.showmore = !res.showmore;
  }
  checkOverflow() {
    this.overflowStates = this.textContainers.toArray().map((container) => {
      const element = container.nativeElement;
      return element.scrollWidth > element.clientWidth || element.scrollHeight > element.clientHeight;
    });
  }
  static {
    this.\u0275fac = function ResultListComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResultListComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidemenuService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ResultListComponent, selectors: [["app-result-list"]], viewQuery: function ResultListComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c026, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.textContainers = _t);
      }
    }, hostBindings: function ResultListComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function ResultListComponent_scroll_HostBindingHandler($event) {
          return ctx.onScroll($event);
        })("resize", function ResultListComponent_resize_HostBindingHandler($event) {
          return ctx.onResize($event);
        }, false, \u0275\u0275resolveWindow);
      }
    }, decls: 8, vars: 4, consts: [["textContainer", ""], [1, "home-left"], [1, "headpart", "d-flex", "justify-content-between", "align-items-center", "mb-3"], [4, "ngIf"], ["class", "box-inner", 4, "ngIf"], ["class", "box-inner", 3, "scroll", 4, "ngIf"], [1, "box-inner"], [1, "box-msg"], [1, "clickBtn", "seeAll", 3, "click"], [1, "box-inner", 3, "scroll"], ["class", "box-container", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "clickBtn", "seeAll", 3, "click"], [1, "box-container", 3, "click", "ngClass"], [1, "boxOne"], [1, "boxTwo"], [3, "ngClass"], [2, "color", "blue", 3, "click"], ["href", "#", 3, "click", 4, "ngIf"], [1, "decBtn"], ["style", "border: 1px solid #f26323; color: #f26323;cursor: default;", 3, "hidden", "click", 4, "ngIf"], ["style", "border: 1px solid grey; color: grey; cursor: default;", 3, "hidden", "click", 4, "ngIf"], ["style", "color: #24c624 !important", 4, "ngIf"], ["style", "color: red !important; margin: 20px", 4, "ngIf"], ["href", "#", 3, "click"], [2, "border", "1px solid #f26323", "color", "#f26323", "cursor", "default", 3, "click", "hidden"], [2, "border", "1px solid grey", "color", "grey", "cursor", "default", 3, "click", "hidden"], [2, "color", "#24c624 !important"], [2, "color", "red !important", "margin", "20px"]], template: function ResultListComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "p")(3, "b");
        \u0275\u0275text(4);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(5, ResultListComponent_p_5_Template, 2, 1, "p", 3);
        \u0275\u0275elementEnd();
        \u0275\u0275template(6, ResultListComponent_div_6_Template, 6, 3, "div", 4)(7, ResultListComponent_div_7_Template, 4, 2, "div", 5);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.labelService.dsHomePageScreen.Results);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientList.length != 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientList.length == 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.patientList.length != 0);
      }
    }, dependencies: [NgClass, NgForOf, NgIf], styles: ["\n\n*[_ngcontent-%COMP%] {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n.home-left[_ngcontent-%COMP%] {\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  width: 49%;\n  padding: 15px;\n  border-radius: 7px;\n  border: 1px solid #eee;\n  float: left;\n  background: #fff;\n}\n.boxRed[_ngcontent-%COMP%] {\n  border-left: 5px solid red !important;\n}\n.boxGreen[_ngcontent-%COMP%] {\n  border-left: 5px solid green !important;\n}\n.box-msg[_ngcontent-%COMP%] {\n  position: relative;\n  top: 45%;\n  text-align: center;\n  word-break: break-word;\n  left: 10%;\n  width: 80%;\n  display: block;\n}\n.box-container[_ngcontent-%COMP%] {\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  border-radius: 10px;\n  padding: 10px;\n  border: 1px solid #eee;\n  font-size: 12px;\n  position: relative;\n  margin-bottom: 0.5rem;\n  cursor: pointer;\n}\n.clickBtn[_ngcontent-%COMP%] {\n  margin-left: 1rem;\n  width: 20%;\n  background: #f26323;\n  color: #fff;\n  border: 1px solid #f26323;\n  border-radius: 5px !important;\n}\n.box-inner[_ngcontent-%COMP%] {\n  height: calc(100vh - 184px);\n  overflow-y: auto;\n}\n.boxTwo[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n}\n.showHide[_ngcontent-%COMP%] {\n  white-space: nowrap !important;\n}\n.boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  width: 95%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n  cursor: pointer;\n}\n.decBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  min-width: 85px;\n  background: #fff;\n  border-radius: 8px !important;\n  height: 1.6rem !important;\n  font-weight: 600;\n}\n.decBtn[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  text-align: center;\n  font-weight: bold;\n  font-size: 12px;\n}\n.decBtn[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.box-container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0.3rem;\n}\n.box-container[_ngcontent-%COMP%]   .boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.seeAll[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 50px;\n  left: 15%;\n  z-index: 99;\n  min-width: 200px;\n  width: 200px;\n}\n@media screen and (max-width: 767px) {\n  .home-left[_ngcontent-%COMP%] {\n    width: 100%;\n    background: #fff;\n  }\n  .seeAll[_ngcontent-%COMP%] {\n    left: 16% !important;\n  }\n}\n/*# sourceMappingURL=result-list.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ResultListComponent, { className: "ResultListComponent", filePath: "src\\app\\components\\homepage\\result-list\\result-list.component.ts", lineNumber: 25 });
})();

// src/app/components/homepage/consultations/consultations.component.ts
var _c027 = ["consultationInput"];
var _c120 = (a0, a1) => ({ active: a0, notactive: a1 });
function ConsultationsComponent_p_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.label.Showingresultslast30days);
  }
}
function ConsultationsComponent_option_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 36);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const s_r2 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("value", s_r2 == null ? null : s_r2.Id);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", s_r2 == null ? null : s_r2.SpecialityName, " ");
  }
}
function ConsultationsComponent_select_19_option_3_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const c_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", c_r4 == null ? null : c_r4.ModeOfEngagement, " ");
  }
}
function ConsultationsComponent_select_19_option_3_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.ScheduledAppt, " ");
  }
}
function ConsultationsComponent_select_19_option_3_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.labelService.dsPatientInfoScreen.EmailResp, " ");
  }
}
function ConsultationsComponent_select_19_option_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "option", 36);
    \u0275\u0275pipe(1, "json");
    \u0275\u0275template(2, ConsultationsComponent_select_19_option_3_span_2_Template, 2, 1, "span", 3)(3, ConsultationsComponent_select_19_option_3_span_3_Template, 2, 1, "span", 3)(4, ConsultationsComponent_select_19_option_3_span_4_Template, 2, 1, "span", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const c_r4 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("value", \u0275\u0275pipeBind1(1, 4, c_r4));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", (c_r4 == null ? null : c_r4.ModeOfEngagement) == "Schedule Zoom Appointment" && ctx_r0.labelService.selectedLanguage == 1);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (c_r4 == null ? null : c_r4.ModeOfEngagement) == "Schedule Zoom Appointment" && ctx_r0.labelService.selectedLanguage != 1);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", (c_r4 == null ? null : c_r4.ModeOfEngagement) == "Email Response");
  }
}
function ConsultationsComponent_select_19_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "select", 37);
    \u0275\u0275listener("change", function ConsultationsComponent_select_19_Template_select_change_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSelectConsultType($event));
    });
    \u0275\u0275elementStart(1, "option", 9);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, ConsultationsComponent_select_19_option_3_Template, 5, 6, "option", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.label.ConsultationType);
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.consultationTypeList);
  }
}
function ConsultationsComponent_select_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "select", 38, 0)(2, "option", 9);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.label.ConsultationType);
  }
}
function ConsultationsComponent_div_58_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 39)(1, "div", 40)(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.pendingConsultMsg30Days, " ");
  }
}
function ConsultationsComponent_div_59_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 39)(1, "div", 40)(2, "p");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.completedConsultMsg30Days, " ");
  }
}
function ConsultationsComponent_div_60_div_1_p_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.Appointmentdatetime, " ");
  }
}
function ConsultationsComponent_div_60_div_1_p_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.EmailResponseRequested, " ");
  }
}
function ConsultationsComponent_div_60_div_1_div_23_span_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.label.JoinMeeting);
  }
}
function ConsultationsComponent_div_60_div_1_div_23_a_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 52);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r6 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("href", item_r6 == null ? null : item_r6.GuestUrl, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.label.JoinMeeting);
  }
}
function ConsultationsComponent_div_60_div_1_div_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 48)(1, "button", 49);
    \u0275\u0275template(2, ConsultationsComponent_div_60_div_1_div_23_span_2_Template, 2, 1, "span", 3)(3, ConsultationsComponent_div_60_div_1_div_23_a_3_Template, 2, 2, "a", 50);
    \u0275\u0275text(4, " \xA0 ");
    \u0275\u0275element(5, "img", 51);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const item_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !(item_r6 == null ? null : item_r6.GuestUrl));
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r6 == null ? null : item_r6.GuestUrl);
  }
}
function ConsultationsComponent_div_60_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 44)(1, "div", 45)(2, "div", 46);
    \u0275\u0275template(3, ConsultationsComponent_div_60_div_1_p_3_Template, 2, 1, "p", 3)(4, ConsultationsComponent_div_60_div_1_p_4_Template, 2, 1, "p", 3);
    \u0275\u0275elementStart(5, "p");
    \u0275\u0275text(6);
    \u0275\u0275pipe(7, "localDate");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 46)(9, "p");
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 46)(14, "p");
    \u0275\u0275text(15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p");
    \u0275\u0275text(17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 46)(19, "p");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "p");
    \u0275\u0275text(22);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(23, ConsultationsComponent_div_60_div_1_div_23_Template, 6, 2, "div", 47);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", item_r6.AppointmentTypeId != 3);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r6.AppointmentTypeId == 3);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(7, 10, item_r6 == null ? null : item_r6.ConvertedDateTimeWithTimeZone));
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r0.label.Doctor);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r6 == null ? null : item_r6.DoctorName);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.label.PatientName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r6 == null ? null : item_r6.PatientName);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.label.Speciality);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r6 == null ? null : item_r6.Speciality);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", item_r6.AppointmentTypeId == 1);
  }
}
function ConsultationsComponent_div_60_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 41);
    \u0275\u0275listener("scroll", function ConsultationsComponent_div_60_Template_div_scroll_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onScroll($event));
    });
    \u0275\u0275template(1, ConsultationsComponent_div_60_div_1_Template, 24, 12, "div", 42);
    \u0275\u0275elementStart(2, "button", 43);
    \u0275\u0275listener("click", function ConsultationsComponent_div_60_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.seeAllConsultation());
    });
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.appointmentList);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.SeeAllConsultations, " ");
  }
}
function ConsultationsComponent_div_61_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 54)(1, "div", 45)(2, "div", 55)(3, "p");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "p");
    \u0275\u0275text(6);
    \u0275\u0275pipe(7, "localDate");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 55)(9, "p");
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "p");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 55)(14, "p");
    \u0275\u0275text(15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p");
    \u0275\u0275text(17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 55)(19, "p");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "p");
    \u0275\u0275text(22);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(23, "div", 48)(24, "img", 56);
    \u0275\u0275listener("click", function ConsultationsComponent_div_61_div_1_Template_img_click_24_listener() {
      const item_r9 = \u0275\u0275restoreView(_r8).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.getconsultationAppointmentReportView(item_r9 == null ? null : item_r9.Id));
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.Appointmentdatetime, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind1(7, 8, item_r9.ConvertedDateTimeWithTimeZone));
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r0.label.Doctor);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r9.DoctorName);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.label.PatientName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r9.PatientName);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r0.label.Speciality);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(item_r9.Speciality);
  }
}
function ConsultationsComponent_div_61_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 39);
    \u0275\u0275template(1, ConsultationsComponent_div_61_div_1_Template, 25, 10, "div", 53);
    \u0275\u0275elementStart(2, "button", 43);
    \u0275\u0275listener("click", function ConsultationsComponent_div_61_Template_button_click_2_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.seeAllConsultation());
    });
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngForOf", ctx_r0.appointmentList);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r0.label.SeeAllConsultations, " ");
  }
}
var ConsultationsComponent = class _ConsultationsComponent {
  onScroll(event) {
    const element = event.target;
    const currentAtBottom = Math.round(element.scrollTop) > Math.round(element.scrollHeight) - Math.round(element.clientHeight) - 100;
    if (currentAtBottom && !this.atBottom) {
      this.atBottom = true;
      this.onScrollEnd();
    } else if (!currentAtBottom) {
      this.atBottom = false;
    }
  }
  onScrollEnd() {
    this.defaultPageNumber = this.defaultPageNumber + 1;
    this.getConsultPatientList("1", "");
  }
  constructor(commonService, labelService, sidemenuService, dataService, modalService) {
    this.commonService = commonService;
    this.labelService = labelService;
    this.sidemenuService = sidemenuService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.isCompletedConsult = false;
    this.specialityList = [];
    this.consultationTypeList = [];
    this.selectedSepecialityId = null;
    this.modeOfEngagementEmail = false;
    this.appointmentList = [];
    this.reportImage = null;
    this.defaultPageNumber = 1;
    this.atBottom = false;
    this.label = this.labelService.dsHomePageScreen;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.getHomePageScreenLabel();
      this.labelService.bindPatientInfoLabel();
    }
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      console.log(data);
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.getHomePageScreenLabel();
      this.labelService.bindPatientInfoLabel();
    });
  }
  ngAfterViewInit() {
    this.selectedMode = null;
    this.modeOfEngagementEmail = false;
    if (this.consultationInput) {
      this.consultationInput.nativeElement.value = "";
    }
    this.consultationTypeList = [];
  }
  ngOnInit() {
    console.log(this.consultationTypeList);
    setTimeout(() => {
      this.label = this.labelService.dsHomePageScreen;
    }, 2e3);
    this.commonService.getSpecialityList(this.labelService.selectedLanguage).subscribe({
      next: (res) => {
        console.log(res.ResponseData.Speciality);
        this.specialityList = res.ResponseData.Speciality;
      },
      error: (error) => {
        console.log(error);
      }
    });
    this.getConsultPatientList("1", "");
    setTimeout(() => {
      this.ngAfterViewInit();
    }, 1e3);
    this.getHeaderText();
  }
  getHeaderText() {
    this.commonService.getConsultationHeaderText(this.labelService.selectedLanguage).subscribe({
      next: (data) => {
        this.consultantTexts = data.ResponseData.find((e) => e.Id == environment.zcsResourceId);
        console.log("header", data.ResponseData, this.consultantTexts);
      }
    });
  }
  getConsultationTypeList(id) {
    this.commonService.getConsultationTypeList(id).subscribe({
      next: (res) => {
        console.log(res);
        this.consultationTypeList = res.ResponseData;
      },
      error: (error) => {
        console.log(error);
      }
    });
  }
  onSelectSpeciality(event) {
    this.selectedMode = null;
    this.modeOfEngagementEmail = false;
    this.consultationTypeList = [];
    if (this.consultationInput) {
      this.consultationInput.nativeElement.value = "";
    }
    console.log(event.target.value);
    this.selectedSepecialityId = event.target.value;
    this.getConsultationTypeList(event.target.value);
  }
  onSelectConsultType(event) {
    const MOE = JSON.parse(event.target.value);
    this.modeOfEngagementEmail = MOE.IsEmail;
    this.selectedMode = MOE.Id;
  }
  letsGo() {
    if (this.selectedSepecialityId == null || this.selectedMode == null) {
      return;
    }
    if (this.modeOfEngagementEmail == true) {
      const objToSend = {};
      const bckBusinessInfo = localStorage.getItem("bckBusinessInfo");
      if (bckBusinessInfo != "null" && bckBusinessInfo != null && bckBusinessInfo != void 0) {
        const bckData = JSON.parse(bckBusinessInfo);
        objToSend.impersonate = true;
        objToSend.impClinicBussinessGuid = bckData.BusinessGuid;
        objToSend.clinicUsertypeId = 1;
        objToSend.impClinicUserGuid = bckData.UserGuid;
      }
      const queryParams = new URLSearchParams(objToSend).toString();
      console.log(queryParams);
      this.sidemenuService.gotoConsultationEmail(this.selectedSepecialityId, queryParams);
    } else {
      const objToSend = {
        resourceGroupId: environment.zcsResourceId,
        selectedSpecialityId: this.selectedSepecialityId,
        selectedMode: this.selectedMode,
        zdxredirectiontoFindconsultation: true
      };
      const bckBusinessInfo = localStorage.getItem("bckBusinessInfo");
      if (bckBusinessInfo != "null" && bckBusinessInfo != null && bckBusinessInfo != void 0) {
        const bckData = JSON.parse(bckBusinessInfo);
        objToSend.impersonate = true;
        objToSend.impClinicBussinessGuid = bckData.BusinessGuid;
        objToSend.clinicUsertypeId = 1;
        objToSend.impClinicUserGuid = bckData.UserGuid;
      }
      const queryParams = new URLSearchParams(objToSend).toString();
      console.log(queryParams);
      this.sidemenuService.gotoConsultationAppointment(queryParams);
    }
  }
  getConsultPatientList(status_type, typ = "") {
    this.isCompletedConsult = status_type == "1" ? false : true;
    if (typ == "pending") {
      this.appointmentList = [];
      this.defaultPageNumber = 1;
      this.atBottom = true;
    }
    if (status_type === "2") {
      this.appointmentList = [];
      this.defaultPageNumber = 1;
      this.atBottom = true;
    }
    let timezoneId = this.dataService.appData.authDetails["TimeZoneId"];
    console.log(timezoneId);
    const payload = {
      BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      TimeZoneId: timezoneId,
      StatusId: status_type,
      PageNo: this.defaultPageNumber,
      PageSize: 60
    };
    this.commonService.GetConsultPatientList(payload).subscribe({
      next: (res) => {
        if (!res?.ResponseData?.appointmentrecord?.length)
          this.isLoadMore = false;
        if (this.appointmentList.length != 0) {
          this.appointmentList = this.appointmentList.concat(res?.ResponseData?.appointmentrecord);
          console.log("concatinated", this.appointmentList);
        } else {
          this.appointmentList = res?.ResponseData?.appointmentrecord;
          console.log("pushed", this.appointmentList);
        }
        console.log("this.appointmentList==>", this.appointmentList);
        this.isCompletedConsult = status_type == "1" ? false : true;
      },
      error: (error) => {
        console.log(error);
      }
    });
  }
  // For Direct Download
  // base64ToPdf(base64String: string, fileName: string) {
  //   const byteCharacters = atob(base64String.split(',')[1]);
  //   const byteNumbers = new Array(byteCharacters.length);
  //   for (let i = 0; i < byteCharacters.length; i++) {
  //     byteNumbers[i] = byteCharacters.charCodeAt(i);
  //   }
  //   const byteArray = new Uint8Array(byteNumbers);
  //   const blob = new Blob([byteArray], { type: 'application/pdf' });
  //   saveAs(blob, fileName);
  // }
  openPdfModal(base64String) {
    const modalRef = this.modalService.open(PdfModalComponent, {
      size: "lg",
      windowClass: "my-class"
    });
    modalRef.componentInstance.pdfBase64 = base64String;
  }
  getconsultationAppointmentReportView(appointment_id) {
    let payload = {
      BusinessGuid: this.dataService.appData.authDetails["BusinessGuid"],
      UserGuid: this.dataService.appData.authDetails["UserGuid"],
      AppointmentId: appointment_id
    };
    this.commonService.ConsultationAppointmentReportView(payload).subscribe({
      next: (res) => {
        console.log(res);
        this.openPdfModal(res?.ResponseData?.ImageBase64);
      },
      error: (error) => {
        console.log(error);
      }
    });
  }
  NavigatetoFollowUp() {
    const objToSend = {};
    const bckBusinessInfo = localStorage.getItem("bckBusinessInfo");
    if (bckBusinessInfo != "null" && bckBusinessInfo != null && bckBusinessInfo != void 0) {
      const bckData = JSON.parse(bckBusinessInfo);
      objToSend.impersonate = true;
      objToSend.impClinicBussinessGuid = bckData.BusinessGuid;
      objToSend.clinicUsertypeId = 1;
      objToSend.impClinicUserGuid = bckData.UserGuid;
    }
    const queryParams = new URLSearchParams(objToSend).toString();
    console.log(queryParams);
    this.sidemenuService.gotoFollowUp(queryParams);
  }
  seeAllConsultation() {
    console.log("xx");
    const objToSend = {};
    const bckBusinessInfo = localStorage.getItem("bckBusinessInfo");
    if (bckBusinessInfo != "null" && bckBusinessInfo != null && bckBusinessInfo != void 0) {
      const bckData = JSON.parse(bckBusinessInfo);
      objToSend.impersonate = true;
      objToSend.impClinicBussinessGuid = bckData.BusinessGuid;
      objToSend.clinicUsertypeId = 1;
      objToSend.impClinicUserGuid = bckData.UserGuid;
    }
    const queryParams = new URLSearchParams(objToSend).toString();
    console.log(queryParams);
    this.sidemenuService.gotoConsultationList(queryParams);
  }
  static {
    this.\u0275fac = function ConsultationsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultationsComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultationsComponent, selectors: [["app-consultations"]], viewQuery: function ConsultationsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(_c027, 5);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.consultationInput = _t.first);
      }
    }, hostBindings: function ConsultationsComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275listener("scroll", function ConsultationsComponent_scroll_HostBindingHandler($event) {
          return ctx.onScroll($event);
        });
      }
    }, decls: 62, vars: 30, consts: [["consultationInput", ""], [1, "home-right"], [1, "headpart", "d-flex", "justify-content-between", "align-items-center", "mb-3"], [4, "ngIf"], [1, "whole-wrapper"], [1, "first-part"], ["src", "../../../../assets/img/consultancy.svg", "alt", "image"], [1, "dropdown"], ["name", "specialty", "id", "specialty", 3, "change"], ["selected", "", "value", "", "hidden", ""], [3, "value", 4, "ngFor", "ngForOf"], ["name", "consultation", "id", "consultation", 3, "change", 4, "ngIf"], ["name", "consultation", "id", "consultation", 4, "ngIf"], [1, "tooltip"], ["src", "../../../../assets/img/infoimg.svg", "alt", "image"], [1, "tooltiptext"], [1, "w-100"], [1, "row"], [1, "col-12", "blue-bg"], [1, "modal-title", "text-center", 2, "text-align", "center !important"], [1, "row", "modal-content2"], [1, "col-12", "d-flex", "text-center", "m-auto", "align-items-center"], [1, "schdule_appoinment", "consultation-type-blk", "schedule-img", 2, "text-align", "center !important"], ["_ngcontent-ebv-c269", "", "src", "../../../assets/img/schdule_appoinment_select.png"], ["_ngcontent-ebv-c269", "", 1, "d-block", "consultation-type"], [1, "text-left", "selected_appoinment", "pl-3"], [1, "text-center", "pt-2", "consultation-type-blk", "schedule-img", 2, "text-align", "center !important"], ["_ngcontent-ebv-c269", "", "src", "../../../assets/img/email_response_selected.png", "alt", ""], [3, "click"], ["src", "../../../../assets/img/arrowwhite.svg", "alt", "image", "width", "22"], [1, "bottomPrt", "d-flex", "justify-content-center", "align-items-center"], ["src", "../../../../assets/img/rightarrow.svg", "alt", "image"], [1, "toggleBtn", "mt-3", "mb-1"], [3, "click", "ngClass"], ["class", "bottomPart consultPart", 4, "ngIf"], ["class", "bottomPart consultPart", 3, "scroll", 4, "ngIf"], [3, "value"], ["name", "consultation", "id", "consultation", 3, "change"], ["name", "consultation", "id", "consultation"], [1, "bottomPart", "consultPart"], [1, "box-empty-container", "mt-2"], [1, "bottomPart", "consultPart", 3, "scroll"], ["class", "box-containerr mt-2", 4, "ngFor", "ngForOf"], [1, "clickBtn", "seeAll", 3, "click"], [1, "box-containerr", "mt-2"], [1, "boxOne"], [1, "box-title"], ["class", "decBtn", 4, "ngIf"], [1, "decBtn"], [1, "zoomBtn"], ["target", "_blank", 3, "href", 4, "ngIf"], ["src", "../../../../assets/img/video.svg", "alt", "image"], ["target", "_blank", 3, "href"], ["class", "box-container mt-2", 4, "ngFor", "ngForOf"], [1, "box-container", "mt-2"], [1, "boxtitle"], ["src", "../../../../assets/img/report.svg", "alt", "image", 2, "cursor", "pointer", 3, "click"]], template: function ConsultationsComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 1)(1, "div", 2)(2, "p")(3, "b");
        \u0275\u0275text(4);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(5, ConsultationsComponent_p_5_Template, 2, 1, "p", 3);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(6, "div", 4)(7, "div", 5)(8, "p")(9, "span");
        \u0275\u0275element(10, "img", 6);
        \u0275\u0275elementEnd();
        \u0275\u0275text(11);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "p");
        \u0275\u0275text(13);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(14, "div", 7)(15, "select", 8);
        \u0275\u0275listener("change", function ConsultationsComponent_Template_select_change_15_listener($event) {
          return ctx.onSelectSpeciality($event);
        });
        \u0275\u0275elementStart(16, "option", 9);
        \u0275\u0275text(17);
        \u0275\u0275elementEnd();
        \u0275\u0275template(18, ConsultationsComponent_option_18_Template, 2, 2, "option", 10);
        \u0275\u0275elementEnd();
        \u0275\u0275template(19, ConsultationsComponent_select_19_Template, 4, 2, "select", 11)(20, ConsultationsComponent_select_20_Template, 4, 1, "select", 12);
        \u0275\u0275elementStart(21, "div", 13);
        \u0275\u0275element(22, "img", 14);
        \u0275\u0275elementStart(23, "div", 15)(24, "div", 16)(25, "div", 17)(26, "div", 18)(27, "h5", 19);
        \u0275\u0275text(28);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(29, "div", 20)(30, "div", 21)(31, "p", 22);
        \u0275\u0275element(32, "img", 23);
        \u0275\u0275elementStart(33, "span", 24);
        \u0275\u0275text(34);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(35, "p", 25);
        \u0275\u0275text(36);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(37, "div", 21)(38, "p", 26);
        \u0275\u0275element(39, "img", 27);
        \u0275\u0275elementStart(40, "span", 24);
        \u0275\u0275text(41);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(42, "p", 25);
        \u0275\u0275text(43);
        \u0275\u0275elementEnd()()()()()();
        \u0275\u0275elementStart(44, "button", 28);
        \u0275\u0275listener("click", function ConsultationsComponent_Template_button_click_44_listener() {
          return ctx.letsGo();
        });
        \u0275\u0275text(45);
        \u0275\u0275element(46, "img", 29);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(47, "div", 30)(48, "p");
        \u0275\u0275text(49);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(50, "button", 28);
        \u0275\u0275listener("click", function ConsultationsComponent_Template_button_click_50_listener() {
          return ctx.NavigatetoFollowUp();
        });
        \u0275\u0275text(51);
        \u0275\u0275element(52, "img", 31);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(53, "div", 32)(54, "button", 33);
        \u0275\u0275listener("click", function ConsultationsComponent_Template_button_click_54_listener() {
          return ctx.getConsultPatientList("1", "pending");
        });
        \u0275\u0275text(55);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(56, "button", 33);
        \u0275\u0275listener("click", function ConsultationsComponent_Template_button_click_56_listener() {
          return ctx.getConsultPatientList("2", "completed");
        });
        \u0275\u0275text(57);
        \u0275\u0275elementEnd()();
        \u0275\u0275template(58, ConsultationsComponent_div_58_Template, 4, 1, "div", 34)(59, ConsultationsComponent_div_59_Template, 4, 1, "div", 34)(60, ConsultationsComponent_div_60_Template, 4, 2, "div", 35)(61, ConsultationsComponent_div_61_Template, 4, 2, "div", 34);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.label.Consultations);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isCompletedConsult);
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate1(" ", ctx.consultantTexts == null ? null : ctx.consultantTexts.ResurceGroupName, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.consultantTexts == null ? null : ctx.consultantTexts.ResourceGroupDescription, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.label.Speciality);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.specialityList);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.consultationTypeList.length != 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.consultationTypeList.length === 0);
        \u0275\u0275advance(8);
        \u0275\u0275textInterpolate1(" ", ctx.label.ConsultationType, " ");
        \u0275\u0275advance(6);
        \u0275\u0275textInterpolate(ctx.labelService.dsHomePageScreen.ScheduledAppt);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.label.SetUpWebMeetingWithConsultant, ". ");
        \u0275\u0275advance(5);
        \u0275\u0275textInterpolate(ctx.label.EmailConsultation);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.label.consultantWillRespond2yourQuestionsEmail, ". ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.label.LetsGo, " ");
        \u0275\u0275advance(4);
        \u0275\u0275textInterpolate(ctx.label.additionalquestionsaboutpreviousconsultation);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.label.FollowUp, " ");
        \u0275\u0275advance(3);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(24, _c120, !ctx.isCompletedConsult, ctx.isCompletedConsult));
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.label.PendingConsultations, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(27, _c120, ctx.isCompletedConsult, !ctx.isCompletedConsult));
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.label.CompletedConsultations, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isCompletedConsult && ctx.appointmentList.length == 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isCompletedConsult && ctx.appointmentList.length == 0);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", !ctx.isCompletedConsult);
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.isCompletedConsult);
      }
    }, dependencies: [NgClass, NgForOf, NgIf, NgSelectOption, \u0275NgSelectMultipleOption, JsonPipe, LocalDatePipe], styles: ['\n\n*[_ngcontent-%COMP%] {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n.home-right[_ngcontent-%COMP%] {\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  width: 50%;\n  padding: 15px;\n  border-radius: 7px;\n  border: 1px solid #eee;\n  float: right;\n  height: calc(100vh - 115px);\n  background: #fff;\n  position: relative;\n}\n.box-containerr[_ngcontent-%COMP%] {\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  border-radius: 10px;\n  padding: 10px;\n  border: 1px solid #eee;\n  border-left: 5px solid #f26323;\n  font-size: 12px;\n  position: relative;\n  margin-bottom: 0.5rem;\n}\n.box-container[_ngcontent-%COMP%] {\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  border-radius: 10px;\n  padding: 10px;\n  border: 1px solid #eee;\n  border-left: 5px solid green;\n  font-size: 12px;\n  position: relative;\n  margin-bottom: 0.5rem;\n}\n.box-empty-container[_ngcontent-%COMP%] {\n  position: relative;\n  top: 45%;\n  text-align: center;\n  word-break: break-word;\n  left: 10%;\n  width: 80%;\n  display: block;\n}\n.bottomPart.consultPart[_ngcontent-%COMP%]   .boxtitle[_ngcontent-%COMP%] {\n  width: 49%;\n}\n.box-inner[_ngcontent-%COMP%] {\n  height: 100vh;\n  overflow-y: auto;\n}\n.boxTwo[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n}\n.boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  white-space: nowrap;\n  width: 95%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:last-child {\n  cursor: pointer;\n}\n.decBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  min-width: 100px;\n  background: #fff;\n  border: 1px solid rgba(3, 87, 113, 1);\n  color: rgba(3, 87, 113, 1);\n  border-radius: 8px !important;\n  height: 1.8rem !important;\n  font-weight: 600;\n}\n.decBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: rgba(3, 87, 113, 1);\n}\n.decBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover {\n  text-decoration: none;\n}\n.decBtn[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  text-align: center;\n  font-weight: bold;\n  color: #24c624;\n}\n.decBtn[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.box-container[_ngcontent-%COMP%]   .boxTwo[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n  margin-bottom: 0;\n}\n.first-part[_ngcontent-%COMP%] {\n  background:\n    radial-gradient(\n      100% 100% at 0% 10.61%,\n      #6fb0c7 13.98%,\n      #035771 87.81%);\n  color: #fff;\n  padding: 15px;\n  border-radius: 7px;\n  border-bottom-left-radius: 1px;\n  border-bottom-right-radius: 1px;\n}\n.dropdown[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\n  width: 27%;\n  margin-right: 1rem;\n  height: 30px;\n  margin-top: 0.5rem;\n  border: 1px solid #eee;\n  border-radius: 5px;\n}\n.dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  margin-left: 1rem;\n  width: 20%;\n  background: #f26323;\n  color: #fff;\n  border: 1px solid #f26323;\n  border-radius: 5px !important;\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  border-radius: 8px !important;\n}\n.bottomPrt[_ngcontent-%COMP%] {\n  border-top: 1px solid #094c6173;\n  padding: 0.5rem 1rem;\n  background: #035771e8;\n  color: #fff;\n  border-bottom-left-radius: 7px;\n  border-bottom-right-radius: 7px;\n}\n.bottomPrt[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  background: #fff;\n  color: #f26323;\n  border: 1px solid #fff;\n  min-width: 150px;\n  margin-left: 1rem;\n  font-weight: bold;\n}\n.bottomPart[_ngcontent-%COMP%]   .boxOne[_ngcontent-%COMP%] {\n  display: flex;\n  flex-wrap: wrap;\n  font-weight: 600;\n}\n.bottomPart[_ngcontent-%COMP%]   .box-title[_ngcontent-%COMP%] {\n  width: 32%;\n  word-break: break-all;\n  padding-right: 10px;\n}\n.bottomPart[_ngcontent-%COMP%]   .box-title[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  color: #999696;\n}\n.bottomPart[_ngcontent-%COMP%]   .boxtitle[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  color: #999696;\n}\n.bottomPart[_ngcontent-%COMP%]   .decBtn[_ngcontent-%COMP%] {\n  bottom: 0;\n  top: inherit;\n  right: 0;\n}\n.bottomPart[_ngcontent-%COMP%] {\n  height: calc(100vh - 465px);\n  overflow-y: auto;\n}\n.toggleBtn[_ngcontent-%COMP%]   .active[_ngcontent-%COMP%] {\n  background: #035771;\n  color: #fff;\n}\n.toggleBtn[_ngcontent-%COMP%]   .notactive[_ngcontent-%COMP%] {\n  background: #fff;\n  color: #035771;\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\n  width: 50%;\n  border: 1px solid #035771;\n  border-bottom-right-radius: 1px !important;\n  border-top-right-radius: 1px !important;\n  cursor: pointer;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child {\n  width: 50%;\n  border: 1px solid #03577170;\n  border-bottom-left-radius: 1px !important;\n  border-top-left-radius: 1px !important;\n  cursor: pointer;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n}\n.first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-child(2) {\n  padding-top: 14px;\n  font-size: 13px;\n  padding-bottom: 14px;\n}\n.first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child   span[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  width: 17px;\n  margin-right: 0.4rem;\n}\n.first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child   span[_ngcontent-%COMP%] {\n  font-weight: bold;\n}\n.first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child {\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-child(2) {\n  padding-top: 14px;\n  font-size: 13px;\n  padding-bottom: 14px;\n}\n.clickBtn[_ngcontent-%COMP%] {\n  width: 20%;\n  background: #f26323;\n  color: #fff;\n  border: 1px solid #f26323;\n  border-radius: 5px !important;\n}\n.seeAll[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 48px;\n  right: 30%;\n  z-index: 99;\n  min-width: 200px;\n  width: 200px;\n}\n@media screen and (min-width: 320px) and (max-width: 360px) {\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n    width: 250px !important;\n    bottom: 32px;\n    right: -15px !important;\n    top: inherit !important;\n  }\n  .dropdown[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:nth-child(2) {\n    width: 77% !important;\n  }\n}\n@media screen and (min-width: 1025px) and (max-width: 1400px) {\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n    min-width: 250px;\n    width: 250px !important;\n    right: 56% !important;\n  }\n}\n@media screen and (max-width: 767px) {\n  .dropdown[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:first-child {\n    width: 100%;\n  }\n  .tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n    width: 250px !important;\n    bottom: 32px;\n    right: 0 !important;\n    top: inherit !important;\n  }\n  .home-right[_ngcontent-%COMP%] {\n    width: 100%;\n    background: #fff;\n  }\n  .dropdown[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:nth-child(2) {\n    width: 82%;\n  }\n  .dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    width: 55%;\n    margin-left: 0;\n    margin-top: 10px;\n  }\n  .bottomPrt[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    padding: initial;\n    margin-left: 1rem;\n    font-weight: bold;\n    font-size: 12px;\n    display: flex;\n    min-width: 85px;\n    align-items: center;\n    justify-content: space-evenly;\n  }\n  .bottomPrt[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    font-size: 12px;\n  }\n  .bottomPrt[_ngcontent-%COMP%] {\n    padding: 0.4rem;\n  }\n  .toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child, \n   .toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child {\n    font-size: 12px;\n  }\n  .bottomPart[_ngcontent-%COMP%]   .box-title[_ngcontent-%COMP%] {\n    width: 50%;\n  }\n  .bottomPart[_ngcontent-%COMP%]   .box-title[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    font-size: 11px;\n  }\n  .bottomPart[_ngcontent-%COMP%]   .boxtitle[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\n    font-size: 11px;\n  }\n  .first-part[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:nth-child(2) {\n    font-size: 12px;\n  }\n}\n.tooltip[_ngcontent-%COMP%] {\n  position: relative;\n  display: inline-block;\n  font-size: 13px;\n  opacity: 1;\n}\n.tooltip[_ngcontent-%COMP%]:hover   .tooltiptext[_ngcontent-%COMP%] {\n  visibility: visible;\n}\n.tooltip[_ngcontent-%COMP%]   .tooltiptext[_ngcontent-%COMP%] {\n  visibility: hidden;\n  width: 405px;\n  background-color: #fff;\n  color: #000;\n  text-align: center;\n  border-radius: 13px;\n  padding: 0;\n  position: absolute;\n  z-index: 1;\n  top: 17px;\n  right: 136%;\n  box-shadow: 0 0 12px 0 #00000030 !important;\n}\n.modal-content2[_ngcontent-%COMP%] {\n  padding: 0 10px 10px 10px;\n}\n.blue-bg[_ngcontent-%COMP%] {\n  background: #0072ce;\n  color: #fff;\n  text-align: center;\n  padding: 10px 0;\n  font-size: 18px;\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n  position: relative;\n}\n.modal-content2[_ngcontent-%COMP%] {\n  background-color: #fff;\n  border-bottom-right-radius: 14px !important;\n  border-bottom-left-radius: 14px !important;\n  border: 1px solid #0003;\n}\n.consultation-type-blk[_ngcontent-%COMP%] {\n  width: 32%;\n  flex: 0 0 32%;\n}\n.schdule_appoinment[_ngcontent-%COMP%] {\n  padding-top: 8px;\n}\n.schedule-img[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\n  border-radius: inherit;\n}\n.consultation-type[_ngcontent-%COMP%] {\n  color: #0072ce;\n  font-size: 12px;\n  font-family: GothamNarrowBold, sans-serif;\n}\n.selected_appoinment[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: GothamNarrowBook, sans-serif;\n}\n.tooltip[_ngcontent-%COMP%]   .modal-title[_ngcontent-%COMP%] {\n  position: inherit;\n}\n.tooltiptext[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%] {\n  margin: initial !important;\n}\nselect[_ngcontent-%COMP%]:disabled {\n  opacity: 0.9;\n}\n.zoomBtn[_ngcontent-%COMP%] {\n  margin: 10px;\n}\n@media screen and (max-height: 600px) {\n  .whole-wrapper[_ngcontent-%COMP%] {\n    height: calc(100vh - 206px);\n    overflow-y: auto;\n  }\n  .bottomPart[_ngcontent-%COMP%] {\n    height: 30vh;\n    overflow-y: auto;\n  }\n  .dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    width: 25%;\n  }\n  nav#sidebar[_ngcontent-%COMP%] {\n    overflow-y: scroll;\n  }\n}\n/*# sourceMappingURL=consultations.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultationsComponent, { className: "ConsultationsComponent", filePath: "src\\app\\components\\homepage\\consultations\\consultations.component.ts", lineNumber: 27 });
})();

// src/app/components/homepage/homepage.component.ts
var _c028 = (a0, a1) => ({ "actives": a0, "notactives": a1 });
var _c121 = (a0) => ({ "hideme": a0 });
var HomepageComponent = class _HomepageComponent {
  constructor(router, commonService, modalService, sidemenuService, confirmationDialogService, headerService, patientService, labelService, sidefilterService, dataService, EncrDecr, title, alertService, toaster) {
    this.router = router;
    this.commonService = commonService;
    this.modalService = modalService;
    this.sidemenuService = sidemenuService;
    this.confirmationDialogService = confirmationDialogService;
    this.headerService = headerService;
    this.patientService = patientService;
    this.labelService = labelService;
    this.sidefilterService = sidefilterService;
    this.dataService = dataService;
    this.EncrDecr = EncrDecr;
    this.title = title;
    this.alertService = alertService;
    this.toaster = toaster;
    this.allRowsExpanded = false;
    this.isAdvSearched = false;
    this.isNotificationSelected = false;
    this.recordCount = 0;
    this.columnsToDisplay = ["ViewedFlag", "DateReceivedStr", "PatientId", "PatientName", "OwnerName", "SpeciesName", "BreedName", " "];
    this.dataSource = new MatLegacyTableDataSource();
    this.originData = [];
    this.dsAnalysisSource = [];
    this.Eula = [];
    this.headerText = "Results";
    this.analysisSrcId = EnmAnalysisSource.POC;
    this.canceledAnalysisStatusId = EnmAnalysisStatus.Canceled;
    this.start = 0;
    this.limit = 30;
    this.end = this.limit + this.start;
    this.patientIdList = [];
    this.pataientList = [];
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.viewConsultation = false;
    if (this.labelService.dsLabelData.length == 0) {
      this.getLabelDetails();
    } else {
      this.labelService.getHomePageScreenLabel();
    }
    this.sidemenuService.selectedModuleId = EnmModule.Home;
  }
  ngOnInit() {
    this.helpObj = this.dataService.appData.helpTopics.find((e) => e.HelpTopic == "ZoetisDx-Home-Page");
  }
  getLabelDetails() {
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      console.log(data);
      this.labelService.dsLabelData = data.ResponseData;
      this.labelService.getHomePageScreenLabel();
    });
  }
  // public async getPatientList(event) {
  //   this.selectedAnalysisSource = event.SearchText ? event.SearchTextToDisplayOnDashboard : this.labelService.dsDashboardScreen.All;
  //   this.expandedElement = null;
  //   if (!event.SearchText) {
  //     this.isAdvSearched = false;
  //   }
  // event.IsBackOfficeUser = this.isBackOfficeUser;
  // this.pageNo = event.PageNo;
  // if (event.PageNo == 1) {
  //   this.originData = [];
  //   this.pataientList = [];
  // }
  // event["IsExactFilter"] = this.isNotificationSelected ? true : false;
  // event.isSortByLastResultDate = true;
  // this.dataService.pageState.dashboard.requestParams = event;
  // this.dataService.page.next(this.dataService.pageState);
  // const params = Object.assign({}, this.dataService.pageState.dashboard.requestParams);
  // if (params.FromDate) {
  //   params.FromDate = params.FromDate != null ? this.commonService.getMomentFromDateTime(params.FromDate) : null;
  // }
  // if (params.ToDate) {
  //   params.ToDate = params.ToDate != null ? this.commonService.getMomentToDateTime(params.ToDate) : null;
  // }
  // this.commonService.getDashboardPatientList(this.dataService.pageState.dashboard.requestParams).subscribe(data => {
  //   this.isNotificationSelected = false;
  //   if (event.PageNo == 1) {
  //     if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
  //       this.pataientList = data.ResponseData.PatientList;
  //       /** this.followPatientList = data.ResponseData.FollowPatientList; */
  //     } else {
  //       this.pataientList = [];
  //       /**   this.followPatientList = []; */
  //     }
  //   } else {
  //     if (data.ResponseData.PatientList != null && data.ResponseData.PatientList.length > 0) {
  //       this.pataientList = this.pataientList.concat(data.ResponseData.PatientList);
  //       /**   this.followPatientList = this.followPatientList.concat(data.ResponseData.FollowPatientList);  */
  //     }
  //   }
  //   if (data.ResponseData.PatientList != null && this.pataientList.length < 60) {
  //     event.PageNo += 1;
  //     this.pageNo = event.PageNo
  //     this.dataService.pageState.dashboard.requestParams['PageNo'] = this.pageNo;
  //     this.getPatientList(event);
  //   }
  //   if (this.pataientList && this.pataientList.length > 0) {
  //     this.pataientList = this.pataientList.map(item => {
  //       if (!item.PhysicianName || item.PhysicianName.trim() == "None")
  //         item.PhysicianName = this.labelService.dsDashboardScreen.none;
  //       return item
  //     })
  //     if (this.originData.length > 0 && this.isLoadMore) {
  //       this.isLoadMore = false;
  //     } else {
  //       this.scrolltoTop(null);
  //     }
  //     this.originData = this.pataientList;
  //     this.dataSource = new MatTableDataSource<any>(this.originData);
  //     this.dataService.pageState.dashboard.resultsList = this.originData;
  //     this.dataService.page.next(this.dataService.pageState);
  //     this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
  //     this.dataSource.sort = this.sort;
  //     if (this.dataService.pageState.dashboard.selectedRow) {
  //       const expandedRowDetails = this.dataService.pageState.dashboard.selectedRow;
  //       this.expandedElement = this.originData.find(x => x.Id == expandedRowDetails.Id && x.PatientId == expandedRowDetails.PatientId && x.PatientName == expandedRowDetails.PatientName && x.dob == expandedRowDetails.dob && x.owner_id == expandedRowDetails.owner_id);
  //     }
  //     this.sortState = this.dataService.pageState.dashboard.sortState;
  //   } else {
  //     this.dataSource.data = [];
  //   }
  // }, err => {
  //   this.originData = [];
  //   this.dataSource.data = [];
  //   console.log(JSON.stringify(err));
  // });
  // }
  // public getPatientListByAdvSearch(event) {
  //   this.sidefilterService.filter = this.dataService.pageState.default.requestParams;
  //   if (event.FromDate == null)
  //     this.sidefilterService.FromDate = null;
  //   if (event.ToDate == null)
  //     this.sidefilterService.ToDate = null;
  //   this.isAdvSearched = true;
  //   this.selectedAnalysisSource = event.SearchTextToDisplayOnDashboard != null ? event.SearchTextToDisplayOnDashboard : this.labelService.dsDashboardScreen.All;
  //   this.getPatientList(event);
  // }
  // public scrolltoTop(topVal) {
  //   const scrollabe = document.getElementById('dashboard-scrollabe');
  //   scrollabe.scrollTop = topVal;
  //   this.isLoadMore = false;
  // }
  getPatientBySelectedNotification(event) {
    this.isNotificationSelected = true;
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.PatientId = event.PatientId;
    this.sidefilterService.filter.BusinessGuid = this.BusinessGuId;
    this.sidefilterService.filter.UserGuid = this.dataService.appData.authDetails["UserGuid"];
    this.sidefilterService.filter.IsApplyFilter = true;
    this.sidefilterService.filter.ZDXPatientInfoId = event.ZDXPatientInfoId;
    this.headerService.selectedNotification = null;
  }
  // public getAnlysisSourceList(event) {
  //   this.dsAnalysisSource = event;
  // }
  // closeFilter() {
  //   this.drawer.close()
  // }
  // public filterDataSource(event) {
  //   this.getPatientList(event);
  // }
  refreshHomePage() {
    window.location.reload();
  }
  static {
    this.\u0275fac = function HomepageComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _HomepageComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(AlertService), \u0275\u0275directiveInject(ToastrService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _HomepageComponent, selectors: [["app-homepage"]], viewQuery: function HomepageComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, decls: 26, vars: 16, consts: [["drawer", ""], [1, "wrapper"], ["id", "content", 1, "dashboard-wrapper"], [3, "outFilterNotification"], ["hasBackdrop", "true", 1, "example-container1"], ["mode", "over", "position", "end", 1, "example-sidenav", "sidefilter", "right-filter"], [1, "example-sidenav-content", "w-100", "sidefilter", "dashboard"], [1, "toggleBtn", "mt-3", "mb-1", "toggleMobile"], [3, "click", "ngClass"], [1, "home-container"], [1, "home-top", "d-flex", "justify-content-between", "align-items-center", "pb-2"], [1, "d-flex", "justify-content-start", "align-items-center"], ["src", "../../../assets/img/Home_Blue.svg", 1, ""], [1, "homeTxt", "pl-2"], ["src", "../../../assets/img/Help_orng.svg", "alt", "help-circle", "width", "17px", "matTooltipPosition", "below", "matTooltipClass", "below", 1, "qicon", "text-right", 3, "click", "matTooltip"], [3, "ngClass"], [1, "refreshBtn"], ["src", "../../../../assets/img/refreshBtn.png", "alt", "Refreshimage", 3, "click"]], template: function HomepageComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1);
        \u0275\u0275element(1, "app-side-menu");
        \u0275\u0275elementStart(2, "div", 2)(3, "div")(4, "app-header", 3);
        \u0275\u0275listener("outFilterNotification", function HomepageComponent_Template_app_header_outFilterNotification_4_listener($event) {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.getPatientBySelectedNotification($event));
        });
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(5, "mat-drawer-container", 4);
        \u0275\u0275element(6, "mat-drawer", 5, 0);
        \u0275\u0275elementStart(8, "div", 6)(9, "div", 7)(10, "button", 8);
        \u0275\u0275listener("click", function HomepageComponent_Template_button_click_10_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.viewConsultation = false);
        });
        \u0275\u0275text(11, "Results");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "button", 8);
        \u0275\u0275listener("click", function HomepageComponent_Template_button_click_12_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.viewConsultation = true);
        });
        \u0275\u0275text(13, "Consultations");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(14, "section", 9)(15, "div", 10)(16, "div", 11);
        \u0275\u0275element(17, "img", 12);
        \u0275\u0275elementStart(18, "p", 13);
        \u0275\u0275text(19);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(20, "div")(21, "img", 14);
        \u0275\u0275listener("click", function HomepageComponent_Template_img_click_21_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.commonService.onlineHelp(ctx.helpObj.PageID));
        });
        \u0275\u0275elementEnd()()();
        \u0275\u0275element(22, "app-result-list", 15)(23, "app-consultations", 15);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(24, "div", 16)(25, "img", 17);
        \u0275\u0275listener("click", function HomepageComponent_Template_img_click_25_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.refreshHomePage());
        });
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(10);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(6, _c028, !ctx.viewConsultation, ctx.viewConsultation));
        \u0275\u0275advance(2);
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(9, _c028, ctx.viewConsultation, !ctx.viewConsultation));
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate(ctx.labelService.dsHomePageScreen.Home);
        \u0275\u0275advance(2);
        \u0275\u0275property("matTooltip", ctx.labelService.dsSideMenuScreen.Help);
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(12, _c121, ctx.viewConsultation));
        \u0275\u0275advance();
        \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(14, _c121, !ctx.viewConsultation));
      }
    }, dependencies: [NgClass, MatDrawer, MatDrawerContainer, MatLegacyTooltip, HeaderComponent, SideMenuComponent, ResultListComponent, ConsultationsComponent], styles: ["\n\n*[_ngcontent-%COMP%] {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n.home-container[_ngcontent-%COMP%] {\n  padding: 15px 5px;\n  margin-top: 70px;\n  height: calc(100vh - 100px);\n  margin-right: 35px;\n}\n.toggleBtn[_ngcontent-%COMP%]   .actives[_ngcontent-%COMP%] {\n  background: #035771 !important;\n  color: #fff !important;\n}\n.toggleBtn[_ngcontent-%COMP%]   .notactives[_ngcontent-%COMP%] {\n  background: #fff !important;\n  color: #035771 !important;\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child {\n  width: 50%;\n  border: 1px solid #035771;\n  border-bottom-right-radius: 1px !important;\n  border-top-right-radius: 1px !important;\n  cursor: pointer;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  border-radius: 8px;\n}\n#content[_ngcontent-%COMP%] {\n  padding: 0 20px 0;\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child {\n  width: 50%;\n  border: 1px solid #03577170;\n  border-bottom-left-radius: 1px !important;\n  border-top-left-radius: 1px !important;\n  cursor: pointer;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  border-radius: 8px;\n}\n.toggleMobile[_ngcontent-%COMP%] {\n  display: none;\n}\n.toggleBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  border-radius: 8px !important;\n}\n.refreshBtn[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 5px;\n  bottom: 25px;\n  z-index: 999;\n  cursor: pointer;\n}\n@media screen and (max-width: 767px) {\n  .home-container[_ngcontent-%COMP%] {\n    display: block;\n    margin-top: 15px;\n    height: inherit;\n    padding: 0;\n  }\n  .toggleMobile[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .hideme[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .qicon[_ngcontent-%COMP%] {\n    bottom: 0;\n    right: 12px;\n    cursor: pointer;\n  }\n  .homeTxt[_ngcontent-%COMP%] {\n    color: #035771 !important;\n  }\n}\n.home-container[_ngcontent-%COMP%]   .homeTxt[_ngcontent-%COMP%] {\n  font-weight: bold;\n  color: #0f617a;\n}\n/*# sourceMappingURL=homepage.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(HomepageComponent, { className: "HomepageComponent", filePath: "src\\app\\components\\homepage\\homepage.component.ts", lineNumber: 21 });
})();

// src/app/app-routing.module.ts
var routes = [
  // === NO AUTH REQUIRED ===
  {
    path: "login",
    component: GigyaLoginComponent
    // canActivate: [MaintenanceMode]
  },
  {
    path: "maintenance",
    component: MaintenanceComponent
  },
  // === NO AUTH REQUIRED END ===
  {
    path: "home",
    component: HomepageComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "dashboard",
    component: DashboardComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "result-details",
    loadChildren: () => import("./result-details.module-3OPRUH3L.js").then((m) => m.ResultDetailsModule)
  },
  {
    path: "accession-results",
    component: AccessionResultsComponent
  },
  {
    path: "fuse/list",
    component: FuseListComponent,
    canActivate: [AuthGuard]
    // canActivate: [BusinessAdminGuard]
  },
  {
    path: "user/list",
    component: UserListComponent,
    canActivate: [AuthGuard]
    // canActivate: [BusinessAdminGuard]
  },
  {
    path: "patient/list",
    component: PatientListComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "patient/info",
    component: PatientInfoComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "patient/info/edit",
    component: PatientInfoEditComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "patient/info/:pataientId/:zdxPatientId",
    component: ConsultPatientInfoComponent,
    canActivate: [ConsultantGuard]
  },
  {
    path: "search-result",
    component: SearchResultsComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "zrl-verification",
    component: ZrlVerificationComponent
    // canActivate: [AuthGuard]
  },
  {
    path: "help",
    component: HelpComponent,
    // canActivate: [BusinessAdminGuard]
    canActivate: [AuthGuard]
  },
  // {
  //   path: "faq/:languageId/:CountryId",
  //   component: FaqComponent
  // },
  // {
  //   path: "faq",
  //   component: CountryLangComponent
  // },
  {
    path: "ups",
    component: UpsComponent
  },
  {
    path: "clinic",
    component: ClinicManagementComponent,
    canActivate: [BusinessAdminGuard]
  },
  // {
  //   path: "consult/profile",
  //   component: UserProfileComponent,
  //   // canActivate: [BusinessAdminGuard]
  // },
  {
    path: "user/profile",
    component: GigyaUserProfileComponent
    // canActivate: [BusinessAdminGuard]
  },
  {
    path: "user/preferences",
    component: PreferencesComponent,
    canActivate: [BusinessAdminGuard]
  },
  {
    path: "consult/security",
    component: SecurityComponent,
    canActivate: [BusinessAdminGuard]
  },
  {
    path: "user/security",
    component: GigyaChangePasswordComponent
    //canActivate: [BusinessAdminGuard]
  },
  {
    path: "user/support",
    component: UserSupportComponent,
    canActivate: [BusinessAdminGuard]
  },
  {
    path: "user/account",
    component: AccountSettingsComponent,
    canActivate: [AuthGuard]
  },
  {
    path: "consultant-dos",
    component: ConsultDosComponent,
    canActivate: [ConsultantGuard]
  },
  // {
  //   path: "gmarket",
  //   component: GigyaMarketComponent,
  // },
  {
    path: "loginregisintermediate",
    component: LoginRegisIntermediateComponent
  },
  // {
  //   path: "register",
  //   component: RegisterComponent,
  // },
  {
    path: "forgot",
    component: ForgotComponent
  },
  {
    path: "verify",
    component: VerifyComponent
  },
  {
    path: "thanks",
    component: ThanksComponent
  },
  {
    path: "link-expired",
    component: ThanksComponent
  },
  {
    path: "alredy-verified",
    component: ThanksComponent
  },
  {
    path: "resetting",
    component: ResetComponent
  },
  {
    path: "reset",
    component: GigyaResetComponent
  },
  {
    path: "enduserlicenseagreement/:languageId",
    component: EndUserLicenseAgreementComponent
  },
  {
    path: "enduserlicenseagreement/:languageId/:countryId",
    component: EndUserLicenseAgreementComponent
  },
  {
    path: "zdx",
    component: ZdxRedirectionComponent
  },
  {
    path: "settings",
    component: SettingsComponent
  },
  {
    path: "rotor-firstScreen",
    component: RotorCreditFirstScreenComponent,
    canActivate: [AuthGuardRotor]
  },
  {
    path: "rotor",
    component: RotorCreditComponent
  },
  {
    path: "refLab",
    loadChildren: () => import("./refrence-lab.module-VYOTV7CB.js").then((m) => m.RefrenceLabModule)
  },
  {
    path: "communication",
    loadChildren: () => import("./communication.module-7RK436LG.js").then((m) => m.CommunicationModule)
  },
  {
    path: "",
    pathMatch: "full",
    redirectTo: "login"
  },
  {
    path: "**",
    // component: PagenotfoundComponent
    redirectTo: "login"
  }
];
var AppRoutingModule = class _AppRoutingModule {
  static {
    this.\u0275fac = function AppRoutingModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AppRoutingModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppRoutingModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forRoot(routes, {}), RouterModule] });
  }
};

// src/app/modules/add-user/add-user.module.ts
var AddUserModule = class _AddUserModule {
  static {
    this.\u0275fac = function AddUserModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AddUserModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AddUserModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      CommonModule,
      RouterModule,
      FormsModule,
      ReactiveFormsModule,
      MatModule
    ] });
  }
};

// src/app/modules/sidefilter/side-filter.module.ts
var SideFilterModule = class _SideFilterModule {
  static {
    this.\u0275fac = function SideFilterModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SideFilterModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _SideFilterModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
      CommonModule,
      FormsModule,
      ReactiveFormsModule,
      MatModule,
      pipeModule
    ] });
  }
};

// src/app/app.component.ts
var AppComponent = class _AppComponent {
  constructor(commonService, myMonitoringService, router, title, labelService, dataService, modalService, sidemenuService, confirmationDialogService, headerService, activeModal, alertService, refLabService, platform, toastr, autoRefreshService, autoLogoutService, pendoService) {
    this.commonService = commonService;
    this.myMonitoringService = myMonitoringService;
    this.router = router;
    this.title = title;
    this.labelService = labelService;
    this.dataService = dataService;
    this.modalService = modalService;
    this.sidemenuService = sidemenuService;
    this.confirmationDialogService = confirmationDialogService;
    this.headerService = headerService;
    this.activeModal = activeModal;
    this.alertService = alertService;
    this.refLabService = refLabService;
    this.platform = platform;
    this.toastr = toastr;
    this.autoRefreshService = autoRefreshService;
    this.autoLogoutService = autoLogoutService;
    this.pendoService = pendoService;
    this.Eula = [];
    this.isEnableCR = false;
    this.isOpenedCR = false;
    this.enSpeciesList = [];
    this.enGenderList = [];
    this.dataService.data.subscribe((data) => {
      this.authdata = data.authDetails;
    });
    try {
      this.commonService.getUserDDLDetails(EnmLanguage.English, EnmCountry.UnitedStates, null).subscribe((res) => {
        this.dataService.appData.userDropDownList = res.ResponseData;
        this.dataService.data.next(this.dataService.appData);
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } catch (err) {
      this.commonService.showCommonToastrError();
    }
    this.router.events.subscribe((event) => {
      if (event instanceof NavigationStart && sessionStorage.ENV === "CVET") {
        this.sidemenuService.logOut();
      }
      if (event instanceof NavigationEnd && event.url == "/login") {
        this.activeModal.close();
      }
      const handleConsultationBack = ["/patient/info", "/patient/result"];
      if (event instanceof NavigationEnd && event.id == 1 && handleConsultationBack.includes(event.url)) {
        this.dataService.appData.prevUrl = "dashboard";
        this.dataService.data.next(this.dataService.appData);
      }
      if (this.dataService.appData.authDetails["IsLicenseAgreement"] == false && event instanceof NavigationEnd && !(this.authdata["IsConsultantUser"] || this.authdata["BackOfficeFlag"])) {
        this.prevUrl = event.urlAfterRedirects;
        this.alertService.getAlertMsg(this.headerService.loginUserGuid, this.dataService.appData.authDetails["BusinessGuid"]).subscribe((data) => {
          this.dataService.appData["CommunicationEmailCount"] = data.ResponseData["CommunicationEmailCount"];
          this.dataService.appData.serverDate = data.ResponseData["ServerDate"];
          if (this.dataService.appData.updatedNotificationCount != data.ResponseData["NotificationLogCount"]) {
            this.dataService.appData.updatedNotificationCount = data.ResponseData["NotificationLogCount"];
            this.headerService.getNotification(this.labelService.selectedLanguage, true);
          } else {
            this.headerService.dsNotificationList = this.dataService.appData.notificationList;
            this.headerService.updateNotificationCount();
          }
          const lastDosUpdatedAt = data.ResponseData["LatestDOSUpdatedTime"];
          if (lastDosUpdatedAt) {
            const DDHHStr = this.dataService.getDDHHChar(lastDosUpdatedAt);
            if (!this.dataService.appData.dosCnf.dosData.length || this.dataService.appData.dosCnf.lstDosUpdateDtHr !== DDHHStr) {
              this.dataService.appData.dosCnf.dosDoRefresh = true;
            }
            this.dataService.appData.dosCnf.lstDosUpdateDtHr = DDHHStr;
          } else {
            this.dataService.appData.dosCnf.dosDoRefresh = true;
          }
          this.dataService.data.next(this.dataService.appData);
          this.modalService.dismissAll();
          if (data.ResponseData.length > 0 && data.ResponseData.filter((x) => x.IsRead === false).length) {
            localStorage.setItem("ShowAlertPop", "false");
            const modalRef = this.modalService.open(AlertMessageComponent, {
              centered: true,
              backdrop: "static",
              scrollable: false
            });
            modalRef.componentInstance.onlyNew = true;
          }
        }, (err) => {
          console.log(JSON.stringify(err));
          this.commonService.showCommonToastrError();
        });
      }
      if (event instanceof NavigationEnd && !(event.urlAfterRedirects.includes("backoffice") || event.urlAfterRedirects.includes("bko"))) {
        this.commonService.firebase.analytics().logEvent("Screen_view", { pages: event.urlAfterRedirects });
        gtag("event", "page_view", {
          page_path: event.urlAfterRedirects,
          page_title: this.getPageTitle(event.urlAfterRedirects) + " Page"
        });
      }
    });
  }
  getPageTitle(str) {
    const strArray = str.split("/");
    strArray.shift();
    return strArray.join(" ");
  }
  /** Add Google Analytics Script Dynamically */
  addGAScript() {
    const gtagScript = document.createElement("script");
    gtagScript.async = true;
    gtagScript.src = "https://www.googletagmanager.com/gtag/js?id=" + environment.GA_TRACKING_ID;
    document.head.prepend(gtagScript);
    setTimeout(() => {
      if (typeof gtag !== "undefined") {
        gtag("config", environment.GA_TRACKING_ID, { send_page_view: false });
      }
    }, 2e3);
  }
  getTranslationByLang() {
    const langId = this.dataService.appData.authDetails["LanguageId"];
    if (langId) {
      this.commonService.getFilterDDLDetails(langId).subscribe((res) => {
        res.ResponseData["enSpeciesList"] = this.enSpeciesList;
        res.ResponseData["enGenderList"] = this.enGenderList;
        this.dataService.appData.filterDropDownList = res.ResponseData;
        this.dataService.data.next(this.dataService.appData);
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    }
  }
  ngAfterViewInit() {
    try {
      if (window.location.href.indexOf("/zdx?res=") === -1) {
        this.getFilterDDLDetails();
      } else {
        setTimeout(() => this.getFilterDDLDetails, 500);
      }
    } catch (err) {
      this.commonService.showCommonToastrError();
    }
    this.addGAScript();
  }
  ngOnInit() {
    let data = localStorage.authDetails ? JSON.parse(localStorage?.authDetails) : null;
    this.pendoService.initializePendo(data);
    this.commonService.pdfDownloading.subscribe({
      next: (res) => {
        const blobStore = new Blob([res.data], { type: "application/pdf" });
        const data2 = window.URL.createObjectURL(blobStore);
        if (!this.platform.FIREFOX && !this.platform.SAFARI) {
          const link = document.createElement("a");
          document.body.appendChild(link);
          link.href = data2;
          link.download = `${res.fileName}.pdf`;
          link.click();
          link.remove();
        }
        this.confirmationDialogService.dismiss();
        let msg = this.labelService.dsPatientInfoScreen.ViewDocumentMessage;
        const indx = msg.indexOf("\u30DC\u30BF\u30F3");
        if (indx != -1) {
          const result = [msg.slice(0, indx), msg.slice(indx)];
          msg = result[0] + "<br>" + result[1];
        }
        const ref = this.confirmationDialogService.confirm("Alert", msg, this.labelService.dsPatientInfoScreen.ViewDocument, "", "sm", true, false);
        ref.then(() => {
          const link2 = document.createElement("a");
          document.body.appendChild(link2);
          link2.href = data2;
          link2.target = "_blank";
          if (this.platform.FIREFOX || this.platform.SAFARI)
            link2.download = `${res.fileName}.pdf`;
          link2.click();
          link2.remove();
          window.URL.revokeObjectURL(data2);
        });
      },
      error: () => {
        this.commonService.showCommonToastrError();
      }
    });
    this.commonService.getOnlineHelpTopics().subscribe((data2) => {
      if (data2.StatusCode == "200") {
        this.dataService.appData.helpTopics = data2.ResponseData;
        this.dataService.data.next(this.dataService.appData);
      }
    });
    this.commonService.catchedApiError.subscribe((error) => {
      console.log(error);
      this.commonService.showCommonToastrError();
    });
  }
  getFilterDDLDetails() {
    this.commonService.getFilterDDLDetails(1).subscribe((res) => {
      this.enSpeciesList = res.ResponseData.SpeciesList;
      this.enGenderList = res.ResponseData.GenderList;
      this.getTranslationByLang();
    }, (err) => {
      console.log(JSON.stringify(err));
      this.getTranslationByLang();
      this.commonService.showCommonToastrError();
    });
  }
  static {
    this.\u0275fac = function AppComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AppComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(MyMonitoringService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(NgbModal), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(NgbActiveModal), \u0275\u0275directiveInject(AlertService), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(ToastrService), \u0275\u0275directiveInject(AutoRefreshService), \u0275\u0275directiveInject(AutoLogoutService), \u0275\u0275directiveInject(PendoService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], features: [\u0275\u0275ProvidersFeature([NgbActiveModal])], decls: 2, vars: 0, template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "router-outlet")(1, "ng-http-loader");
      }
    }, dependencies: [RouterOutlet, NgHttpLoaderComponent], styles: ["\n\n  #QSIFeedbackButton-btn {\n  top: 43%;\n  transform: translate(0%, -45%);\n  bottom: inherit !important;\n  height: 200px !important;\n  width: initial !important;\n}\n  #QSIFeedbackButton-btn div {\n  border-radius: 1px !important;\n  transform: rotateZ(0) !important;\n  text-transform: uppercase;\n}\n  #QSIFeedbackButton-close-btn-container {\n  display: none !important;\n}\n.sideBtn[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 70%;\n  right: -63px;\n  color: #fff;\n  background: #1072ce;\n  border-radius: 1px !important;\n  border: none;\n  font-size: 12px;\n  width: 160px;\n  z-index: 999;\n  -webkit-transform: rotate(90deg);\n  -moz-transform: rotate(90deg);\n  -o-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n.app-content[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 50%;\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  right: 0;\n  font-size: 12px !important;\n  width: 400px;\n  background: #fff;\n  padding: 0;\n  box-shadow: 0 0 10px 0 rgba(0, 0, 0, .54);\n  z-index: 999;\n  height: 100%;\n  overflow: auto;\n}\n.sideBtn.opened[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n  right: 337px !important;\n  box-shadow: 5px 6px 17px 0 rgb(0 0 0 / 5%);\n}\ntextarea[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 130px;\n}\n#if[_ngcontent-%COMP%] {\n  height: 60%;\n}\n  .QSIFeedbackButton img {\n  transform: rotate(180deg);\n}\n  #QSIFeedbackButton-target-container {\n  bottom: inherit !important;\n  top: 50%;\n  transform: translate(0%, -50%);\n}\n@media screen and (max-width: 767px) {\n    #QSIFeedbackButton-btn {\n    display: none;\n  }\n}\n/*# sourceMappingURL=app.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 35 });
})();

// src/app/components/signin/signin.component.ts
var SigninComponent = class _SigninComponent {
  // ===============gigya========================
  // loginParams = {
  //   screenSet: "RegistrationLogin",
  //   startScreen: "gigya-login-screen",
  //   containerID: "loginContainer"
  // };
  // ==============gigya end========================
  constructor(formBuilder, router, commonService, confirmationDialogService, headerService, labelService, sidemenuService, dataService) {
    this.formBuilder = formBuilder;
    this.router = router;
    this.commonService = commonService;
    this.confirmationDialogService = confirmationDialogService;
    this.headerService = headerService;
    this.labelService = labelService;
    this.sidemenuService = sidemenuService;
    this.dataService = dataService;
    this.dsLoginScreen = new LoginScreen();
    this.hide = true;
    this.dsLanguage = [];
    this.msg = "";
    this.isRememberme = false;
    this.betaUser = "Thank you for your participation in our ZoetisDx.com version 1.2 beta. We appreciate your participation and look forward to serving your diagnostics needs in the future. If you bookmarked or saved the beta.zoetisdx.com site, please remember to update your bookmark to point to ZoetisDx.com";
    this.hyperData = "To log in to ZoetisDX, please go to";
    this.link = "www.zoetisdx.com";
    this.formResetClicked = false;
    this.commonService.getLanguageDetails().subscribe((data) => {
      this.dsLanguage = data.ResponseData;
      if (document.cookie == void 0 || document.cookie == null || document.cookie == "") {
        const langCode = navigator.language.split("-")[1] == void 0 ? navigator.language.split("-")[0] : navigator.language.split("-")[1].toLowerCase();
        this.labelService.selectedLanguage = this.getLanIdByLanCode(langCode);
        this.getLabelDetails();
        const d = /* @__PURE__ */ new Date();
        d.setTime(d.getTime() + 24 * 60 * 60 * 1e3);
        const expires = "expires=" + d.toUTCString();
        document.cookie = "languageCode=" + navigator.language;
        document.cookie = "languageShortCode=" + langCode;
        document.cookie = expires;
        document.cookie = "path=" + window.location.href;
      } else {
        if (this.labelService.dsLabelData.length == 0) {
          this.getLabelDetails();
        } else {
          this.bindLabel();
        }
      }
    });
  }
  getLanIdByLanCode(val) {
    return this.dsLanguage.find((x) => x.Code.toLowerCase() == val) != void 0 ? this.dsLanguage.find((x) => x.Code.toLowerCase() == val).Id : EnmLanguage.English;
  }
  logOutUser() {
    gigya.accounts.logout();
  }
  ngOnInit() {
    this.userAuthForm = this.createFormGroup(new UserAuth());
    if (localStorage["rememberedUser"]) {
      this.userAuthForm.controls.User.setValue(localStorage["rememberedUser"]);
      this.isRememberme = true;
    }
  }
  showMsg(msg) {
    this.confirmationDialogService.confirm("", msg, this.labelService.dsRotorManagementScreen.OkLabel, this.labelService.dsUserManagementScreen.Cancel, "sm", true, false);
  }
  getLabelDetails() {
    localStorage.setItem("languageId", this.labelService.selectedLanguage.toString());
    this.dataService.appData.masterData.languageId = this.labelService.selectedLanguage.toString();
    this.dataService.data.next(this.dataService.appData);
    this.labelService.getLabelDetails(null, this.labelService.selectedLanguage).subscribe((data) => {
      this.labelService.dsLabelData = data.ResponseData;
      this.bindLabel();
      this.msg = "";
    });
  }
  bindLabel() {
    if (localStorage.languageId == void 0)
      localStorage.setItem("languageId", this.labelService.selectedLanguage.toString());
    this.dataService.appData.masterData.languageId = this.labelService.selectedLanguage.toString();
    this.dataService.data.next(this.dataService.appData);
    this.dsLoginScreen = new LoginScreen();
    if (this.labelService.dsLabelData["LoginScreen"] != void 0) {
      this.dsLoginScreen.Pleasefillyourinformationbelow = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Pleasefillyourinformationbelow").LabelName;
      this.dsLoginScreen.Email = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Email").LabelName;
      this.dsLoginScreen.Password = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Password").LabelName;
      this.dsLoginScreen.ForgotPassword = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "ForgotPassword").LabelName;
      this.dsLoginScreen.Login = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Login").LabelName;
      this.dsLoginScreen.Donthaveanaccount = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Donthaveanaccount").LabelName;
      this.dsLoginScreen.SignUpHere = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "SignUpHere").LabelName;
      this.dsLoginScreen.Emailnotvalidated = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Emailnotvalidated").LabelName;
      this.dsLoginScreen.Pleaseenterallrequiredfields = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Pleaseenterallrequiredfields").LabelName;
      this.dsLoginScreen.Pleasefillyourinformationbelow = this.labelService.dsLabelData["LoginScreen"].find((x) => x.KeyValue == "Pleasefillyourinformationbelow").LabelName;
      this.dsLoginScreen.Pleaseentervalidemail = this.labelService.getValue("LoginScreen", "Pleaseentervalidemail", this.dsLoginScreen.Pleaseentervalidemail);
      this.dsLoginScreen.UserNotActive = this.labelService.getValue("LoginScreen", "UserNotActive", this.dsLoginScreen.UserNotActive);
      this.dsLoginScreen.LoginFailed = this.labelService.getValue("LoginScreen", "LoginFailed", this.dsLoginScreen.LoginFailed);
      this.dsLoginScreen.Pleaseenteruseremail = this.labelService.getValue("LoginScreen", "Pleaseenteruseremail", this.dsLoginScreen.Pleaseenteruseremail);
      this.dsLoginScreen.Pleaseenterpassword = this.labelService.getValue("LoginScreen", "Pleaseenterpassword", this.dsLoginScreen.Pleaseenterpassword);
      this.dsLoginScreen.RememberMe = this.labelService.getValue("LoginScreen", "RememberMe", this.dsLoginScreen.RememberMe);
    }
  }
  noSpaces(val) {
    if (val.match(/\s/g)) {
      this.userAuthForm.controls["User"].setValue(val.replace(/\s/g, ""));
    }
  }
  login() {
    localStorage.clear();
    if (this.userAuthForm.status == "VALID") {
      if (this.isRememberme) {
        this.rememeberMe();
      }
      this.userAuthForm.controls["LanguageId"].setValue(this.labelService.selectedLanguage);
      this.commonService.loginAuth(this.userAuthForm.value).subscribe((data) => {
        if (data.BackOfficeFlag) {
          data.LanguageId = EnmLanguage.English.toString();
          this.labelService.selectedLanguage = parseInt(data.LanguageId);
          this.getLabelDetails();
          localStorage.setItem("isBackOfficeFlag", data.BackOfficeFlag);
        } else
          this.labelService.selectedLanguage = data.LanguageId != void 0 && data.LanguageId != null && data.LanguageId != "" && data.LanguageId != "0" ? parseInt(data.LanguageId) : EnmLanguage.English;
        this.sidemenuService.getSideMenu(data.UserTypeId, this.labelService.selectedLanguage, this.labelService.userCountryId, true);
        localStorage.setItem("authDetails", JSON.stringify(data));
        this.dataService.appData.authDetails = data;
        this.dataService.data.next(this.dataService.appData);
        localStorage.setItem("userTypeId", data.UserTypeId);
        localStorage.setItem("businessId", data.BusinessId);
        localStorage.setItem("businessName", data.BusinessName);
        localStorage.setItem("userName", data.FirstName);
        localStorage.setItem("isBusiness", data.UserTypeId == EnmUserType.Business ? "true" : "false");
        const langId = data.LanguageId != void 0 && data.LanguageId != null && data.LanguageId != "" && data.LanguageId != "0" ? data.LanguageId : EnmLanguage.English.toString();
        localStorage.setItem("languageId", langId);
        this.dataService.appData.masterData.languageId = langId;
        this.dataService.data.next(this.dataService.appData);
        const userCountryId = data.CountryId != void 0 && data.CountryId != null && data.CountryId != "" ? data.CountryId : 0;
        localStorage.setItem("userCountryId", userCountryId);
        this.dataService.appData.masterData.userCountryId = userCountryId;
        this.dataService.data.next(this.dataService.appData);
        localStorage.setItem("notificationSettingId", data.FollowPatient != void 0 && data.FollowPatient != null && data.FollowPatient != "" && data.FollowPatient != "0" ? data.FollowPatient : EnmNotificationSetting.AllClinicResults.toString());
        this.labelService.userCountryId = data.CountryId != void 0 && data.CountryId != null && data.CountryId != "" ? data.CountryId : 0;
        this.headerService.loginUserId = data.Id;
        this.headerService.selectedBusinessId = data.BusinessId;
        this.headerService.selectedBusinessName = data.BusinessName;
        this.headerService.isBusiness = data.UserTypeId == EnmUserType.Business;
        this.headerService.userName = data.FirstName;
        this.headerService.userTypeId = data.UserTypeId;
        this.headerService.notificationSettingId = data.FollowPatient;
      }, (error) => {
        if (error.error.error == "not_verified") {
          this.msg = this.dsLoginScreen.Emailnotvalidated;
        } else if (error.error.error == "not_active") {
          this.msg = this.dsLoginScreen.UserNotActive;
        } else if (error.error.error == "beta end date has passed") {
          this.includeValues = this.betaUser + "\n";
          this.showMsg(this.includeValues);
          this.commonService.callMethodOfSecondComponent("signIn");
        } else {
          this.msg = this.dsLoginScreen.LoginFailed;
        }
      });
    } else {
      if (!this.userAuthForm.controls["User"].valid && this.userAuthForm.controls["User"].value != null && this.userAuthForm.controls["User"].value != "")
        this.msg = this.dsLoginScreen.Pleaseentervalidemail;
      else if ((this.userAuthForm.controls["User"].value == null || this.userAuthForm.controls["User"].value == "") && (this.userAuthForm.controls["Signal"].value != null && this.userAuthForm.controls["Signal"].value != ""))
        this.msg = this.dsLoginScreen.Pleaseenteruseremail;
      else if ((this.userAuthForm.controls["Signal"].value == null || this.userAuthForm.controls["Signal"].value == "") && (this.userAuthForm.controls["User"].value != null && this.userAuthForm.controls["User"].value != ""))
        this.msg = this.dsLoginScreen.Pleaseenterpassword;
      else
        this.msg = this.dsLoginScreen.Pleaseenterallrequiredfields;
    }
  }
  onChangeRememberme(e) {
    this.isRememberme = e.checked;
  }
  rememeberMe() {
    if (this.isRememberme) {
      const userName = this.userAuthForm.value.User;
      localStorage.setItem("rememberedUser", userName);
    } else {
      localStorage.removeItem("rememberedUser");
    }
  }
  createFormGroup(dataItem) {
    return this.formBuilder.group({
      // 'Email' : [dataItem.Email, Validators.compose([Validators.required, Validators.maxLength(100),Validators.pattern(/^[A-Za-z0-9.-]+$/) ])],
      // 'User': [dataItem.User, Validators.compose([Validators.required, Validators.maxLength(100), Validators.pattern("[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}")])],
      "User": [dataItem.User, Validators.compose([Validators.required, Validators.maxLength(100), Validators.pattern("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,9}$")])],
      "Signal": [dataItem.Signal, Validators.compose([Validators.required, Validators.maxLength(20)])],
      "GrantType": "password",
      "LanguageId": this.labelService.selectedLanguage
    });
  }
  static {
    this.\u0275fac = function SigninComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _SigninComponent)(\u0275\u0275directiveInject(UntypedFormBuilder), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(SidemenuService), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SigninComponent, selectors: [["app-signin"]], decls: 36, vars: 13, consts: [[1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "w-75"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "logo-login"], [1, "text-center", "mb-5", "info"], [1, "text-center", "mb-0", "errormsg", 2, "color", "red"], ["autocomplete", "off", 1, "form-signin", 3, "keyup.enter", "formGroup"], [1, "form-label-group"], ["appearance", "outline", 1, "w-100"], ["matInput", "", "formControlName", "User", 3, "keyup", "placeholder"], ["matPrefix", ""], ["src", "../../../assets/img/user.png", "alt", "user", 1, "icon"], ["matInput", "", "formControlName", "Signal", "autocomplete", "off", 3, "type", "placeholder"], ["type", "button", "mat-icon-button", "", "matSuffix", "", 3, "click"], ["src", "../../../assets/img/lock.png", "alt", "lock", 1, "icon"], [1, "mb-2", "d-flex", "justify-content-between"], [1, "remember-chk", 3, "change", "checked"], ["routerLink", "/forgot"], [1, "d-flex", "align-items-center", "justify-content-center", "flex-column"], ["mat-raised-button", "", "color", "warn", 1, "btn", "btn-lg", "btn-primary", "btn-block", 3, "click"]], template: function SigninComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6);
        \u0275\u0275element(7, "img", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(8, "div", 8);
        \u0275\u0275text(9);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(10, "div", 9);
        \u0275\u0275text(11);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "form", 10);
        \u0275\u0275listener("keyup.enter", function SigninComponent_Template_form_keyup_enter_12_listener() {
          return ctx.login();
        });
        \u0275\u0275elementStart(13, "div", 11)(14, "mat-form-field", 12)(15, "input", 13);
        \u0275\u0275listener("keyup", function SigninComponent_Template_input_keyup_15_listener($event) {
          return ctx.noSpaces($event.target.value);
        });
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(16, "span", 14);
        \u0275\u0275element(17, "img", 15);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(18, "div", 11)(19, "mat-form-field", 12);
        \u0275\u0275element(20, "input", 16);
        \u0275\u0275elementStart(21, "button", 17);
        \u0275\u0275listener("click", function SigninComponent_Template_button_click_21_listener() {
          return ctx.hide = !ctx.hide;
        });
        \u0275\u0275elementStart(22, "mat-icon");
        \u0275\u0275text(23);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(24, "span", 14);
        \u0275\u0275element(25, "img", 18);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(26, "div", 19)(27, "div")(28, "mat-checkbox", 20);
        \u0275\u0275listener("change", function SigninComponent_Template_mat_checkbox_change_28_listener($event) {
          return ctx.onChangeRememberme($event);
        });
        \u0275\u0275text(29);
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(30, "div")(31, "a", 21);
        \u0275\u0275text(32);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(33, "div", 22)(34, "button", 23);
        \u0275\u0275listener("click", function SigninComponent_Template_button_click_34_listener() {
          return ctx.login();
        });
        \u0275\u0275text(35);
        \u0275\u0275elementEnd()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(9);
        \u0275\u0275textInterpolate1(" ", ctx.dsLoginScreen.Pleasefillyourinformationbelow, " ");
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate1(" ", ctx.msg, " ");
        \u0275\u0275advance();
        \u0275\u0275property("formGroup", ctx.userAuthForm);
        \u0275\u0275advance(3);
        \u0275\u0275property("placeholder", ctx.dsLoginScreen.Email);
        \u0275\u0275advance(5);
        \u0275\u0275property("type", ctx.hide ? "password" : "text")("placeholder", ctx.dsLoginScreen.Password);
        \u0275\u0275advance();
        \u0275\u0275attribute("aria-label", "Hide password")("aria-pressed", ctx.hide);
        \u0275\u0275advance(2);
        \u0275\u0275textInterpolate(ctx.hide ? "visibility_off" : "visibility");
        \u0275\u0275advance(5);
        \u0275\u0275property("checked", ctx.isRememberme);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate1(" ", ctx.dsLoginScreen.RememberMe, "");
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.dsLoginScreen.ForgotPassword);
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate(ctx.dsLoginScreen.Login);
      }
    }, dependencies: [RouterLink, MatLegacyFormField, MatLegacyPrefix, MatLegacySuffix, MatLegacyInput, MatLegacyButton, MatIcon, MatLegacyCheckbox, \u0275NgNoValidate, DefaultValueAccessor, NgControlStatus, NgControlStatusGroup, FormGroupDirective, FormControlName], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n}\n.btn[_ngcontent-%COMP%] {\n  border-radius: 7px;\n  height: 38px;\n  width: 100%;\n  margin-top: 23px;\n  background-color: #fd6400;\n  box-shadow: none;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 80%;\n}\n.select-lang[_ngcontent-%COMP%] {\n  float: right;\n  width: 200px;\n  margin-top: 16px;\n  margin-right: 21px;\n}\na[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 12px;\n  font-weight: bold;\n}\n.signup[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #407ec9;\n  font-size: 14px;\n}\n.w-75[_ngcontent-%COMP%] {\n  width: 480px !important;\n}\n.info[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: "GothamNarrowBold", sans-serif;\n  font-size: 12px;\n  font-weight: bold;\n}\n.lang[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 12px;\n  right: 16px;\n}\n.icon[_ngcontent-%COMP%] {\n  position: relative;\n  top: -7px;\n  width: 11px;\n}\n.signin-outer[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\n  padding-bottom: 4px;\n}\n.errormsg[_ngcontent-%COMP%] {\n  width: 307px;\n  position: absolute;\n  margin-top: -9%;\n  line-height: 14px;\n  font-size: 12px;\n  height: 43px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.mat-icon-button[_ngcontent-%COMP%]     .mat-button-focus-overlay {\n  display: none;\n}\n.remember-chk[_ngcontent-%COMP%] {\n  color: #3e3e3e;\n  font-family: "gothambook", sans-serif !important;\n}\n/*# sourceMappingURL=signin.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SigninComponent, { className: "SigninComponent", filePath: "src\\app\\components\\signin\\signin.component.ts", lineNumber: 15 });
})();

// src/app/services/order-sidefilter.service.ts
var OrderSidefilterService = class _OrderSidefilterService {
  constructor() {
    this.dsDVM = [];
  }
  static {
    this.\u0275fac = function OrderSidefilterService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _OrderSidefilterService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _OrderSidefilterService, factory: _OrderSidefilterService.\u0275fac, providedIn: "root" });
  }
};

// src/app/components/gigya-market/gigya-market.component.ts
function GigyaMarketComponent_mat_option_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "mat-option", 5);
    \u0275\u0275listener("click", function GigyaMarketComponent_mat_option_4_Template_mat_option_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onChangeGigayMarket());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const market_r3 = ctx.$implicit;
    \u0275\u0275property("value", market_r3.ID);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", market_r3.Name, " ");
  }
}
var GigyaMarketComponent = class _GigyaMarketComponent {
  constructor(commonService, dataService, router) {
    this.commonService = commonService;
    this.dataService = dataService;
    this.router = router;
    this.dsGigyaMarket = [];
    this.apiKey = "";
    const rmvScript = document.getElementById("widget");
    if (rmvScript != null)
      document.head.removeChild(rmvScript);
  }
  ngOnInit() {
    this.selectedMarket = localStorage.SelectedGygyaMarketId != void 0 ? parseInt(localStorage.SelectedGygyaMarketId) : EnmCountry.UnitedStates;
    this.commonService.getGigyaMarketDetails().subscribe((data) => {
      this.dsGigyaMarket = data.ResponseData;
    });
  }
  onChangeGigayMarket() {
    localStorage.setItem("SelectedGygyaMarketId", this.selectedMarket.toString());
    const rmvScript = document.getElementById("widget");
    if (rmvScript != null)
      document.head.removeChild(rmvScript);
    this.apiKey = this.dsGigyaMarket.find((x) => x.ID == this.selectedMarket) != void 0 ? this.dsGigyaMarket.find((x) => x.ID == this.selectedMarket).Key : "";
    localStorage.setItem("APIKey", this.apiKey);
    this.dataService.appData.masterData.APIKey = this.apiKey;
    this.dataService.data.next(this.dataService.appData);
    this.router.navigateByUrl("/glogin");
  }
  static {
    this.\u0275fac = function GigyaMarketComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _GigyaMarketComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Router));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GigyaMarketComponent, selectors: [["app-gigya-market"]], decls: 5, vars: 2, consts: [[1, "signin-outer"], [1, "lang"], ["appearance", "outline", "floatLabel", "always"], ["autocomplete", "off", 3, "ngModelChange", "ngModel"], [3, "value", "click", 4, "ngFor", "ngForOf"], [3, "click", "value"]], template: function GigyaMarketComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "mat-form-field", 2)(3, "mat-select", 3);
        \u0275\u0275twoWayListener("ngModelChange", function GigyaMarketComponent_Template_mat_select_ngModelChange_3_listener($event) {
          \u0275\u0275twoWayBindingSet(ctx.selectedMarket, $event) || (ctx.selectedMarket = $event);
          return $event;
        });
        \u0275\u0275template(4, GigyaMarketComponent_mat_option_4_Template, 2, 2, "mat-option", 4);
        \u0275\u0275elementEnd()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(3);
        \u0275\u0275twoWayProperty("ngModel", ctx.selectedMarket);
        \u0275\u0275advance();
        \u0275\u0275property("ngForOf", ctx.dsGigyaMarket);
      }
    }, dependencies: [NgForOf, MatLegacyFormField, MatLegacySelect, MatLegacyOption, NgControlStatus, NgModel], styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.lang[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 12px;\n  right: 16px;\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n/*# sourceMappingURL=gigya-market.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GigyaMarketComponent, { className: "GigyaMarketComponent", filePath: "src\\app\\components\\gigya-market\\gigya-market.component.ts", lineNumber: 11 });
})();

// src/app/components/refresh-dap/refresh-dap.component.ts
var RefreshDapComponent = class _RefreshDapComponent {
  constructor(commonService) {
    this.commonService = commonService;
    this.status = "";
    if (window.location.host.indexOf("www.zoetisdx.com") == -1) {
      this.commonService.refreshDap().subscribe((data) => {
        if (data.ResponseData.status == "Ok")
          this.status = "Refreshed";
        else
          this.status = data.ResponseData.status;
      }, (err) => {
        console.log(JSON.stringify(err));
        this.commonService.showCommonToastrError();
      });
    } else {
      this.status = "";
    }
  }
  static {
    this.\u0275fac = function RefreshDapComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _RefreshDapComponent)(\u0275\u0275directiveInject(CommonService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RefreshDapComponent, selectors: [["app-refresh-dap"]], decls: 2, vars: 1, template: function RefreshDapComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "p");
        \u0275\u0275text(1);
        \u0275\u0275elementEnd();
      }
      if (rf & 2) {
        \u0275\u0275advance();
        \u0275\u0275textInterpolate(ctx.status);
      }
    } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RefreshDapComponent, { className: "RefreshDapComponent", filePath: "src\\app\\components\\refresh-dap\\refresh-dap.component.ts", lineNumber: 9 });
})();

// src/app/components/internal-banner/internal-banner.component.ts
var InternalBannerComponent = class _InternalBannerComponent {
  constructor() {
    this.newinternalLink = environment.ZdxInternalUrl;
    setTimeout(() => {
      window.location.href = environment.ZdxInternalUrl;
    }, 2e4);
  }
  navToNewUrl() {
    window.location.href = environment.ZdxInternalUrl;
  }
  static {
    this.\u0275fac = function InternalBannerComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _InternalBannerComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _InternalBannerComponent, selectors: [["app-internal-banner"]], decls: 19, vars: 3, consts: [[1, "signin-outer"], [1, "container"], [1, "row", "justify-content-center", "flex-column", "align-items-center"], [1, "col-sm-5"], [1, "card", "card-signin", "my-5", "pt-4", "pb-4"], [1, "card-body"], [1, "text-center", "mb-2"], ["src", "../../../assets/img/logo-login@2x.png", "alt", "img"], [1, "text-center"], [1, "text-center", "in-bnt"], ["src", "../../../assets/img/alert-triangle_banr.svg", "alt", "img"], [1, "text-justify", "int-bnt"], [3, "href"], ["type", "button", 1, "logBtn", 3, "click"]], template: function InternalBannerComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 0)(2, "div", 1)(3, "div", 2)(4, "div", 3)(5, "div", 4)(6, "div", 5)(7, "div", 6);
        \u0275\u0275element(8, "img", 7);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(9, "div", 8)(10, "div", 9);
        \u0275\u0275element(11, "img", 10);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(12, "p", 11);
        \u0275\u0275text(13, " ZoetisDx Internal application has moved to ");
        \u0275\u0275elementStart(14, "a", 12);
        \u0275\u0275text(15);
        \u0275\u0275elementEnd();
        \u0275\u0275text(16, " and the current website will no longer be accessible from January 5th, 2024. You can click directly on the new URL to log in or stay on this page and you will be redirected to the new website. Remember to bookmark & save the new URL! ");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(17, "button", 13);
        \u0275\u0275listener("click", function InternalBannerComponent_Template_button_click_17_listener() {
          return ctx.navToNewUrl();
        });
        \u0275\u0275text(18);
        \u0275\u0275elementEnd()()()()()()()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(14);
        \u0275\u0275propertyInterpolate("href", ctx.newinternalLink, \u0275\u0275sanitizeUrl);
        \u0275\u0275advance();
        \u0275\u0275textInterpolate(ctx.newinternalLink.replace("com/", "com"));
        \u0275\u0275advance(3);
        \u0275\u0275textInterpolate1(" ", ctx.newinternalLink.replace("com/", "com"), " ");
      }
    }, styles: ['\n\n.signin-outer[_ngcontent-%COMP%] {\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-size: cover;\n  background-image: url("./media/background.jpg");\n}\n.card-signin[_ngcontent-%COMP%] {\n  border-radius: 40px;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-position: bottom left;\n  background-size: 390px;\n  box-shadow: 5px 6px 17px 0 rgba(0, 0, 0, 0.11);\n  background-color: #ffffffbf;\n}\n@media (max-width: 1025px) {\n  .card-signin[_ngcontent-%COMP%] {\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n}\n@media only screen and (max-width: 550px) {\n  .card-signin[_ngcontent-%COMP%] {\n    border-radius: 40px;\n    width: 100%;\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    background-size: 390px;\n    box-shadow: none;\n    background-color: transparent;\n    border: none;\n  }\n  .w-75[_ngcontent-%COMP%] {\n    width: 100% !important;\n  }\n  .card-body[_ngcontent-%COMP%] {\n    margin: 0 auto;\n    width: 90%;\n  }\n}\n.card-signin[_ngcontent-%COMP%] {\n  margin-top: 8rem !important;\n}\n.card-body[_ngcontent-%COMP%] {\n  margin: 0 auto;\n  width: 80%;\n}\n.in-bnt[_ngcontent-%COMP%] {\n  margin: 2rem 0;\n}\n.logBtn[_ngcontent-%COMP%] {\n  background: #f65c00;\n  border: 1px solid #f65c00;\n  color: #fff;\n  width: 90%;\n}\n.int-bnt[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  color: #2a85ff !important;\n}\n.int-bnt[_ngcontent-%COMP%] {\n  font-size: 15px;\n  font-weight: 600;\n}\n/*# sourceMappingURL=internal-banner.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(InternalBannerComponent, { className: "InternalBannerComponent", filePath: "src\\app\\components\\internal-banner\\internal-banner.component.ts", lineNumber: 9 });
})();

// src/app/components/pagenotfound/pagenotfound.component.ts
var PagenotfoundComponent = class _PagenotfoundComponent {
  static {
    this.\u0275fac = function PagenotfoundComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _PagenotfoundComponent)();
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _PagenotfoundComponent, selectors: [["app-pagenotfound"]], decls: 6, vars: 0, consts: [[1, "wrap-container"], [1, "text-center"], ["data-testid", "nf-title"]], template: function PagenotfoundComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "h6");
        \u0275\u0275text(3, "404");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "h6", 2);
        \u0275\u0275text(5, "Page not found.");
        \u0275\u0275elementEnd()()();
      }
    }, styles: ["\n\n.wrap-container[_ngcontent-%COMP%] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n/*# sourceMappingURL=pagenotfound.component.css.map */"] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(PagenotfoundComponent, { className: "PagenotfoundComponent", filePath: "src\\app\\components\\pagenotfound\\pagenotfound.component.ts", lineNumber: 8 });
})();

// src/app/services/error-handler.service.ts
var ErrorHandlerService = class _ErrorHandlerService extends ErrorHandler {
  constructor(myMonitoringService) {
    super();
    this.myMonitoringService = myMonitoringService;
  }
  handleError(error) {
    console.log("Custom", error);
    if (environment.production)
      this.myMonitoringService.logException(error);
  }
  static {
    this.\u0275fac = function ErrorHandlerService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ErrorHandlerService)(\u0275\u0275inject(MyMonitoringService));
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ErrorHandlerService, factory: _ErrorHandlerService.\u0275fac, providedIn: "root" });
  }
};

// src/app/components/patient-managements/consultation-list/consultation-report/consultation-report.component.ts
var ConsultationReportComponent = class _ConsultationReportComponent {
  constructor(modalRef) {
    this.modalRef = modalRef;
  }
  closeModal() {
    this.modalRef.close();
  }
  static {
    this.\u0275fac = function ConsultationReportComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ConsultationReportComponent)(\u0275\u0275directiveInject(DialogRef));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ConsultationReportComponent, selectors: [["app-consultation-report"]], decls: 9, vars: 0, consts: [["mat-dialog-title", ""], ["role", "toolbar", 1, "task-header"], ["data-testid", "mp-title", 1, "dialogttl"], ["type", "button", "aria-label", "Close", 1, "close", "body-close", 3, "click"], ["aria-hidden", "true"], ["mat-dialog-content", ""], ["src", "../../../../../assets/img/zcs/report.png", "alt", "", 2, "width", "100%", "height", "100%"]], template: function ConsultationReportComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "h4", 0)(1, "mat-toolbar", 1)(2, "span", 2);
        \u0275\u0275text(3, " Report");
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(4, "button", 3);
        \u0275\u0275listener("click", function ConsultationReportComponent_Template_button_click_4_listener() {
          return ctx.closeModal();
        });
        \u0275\u0275elementStart(5, "span", 4);
        \u0275\u0275text(6, "\xD7");
        \u0275\u0275elementEnd()()()();
        \u0275\u0275elementStart(7, "div", 5);
        \u0275\u0275element(8, "img", 6);
        \u0275\u0275elementEnd();
      }
    }, dependencies: [MatToolbar, MatLegacyDialogTitle, MatLegacyDialogContent], styles: ['\n\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.mat-form-field[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]) {\n  box-shadow: none;\n}\n.mat-expansion-panel[_ngcontent-%COMP%] {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.patient-table[_ngcontent-%COMP%] {\n  width: 99%;\n}\n.mat-card[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled).active, \n.btn-secondary[_ngcontent-%COMP%]:not(:disabled):not(.disabled):active, \n.show[_ngcontent-%COMP%]    > .btn-secondary.dropdown-toggle[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n.btn-secondary[_ngcontent-%COMP%] {\n  min-width: 124px;\n}\n.btn-group-toggle[_ngcontent-%COMP%]   .btn-secondary[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #a1a1a1;\n  border-color: transparent;\n  border-radius: 5px !important;\n  padding: 5px 8px;\n  font-size: 13.5px;\n  font-weight: 400;\n}\n.example-container[_ngcontent-%COMP%] {\n  height: 400px;\n  padding: 12px;\n  overflow: auto;\n}\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\n.select-outer[_ngcontent-%COMP%] {\n  float: right;\n}\n.heading[_ngcontent-%COMP%] {\n  margin: 0;\n  font-size: 22px;\n  font-weight: 400;\n}\n.color1[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.completed[_ngcontent-%COMP%] {\n  background: #0eab1c;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.pending[_ngcontent-%COMP%] {\n  background: #969696;\n  height: 28px !important;\n  display: inline-block;\n  align-items: flex-end;\n  vertical-align: middle;\n  width: 5px;\n  margin-right: 17px;\n}\n.sort[_ngcontent-%COMP%] {\n  width: 170px;\n  float: right;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.sort-text[_ngcontent-%COMP%] {\n  min-width: 70px;\n  font-size: 11px;\n  margin-right: 5px;\n  text-align: right;\n}\n.sort[_ngcontent-%COMP%]   .mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\n  padding: 1px 2px 6px 1px !important;\n  font-size: 12px;\n}\n.sort[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  background-color: #fd6400;\n}\n.right-filter[_ngcontent-%COMP%]   .mat-raised-button.mat-warn[_ngcontent-%COMP%] {\n  box-shadow: 0 0 6px 1px rgba(255, 100, 0, 0.29) !important;\n  background-color: #ff6400 !important;\n  min-width: 161px;\n}\n.any-src[_ngcontent-%COMP%] {\n  padding-right: 16px;\n  text-align: left;\n  white-space: nowrap;\n}\n.synch[_ngcontent-%COMP%] {\n  font-size: 12px;\n  margin-right: 15px;\n}\n.all[_ngcontent-%COMP%] {\n  margin-left: 13px;\n  font-weight: bold;\n  font-size: 14px;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.head1[_ngcontent-%COMP%] {\n  text-align: left !important;\n  font-size: 17px;\n}\n.patient-name[_ngcontent-%COMP%] {\n  font-weight: 400;\n  color: #0075bc;\n  font-family: "GothamNarrowBold", sans-serif;\n}\n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(2), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(2).example-container   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-of-type(3), \n.example-container[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(3) {\n  min-width: 98px !important;\n}\n.imgouter[_ngcontent-%COMP%] {\n  width: 42px;\n  text-align: center;\n}\n.norecord[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  border: 1px solid #ccc9;\n  border-top: transparent;\n  background-color: #fbfbfb;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  padding-right: 12px;\n}\n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child, \n.example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  max-width: 150px;\n  width: 100px;\n  white-space: nowrap;\n  text-align: left;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child {\n  border-radius: 5px 0 0 0px !important;\n}\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:last-child {\n  border-radius: 0px 5px 0 0px !important;\n}\n.example-container1[_ngcontent-%COMP%] {\n  height: calc(100vh - 20px);\n  position: relative;\n  z-index: 0;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 20px;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n.ipadfiler[_ngcontent-%COMP%] {\n  display: none;\n}\n.example-sidenav[_ngcontent-%COMP%] {\n  padding: 0;\n}\n.dashboard-wrapper[_ngcontent-%COMP%] {\n  padding-left: 0 !important;\n}\n@media (max-width: 1025px) {\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 12px !important;\n    padding-right: 12px !important;\n  }\n  .btn-secondary[_ngcontent-%COMP%] {\n    min-width: auto;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    flex-direction: row;\n    padding-right: 0 !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .example-sidenav[_ngcontent-%COMP%] {\n    padding: 0;\n  }\n  .mat-card[_ngcontent-%COMP%] {\n    border-radius: 10px !important;\n  }\n  .ipadfiler[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n    min-width: 75px;\n    padding: 0;\n    margin-left: 0;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 8%;\n  }\n}\n.plist-date[_ngcontent-%COMP%] {\n  font-size: 11px;\n  word-break: break-all;\n  white-space: normal;\n  text-align: left;\n  display: block;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 106px !important;\n  word-break: break-all !important;\n}\n.mat-row[_ngcontent-%COMP%]:hover {\n  background-color: whitesmoke !important;\n}\ntd.mat-cell[_ngcontent-%COMP%] {\n  cursor: default !important;\n}\ni.filtertxt[_ngcontent-%COMP%] {\n  color: #ED8B00 !important;\n  font-style: normal;\n  font-size: 16px;\n  margin-left: 5px;\n}\n@media screen and (min-width:768px) {\n  th.mat-header-cell[_ngcontent-%COMP%] {\n    white-space: nowrap !important;\n    padding-right: 23px !important;\n  }\n}\n.m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n  display: none;\n}\n@media screen and (max-width: 767px) {\n  table[_ngcontent-%COMP%], \n   thead[_ngcontent-%COMP%], \n   tbody[_ngcontent-%COMP%], \n   th[_ngcontent-%COMP%], \n   td[_ngcontent-%COMP%], \n   tr[_ngcontent-%COMP%] {\n    display: inline-block;\n  }\n  .radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n    line-height: 1.5;\n  }\n  .number-tab[_ngcontent-%COMP%] {\n    margin-bottom: 15px;\n  }\n    .mat-dialog-container {\n    background: #f0eff4;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child {\n    position: absolute;\n    right: -120px;\n    top: -3px;\n    z-index: 9999;\n  }\n    .cdk-overlay-pane {\n    min-width: initial !important;\n    max-width: 96vw !important;\n    width: 100% !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-of-type(4) {\n    max-width: 100% !important;\n  }\n    .modal-dialog {\n    padding: 0 15px;\n  }\n  .title-card[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .page-title[_ngcontent-%COMP%] {\n    padding: 0;\n    font-size: 17px;\n  }\n  .m-card[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\n    display: block;\n  }\n  table[_ngcontent-%COMP%] {\n    width: 100%;\n  }\n  thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -9999px;\n    left: -9999px;\n  }\n  tr[_ngcontent-%COMP%] {\n    border: none;\n  }\n  td[_ngcontent-%COMP%] {\n    border: none;\n    border-bottom: 1px solid #eee;\n    position: relative;\n    padding-left: 50%;\n  }\n  td[_ngcontent-%COMP%]   span.textTtl[_ngcontent-%COMP%] {\n    display: inline-block !important;\n    position: absolute;\n    top: 50%;\n    left: 25px;\n    width: 45%;\n    padding-right: 10px;\n    white-space: nowrap;\n    transform: translate(0, -50%);\n    font-weight: bold;\n    color: #000;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    height: 100%;\n    margin-bottom: 25px;\n    position: relative;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\n    border: none;\n    margin-bottom: 20px;\n    border-radius: 10px;\n    width: 100%;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n  }\n  .example-sidenav-content[_ngcontent-%COMP%] {\n    background: #ececef;\n  }\n  .mat-table[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  tr.mat-header-row[_ngcontent-%COMP%] {\n    height: 0 !important;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .btn-toggle[_ngcontent-%COMP%]:after {\n    width: 5rem;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    padding-left: 50% !important;\n    text-align: left !important;\n    height: 45px;\n    line-height: 12px;\n    padding-top: 15px;\n    padding-right: 15px;\n    border: none;\n  }\n  table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    padding-top: 5px;\n  }\n  .example-container[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child {\n    max-width: 100%;\n  }\n  .mat-table[_ngcontent-%COMP%], \n   .dashboard[_ngcontent-%COMP%]   .mat-card[_ngcontent-%COMP%] {\n    background: transparent;\n  }\n  .toprow[_ngcontent-%COMP%] {\n    background: #fff;\n    box-shadow: 0 0 12px 0 rgb(0 0 0 / 19%) !important;\n    padding-bottom: 0.5rem !important;\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    border-top: 2px solid #ccc;\n    padding-left: 20% !important;\n  }\n  .example-container1[_ngcontent-%COMP%] {\n    margin-top: 0;\n  }\n  .dashboard-wrapper[_ngcontent-%COMP%] {\n    padding-left: 0px !important;\n    padding-right: 0px !important;\n  }\n  .norecord[_ngcontent-%COMP%] {\n    background-color: #ffffff !important;\n    border-radius: 10px !important;\n    box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n  }\n  .norecord[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    width: 100% !important;\n    text-align: center;\n    border: none;\n  }\n  .sidefilter[_ngcontent-%COMP%]   .head1[_ngcontent-%COMP%] {\n    padding-left: 23%;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]::before {\n    display: none;\n  }\n  .norecord[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n    padding-left: 0 !important;\n  }\n  .example-container[_ngcontent-%COMP%] {\n    height: calc(100vh - 335px);\n    padding: 0px 6px 0 6px !important;\n    overflow-y: scroll;\n    overflow-x: hidden;\n  }\n  .patient-table[_ngcontent-%COMP%]   td.mat-cell[_ngcontent-%COMP%]:first-of-type, \n   .patient-table[_ngcontent-%COMP%]   td.mat-footer-cell[_ngcontent-%COMP%]:first-of-type {\n    font-family: "gothambook", sans-serif !important;\n  }\n  .rowpart[_ngcontent-%COMP%] {\n    flex-direction: column-reverse;\n  }\n  .rowpart[_ngcontent-%COMP%]   .number-tab[_ngcontent-%COMP%] {\n    min-width: 100%;\n  }\n  .rowpart[_ngcontent-%COMP%]   .md-stepper-horizontal[_ngcontent-%COMP%] {\n    background: transparent;\n    padding-bottom: 0 !important;\n  }\n  .nopad[_ngcontent-%COMP%] {\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .labelpart[_ngcontent-%COMP%], \n   .txtpart[_ngcontent-%COMP%] {\n    padding-top: 20px;\n  }\n}\n@media screen and (min-width: 768px) and (max-width:1024px) {\n  .example-container[_ngcontent-%COMP%] {\n    overflow: scroll;\n  }\n}\n.left-block[_ngcontent-%COMP%] {\n  height: auto !important;\n}\n  .mat-dialog-title {\n  margin-top: 0 !important;\n  margin-bottom: 0 !important;\n}\n  .mat-toolbar {\n  background-color: #1072ce;\n  color: #fff;\n  text-align: center;\n  justify-content: center;\n  position: relative;\n}\n  .mat-dialog-container {\n  padding: 0 !important;\n  overflow: hidden;\n}\n  .mat-dialog-content {\n  margin: 0 20px 0 0;\n  padding: 0px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%] {\n  display: table;\n  width: 100%;\n  margin: 0 auto;\n  background-color: #FFFFFF;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%] {\n  display: table-cell;\n  position: relative;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:active {\n  border-radius: 15% / 75%;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child:active {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child:active {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:hover {\n  cursor: pointer;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:first-child   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]:last-child   .md-step-bar-right[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  width: 30px;\n  height: 30px;\n  margin: 0 auto;\n  background-color: #fff;\n  border-radius: 50%;\n  text-align: center;\n  line-height: 30px;\n  font-size: 13px;\n  font-weight: 600;\n  color: rgb(44, 41, 41);\n  border: 1px solid #ccc;\n}\n.md-stepper-horizontal.green[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #00AE4D;\n}\n.md-stepper-horizontal.orange[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: #1072ce;\n  color: #fff;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  background-color: rgb(33, 150, 243);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f00c";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.done[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\n  display: none;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%] {\n  -moz-transform: scaleX(-1);\n  -o-transform: scaleX(-1);\n  -webkit-transform: scaleX(-1);\n  transform: scaleX(-1);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.editable[_ngcontent-%COMP%]   .md-step-circle[_ngcontent-%COMP%]:before {\n  font-family: "FontAwesome", sans-serif;\n  font-weight: 100;\n  content: "\\f040";\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  margin-top: 16px;\n  font-size: 16px;\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  text-align: center;\n  color: rgba(0, 0, 0, .26);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n  color: rgba(0, 0, 0, .87);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.done[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active.editable[_ngcontent-%COMP%]   .md-step-title[_ngcontent-%COMP%] {\n  font-weight: 600;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  font-size: 12px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step.active[_ngcontent-%COMP%]   .md-step-optional[_ngcontent-%COMP%] {\n  color: rgba(0, 0, 0, .54);\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%], \n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 14px;\n  height: 1px;\n  border-top: 1px solid #DDDDDD;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-right[_ngcontent-%COMP%] {\n  right: 0;\n  left: 50%;\n  margin-left: 20px;\n}\n.md-stepper-horizontal[_ngcontent-%COMP%]   .md-step[_ngcontent-%COMP%]   .md-step-bar-left[_ngcontent-%COMP%] {\n  left: 0;\n  right: 50%;\n  margin-right: 20px;\n}\nbutton.refbtn[_ngcontent-%COMP%] {\n  background: #f65c00;\n  color: #fff;\n  border: 1px solid #f65c00;\n  padding: 0 15px;\n}\n  .mat-dialog-actions {\n  justify-content: center;\n  margin-bottom: 30px;\n}\n  .mat-form-field-appearance-outline .mat-form-field-wrapper {\n  margin: 0 !important;\n}\n  .example-container {\n  margin: 0 !important;\n  padding: 0 !important;\n}\n  .mat-form-field-wrapper {\n  padding-bottom: 0 !important;\n}\n.checkbox-custom[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%] {\n  opacity: 0;\n  position: absolute;\n}\n.checkbox-custom[_ngcontent-%COMP%]    + .checkbox-custom-label[_ngcontent-%COMP%]:before, \n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "";\n  background: #fff;\n  display: inline-block;\n  vertical-align: middle;\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  text-align: center;\n}\n.checkbox-custom[_ngcontent-%COMP%]:checked    + .checkbox-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\f00c";\n  font-family: "FontAwesome", sans-serif;\n  background: rebeccapurple;\n  color: #fff;\n}\n.radio-custom[_ngcontent-%COMP%]    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  border-radius: 50%;\n}\n.radio-custom[_ngcontent-%COMP%]:checked    + .radio-custom-label[_ngcontent-%COMP%]:before {\n  content: "\\2713";\n  color: #fff;\n  background: green;\n}\n.checkbox-custom[_ngcontent-%COMP%]:focus    + .checkbox-custom-label[_ngcontent-%COMP%], \n.radio-custom[_ngcontent-%COMP%]:focus    + .radio-custom-label[_ngcontent-%COMP%] {\n  outline: 1px solid #ddd;\n}\n  .modal-header.mgp {\n  background: none !important;\n  border: none !important;\n}\n  .modal-content {\n  border: none;\n  -webkit-box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n  -moz-box-shadow: -2px 3px 15px 0px rgba(0, 0, 0, 0.5);\n  box-shadow: -2px 3px 15px 0px rgb(0 0 0 / 50%);\n}\n  .confirm-modal {\n  max-height: 500px;\n  overflow: hidden;\n}\n  .cdk-overlay-pane {\n  min-width: 400px;\n}\ntd.mat-cell[_ngcontent-%COMP%]:first-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:first-of-type {\n  min-width: 0 !important;\n  width: 50px !important;\n}\n  .modal {\n  z-index: 10010 !important;\n}\n  .modal-backdrop {\n  z-index: 10000 !important;\n}\np[_ngcontent-%COMP%] {\n  padding: 0;\n  margin: 0;\n}\n.col-form-label_heading[_ngcontent-%COMP%] {\n  font-weight: bolder;\n}\n.close[_ngcontent-%COMP%] {\n  color: #fff !important;\n  position: absolute;\n  float: right;\n  right: 10px;\n  top: 10px;\n}\n/*# sourceMappingURL=consultation-report.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ConsultationReportComponent, { className: "ConsultationReportComponent", filePath: "src\\app\\components\\patient-managements\\consultation-list\\consultation-report\\consultation-report.component.ts", lineNumber: 9 });
})();

// src/app/app.module.ts
var AppModule = class _AppModule {
  constructor(common) {
    this.common = common;
    this.common.SetLocaleForDate();
  }
  static {
    this.\u0275fac = function AppModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AppModule)(\u0275\u0275inject(CommonService));
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppModule, bootstrap: [AppComponent] });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ providers: [
      CommonService,
      HeaderService,
      PatientService,
      FuseService,
      ConfirmationDialogService,
      authInterceptorProviders,
      SidenavService,
      UserService,
      LabelService,
      AlertService,
      SidefilterService,
      OrderSidefilterService,
      SidemenuService,
      AutoLogoutService,
      AutoRefreshService,
      { provide: MAT_DATE_FORMATS, useValue: DateFormats },
      { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },
      ScriptLoaderService,
      { provide: ErrorHandler, useClass: ErrorHandlerService },
      provideHttpClient(withInterceptorsFromDi(), withJsonpSupport())
    ], imports: [
      BrowserModule,
      AppRoutingModule,
      BrowserAnimationsModule,
      MatModule,
      HeaderModule,
      SideMenuModule,
      SideFilterModule,
      FormsModule,
      ReactiveFormsModule,
      NgImageSliderModule,
      NgHttpLoaderModule.forRoot(),
      NgbModule,
      DirectivesModule,
      pipeModule,
      MatDatepickerModule,
      AddUserModule,
      FormsModule,
      AngularEditorModule,
      PdfViewerModule,
      FcrComponent,
      ToastrModule.forRoot({
        timeOut: 3e3,
        positionClass: "toast-top-right",
        preventDuplicates: true
      }),
      QuillModule.forRoot()
    ] });
  }
};

// src/app/modules/cvet/cvet.model.ts
var Token = class {
};

// node_modules/ts-mixer/dist/esm/index.js
var copyProps = (dest, src, exclude = []) => {
  const props = Object.getOwnPropertyDescriptors(src);
  for (let prop of exclude) delete props[prop];
  Object.defineProperties(dest, props);
};
var protoChain = (obj, currentChain = [obj]) => {
  const proto = Object.getPrototypeOf(obj);
  if (proto === null) return currentChain;
  return protoChain(proto, [...currentChain, proto]);
};
var nearestCommonProto = (...objs) => {
  if (objs.length === 0) return void 0;
  let commonProto = void 0;
  const protoChains = objs.map((obj) => protoChain(obj));
  while (protoChains.every((protoChain2) => protoChain2.length > 0)) {
    const protos = protoChains.map((protoChain2) => protoChain2.pop());
    const potentialCommonProto = protos[0];
    if (protos.every((proto) => proto === potentialCommonProto)) commonProto = potentialCommonProto;
    else break;
  }
  return commonProto;
};
var hardMixProtos = (ingredients, constructor, exclude = []) => {
  var _a;
  const base = (_a = nearestCommonProto(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;
  const mixedProto = Object.create(base);
  const visitedProtos = protoChain(base);
  for (let prototype of ingredients) {
    let protos = protoChain(prototype);
    for (let i = protos.length - 1; i >= 0; i--) {
      let newProto = protos[i];
      if (visitedProtos.indexOf(newProto) === -1) {
        copyProps(mixedProto, newProto, ["constructor", ...exclude]);
        visitedProtos.push(newProto);
      }
    }
  }
  mixedProto.constructor = constructor;
  return mixedProto;
};
var unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);
var getIngredientWithProp = (prop, ingredients) => {
  const protoChains = ingredients.map((ingredient) => protoChain(ingredient));
  let protoDepth = 0;
  let protosAreLeftToSearch = true;
  while (protosAreLeftToSearch) {
    protosAreLeftToSearch = false;
    for (let i = ingredients.length - 1; i >= 0; i--) {
      const searchTarget = protoChains[i][protoDepth];
      if (searchTarget !== void 0 && searchTarget !== null) {
        protosAreLeftToSearch = true;
        if (Object.getOwnPropertyDescriptor(searchTarget, prop) != void 0) {
          return protoChains[i][0];
        }
      }
    }
    protoDepth++;
  }
  return void 0;
};
var proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {
  getPrototypeOf() {
    return prototype;
  },
  setPrototypeOf() {
    throw Error("Cannot set prototype of Proxies created by ts-mixer");
  },
  getOwnPropertyDescriptor(_, prop) {
    return Object.getOwnPropertyDescriptor(getIngredientWithProp(prop, ingredients) || {}, prop);
  },
  defineProperty() {
    throw new Error("Cannot define new properties on Proxies created by ts-mixer");
  },
  has(_, prop) {
    return getIngredientWithProp(prop, ingredients) !== void 0 || prototype[prop] !== void 0;
  },
  get(_, prop) {
    return (getIngredientWithProp(prop, ingredients) || prototype)[prop];
  },
  set(_, prop, val) {
    const ingredientWithProp = getIngredientWithProp(prop, ingredients);
    if (ingredientWithProp === void 0) throw new Error("Cannot set new properties on Proxies created by ts-mixer");
    ingredientWithProp[prop] = val;
    return true;
  },
  deleteProperty() {
    throw new Error("Cannot delete properties on Proxies created by ts-mixer");
  },
  ownKeys() {
    return ingredients.map(Object.getOwnPropertyNames).reduce((prev, curr) => curr.concat(prev.filter((key) => curr.indexOf(key) < 0)));
  }
});
var softMixProtos = (ingredients, constructor) => proxyMix([...ingredients, {
  constructor
}]);
var settings = {
  initFunction: null,
  staticsStrategy: "copy",
  prototypeStrategy: "copy",
  decoratorInheritance: "deep"
};
var mixins = /* @__PURE__ */ new WeakMap();
var getMixinsForClass = (clazz) => mixins.get(clazz);
var registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);
var mergeObjectsOfDecorators = (o1, o2) => {
  var _a, _b;
  const allKeys = unique([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);
  const mergedObject = {};
  for (let key of allKeys) mergedObject[key] = unique([...(_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : [], ...(_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : []]);
  return mergedObject;
};
var mergePropertyAndMethodDecorators = (d1, d2) => {
  var _a, _b, _c, _d;
  return {
    property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),
    method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {})
  };
};
var mergeDecorators = (d1, d2) => {
  var _a, _b, _c, _d, _e, _f;
  return {
    class: unique([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),
    static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),
    instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {})
  };
};
var decorators = /* @__PURE__ */ new Map();
var findAllConstituentClasses = (...classes) => {
  var _a;
  const allClasses = /* @__PURE__ */ new Set();
  const frontier = /* @__PURE__ */ new Set([...classes]);
  while (frontier.size > 0) {
    for (let clazz of frontier) {
      const protoChainClasses = protoChain(clazz.prototype).map((proto) => proto.constructor);
      const mixinClasses = (_a = getMixinsForClass(clazz)) !== null && _a !== void 0 ? _a : [];
      const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];
      const newClasses = potentiallyNewClasses.filter((c) => !allClasses.has(c));
      for (let newClass of newClasses) frontier.add(newClass);
      allClasses.add(clazz);
      frontier.delete(clazz);
    }
  }
  return [...allClasses];
};
var deepDecoratorSearch = (...classes) => {
  const decoratorsForClassChain = findAllConstituentClasses(...classes).map((clazz) => decorators.get(clazz)).filter((decorators2) => !!decorators2);
  if (decoratorsForClassChain.length == 0) return {};
  if (decoratorsForClassChain.length == 1) return decoratorsForClassChain[0];
  return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));
};
var directDecoratorSearch = (...classes) => {
  const classDecorators = classes.map((clazz) => getDecoratorsForClass(clazz));
  if (classDecorators.length === 0) return {};
  if (classDecorators.length === 1) return classDecorators[0];
  return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));
};
var getDecoratorsForClass = (clazz) => {
  let decoratorsForClass = decorators.get(clazz);
  if (!decoratorsForClass) {
    decoratorsForClass = {};
    decorators.set(clazz, decoratorsForClass);
  }
  return decoratorsForClass;
};
function Mixin(...constructors) {
  var _a, _b, _c;
  const prototypes = constructors.map((constructor) => constructor.prototype);
  const initFunctionName = settings.initFunction;
  if (initFunctionName !== null) {
    const initFunctions = prototypes.map((proto) => proto[initFunctionName]).filter((func) => typeof func === "function");
    const combinedInitFunction = function(...args) {
      for (let initFunction of initFunctions) initFunction.apply(this, args);
    };
    const extraProto = {
      [initFunctionName]: combinedInitFunction
    };
    prototypes.push(extraProto);
  }
  function MixedClass(...args) {
    for (const constructor of constructors)
      copyProps(this, new constructor(...args));
    if (initFunctionName !== null && typeof this[initFunctionName] === "function") this[initFunctionName].apply(this, args);
  }
  MixedClass.prototype = settings.prototypeStrategy === "copy" ? hardMixProtos(prototypes, MixedClass) : softMixProtos(prototypes, MixedClass);
  Object.setPrototypeOf(MixedClass, settings.staticsStrategy === "copy" ? hardMixProtos(constructors, null, ["prototype"]) : proxyMix(constructors, Function.prototype));
  let DecoratedMixedClass = MixedClass;
  if (settings.decoratorInheritance !== "none") {
    const classDecorators = settings.decoratorInheritance === "deep" ? deepDecoratorSearch(...constructors) : directDecoratorSearch(...constructors);
    for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {
      const result = decorator(DecoratedMixedClass);
      if (result) {
        DecoratedMixedClass = result;
      }
    }
    applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);
    applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);
  }
  registerMixins(DecoratedMixedClass, constructors);
  return DecoratedMixedClass;
}
var applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {
  const propDecorators = propAndMethodDecorators.property;
  const methodDecorators = propAndMethodDecorators.method;
  if (propDecorators) for (let key in propDecorators) for (let decorator of propDecorators[key]) decorator(target, key);
  if (methodDecorators) for (let key in methodDecorators) for (let decorator of methodDecorators[key]) decorator(target, key, Object.getOwnPropertyDescriptor(target, key));
};

// src/app/modules/cvet/cvet.service.ts
var CvetService = class extends Mixin(DataService, PatientService, RefLabService, HeaderService, CommonService) {
  auth(data) {
    const uiguid = this.generateGuid();
    this.appData.deviceId = uiguid;
    const token = new Token();
    token.deviceId = uiguid;
    token.deviceType = "EXTL";
    token.Guid = data.GUID;
    token.languageId = 1;
    token.username = "Test";
    localStorage.setItem("UIGuid", uiguid);
    this.data.next(this.appData);
    const testParams = {
      username: "SHiKNSMHesPt/jaCfgPW4PGYI+FFbeQiEff6wk+IFiI=",
      deviceId: uiguid,
      deviceType: "web",
      languageId: 1,
      gigyaUID: "d8d90cde-746f-48d2-a2fd-b8dcfc16d5fa"
    };
    return this.http.post(ApiSetting.loginAuth, token);
  }
};

// src/app/modules/cvet/messages.ts
var MESSAGES = class {
  static {
    this.AUTHENTICATING = "Authenticating...";
  }
  static {
    this.REDIRECTING = "Redirecting...";
  }
  static {
    this.TRYAGAIN = "Try Again";
  }
  static {
    this.AUTH_ERROR = "Authentication error! Please try again.";
  }
  static {
    this.REDIRECTION_ERROR = "Redirection error! Please try again.";
  }
  static {
    this.NO_RECORD = "No record found! Please try again.";
  }
  static {
    this.ERROR_FETCHING = "Error while fetching data! Please try again.";
  }
};

// src/app/modules/cvet/zdx-deep-link/zdx-deep-link.component.ts
function ZdxDeepLinkComponent_button_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 7);
    \u0275\u0275listener("click", function ZdxDeepLinkComponent_button_8_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.tryAgain());
    });
    \u0275\u0275text(1, " Try Again ");
    \u0275\u0275elementEnd();
  }
}
var ZdxDeepLinkComponent = class _ZdxDeepLinkComponent {
  constructor(router, activeRoute, appRef, cvetService, storage, dataService) {
    this.router = router;
    this.activeRoute = activeRoute;
    this.appRef = appRef;
    this.cvetService = cvetService;
    this.storage = storage;
    this.dataService = dataService;
    this.loadingText = MESSAGES.AUTHENTICATING;
    this.tryAgainFlag = false;
    this.storage.clearAll();
    this.storage.init();
  }
  ngOnInit() {
    this.activeRoute.params.subscribe((params) => __async(this, null, function* () {
      const source = params.OAID.indexOf("I-") !== -1 ? "InClinic" : "ReferenceLab";
      const finalParams = __spreadValues(__spreadValues(__spreadValues({}, params), { Source: source }), { OAID: params.OAID.replace("I-", "").replace("R-", "") });
      this.params = finalParams;
      this.storage.set("params", finalParams);
      try {
        yield this.secureLogin(params);
      } catch (error) {
        this.loadingText = MESSAGES.AUTH_ERROR;
      }
    }));
  }
  // bootstrapApp() {
  //   const app = document.getElementById("zdxApp");
  //   app.innerHTML = "<app-root></app-root>";
  //   this.appRef.bootstrap(AppComponent);
  //   return this;
  // }
  secureLogin(params) {
    return __async(this, null, function* () {
      this.loadingText = MESSAGES.AUTHENTICATING;
      return this.cvetService.auth(params).subscribe((data) => __async(this, null, function* () {
        this.loadingText = MESSAGES.REDIRECTING;
        this.dataService.appData.authDetails = data;
        this.dataService.data.next(this.dataService.appData);
        try {
          yield this.cvetService.setAuthSession(data);
        } catch (error) {
          this.loadingText = MESSAGES.NO_RECORD;
          return false;
        }
        try {
          this.navigateToResultDetails();
        } catch (error) {
          this.loadingText = MESSAGES.REDIRECTION_ERROR;
        }
      }), () => {
        this.loadingText = MESSAGES.AUTH_ERROR;
      });
    });
  }
  navigateToResultDetails() {
    this.router.navigateByUrl(`${environment.CvetPATH}/result-details`);
  }
  static {
    this.\u0275fac = function ZdxDeepLinkComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ZdxDeepLinkComponent)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(ApplicationRef), \u0275\u0275directiveInject(CvetService), \u0275\u0275directiveInject(CvetStorage), \u0275\u0275directiveInject(DataService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ZdxDeepLinkComponent, selectors: [["app-zdx-deep-link"]], decls: 9, vars: 2, consts: [[1, "row", "col-12", 2, "display", "flex", "justify-content", "center", "align-items", "center", "height", "100%"], [1, "loader-container"], [1, "loader-section"], [1, "loader"], ["id", "logo-inside-loader", "src", "./assets/img/logo-header@2x.png", "alt", ""], [1, "text-section"], ["class", "w-50 g-btn mt-2", "mat-raised-button", "", "color", "warn", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "warn", 1, "w-50", "g-btn", "mt-2", 3, "click"]], template: function ZdxDeepLinkComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2);
        \u0275\u0275element(3, "div", 3)(4, "img", 4);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(5, "div", 5)(6, "span");
        \u0275\u0275text(7);
        \u0275\u0275elementEnd();
        \u0275\u0275template(8, ZdxDeepLinkComponent_button_8_Template, 2, 0, "button", 6);
        \u0275\u0275elementEnd()()();
      }
      if (rf & 2) {
        \u0275\u0275advance(7);
        \u0275\u0275textInterpolate1(" ", ctx.loadingText, " ");
        \u0275\u0275advance();
        \u0275\u0275property("ngIf", ctx.tryAgainFlag);
      }
    }, dependencies: [NgIf, MatLegacyButton], styles: ['\n\n.loader[_ngcontent-%COMP%] {\n  width: 160px;\n  height: 160px;\n  border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  background:\n    linear-gradient(\n      0deg,\n      rgba(255, 61, 0, 0.2) 33%,\n      #ff3d00 100%);\n  box-sizing: border-box;\n  animation: _ngcontent-%COMP%_rotation 1s linear infinite;\n}\n.loader[_ngcontent-%COMP%]::after {\n  content: "";\n  box-sizing: border-box;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 157px;\n  height: 157px;\n  border-radius: 50%;\n  background: #fff;\n}\n@keyframes _ngcontent-%COMP%_rotation {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n#logo-inside-loader[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 65px;\n  left: 55px;\n}\n.loader-container[_ngcontent-%COMP%] {\n  width: 250px;\n  height: 160px;\n  position: relative;\n  text-align: center;\n}\n.text-section[_ngcontent-%COMP%] {\n  text-align: center;\n  font-size: 15px;\n  color: #939393;\n  font-weight: bold;\n  font-family: serif;\n}\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\n/*# sourceMappingURL=zdx-deep-link.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ZdxDeepLinkComponent, { className: "ZdxDeepLinkComponent", filePath: "src\\app\\modules\\cvet\\zdx-deep-link\\zdx-deep-link.component.ts", lineNumber: 18 });
})();

// src/app/modules/cvet/results/results.component.ts
var _c029 = () => ["expandedDetail"];
var _c122 = (a0, a1, a2) => ({ completed: a0, cancelled: a1, pending: a2 });
var _c211 = (a0) => ({ "font-weight": a0 });
function ResultsComponent_th_21_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 34);
    \u0275\u0275text(1, "Date & Time");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 35)(1, "span", 36);
    \u0275\u0275text(2, "Date & Time");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "span", 37);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r2 = ctx.$implicit;
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction3(3, _c122, element_r2.AnalysisStatusId === 1, element_r2.AnalysisStatusId === 2, element_r2.AnalysisStatusId === 3));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction1(7, _c211, element_r2.ViewedFlag ? "normal" : "bold"));
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r2.DateReceivedStr, "");
  }
}
function ResultsComponent_th_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 34);
    \u0275\u0275text(1, "Doctor");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 38);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r3 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r3.PhysicianName, " ");
  }
}
function ResultsComponent_th_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 34);
    \u0275\u0275text(1, "Analysis Source");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_28_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 38);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r4.AnalysisSourceName, " ");
  }
}
function ResultsComponent_th_30_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 39);
    \u0275\u0275text(1, "Analysis Type");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 40);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r5 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r5.AnalysisTypeName, " ");
  }
}
function ResultsComponent_th_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 34);
    \u0275\u0275text(1, "Accession ID");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 38);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r6 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", element_r6.AccessionNumber, " ");
  }
}
function ResultsComponent_th_36_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 41);
    \u0275\u0275text(1, "\xA0");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_37_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-icon");
    \u0275\u0275text(1, "keyboard_arrow_up");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_37_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "mat-icon");
    \u0275\u0275text(1, "keyboard_arrow_down");
    \u0275\u0275elementEnd();
  }
}
function ResultsComponent_td_37_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 38)(1, "button", 42);
    \u0275\u0275listener("click", function ResultsComponent_td_37_Template_button_click_1_listener($event) {
      const element_r8 = \u0275\u0275restoreView(_r7).$implicit;
      const ctx_r8 = \u0275\u0275nextContext();
      ctx_r8.showResult(ctx_r8.i, element_r8);
      return \u0275\u0275resetView($event.stopPropagation());
    });
    \u0275\u0275template(2, ResultsComponent_td_37_Conditional_2_Template, 2, 0, "mat-icon")(3, ResultsComponent_td_37_Conditional_3_Template, 2, 0, "mat-icon");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const element_r8 = ctx.$implicit;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(ctx_r8.expandedElement === element_r8 ? 2 : 3);
  }
}
function ResultsComponent_td_39_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 44);
    \u0275\u0275element(1, "app-result-details", 45);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = \u0275\u0275nextContext().$implicit;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275property("@detailExpand", element_r10 == ctx_r8.expandedElement ? "expanded" : "collapsed");
    \u0275\u0275advance();
    \u0275\u0275property("isCVET", true)("loadData", ctx_r8.loadData)("originData", ctx_r8.originData);
  }
}
function ResultsComponent_td_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 38);
    \u0275\u0275template(1, ResultsComponent_td_39_div_1_Template, 2, 4, "div", 43);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r10 = ctx.$implicit;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275attribute("colspan", ctx_r8.columnsToDisplayWithExpand.length);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", element_r10 === ctx_r8.expandedElement);
  }
}
function ResultsComponent_tr_40_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 46);
  }
}
function ResultsComponent_tr_41_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 47);
    \u0275\u0275listener("click", function ResultsComponent_tr_41_Template_tr_click_0_listener() {
      const element_r12 = \u0275\u0275restoreView(_r11).$implicit;
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.showResult(ctx_r8.i, element_r12));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const element_r12 = ctx.$implicit;
    const ctx_r8 = \u0275\u0275nextContext();
    \u0275\u0275classProp("example-expanded-row", ctx_r8.expandedElement === element_r12);
  }
}
function ResultsComponent_tr_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "tr", 48);
  }
}
var ResultsComponent = class _ResultsComponent {
  constructor(commonService, patientService, router, route, labelService, headerService, sidefilterService, confirmationDialogService, dataService, title, EncrDecr, dialog, refLabService, refLabGuard, spinner, cvetService) {
    this.commonService = commonService;
    this.patientService = patientService;
    this.router = router;
    this.route = route;
    this.labelService = labelService;
    this.headerService = headerService;
    this.sidefilterService = sidefilterService;
    this.confirmationDialogService = confirmationDialogService;
    this.dataService = dataService;
    this.title = title;
    this.EncrDecr = EncrDecr;
    this.dialog = dialog;
    this.refLabService = refLabService;
    this.refLabGuard = refLabGuard;
    this.spinner = spinner;
    this.cvetService = cvetService;
    this.filterData = [];
    this.start = 0;
    this.limit = 100;
    this.counter = 0;
    this.end = this.limit + this.start;
    this.dataSource = new MatTableDataSource();
    this.originData = [];
    this.IsAllSelected = false;
    this.showPrintIcon = false;
    this.canceledAnalysisStatusId = EnmAnalysisStatus.Canceled;
    this.patient = {};
    this.bckBusinessInfo = JSON.parse(localStorage.getItem("bckBusinessInfo"));
    this.consultSec = false;
    this.consultations = [];
    this.columnsToDisplay = [
      "DateReceivedStr",
      "PhysicianName",
      "AnalysisSourceName",
      "AnalysisTypeName",
      "AccessionId"
    ];
    this.columnsToDisplayWithExpand = [...this.columnsToDisplay, "expand"];
    this.zoomLevel = 1;
    this.sidefilterService.filter = new SideFilter();
    this.patientInfo = new PatientInfo();
  }
  ngOnInit() {
    this.commonService.getUserDDLDetails(EnmLanguage.English, EnmCountry.UnitedStates, null, true).subscribe((res) => {
      this.dataService.appData.userDropDownList = res.ResponseData;
      this.dataService.data.next(this.dataService.appData);
    }, (err) => {
      console.log(JSON.stringify(err));
    });
    const _params = this.toLower(this.route.snapshot.queryParams);
    const clientrequestid = _params["clientrequestid"];
    const referrer = document.referrer ? new URL(document.referrer).hostname : "localhost";
    const req = {
      session: this.route.snapshot.params.token,
      //domain: "zdxpoc-api.mobileprogramming.net",
      domain: referrer,
      ClientRequestId: clientrequestid
    };
    debugger;
    this.patientService.loadTestZdxSession(req).subscribe({
      next: (data) => {
        this.loadData = data;
        const patientId = data?.Data?.Patient?.Id;
        const zdxPatientId = data?.Data?.Patient?.ZdxPatientId;
        const userGuid = data.UserGuid;
        const businessGuid = data.ZdxBusinessGuid;
        this.getPatientInfo(patientId, zdxPatientId, userGuid, businessGuid);
        setInterval(() => {
          this.refreshToken();
        }, 14 * 60 * 1e3);
      },
      error: (err) => {
        this.showMsg(err.error, true);
      }
    });
  }
  toLower(params) {
    const lowerParams = {};
    for (const key in params) {
      lowerParams[key.toLowerCase()] = params[key];
    }
    return lowerParams;
  }
  refreshToken() {
    const auth = new UserAuth();
    auth.refresh_token = this.loadData.RefreshToken;
    auth.access_token = this.loadData.AccessToken;
    auth.LanguageId = localStorage.languageId;
    auth.BOAccessUserGuid = this.loadData.UserGuid;
    auth.TokenSource = "zdx";
    auth.DeviceType = "web.embedded";
    this.commonService.refreshToken(auth).subscribe({
      next: (data) => {
        this.loadData.AccessToken = data.access_token;
        this.loadData.RefreshToken = data.refresh_token;
      }
    });
  }
  ngOnDestroy() {
    this.title.setTitle("ZoetisDx");
  }
  scrolltoTop(topVal) {
  }
  onTableScroll(e) {
    const tableViewHeight = e.target.offsetHeight;
    const tableScrollHeight = e.target.scrollHeight;
    const scrollLocation = e.target.scrollTop;
    const buffer = 200;
    const limit = tableScrollHeight - tableViewHeight - buffer;
    if (!this.isLoadMore && scrollLocation > limit) {
      this.isLoadMore = true;
      this.sidefilterService.filter.PageNo++;
      this.sidefilterService.filter.PageSize = 60;
      this.getPatientInfo();
    }
  }
  navToOrderPage() {
    if (!this.refLabGuard.IsLinkedRefLabClinic) {
      const msg = this.labelService.dsSideMenuScreen.ConsultationRestrictionPopupMsg;
      this.confirmationDialogService.confirm("Alert", msg, "Ok", "Cancel", "sm", true, false);
      return false;
    }
    this.router.navigate(["/refLab/createOrder"], {
      queryParams: { id: this.patientInfo.PatientId }
    });
  }
  getPatientInfo(pi, zpi, userGuid, businessGuid) {
    const params = {
      LanguageId: this.labelService.selectedLanguage,
      BusinessGuid: businessGuid,
      UserGuid: userGuid,
      ZDXPatientInfoId: zpi
    };
    this.patientService.GetLabResultsEE(params, this.loadData.AccessToken, 1, 60).subscribe({
      next: (data) => {
        if (this.sidefilterService.filter.PageNo == 1) {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = data.ResponseData.DashboardPatientList[0].Details;
            this.patientService.patientDetails = this.patientInfo = data.ResponseData.DashboardPatientList[0];
          } else {
            this.originData = [];
            this.dataSource = new MatTableDataSource(this.originData);
          }
        } else {
          if (data.ResponseData.DashboardPatientList != null && data.ResponseData.DashboardPatientList.length > 0) {
            this.originData = this.originData.concat(data.ResponseData.DashboardPatientList[0].Details);
          }
        }
        if (data.ResponseData.DashboardPatientList && data.ResponseData.DashboardPatientList.length > 0) {
          this.patientInfo = data.ResponseData.DashboardPatientList[0];
          this.patient = data.ResponseData.DashboardPatientList[0];
          this.originData = this.originData.map((item, index) => {
            if (item.PhysicianName && item.PhysicianName.trim() == "None") {
              item.PhysicianName = this.labelService.dsAnaysisResultsScreen.none;
            }
            if (item.DAPAnalyzerType == "vetscan-ltf") {
              item.AnalyzerDisplayName = item.AnalyzerDisplayName + "+";
            }
            return item;
          });
          if (this.originData.length > 0 && this.isLoadMore) {
            this.isLoadMore = false;
          } else {
            this.scrolltoTop(null);
          }
          this.createAlysisTypeList(this.originData);
          this.dataService.pageState.PatientInfo.resultsList = this.originData;
          this.dataService.page.next(this.dataService.pageState);
          this.dataSource = new MatTableDataSource(this.originData);
          this.dataSource.sortingDataAccessor = this.commonService.sortingDataAccessor;
          this.dataSource.sort = this.sort;
          this.bindDVMDDL();
        }
      },
      error: () => {
        this.originData = [];
        this.dataSource.data = [];
        this.sidefilterService.filter.DVMName = "";
        this.sidefilterService.dsDVM = [];
      }
    });
  }
  createAlysisTypeList(tblData) {
    let tempArry = [];
    tblData.forEach((ele) => {
      if (!tempArry.find((item) => ele?.AnalysisTypeName == item.analysisTypeName)) {
        const obj = {
          sourceType: ele?.SourceType,
          analyzerDisplayName: ele?.AnalyzerDisplayName,
          analysisTypeName: ele?.AnalysisTypeName
        };
        tempArry.push(obj);
      }
    });
    this.dataService.appState.analysisTypeList = tempArry;
    this.dataService.state.next(this.dataService.appState);
  }
  bindDVMDDL() {
    this.sidefilterService.dsDVM = [];
    if (this.originData != null) {
      const arrDVM = [];
      let noDVMText = "";
      this.originData.forEach((subEle) => {
        if (subEle.PhysicianName && !arrDVM.includes(subEle.PhysicianName)) {
          if (subEle.PhysicianName == "None") {
            noDVMText = subEle.PhysicianName;
          } else {
            arrDVM.push(subEle.PhysicianName.trim());
            this.sidefilterService.dsDVM.push(subEle.PhysicianName.trim());
          }
        }
      });
      this.sidefilterService.dsDVM = this.commonService.arraySortByAscendingOrders(arrDVM);
      if (noDVMText) {
        this.sidefilterService.dsDVM.splice(0, 0, noDVMText);
      }
    }
  }
  selectAll(e) {
    this.IsAllSelected = e.checked;
    this.showPrintIcon = e.checked;
    this.dataSource.data.forEach((element) => {
      if (element.AnalysisStatusName == "Completed")
        element.IsReadyForPrint = e.checked;
    });
  }
  onDataSort(e) {
    this.dataService.pageState.PatientInfo.sortState = e;
    this.dataService.page.next(this.dataService.pageState);
    this.scrolltoTop(null);
  }
  selectSingleCheckbox(e, selecteItem) {
    selecteItem.IsReadyForPrint = e.checked;
    if (e.checked) {
      this.showPrintIcon = true;
      const allSelected = this.dataSource.data.find((x) => !x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (allSelected == void 0)
        this.IsAllSelected = true;
      else
        this.IsAllSelected = false;
    } else {
      this.IsAllSelected = false;
      const checkboxSelected = this.dataSource.data.find((x) => x.IsReadyForPrint && x.AnalysisStatusName == "Completed");
      if (checkboxSelected == void 0)
        this.showPrintIcon = false;
    }
    this.countCheckbox(e, selecteItem);
  }
  countCheckbox(event, selectedItem) {
    if (event.checked === true) {
      this.counter++;
      if (this.counter > 5) {
        this.confirmationDialogService.confirm("", this.labelService.dsPatientInfoScreen.CheckBoxExceed, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false).then((confirmed) => {
          if (confirmed) {
            this.counter--;
            selectedItem.IsReadyForPrint = false;
          }
        });
      }
    }
    if (event.checked === false) {
      this.counter--;
    }
  }
  setDefaultFilter() {
    this.sidefilterService.filter = new SideFilter();
    this.sidefilterService.filter.BusinessGuid = this.businessGuid;
    this.sidefilterService.filter.FromDate = null;
    this.sidefilterService.filter.ToDate = null;
    this.sidefilterService.filter.AnalysisStatusId = 0;
    this.sidefilterService.filter.AnalysisTypeId = 0;
    this.sidefilterService.FromDate = null;
    this.sidefilterService.ToDate = null;
    this.sidefilterService.filter.AnalysisSourceId = this.dataService.appData.authDetails["IsLinkedRefLabClinic"] ? 0 : 1;
  }
  showMsg(cancelComment, force = false) {
    if (!force) {
      if (cancelComment && /user.cancelled/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage;
      } else if (cancelComment && /11 :/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessage11;
      } else if (cancelComment && /X :/.test(cancelComment)) {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTestMessageX;
      } else {
        cancelComment = this.labelService.dsPatientInfoScreen.CanceledTest;
      }
    }
    this.confirmationDialogService.confirm("", cancelComment, this.labelService.dsPatientInfoScreen.Ok, "", "sm", true, false);
  }
  showResult(rowIndex, ele) {
    if (ele.AnalysisStatusId == this.canceledAnalysisStatusId) {
      this.showMsg(ele.CancelComment);
    } else if (ele.AnalysisStatusId == EnmAnalysisStatus.Pending) {
      this.showMsg(this.labelService.dsPatientInfoScreen.pendingAlertMessage, true);
    } else {
      this.dataService.appState.selectedResult.element = this.patientService.patientDetails;
      this.dataService.appState.selectedResult.subElement = ele;
      this.dataService.state.next(this.dataService.appState);
      this.dataService.pageState.PatientInfo.selectedRow = rowIndex;
      this.dataService.pageState.PatientInfo.requestParams = this.sidefilterService.filter;
      this.dataService.pageState.PatientInfo.resultsList = this.originData;
      this.dataService.appState.selectedResult.element.Details = this.originData;
      this.dataService.page.next(this.dataService.pageState);
      this.patientService.patientDetails["AnalysisTypeToGetTestReslt"] = ele;
      localStorage.setItem("patientDetails", JSON.stringify(this.patientService.patientDetails));
      if (this.dataService && this.dataService.appState) {
        this.dataService.appState.selectedResult.element = this.patientService.patientDetails;
        this.dataService.appState.selectedResult.subElement = ele;
        this.dataService.state.next(this.dataService.appState);
      }
      this.expandedElement = this.expandedElement === ele ? null : ele;
    }
  }
  zoomIn() {
    if (this.zoomLevel < 3) {
      this.zoomLevel += 0.1;
    }
  }
  zoomOut() {
    if (this.zoomLevel > 0.5) {
      this.zoomLevel -= 0.1;
    }
  }
  resetZoom() {
    this.zoomLevel = 1;
  }
  static {
    this.\u0275fac = function ResultsComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _ResultsComponent)(\u0275\u0275directiveInject(CommonService), \u0275\u0275directiveInject(PatientService), \u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275directiveInject(LabelService), \u0275\u0275directiveInject(HeaderService), \u0275\u0275directiveInject(SidefilterService), \u0275\u0275directiveInject(ConfirmationDialogService), \u0275\u0275directiveInject(DataService), \u0275\u0275directiveInject(Title), \u0275\u0275directiveInject(EncrDecrService), \u0275\u0275directiveInject(MatLegacyDialog), \u0275\u0275directiveInject(RefLabService), \u0275\u0275directiveInject(RefLabGuard), \u0275\u0275directiveInject(SpinnerVisibilityService), \u0275\u0275directiveInject(CvetService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ResultsComponent, selectors: [["app-results"]], viewQuery: function ResultsComponent_Query(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275viewQuery(MatSort, 7);
        \u0275\u0275viewQuery(MatDrawer, 7);
      }
      if (rf & 2) {
        let _t;
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.sort = _t.first);
        \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.drawer = _t.first);
      }
    }, decls: 50, vars: 7, consts: [["zoomElement", ""], [1, "zoom-box"], ["id", "content", 1, "dashboard-wrapper"], [1, "col-12", "title-container", "m-cont", "icon-cont", "mb-4"], ["data-testid", "pi-title", 1, "page-title"], [1, "status"], [1, "green-dot"], [1, "text"], [1, "gray-dot"], [1, "red-dot"], ["mat-table", "", "multiTemplateDataRows", "", 1, "mat-elevation-z8", "w-100", 2, "position", "relative", 3, "dataSource"], ["matColumnDef", "DateReceivedStr"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "ngClass", 4, "matCellDef"], ["matColumnDef", "PhysicianName"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "AnalysisSourceName"], ["matColumnDef", "AnalysisTypeName"], ["mat-header-cell", "", "style", "width: 30%; text-align: center;", 4, "matHeaderCellDef"], ["mat-cell", "", "style", "width: 30%; text-align: center;", 4, "matCellDef"], ["matColumnDef", "AccessionId"], ["matColumnDef", "expand"], ["mat-header-cell", "", "aria-label", "row actions", 4, "matHeaderCellDef"], ["matColumnDef", "expandedDetail"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", "class", "example-element-row", 3, "example-expanded-row", "click", 4, "matRowDef", "matRowDefColumns"], ["mat-row", "", "class", "example-detail-row", 4, "matRowDef", "matRowDefColumns"], [1, "controls"], ["title", "Zoom In", "href", "javascript::void(0)", 3, "click"], ["aria-hidden", "true", 1, "fa", "fa-search-plus"], ["title", "Zoom Out", "href", "javascript::void(0)", 3, "click"], ["aria-hidden", "true", 1, "fa", "fa-search-minus"], ["title", "Reset Zoom", "href", "javascript::void(0)", 3, "click"], ["aria-hidden", "true", 1, "fa", "fa-times-circle-o"], ["mat-header-cell", ""], ["mat-cell", "", 3, "ngClass"], [1, "textTtl", "d-none"], [1, "pdate", 3, "ngStyle"], ["mat-cell", ""], ["mat-header-cell", "", 2, "width", "30%", "text-align", "center"], ["mat-cell", "", 2, "width", "30%", "text-align", "center"], ["mat-header-cell", "", "aria-label", "row actions"], ["mat-icon-button", "", "aria-label", "expand row", 3, "click"], ["class", "example-element-detail", 4, "ngIf"], [1, "example-element-detail"], [3, "isCVET", "loadData", "originData"], ["mat-header-row", ""], ["mat-row", "", 1, "example-element-row", 3, "click"], ["mat-row", "", 1, "example-detail-row"]], template: function ResultsComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = \u0275\u0275getCurrentView();
        \u0275\u0275elementStart(0, "div", 1, 0)(2, "div", 2)(3, "section", 3)(4, "span", 4);
        \u0275\u0275text(5, "ZoetisDx Results");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(6, "ul", 5)(7, "li");
        \u0275\u0275element(8, "span", 6);
        \u0275\u0275elementStart(9, "span", 7);
        \u0275\u0275text(10, "Completed");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(11, "li");
        \u0275\u0275element(12, "span", 8);
        \u0275\u0275elementStart(13, "span", 7);
        \u0275\u0275text(14, "Ordered");
        \u0275\u0275elementEnd()();
        \u0275\u0275elementStart(15, "li");
        \u0275\u0275element(16, "span", 9);
        \u0275\u0275elementStart(17, "span", 7);
        \u0275\u0275text(18, "Canceled");
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(19, "table", 10);
        \u0275\u0275elementContainerStart(20, 11);
        \u0275\u0275template(21, ResultsComponent_th_21_Template, 2, 0, "th", 12)(22, ResultsComponent_td_22_Template, 5, 9, "td", 13);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(23, 14);
        \u0275\u0275template(24, ResultsComponent_th_24_Template, 2, 0, "th", 12)(25, ResultsComponent_td_25_Template, 2, 1, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(26, 16);
        \u0275\u0275template(27, ResultsComponent_th_27_Template, 2, 0, "th", 12)(28, ResultsComponent_td_28_Template, 2, 1, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(29, 17);
        \u0275\u0275template(30, ResultsComponent_th_30_Template, 2, 0, "th", 18)(31, ResultsComponent_td_31_Template, 2, 1, "td", 19);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(32, 20);
        \u0275\u0275template(33, ResultsComponent_th_33_Template, 2, 0, "th", 12)(34, ResultsComponent_td_34_Template, 2, 1, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(35, 21);
        \u0275\u0275template(36, ResultsComponent_th_36_Template, 2, 0, "th", 22)(37, ResultsComponent_td_37_Template, 4, 1, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275elementContainerStart(38, 23);
        \u0275\u0275template(39, ResultsComponent_td_39_Template, 2, 2, "td", 15);
        \u0275\u0275elementContainerEnd();
        \u0275\u0275template(40, ResultsComponent_tr_40_Template, 1, 0, "tr", 24)(41, ResultsComponent_tr_41_Template, 1, 2, "tr", 25)(42, ResultsComponent_tr_42_Template, 1, 0, "tr", 26);
        \u0275\u0275elementEnd()()();
        \u0275\u0275elementStart(43, "div", 27)(44, "a", 28);
        \u0275\u0275listener("click", function ResultsComponent_Template_a_click_44_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.zoomIn());
        });
        \u0275\u0275element(45, "i", 29);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(46, "a", 30);
        \u0275\u0275listener("click", function ResultsComponent_Template_a_click_46_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.zoomOut());
        });
        \u0275\u0275element(47, "i", 31);
        \u0275\u0275elementEnd();
        \u0275\u0275elementStart(48, "a", 32);
        \u0275\u0275listener("click", function ResultsComponent_Template_a_click_48_listener() {
          \u0275\u0275restoreView(_r1);
          return \u0275\u0275resetView(ctx.resetZoom());
        });
        \u0275\u0275element(49, "i", 33);
        \u0275\u0275elementEnd()();
      }
      if (rf & 2) {
        \u0275\u0275styleProp("transform", "scale(" + ctx.zoomLevel + ")");
        \u0275\u0275advance(19);
        \u0275\u0275property("dataSource", ctx.dataSource);
        \u0275\u0275advance(21);
        \u0275\u0275property("matHeaderRowDef", ctx.columnsToDisplayWithExpand);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", ctx.columnsToDisplayWithExpand);
        \u0275\u0275advance();
        \u0275\u0275property("matRowDefColumns", \u0275\u0275pureFunction0(6, _c029));
      }
    }, dependencies: [NgClass, NgIf, NgStyle, MatLegacyButton, MatIcon, MatLegacyTable, MatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyHeaderCell, MatLegacyCell, MatLegacyHeaderRow, MatLegacyRow, ResultDetailsComponent], styles: ['\n\ntable[_ngcontent-%COMP%] {\n  width: 100%;\n}\ntr.example-detail-row[_ngcontent-%COMP%] {\n  height: 0;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):hover {\n  background: whitesmoke;\n}\ntr.example-element-row[_ngcontent-%COMP%]:not(.example-expanded-row):active {\n  background: #efefef;\n}\n.example-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\n  border-bottom-width: 0;\n}\n.example-element-detail[_ngcontent-%COMP%] {\n  overflow: hidden;\n  flex: 0 0 100%;\n}\n.example-element-diagram[_ngcontent-%COMP%] {\n  min-width: 80px;\n  border: 2px solid black;\n  padding: 8px;\n  font-weight: lighter;\n  margin: 8px 0;\n  height: 104px;\n}\n.example-element-symbol[_ngcontent-%COMP%] {\n  font-weight: bold;\n  font-size: 40px;\n  line-height: normal;\n}\n.example-element-description[_ngcontent-%COMP%] {\n  padding: 16px;\n}\n.example-element-description-attribution[_ngcontent-%COMP%] {\n  opacity: 0.5;\n}\n.loader[_ngcontent-%COMP%] {\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  background:\n    linear-gradient(\n      0deg,\n      rgba(255, 61, 0, 0.2) 33%,\n      #ff3d00 100%);\n  box-sizing: border-box;\n  animation: _ngcontent-%COMP%_rotation 1s linear infinite;\n}\n.loader[_ngcontent-%COMP%]::after {\n  content: "";\n  box-sizing: border-box;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 145px;\n  height: 145px;\n  border-radius: 50%;\n  background: #fff;\n}\n@keyframes _ngcontent-%COMP%_rotation {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n#logo-inside-loader[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 65px;\n  left: 55px;\n}\n.loader-container[_ngcontent-%COMP%] {\n  width: 250px;\n  height: 160px;\n  position: relative;\n  text-align: center;\n}\n.text-section[_ngcontent-%COMP%] {\n  text-align: center;\n  font-size: 15px;\n  color: #939393;\n  font-weight: bold;\n  font-family: serif;\n}\n.g-btn[_ngcontent-%COMP%] {\n  color: #fff;\n  background-color: #fd6400;\n  border-color: #fd6400;\n}\ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type, \nth.mat-header-cell[_ngcontent-%COMP%]:last-of-type {\n  text-align: unset !important;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c !important;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696 !important;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red !important;\n}\n.title-container[_ngcontent-%COMP%] {\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  margin-top: 25px;\n}\n  #content {\n  padding: 12px !important;\n  height: 100vh !important;\n}\n.paddingEq[_ngcontent-%COMP%] {\n  padding: unset;\n}\n.result-wrapper[_ngcontent-%COMP%] {\n  padding: unset;\n}\n  mat-card.mat-card {\n  margin: unset !important;\n  width: 100% !important;\n}\nul.status[_ngcontent-%COMP%] {\n  float: right;\n  list-style: none;\n  position: absolute;\n  right: 25px;\n  top: 20px;\n}\nul.status[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  padding-left: 0;\n  display: block;\n}\nul.status[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:first {\n  margin-bottom: 20px;\n}\nul.status[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  padding-left: 0;\n  float: left;\n  font-weight: bold;\n}\nul.status[_ngcontent-%COMP%]   span.text[_ngcontent-%COMP%] {\n  vertical-align: text-bottom;\n}\n.green-dot[_ngcontent-%COMP%] {\n  width: 15px;\n  height: 15px;\n  background-color: green;\n  border-radius: 50%;\n  display: block;\n}\n.gray-dot[_ngcontent-%COMP%] {\n  width: 15px;\n  height: 15px;\n  background-color: gray;\n  border-radius: 50%;\n  display: block;\n}\n.red-dot[_ngcontent-%COMP%] {\n  width: 15px;\n  height: 15px;\n  background-color: red;\n  border-radius: 50%;\n  display: block;\n}\n.status[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  display: inline-block;\n  margin-left: 5px;\n  vertical-align: text-bottom;\n}\n.completed[_ngcontent-%COMP%] {\n  border-left: 5px solid #0eab1c !important;\n}\n.pending[_ngcontent-%COMP%] {\n  border-left: 5px solid #969696 !important;\n}\n.cancelled[_ngcontent-%COMP%] {\n  border-left: 5px solid red !important;\n}\ntr.mat-row.example-element-row[_ngcontent-%COMP%] {\n  height: 60px;\n  border-radius: 10px !important;\n  box-shadow: 0 0 12px 0 rgba(0, 0, 0, 0.19) !important;\n}\n  td.mat-column-DateReceivedStr {\n  border-bottom-left-radius: 8px !important;\n  border-top-left-radius: 8px !important;\n}\ntable.mat-table[_ngcontent-%COMP%] {\n  border-collapse: separate !important;\n  border-spacing: 0 1px !important;\n}\n.student-element-row[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(1) {\n  width: 100% !important;\n}\n  .student-element-row td {\n  word-break: unset !important;\n}\n  th.mat-header-cell:last-of-type, \ntd.mat-cell[_ngcontent-%COMP%]:last-of-type, \ntd.mat-footer-cell[_ngcontent-%COMP%]:last-of-type {\n  padding: 0 !important;\n}\n  .nextBtn {\n  top: 0 !important;\n  position: relative !important;\n  right: 0 !important;\n}\n  .cutomToolTip {\n  right: 135px !important;\n  top: 20px !important;\n  bottom: unset !important;\n  z-index: 11 !important;\n}\n  th.mat-header-cell {\n  z-index: 10 !important;\n}\n.zoom-box[_ngcontent-%COMP%] {\n  transition: transform 0.3s ease-in-out;\n}\n.controls[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 999;\n  background: #ffffffaf;\n  padding: 0 5px;\n  border-radius: 5px;\n}\n.controls[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n  display: inline-block;\n  font-size: 20px;\n  color: #6c757d;\n  padding-left: 5px;\n}\n  .mat-card tr.mat-header-row {\n  position: sticky !important;\n  top: -14px !important;\n  z-index: 99 !important;\n}\n  .cvetcss {\n  text-align: center !important;\n  margin-left: 25px !important;\n  padding-left: 0 !important;\n}\n  .cvetcss .col-bg {\n  display: block !important;\n}\n  .cvetcss .note {\n  width: 150px !important;\n}\n/*# sourceMappingURL=results.component.css.map */'], data: { animation: [
      trigger("detailExpand", [
        state("in", style({
          transform: "translate3d(0, 0, 0)"
        })),
        state("out", style({
          transform: "translate3d(100%, 0, 0)"
        })),
        transition("in => out", animate("400ms ease-in-out")),
        transition("out => in", animate("400ms ease-in-out"))
      ])
    ] } });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ResultsComponent, { className: "ResultsComponent", filePath: "src\\app\\modules\\cvet\\results\\results.component.ts", lineNumber: 73 });
})();

// src/app/modules/cvet/cvet-routing.module.ts
var cvetPath = environment.CvetPATH.replace("/", "").trim();
var routes2 = [
  {
    path: `${cvetPath}/results-request/:token`,
    component: ResultsComponent
  },
  {
    path: `${cvetPath}/patient/info`,
    component: PatientInfoComponent
  },
  {
    path: `${cvetPath}/result-details`,
    component: ResultDetailsComponent
  },
  {
    //path: `${cvetPath}`,
    path: ":GUID/:PIMSPatientID/:OAID",
    component: ZdxDeepLinkComponent
  },
  { path: "**", component: PagenotfoundComponent }
];
var CvetRoutingModule = class _CvetRoutingModule {
  static {
    this.\u0275fac = function CvetRoutingModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CvetRoutingModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _CvetRoutingModule });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forRoot(routes2, {}), RouterModule] });
  }
};

// src/app/modules/cvet/cvet.component.ts
var CvetComponent = class _CvetComponent {
  constructor(cvetService) {
    this.cvetService = cvetService;
    localStorage.removeItem("appData");
  }
  static {
    this.\u0275fac = function CvetComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CvetComponent)(\u0275\u0275directiveInject(CvetService));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CvetComponent, selectors: [["app-cvet"]], decls: 2, vars: 0, template: function CvetComponent_Template(rf, ctx) {
      if (rf & 1) {
        \u0275\u0275element(0, "router-outlet")(1, "ng-http-loader");
      }
    }, dependencies: [RouterOutlet, NgHttpLoaderComponent], styles: ['@import "https://fonts.cdnfonts.com/css/mulish";\n\n\n\n  *:not(span.material-symbols-outlined, i)[_ngcontent-%COMP%] {\n  font-family:\n    Mulish-Regular,\n    Helvetica,\n    Arial,\n    Verdana,\n    Tahoma,\n    sans-serif !important;\n}\n/*# sourceMappingURL=cvet.component.css.map */'] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CvetComponent, { className: "CvetComponent", filePath: "src\\app\\modules\\cvet\\cvet.component.ts", lineNumber: 9 });
})();

// src/app/modules/cvet/cvet.module.ts
var CvetModule = class _CvetModule {
  static {
    this.\u0275fac = function CvetModule_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _CvetModule)();
    };
  }
  static {
    this.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _CvetModule, bootstrap: [CvetComponent] });
  }
  static {
    this.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ providers: [
      CvetStorage,
      CvetService,
      CommonService,
      HeaderService,
      PatientService,
      FuseService,
      ConfirmationDialogService,
      SidenavService,
      UserService,
      LabelService,
      AlertService,
      SidefilterService,
      OrderSidefilterService,
      SidemenuService,
      DataService,
      authInterceptorProviders,
      provideHttpClient(withInterceptorsFromDi(), withJsonpSupport()),
      { provide: ErrorHandler, useClass: ErrorHandlerService }
    ], imports: [
      CvetRoutingModule,
      BrowserAnimationsModule,
      MatModule,
      HeaderModule,
      FormsModule,
      ReactiveFormsModule,
      NgImageSliderModule,
      NgHttpLoaderModule.forRoot(),
      NgbModule,
      DirectivesModule,
      pipeModule,
      MatDatepickerModule,
      AddUserModule,
      FormsModule,
      ResultDetailsModule,
      ToastrModule.forRoot({
        timeOut: 3e3,
        positionClass: "toast-top-right",
        preventDuplicates: true
      })
    ] });
  }
};

// src/main.ts
if (environment.production) {
  enableProdMode();
}
if (environment.isProduction) {
  console.log = function() {
  };
  console.info = function() {
  };
}
var app = document.getElementById("zdxApp");
var isCVET = window.location.href.indexOf(environment.CvetPATH) !== -1;
var module = isCVET ? CvetModule : AppModule;
app.insertAdjacentHTML("beforeend", isCVET ? "<app-cvet></app-cvet>" : "<app-root></app-root>");
platformBrowser().bootstrapModule(module).catch((err) => console.error(err));
//!(window === window.parent);
//# sourceMappingURL=main.js.map
